---
modelFingerprint: "9B01594A50244AED97A9D4F05C40C81A"
targetClass:
  fullClassName: "org.springframework.boot.web.servlet.ServletListenerRegistrationBean"
methods:
- method:
    name: "setListener"
    sourceCodeSignature: "void setListener(T listener)"
    returnType: "void"
    parameters:
    - name: "listener"
      type: "java.util.EventListener"
    instructionFingerprint: "86970CADC64C6D43542125E202871270"
  paths:
  - pathId: "path1"
    testPathName: "setListenerTest"
    constructorSignature: "<init>(java.util.EventListener) : void"
    modelFingerprint: "3A22C4858C4207149019B766415E5FE9"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "60AF951874AC9019790302576E2C2525"
      valueUuid: "target"
    - type: "INPUT"
      name: "listener"
      modelFingerprint: "52B48EF0E03FBB86F831CE1D8297C3CD"
      valueUuid: "listener"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FD7C3CFF0CEAE6C51478CB664AC98F18"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:listener2,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "E533E4B11A52CF592983B520F992724B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:uniqueUuid2,message:uniqueUuid3):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FD7C3CFF0CEAE6C51478CB664AC98F18"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:listener,message:uniqueUuid4):void3"
        staticAccess: true
    - type: "STATIC"
      name: "ServletListenerRegistrationBean.class"
      modelFingerprint: "79B4BE689E390A427C08353DEAB86B3B"
      valueUuid: "ServletListenerRegistrationBean.class"
      methodExercised:
        expression: "isSupportedType(listener:listener):boolean9"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "E3A2F2DA7C745D37B05931670743D9FE"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean9,message:uniqueUuid5):void4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    - type: "STATE_VERIFICATION_FIELD"
      name: "listener"
      modelFingerprint: "B9F86DD539A0DFD47645DE32AAD359F0"
      valueUuid: "listener"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.ServletListenerRegistrationBean"
        parameters:
        - name: "listener"
          value:
            sapientType: "MOCK"
            valueType: "java.util.EventListener"
            uuid: "listener2"
      valueType: "org.springframework.boot.web.servlet.ServletListenerRegistrationBean"
      genericValueType: "java.util.EventListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "java.util.EventListener"
      uuid: "listener"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.EventListener"
      uuid: "listener2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Listener must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Listener is not of a supported type"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.EventListener"
      uuid: "listener"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Listener must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.servlet.ServletListenerRegistrationBean"
      uuid: "ServletListenerRegistrationBean.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean9"
    - sapientType: "MOCK"
      valueType: "java.util.EventListener"
      uuid: "listener"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean9"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Listener is not of a supported type"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.EventListener"
      uuid: "listener"
    calledSomeStaticInternalMethod: true
- method:
    name: "getListener"
    sourceCodeSignature: "T getListener()"
    returnType: "java.util.EventListener"
    instructionFingerprint: "1EE678D1B9B1D7246C4B1E6E77AEB41B"
  paths:
  - pathId: "path1"
    testPathName: "getListenerTest"
    constructorSignature: "<init>(java.util.EventListener) : void"
    modelFingerprint: "E279B54E8185B7F76F68B47EB12332FE"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
    calledSomeStaticInternalMethod: true
- method:
    name: "getDescription"
    sourceCodeSignature: "String getDescription()"
    returnType: "java.lang.String"
    instructionFingerprint: "DC0D7A3249404B5E9E72F7368570E56A"
  paths:
  - pathId: "path1"
    testPathName: "getDescriptionTest"
    constructorSignature: "<init>(java.util.EventListener) : void"
    modelFingerprint: "61EF93F635E3AA5A092F0B9BE6A6D4A6"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "60AF951874AC9019790302576E2C2525"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FD7C3CFF0CEAE6C51478CB664AC98F18"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:listener,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "E533E4B11A52CF592983B520F992724B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:uniqueUuid2,message:uniqueUuid3):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FD7C3CFF0CEAE6C51478CB664AC98F18"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:listener,message:uniqueUuid4):void3"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "BB648F41DCF24F35A930118EF51C4891"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.ServletListenerRegistrationBean"
        parameters:
        - name: "listener"
          value:
            sapientType: "MOCK"
            valueType: "java.util.EventListener"
            uuid: "listener"
            nameForMock: "listener"
      valueType: "org.springframework.boot.web.servlet.ServletListenerRegistrationBean"
      genericValueType: "java.util.EventListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.EventListener"
      uuid: "listener"
      nameForMock: "listener"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Listener must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Listener is not of a supported type"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.EventListener"
      uuid: "listener"
      nameForMock: "listener"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Listener must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "listener listener"
      valueType: "java.lang.String"
      uuid: "string"
    calledSomeStaticInternalMethod: true
- method:
    name: "register"
    sourceCodeSignature: "void register(String description, ServletContext servletContext)"
    returnType: "void"
    parameters:
    - name: "description"
      type: "java.lang.String"
    - name: "servletContext"
      type: "jakarta.servlet.ServletContext"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.RuntimeException"
    instructionFingerprint: "5764BF23AFD4C7E64EFE1E8A79D1024B"
  paths:
  - pathId: "path1"
    testPathName: "registerTest"
    constructorSignature: "<init>(java.util.EventListener) : void"
    modelFingerprint: "4D42AB3B353901F3A564EB92C4BF78F5"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "60AF951874AC9019790302576E2C2525"
      valueUuid: "target"
    - type: "INPUT"
      name: "description"
      modelFingerprint: "D7E957879EBC8E5F8816BCA94411FAAC"
      valueUuid: "description"
    - type: "INPUT"
      name: "servletContext"
      modelFingerprint: "1FE94A2B8400B5864BA32324277284E5"
      valueUuid: "servletContext"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FD7C3CFF0CEAE6C51478CB664AC98F18"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:listener,message:uniqueUuid13):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "E533E4B11A52CF592983B520F992724B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:uniqueUuid14,message:uniqueUuid15):void2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "servletContext"
      modelFingerprint: "2DCCAC08AB4B759DF9BDA165ED6F91C0"
      valueUuid: "servletContext"
      methodExercised:
        expression: "addListener(arg0:listener):void3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.ServletListenerRegistrationBean"
        parameters:
        - name: "listener"
          value:
            sapientType: "MOCK"
            valueType: "java.util.EventListener"
            uuid: "listener"
      valueType: "org.springframework.boot.web.servlet.ServletListenerRegistrationBean"
      genericValueType: "java.util.EventListener"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "description1"
      valueType: "java.lang.String"
      uuid: "description"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.ServletContext"
      uuid: "servletContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.EventListener"
      uuid: "listener"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Listener must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid13"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid14"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Listener is not of a supported type"
      valueType: "java.lang.String"
      uuid: "uniqueUuid15"
      fixed: true
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.ServletContext"
      uuid: "servletContext"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.EventListener"
      uuid: "listener"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    calledSomeStaticInternalMethod: true
  - pathId: "path2"
    testPathName: "registerWhenCaughtRuntimeExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.util.EventListener) : void"
    modelFingerprint: "80C3C9B38D5BDA95656CF2476A7596C9"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "60AF951874AC9019790302576E2C2525"
      valueUuid: "target"
    - type: "INPUT"
      name: "description"
      modelFingerprint: "D7E957879EBC8E5F8816BCA94411FAAC"
      valueUuid: "description"
    - type: "INPUT"
      name: "servletContext"
      modelFingerprint: "1FE94A2B8400B5864BA32324277284E5"
      valueUuid: "servletContext"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FD7C3CFF0CEAE6C51478CB664AC98F18"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:listener,message:uniqueUuid16):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "E533E4B11A52CF592983B520F992724B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:uniqueUuid17,message:uniqueUuid18):void2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "servletContext"
      modelFingerprint: "2DCCAC08AB4B759DF9BDA165ED6F91C0"
      valueUuid: "servletContext"
      methodExercised:
        expression: "addListener(arg0:listener):void3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "89454A916154D038D97C9AC93E8F1013"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "CLASS_TYPE_COULD_NOT_BE_MOCKED_AND_NEEDS_TO_STRING"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.ServletListenerRegistrationBean"
        parameters:
        - name: "listener"
          value:
            sapientType: "MOCK"
            valueType: "java.util.EventListener"
            uuid: "listener"
            nameForMock: "listener"
      valueType: "org.springframework.boot.web.servlet.ServletListenerRegistrationBean"
      genericValueType: "java.util.EventListener"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "description1"
      valueType: "java.lang.String"
      uuid: "description"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.ServletContext"
      uuid: "servletContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.EventListener"
      uuid: "listener"
      nameForMock: "listener"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Listener must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid16"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid17"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Listener is not of a supported type"
      valueType: "java.lang.String"
      uuid: "uniqueUuid18"
      fixed: true
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.ServletContext"
      uuid: "servletContext"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.EventListener"
      uuid: "listener"
      nameForMock: "listener"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Failed to add listener 'listener' to servlet context"
            valueType: "java.lang.String"
            uuid: "string"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.RuntimeException"
              parameters: []
            valueType: "java.lang.RuntimeException"
            uuid: "runtimeException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 121
      expression: "catch-exception (RuntimeException)"
      range: "(121,3)-(121,28)"
      evaluatedAs: true
    calledSomeStaticInternalMethod: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.RuntimeException"
- method:
    name: "isSupportedType"
    sourceCodeSignature: "boolean isSupportedType(EventListener listener)"
    returnType: "boolean"
    parameters:
    - name: "listener"
      type: "java.util.EventListener"
    instructionFingerprint: "E4FB159BA91C058D5D80E76ECEEB9699"
  paths:
  - pathId: "path1"
    testPathName: "isSupportedTypeWhenSUPPORTED_TYPESIsEmpty"
    modelFingerprint: "CC2283517BB7B4050D1CA062DD094C79"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "listener"
      modelFingerprint: "52B48EF0E03FBB86F831CE1D8297C3CD"
      valueUuid: "listener"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5633A2B0C967879105766C98D64A3959"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "java.util.EventListener"
      uuid: "listener"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 132
      expression: "for-each(SUPPORTED_TYPES)"
      range: "(132,24)-(132,38)"
      evaluatedAs: false
- method:
    name: "getSupportedTypes"
    sourceCodeSignature: "Set<Class<?>> getSupportedTypes()"
    returnType: "java.util.Set"
    genericReturnType: "java.lang.Class<?>"
    instructionFingerprint: "5BFEE2B3D9BC5D73A234492A1E2BAB53"
  paths:
  - pathId: "path1"
    testPathName: "getSupportedTypesTest"
    modelFingerprint: "BDF52D68942D75473B78972B5FE25678"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D25F12D96C9B560BAC8650252FF7B008"
      valueUuid: "set"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Set"
      genericValueType: "java.lang.Class<?>"
      uuid: "set"
