---
modelFingerprint: "285B1B3DFFD7D79B1A741C7AAD57ED6E"
targetClass:
  fullClassName: "org.springframework.boot.web.servlet.ServletRegistrationBean"
methods:
- method:
    name: "setServlet"
    sourceCodeSignature: "void setServlet(T servlet)"
    returnType: "void"
    parameters:
    - name: "servlet"
      type: "jakarta.servlet.Servlet"
    instructionFingerprint: "76CE2EA2F87543690449E8BDDF828A9E"
  paths:
  - pathId: "path1"
    testPathName: "setServletTest"
    constructorSignature: "<init>(jakarta.servlet.Servlet,boolean,java.lang.String[])\
      \ : void"
    modelFingerprint: "312A1637D6C02DF5496BC2B8B4FA8FFE"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "F1044DBA1C831C73C0B80C7DE6DD83B7"
      valueUuid: "target"
    - type: "INPUT"
      name: "servlet"
      modelFingerprint: "DCC8F0618BF5CACE1EF8C34178D73791"
      valueUuid: "servlet"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D83AA46F2DD22084E2D65AEEBA3277FF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:servlet2,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "F3538A1CC867CFFB00C25C93A9DBF04D"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:urlMappings,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D83AA46F2DD22084E2D65AEEBA3277FF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:servlet,message:uniqueUuid3):void3"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    - type: "STATE_VERIFICATION_FIELD"
      name: "servlet"
      modelFingerprint: "ACE0BD89CC37854A89D84685F8E888C8"
      valueUuid: "servlet"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.ServletRegistrationBean"
        parameters:
        - name: "servlet"
          value:
            sapientType: "MOCK"
            valueType: "jakarta.servlet.Servlet"
            uuid: "servlet2"
        - name: "alwaysMapUrl"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "alwaysMapUrl"
        - name: "urlMappings"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "urlMappings"
      valueType: "org.springframework.boot.web.servlet.ServletRegistrationBean"
      genericValueType: "jakarta.servlet.Servlet"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.Servlet"
      uuid: "servlet"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.Servlet"
      uuid: "servlet2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Servlet must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "urlMappings"
    - sapientType: "BASIC"
      content: !<regular>
        value: "UrlMappings must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.Servlet"
      uuid: "servlet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Servlet must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.Servlet"
      uuid: "servlet"
- method:
    name: "getServlet"
    sourceCodeSignature: "T getServlet()"
    returnType: "jakarta.servlet.Servlet"
    instructionFingerprint: "C2A48788BE680635F87DC77798DCD558"
  paths:
  - pathId: "path1"
    testPathName: "getServletTest"
    constructorSignature: "<init>(jakarta.servlet.Servlet,boolean,java.lang.String[])\
      \ : void"
    modelFingerprint: "6E9B29E3C47BF10B0B0DDE1891B2E6E9"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "setUrlMappings"
    sourceCodeSignature: "void setUrlMappings(Collection<String> urlMappings)"
    returnType: "void"
    parameters:
    - name: "urlMappings"
      type: "java.util.Collection"
    instructionFingerprint: "41EC2CF9BBCD627137470FF3184445C4"
  paths:
  - pathId: "path1"
    testPathName: "setUrlMappingsTest"
    constructorSignature: "<init>(jakarta.servlet.Servlet,boolean,java.lang.String[])\
      \ : void"
    modelFingerprint: "151AF779F1020FCCCAC77689EB9C0F9D"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "F1044DBA1C831C73C0B80C7DE6DD83B7"
      valueUuid: "target"
    - type: "INPUT"
      name: "urlMappings"
      modelFingerprint: "B4BA61B6DEF8C3EE4E3BF015D71757E6"
      valueUuid: "urlMappings"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D83AA46F2DD22084E2D65AEEBA3277FF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:servlet,message:uniqueUuid6):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "F3538A1CC867CFFB00C25C93A9DBF04D"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:urlMappings2,message:uniqueUuid7):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D339552E336B365BDF8C1D05834A6F49"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:urlMappings,message:uniqueUuid8):void3"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    - type: "STATE_VERIFICATION_FIELD"
      name: "urlMappings"
      modelFingerprint: "2733853C8C4197277CDF72B6CEF22C8C"
      valueUuid: "linkedHashSet2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.ServletRegistrationBean"
        parameters:
        - name: "servlet"
          value:
            sapientType: "MOCK"
            valueType: "jakarta.servlet.Servlet"
            uuid: "servlet"
        - name: "alwaysMapUrl"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "alwaysMapUrl"
        - name: "urlMappings"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "urlMappings2"
      valueType: "org.springframework.boot.web.servlet.ServletRegistrationBean"
      genericValueType: "jakarta.servlet.Servlet"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "java.lang.String"
      uuid: "urlMappings"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.Servlet"
      uuid: "servlet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Servlet must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "urlMappings2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "UrlMappings must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "java.lang.String"
      uuid: "urlMappings"
    - sapientType: "BASIC"
      content: !<regular>
        value: "UrlMappings must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.LinkedHashSet"
        parameters:
        - name: "c"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Collection"
            genericValueType: "java.lang.String"
            uuid: "urlMappings"
        values: []
      valueType: "java.util.Set"
      genericValueType: "java.lang.String"
      uuid: "linkedHashSet2"
- method:
    name: "getUrlMappings"
    sourceCodeSignature: "Collection<String> getUrlMappings()"
    returnType: "java.util.Collection"
    genericReturnType: "java.lang.String"
    instructionFingerprint: "EB3D0990E62A168F68F5A1FA1BE342D1"
  paths:
  - pathId: "path1"
    testPathName: "getUrlMappingsTest"
    constructorSignature: "<init>(jakarta.servlet.Servlet,boolean,java.lang.String[])\
      \ : void"
    modelFingerprint: "DC07CC7B18ACAF81BE8ACA1C69FF6863"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "F1044DBA1C831C73C0B80C7DE6DD83B7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D83AA46F2DD22084E2D65AEEBA3277FF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:servlet,message:uniqueUuid9):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "F3538A1CC867CFFB00C25C93A9DBF04D"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:urlMappings,message:uniqueUuid10):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4431287608232F959FCE873CEB606974"
      valueUuid: "linkedHashSet"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.ServletRegistrationBean"
        parameters:
        - name: "servlet"
          value:
            sapientType: "MOCK"
            valueType: "jakarta.servlet.Servlet"
            uuid: "servlet"
        - name: "alwaysMapUrl"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "alwaysMapUrl"
        - name: "urlMappings"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "urlMappings"
      valueType: "org.springframework.boot.web.servlet.ServletRegistrationBean"
      genericValueType: "jakarta.servlet.Servlet"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.Servlet"
      uuid: "servlet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Servlet must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "urlMappings"
    - sapientType: "BASIC"
      content: !<regular>
        value: "UrlMappings must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Set"
      genericValueType: "java.lang.String"
      uuid: "linkedHashSet"
- method:
    name: "addUrlMappings"
    sourceCodeSignature: "void addUrlMappings(String... urlMappings)"
    returnType: "void"
    parameters:
    - name: "urlMappings"
      type: "java.lang.String[]"
    instructionFingerprint: "1D104B1FB83406D642539163E1689A99"
  paths:
  - pathId: "path1"
    testPathName: "addUrlMappingsTest"
    constructorSignature: "<init>(jakarta.servlet.Servlet,boolean,java.lang.String[])\
      \ : void"
    modelFingerprint: "303CA0CD60BCB15B243E4D07C553738F"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "F1044DBA1C831C73C0B80C7DE6DD83B7"
      valueUuid: "target"
    - type: "INPUT"
      name: "urlMappings"
      modelFingerprint: "47FB9E90DA3BE462A8EFDF39987499FC"
      valueUuid: "urlMappings"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D83AA46F2DD22084E2D65AEEBA3277FF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:servlet,message:uniqueUuid11):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "F3538A1CC867CFFB00C25C93A9DBF04D"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:urlMappings2,message:uniqueUuid12):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "F3538A1CC867CFFB00C25C93A9DBF04D"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:urlMappings,message:uniqueUuid13):void3"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.ServletRegistrationBean"
        parameters:
        - name: "servlet"
          value:
            sapientType: "MOCK"
            valueType: "jakarta.servlet.Servlet"
            uuid: "servlet"
        - name: "alwaysMapUrl"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "alwaysMapUrl"
        - name: "urlMappings"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "urlMappings2"
      valueType: "org.springframework.boot.web.servlet.ServletRegistrationBean"
      genericValueType: "jakarta.servlet.Servlet"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "urlMappings"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.Servlet"
      uuid: "servlet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Servlet must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "urlMappings2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "UrlMappings must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid12"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "urlMappings"
    - sapientType: "BASIC"
      content: !<regular>
        value: "UrlMappings must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid13"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "setLoadOnStartup"
    sourceCodeSignature: "void setLoadOnStartup(int loadOnStartup)"
    returnType: "void"
    parameters:
    - name: "loadOnStartup"
      type: "int"
    instructionFingerprint: "CDAB9C2E759B2340B051A5BD9591BA57"
  paths:
  - pathId: "path1"
    testPathName: "setLoadOnStartupTest"
    constructorSignature: "<init>(jakarta.servlet.Servlet,boolean,java.lang.String[])\
      \ : void"
    modelFingerprint: "FD88DEE87198530E0A9329E29E92EAC3"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "setMultipartConfig"
    sourceCodeSignature: "void setMultipartConfig(MultipartConfigElement multipartConfig)"
    returnType: "void"
    parameters:
    - name: "multipartConfig"
      type: "jakarta.servlet.MultipartConfigElement"
    instructionFingerprint: "542BCA6F1EE558BD61B058422B70AEE3"
  paths:
  - pathId: "path1"
    testPathName: "setMultipartConfigTest"
    constructorSignature: "<init>(jakarta.servlet.Servlet,boolean,java.lang.String[])\
      \ : void"
    modelFingerprint: "F3995DF60BD4E96CDF074EE5255422BF"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "getMultipartConfig"
    sourceCodeSignature: "MultipartConfigElement getMultipartConfig()"
    returnType: "jakarta.servlet.MultipartConfigElement"
    instructionFingerprint: "1D6A53488F358DCE5306F15B30F68B8B"
  paths:
  - pathId: "path1"
    testPathName: "getMultipartConfigTest"
    constructorSignature: "<init>(jakarta.servlet.Servlet,boolean,java.lang.String[])\
      \ : void"
    modelFingerprint: "7D472C36F2E3413FC03CA623B025E9A9"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "getDescription"
    sourceCodeSignature: "String getDescription()"
    returnType: "java.lang.String"
    instructionFingerprint: "E71524647FBAD915401A349BB7E0FBBD"
  paths:
  - pathId: "path1"
    testPathName: "getDescriptionTest"
    constructorSignature: "<init>(jakarta.servlet.Servlet,boolean,java.lang.String[])\
      \ : void"
    modelFingerprint: "1BCA7CA0C9210033275FAFEC10923C0F"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "F1044DBA1C831C73C0B80C7DE6DD83B7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D83AA46F2DD22084E2D65AEEBA3277FF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:servlet,message:uniqueUuid20):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "F3538A1CC867CFFB00C25C93A9DBF04D"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:urlMappings,message:uniqueUuid21):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D83AA46F2DD22084E2D65AEEBA3277FF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:servlet,message:uniqueUuid22):void3"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "E898AB9E957E8203712523C767EA6312"
      methodExercised:
        expression: "getServletName():string"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4EB52049A589590DB84838D5709ED646"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.ServletRegistrationBean"
        parameters:
        - name: "servlet"
          value:
            sapientType: "MOCK"
            valueType: "jakarta.servlet.Servlet"
            uuid: "servlet"
        - name: "alwaysMapUrl"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "alwaysMapUrl"
        - name: "urlMappings"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "urlMappings"
      valueType: "org.springframework.boot.web.servlet.ServletRegistrationBean"
      genericValueType: "jakarta.servlet.Servlet"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.Servlet"
      uuid: "servlet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Servlet must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid20"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "urlMappings"
    - sapientType: "BASIC"
      content: !<regular>
        value: "UrlMappings must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid21"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.Servlet"
      uuid: "servlet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Servlet must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid22"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "servlet A"
      valueType: "java.lang.String"
      uuid: "string2"
- method:
    name: "addRegistration"
    sourceCodeSignature: "ServletRegistration.Dynamic addRegistration(String description,\
      \ ServletContext servletContext)"
    returnType: "jakarta.servlet.ServletRegistration$Dynamic"
    parameters:
    - name: "description"
      type: "java.lang.String"
    - name: "servletContext"
      type: "jakarta.servlet.ServletContext"
    instructionFingerprint: "E01F782E9D0F41A0D4884B8BECC986A8"
  paths:
  - pathId: "path1"
    testPathName: "addRegistration1Test"
    constructorSignature: "<init>(jakarta.servlet.Servlet,boolean,java.lang.String[])\
      \ : void"
    modelFingerprint: "8F152E6077AD9EA197DA946D2BA62283"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "F1044DBA1C831C73C0B80C7DE6DD83B7"
      valueUuid: "target"
    - type: "INPUT"
      name: "description"
      modelFingerprint: "D7E957879EBC8E5F8816BCA94411FAAC"
      valueUuid: "description"
    - type: "INPUT"
      name: "servletContext"
      modelFingerprint: "1FE94A2B8400B5864BA32324277284E5"
      valueUuid: "servletContext"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D83AA46F2DD22084E2D65AEEBA3277FF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:servlet,message:uniqueUuid23):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "F3538A1CC867CFFB00C25C93A9DBF04D"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:urlMappings,message:uniqueUuid24):void2"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "C2352664A50503426E2AC8E37BCF735C"
      methodExercised:
        expression: "getServletName():string"
    - type: "LOCAL_VARIABLE"
      name: "servletContext"
      modelFingerprint: "C7E23CAEA9106E954618A5F6E19EF3B2"
      valueUuid: "servletContext"
      methodExercised:
        expression: "addServlet(arg0:string,arg1:servlet):servletRegistration.Dynamic"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "EEC4558623EAE9FF621E0F0B37C9DFDE"
      valueUuid: "servletRegistration.Dynamic"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.ServletRegistrationBean"
        parameters:
        - name: "servlet"
          value:
            sapientType: "MOCK"
            valueType: "jakarta.servlet.Servlet"
            uuid: "servlet"
        - name: "alwaysMapUrl"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "alwaysMapUrl"
        - name: "urlMappings"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "urlMappings"
      valueType: "org.springframework.boot.web.servlet.ServletRegistrationBean"
      genericValueType: "jakarta.servlet.Servlet"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "description1"
      valueType: "java.lang.String"
      uuid: "description"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.ServletContext"
      uuid: "servletContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.Servlet"
      uuid: "servlet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Servlet must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid23"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "urlMappings"
    - sapientType: "BASIC"
      content: !<regular>
        value: "UrlMappings must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid24"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getServletName1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.ServletContext"
      uuid: "servletContext"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.ServletRegistration$Dynamic"
      uuid: "servletRegistration.Dynamic"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getServletName1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.Servlet"
      uuid: "servlet"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.ServletRegistration$Dynamic"
      uuid: "servletRegistration.Dynamic"
- method:
    name: "configure"
    sourceCodeSignature: "void configure(ServletRegistration.Dynamic registration)"
    returnType: "void"
    parameters:
    - name: "registration"
      type: "jakarta.servlet.ServletRegistration$Dynamic"
    instructionFingerprint: "CDC22F2D8FF38D02BE82DAC7C506575E"
  paths:
  - pathId: "path1"
    testPathName: "configure1WhenObjectUtilsNotIsEmptyUrlMappingAndThisMultipartConfigIsNull"
    constructorSignature: "<init>(jakarta.servlet.Servlet,boolean,java.lang.String[])\
      \ : void"
    modelFingerprint: "C63BDD313F8541FE38D13B32FED09E4F"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "3D55417258A644D843F0642AAC9D577C"
      valueUuid: "target"
    - type: "INPUT"
      name: "registration"
      modelFingerprint: "FD4F13214B18D58A5AA1E94BF1C10997"
      valueUuid: "registration"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D83AA46F2DD22084E2D65AEEBA3277FF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:servlet,message:uniqueUuid25):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "F3538A1CC867CFFB00C25C93A9DBF04D"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:urlMappings,message:uniqueUuid26):void2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "727C995A7AFEDBE6C4F7F9271DF91828"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "toStringArray(collection:linkedHashSet):stringArray2"
        staticAccess: true
    - type: "STATIC"
      name: "ObjectUtils.class.real"
      modelFingerprint: "4CD43DD0228708E2849ABFFB85F57A8F"
      valueUuid: "ObjectUtils.class.real"
      methodExercised:
        expression: "isEmpty(array:stringArray):boolean2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "registration"
      modelFingerprint: "B0C9DCBD615B7F8FA7C761CD2ED0B3A5"
      valueUuid: "registration"
      methodExercised:
        expression: "addMapping(arg0:stringArray):set"
    - type: "LOCAL_VARIABLE"
      name: "registration"
      modelFingerprint: "F855818459A3CBB51C5900CCB4B791C3"
      valueUuid: "registration"
      methodExercised:
        expression: "setLoadOnStartup(arg0:int5):void4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_INTERNAL_METHOD_FAILURE"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.ServletRegistrationBean"
        parameters:
        - name: "servlet"
          value:
            sapientType: "MOCK"
            valueType: "jakarta.servlet.Servlet"
            uuid: "servlet"
        - name: "alwaysMapUrl"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "alwaysMapUrl"
        - name: "urlMappings"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "urlMappings"
      valueType: "org.springframework.boot.web.servlet.ServletRegistrationBean"
      genericValueType: "jakarta.servlet.Servlet"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.ServletRegistration$Dynamic"
      uuid: "registration"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.Servlet"
      uuid: "servlet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Servlet must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid25"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "urlMappings"
    - sapientType: "BASIC"
      content: !<regular>
        value: "UrlMappings must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid26"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Set"
      genericValueType: "java.lang.String"
      uuid: "linkedHashSet"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ObjectUtils"
      uuid: "ObjectUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "/*"
            valueType: "java.lang.String"
            uuid: "uniqueUuid28"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.ServletRegistration$Dynamic"
      uuid: "registration"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Set"
      genericValueType: "java.lang.String"
      uuid: "set"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "/*"
            valueType: "java.lang.String"
            uuid: "uniqueUuid28"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.ServletRegistration$Dynamic"
      uuid: "registration"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "int5"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 190
      expression: "urlMapping.length == 0"
      range: "(190,7)-(190,28)"
      evaluatedAs: true
    - lineNumber: 190
      expression: "this.alwaysMapUrl"
      range: "(190,33)-(190,49)"
      evaluatedAs: true
    - lineNumber: 193
      expression: "!ObjectUtils.isEmpty(urlMapping)"
      range: "(193,7)-(193,38)"
      evaluatedAs: true
    - lineNumber: 197
      expression: "this.multipartConfig != null"
      range: "(197,7)-(197,34)"
      evaluatedAs: false
- method:
    name: "getServletName"
    sourceCodeSignature: "String getServletName()"
    returnType: "java.lang.String"
    instructionFingerprint: "C30D2E518C84B08BC80D17BC7BA477BC"
  paths:
  - pathId: "path1"
    testPathName: "getServletNameTest"
    constructorSignature: "<init>(jakarta.servlet.Servlet,boolean,java.lang.String[])\
      \ : void"
    modelFingerprint: "90826FE3BB71D34E55D6A977DA1D5893"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "F1044DBA1C831C73C0B80C7DE6DD83B7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D83AA46F2DD22084E2D65AEEBA3277FF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:servlet,message:uniqueUuid29):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "F3538A1CC867CFFB00C25C93A9DBF04D"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:urlMappings,message:uniqueUuid30):void2"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "3CD2E1F3128F68D5643409AE6F158DE5"
      methodExercised:
        expression: "getOrDeduceName(value:servlet):string"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D446A609419428DDEAA49A58091F3986"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.ServletRegistrationBean"
        parameters:
        - name: "servlet"
          value:
            sapientType: "MOCK"
            valueType: "jakarta.servlet.Servlet"
            uuid: "servlet"
        - name: "alwaysMapUrl"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "alwaysMapUrl"
        - name: "urlMappings"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "urlMappings"
      valueType: "org.springframework.boot.web.servlet.ServletRegistrationBean"
      genericValueType: "jakarta.servlet.Servlet"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.Servlet"
      uuid: "servlet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Servlet must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid29"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "urlMappings"
    - sapientType: "BASIC"
      content: !<regular>
        value: "UrlMappings must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid30"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getOrDeduceName1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.Servlet"
      uuid: "servlet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getOrDeduceName1"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "toString"
    sourceCodeSignature: "String toString()"
    returnType: "java.lang.String"
    instructionFingerprint: "B7D8244D449F183FF3AED76FFEEE62B3"
  paths:
  - pathId: "path1"
    testPathName: "toStringTest"
    constructorSignature: "<init>(jakarta.servlet.Servlet,boolean,java.lang.String[])\
      \ : void"
    modelFingerprint: "4CD00FDF0FB2BFE779BB2242E7464882"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "F1044DBA1C831C73C0B80C7DE6DD83B7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D83AA46F2DD22084E2D65AEEBA3277FF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:servlet,message:uniqueUuid31):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "F3538A1CC867CFFB00C25C93A9DBF04D"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:urlMappings,message:uniqueUuid32):void2"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "C2352664A50503426E2AC8E37BCF735C"
      methodExercised:
        expression: "getServletName():string"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5A6C968AA13733CCA9A55602DA1BFA9D"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.ServletRegistrationBean"
        parameters:
        - name: "servlet"
          value:
            sapientType: "MOCK"
            valueType: "jakarta.servlet.Servlet"
            uuid: "servlet"
        - name: "alwaysMapUrl"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "alwaysMapUrl"
        - name: "urlMappings"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "urlMappings"
      valueType: "org.springframework.boot.web.servlet.ServletRegistrationBean"
      genericValueType: "jakarta.servlet.Servlet"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.Servlet"
      uuid: "servlet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Servlet must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid31"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "urlMappings"
    - sapientType: "BASIC"
      content: !<regular>
        value: "UrlMappings must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid32"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: " urls=[]"
      valueType: "java.lang.String"
      uuid: "string2"
