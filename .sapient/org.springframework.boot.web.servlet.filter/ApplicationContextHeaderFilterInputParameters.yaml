---
modelFingerprint: "896C2D2C2192667EBEA577D6786BDAED"
targetClass:
  fullClassName: "org.springframework.boot.web.servlet.filter.ApplicationContextHeaderFilter"
methods:
- method:
    name: "doFilterInternal"
    sourceCodeSignature: "void doFilterInternal(HttpServletRequest request, HttpServletResponse\
      \ response, FilterChain filterChain)"
    returnType: "void"
    throwsExceptions:
    - "jakarta.servlet.ServletException"
    - "java.io.IOException"
    parameters:
    - name: "request"
      type: "jakarta.servlet.http.HttpServletRequest"
    - name: "response"
      type: "jakarta.servlet.http.HttpServletResponse"
    - name: "filterChain"
      type: "jakarta.servlet.FilterChain"
    instructionFingerprint: "3F0C713BED9DF3A74BA857096E295B6E"
  paths:
  - pathId: "path1"
    testPathName: "doFilterInternalTest"
    constructorSignature: "<init>(org.springframework.context.ApplicationContext)\
      \ : void"
    modelFingerprint: "1673213FD03BFD67825CC17BED25DF21"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "38FC96959F1D27165254EE0E8B0B4607"
      valueUuid: "target"
    - type: "INPUT"
      name: "request"
      modelFingerprint: "98FA91B3AE33596239589E5BFFEF53F1"
      valueUuid: "request"
    - type: "INPUT"
      name: "response"
      modelFingerprint: "ABEDAC03B9FFE697A36E1AD6D35FF4E0"
      valueUuid: "response"
    - type: "INPUT"
      name: "filterChain"
      modelFingerprint: "F5FFF9C8D1B193AEB4B7DEA59E727CAD"
      valueUuid: "filterChain"
    - type: "FIELD"
      name: "applicationContext"
      modelFingerprint: "5BA0FF4BA72B9B6780C6CD68641B998E"
      valueUuid: "context"
      methodExercised:
        expression: "getId():string"
    - type: "LOCAL_VARIABLE"
      name: "response"
      modelFingerprint: "7556566888379D6743A90701EE10974B"
      valueUuid: "response"
      methodExercised:
        expression: "addHeader(arg0:uniqueUuid1,arg1:string):void"
    - type: "LOCAL_VARIABLE"
      name: "filterChain"
      modelFingerprint: "8DAE72712679070E8D48CA213C837B92"
      valueUuid: "filterChain"
      methodExercised:
        expression: "doFilter(arg0:request,arg1:response):void2"
        throwsExceptions:
        - "java.io.IOException"
        - "jakarta.servlet.ServletException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.filter.ApplicationContextHeaderFilter"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.context.ApplicationContext"
            uuid: "context"
      valueType: "org.springframework.boot.web.servlet.filter.ApplicationContextHeaderFilter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletResponse"
      uuid: "response"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.FilterChain"
      uuid: "filterChain"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "context"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getId1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletResponse"
      uuid: "response"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "X-Application-Context"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getId1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.FilterChain"
      uuid: "filterChain"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletResponse"
      uuid: "response"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
