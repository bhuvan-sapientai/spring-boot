---
modelFingerprint: "19861293F55D84871FDC662DA3F52A87"
targetClass:
  fullClassName: "org.springframework.boot.jdbc.DataSourceBuilder"
methods:
- method:
    name: "create"
    sourceCodeSignature: "DataSourceBuilder<?> create()"
    returnType: "org.springframework.boot.jdbc.DataSourceBuilder"
    genericReturnType: "?"
    instructionFingerprint: "9D3D45834246339711A17C07FEDFEB66"
  paths:
  - pathId: "path1"
    testPathName: "createTest"
    modelFingerprint: "DF41779332E6EAF30B87AF483620B4B7"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "STATIC"
      name: "DataSourceBuilder.class"
      modelFingerprint: "792089F4E2EC7D72A39423C47A382B1E"
      valueUuid: "DataSourceBuilder.class"
      methodExercised:
        expression: "create(classLoader:uniqueUuid1):dataSourceBuilder"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0CF2705A2372C0C5ADE772305BBD3B14"
      valueUuid: "dataSourceBuilder"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.jdbc.DataSourceBuilder"
      uuid: "DataSourceBuilder.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.jdbc.DataSourceBuilder"
      uuid: "dataSourceBuilder"
    - sapientType: "NULL"
      valueType: "java.lang.ClassLoader"
      uuid: "uniqueUuid1"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.jdbc.DataSourceBuilder"
      uuid: "dataSourceBuilder"
- method:
    name: "create"
    sourceCodeSignature: "DataSourceBuilder<?> create(ClassLoader classLoader)"
    returnType: "org.springframework.boot.jdbc.DataSourceBuilder"
    genericReturnType: "?"
    parameters:
    - name: "classLoader"
      type: "java.lang.ClassLoader"
    instructionFingerprint: "FB21B9B3291E66B49106137EDA8C2EF6"
  paths:
  - pathId: "path1"
    testPathName: "create1Test"
    modelFingerprint: "9106963B2DA5989D82FE8919A7568E20"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "classLoader"
      modelFingerprint: "C286DE215DE7563ED1CD0033A63BD833"
      valueUuid: "classLoader"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "16E33536E647573900AB6ECD23FD0415"
      valueUuid: "dataSourceBuilder"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.jdbc.DataSourceBuilder"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.jdbc.DataSourceBuilder"
      uuid: "dataSourceBuilder"
      fixed: true
- method:
    name: "derivedFrom"
    sourceCodeSignature: "DataSourceBuilder<?> derivedFrom(DataSource dataSource)"
    returnType: "org.springframework.boot.jdbc.DataSourceBuilder"
    genericReturnType: "?"
    parameters:
    - name: "dataSource"
      type: "javax.sql.DataSource"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.sql.SQLException"
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.sql.SQLException"
    - idExternalInstruction: 0
      id: 3
      catchExceptions:
      - "java.sql.SQLException"
    instructionFingerprint: "EF3FB55CCD9861F0B8E7B579A0D844A5"
  paths:
  - pathId: "path4"
    testPathName: "derivedFromWhenCaughtSQLExceptionThrowsIllegalStateException"
    modelFingerprint: "E698C4D6A165BE3B75BF37B78DCD64DB"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "dataSource"
      modelFingerprint: "0F1C4009025A284F79579D2A2BC6D7CF"
      valueUuid: "dataSource"
    - type: "LOCAL_VARIABLE"
      name: "dataSource"
      modelFingerprint: "ABDB1E45DA64F6779B22A54E77DD5D61"
      valueUuid: "dataSource"
      methodExercised:
        expression: "unwrap(arg0:uniqueUuid2):object"
        throwsExceptions:
        - "java.sql.SQLException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "107BA44A35D1B3C0E4132B8166D43597"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: javax.sql.DataSource.unwrap(java.lang.Class<javax.sql.DataSource>)\
        \ : java.lang.Object"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.jdbc.datasource.embedded.EmbeddedDatabase"
      uuid: "dataSource"
    - sapientType: "MOCK"
      valueType: "org.springframework.jdbc.datasource.embedded.EmbeddedDatabase"
      uuid: "dataSource"
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "javax.sql.DataSource"
      valueType: "java.lang.Class"
      genericValueType: "javax.sql.DataSource"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Unable to unwrap embedded database"
            valueType: "java.lang.String"
            uuid: "uniqueUuid3"
            fixed: true
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.sql.SQLException"
              parameters: []
            valueType: "java.sql.SQLException"
            uuid: "sQLException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 233
      expression: "dataSource instanceof EmbeddedDatabase"
      range: "(233,7)-(233,44)"
      evaluatedAs: true
    - lineNumber: 237
      expression: "catch-exception (SQLException)"
      range: "(237,4)-(237,25)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.sql.SQLException"
  - pathId: "path2"
    testPathName: "derivedFromWhenDataSourceNotIsWrapperForDataSource"
    modelFingerprint: "2A38CF59CF772C264DBA3C83E3288214"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "dataSource"
      modelFingerprint: "0F1C4009025A284F79579D2A2BC6D7CF"
      valueUuid: "dataSource"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FB19FD68BA68627445D8DEF45F5F25C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:object,message:uniqueUuid4):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "13F2EBE20D17D4A7695CF94E3C11B4B1"
      valueUuid: "dataSourceBuilder"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: javax.sql.DataSource.unwrap(java.lang.Class<javax.sql.DataSource>)\
        \ : java.lang.Object"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.jdbc.datasource.embedded.EmbeddedDatabase"
      uuid: "dataSource"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "DataSource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.jdbc.DataSourceBuilder"
        parameters:
        - name: "deriveFrom"
          value:
            sapientType: "MOCK"
            valueType: "javax.sql.DataSource"
            uuid: "object"
            explicitCastNeeded: true
      valueType: "org.springframework.boot.jdbc.DataSourceBuilder"
      uuid: "dataSourceBuilder"
      fixed: true
    branches:
    - lineNumber: 233
      expression: "dataSource instanceof EmbeddedDatabase"
      range: "(233,7)-(233,44)"
      evaluatedAs: true
    - lineNumber: 246
      expression: "dataSource.isWrapperFor(DataSource.class)"
      range: "(246,11)-(246,51)"
      evaluatedAs: false
      internalMethodName: "unwrap"
    calledSomeStaticInternalMethod: true
  - pathId: "path1"
    testPathName: "derivedFromWhenUnwrappedEqualsDataSource"
    modelFingerprint: "94075894C5BBB3739C74D77107639A7A"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "dataSource"
      modelFingerprint: "0F1C4009025A284F79579D2A2BC6D7CF"
      valueUuid: "dataSource"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FB19FD68BA68627445D8DEF45F5F25C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:object2,message:uniqueUuid5):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "13F2EBE20D17D4A7695CF94E3C11B4B1"
      valueUuid: "dataSourceBuilder"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: javax.sql.DataSource.unwrap(java.lang.Class<javax.sql.DataSource>)\
        \ : java.lang.Object"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.jdbc.datasource.embedded.EmbeddedDatabase"
      uuid: "dataSource"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "object2"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "DataSource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.jdbc.DataSourceBuilder"
        parameters:
        - name: "deriveFrom"
          value:
            sapientType: "MOCK"
            valueType: "javax.sql.DataSource"
            uuid: "object2"
            explicitCastNeeded: true
      valueType: "org.springframework.boot.jdbc.DataSourceBuilder"
      uuid: "dataSourceBuilder"
      fixed: true
    branches:
    - lineNumber: 233
      expression: "dataSource instanceof EmbeddedDatabase"
      range: "(233,7)-(233,44)"
      evaluatedAs: true
    - lineNumber: 246
      expression: "dataSource.isWrapperFor(DataSource.class)"
      range: "(246,11)-(246,51)"
      evaluatedAs: true
      internalMethodName: "unwrap"
    - lineNumber: 248
      expression: "unwrapped == dataSource"
      range: "(248,9)-(248,31)"
      evaluatedAs: true
      internalMethodName: "unwrap"
    calledSomeStaticInternalMethod: true
  - pathId: "path7"
    testPathName: "derivedFromWhenUnwrappedEqualsDataSourceAndCaughtSQLException"
    modelFingerprint: "227CD6404C57AD5CA650404F4DD93648"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "dataSource"
      modelFingerprint: "0F1C4009025A284F79579D2A2BC6D7CF"
      valueUuid: "dataSource"
    - type: "LOCAL_VARIABLE"
      name: "dataSource"
      modelFingerprint: "692B87923FA5E5BBE3789C9BFC93AB5B"
      valueUuid: "object2"
      methodExercised:
        expression: "isWrapperFor(arg0:uniqueUuid6):boolean2"
        throwsExceptions:
        - "java.sql.SQLException"
    - type: "LOCAL_VARIABLE"
      name: "dataSource"
      modelFingerprint: "8D3B32B0CB470229E57ED27323329E2F"
      valueUuid: "object2"
      methodExercised:
        expression: "unwrap(arg0:uniqueUuid7):object2"
        throwsExceptions:
        - "java.sql.SQLException"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FB19FD68BA68627445D8DEF45F5F25C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:object2,message:uniqueUuid8):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "13F2EBE20D17D4A7695CF94E3C11B4B1"
      valueUuid: "dataSourceBuilder"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: javax.sql.DataSource.unwrap(java.lang.Class<javax.sql.DataSource>)\
        \ : java.lang.Object"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.jdbc.datasource.embedded.EmbeddedDatabase"
      uuid: "dataSource"
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "object2"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "CLASS"
      content: !<regular>
        value: "javax.sql.DataSource"
      valueType: "java.lang.Class"
      genericValueType: "javax.sql.DataSource"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "object2"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "object2"
      explicitCastNeeded: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "javax.sql.DataSource"
      valueType: "java.lang.Class"
      genericValueType: "javax.sql.DataSource"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "object2"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "DataSource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.jdbc.DataSourceBuilder"
        parameters:
        - name: "deriveFrom"
          value:
            sapientType: "MOCK"
            valueType: "javax.sql.DataSource"
            uuid: "object2"
            explicitCastNeeded: true
      valueType: "org.springframework.boot.jdbc.DataSourceBuilder"
      uuid: "dataSourceBuilder"
      fixed: true
    branches:
    - lineNumber: 233
      expression: "dataSource instanceof EmbeddedDatabase"
      range: "(233,7)-(233,44)"
      evaluatedAs: true
    - lineNumber: 246
      expression: "dataSource.isWrapperFor(DataSource.class)"
      range: "(246,11)-(246,51)"
      evaluatedAs: true
      internalMethodName: "unwrap"
    - lineNumber: 248
      expression: "unwrapped == dataSource"
      range: "(248,9)-(248,31)"
      evaluatedAs: true
      internalMethodName: "unwrap"
    - lineNumber: 254
      expression: "catch-exception (SQLException)"
      range: "(254,3)-(254,24)"
      evaluatedAs: true
      internalMethodName: "unwrap"
    calledSomeStaticInternalMethod: true
    catchBlockExercised:
      idExternalInstruction: 33
      id: 2
      catchExceptions:
      - "java.sql.SQLException"
  - pathId: "path5"
    testPathName: "derivedFromWhenDataSourceIsWrapperForDataSourceAndUnwrappedEqualsDataSource"
    modelFingerprint: "B4F979140D981E0CBB0CE69BD977CF0F"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "dataSource"
      modelFingerprint: "621BC0E02503DCEAB1242BF151BFC436"
      valueUuid: "object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FB19FD68BA68627445D8DEF45F5F25C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:object,message:uniqueUuid9):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "13F2EBE20D17D4A7695CF94E3C11B4B1"
      valueUuid: "dataSourceBuilder"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: javax.sql.DataSource.isWrapperFor(java.lang.Class<javax.sql.DataSource>)\
        \ : boolean"
    allValues:
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "DataSource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.jdbc.DataSourceBuilder"
        parameters:
        - name: "deriveFrom"
          value:
            sapientType: "MOCK"
            valueType: "javax.sql.DataSource"
            uuid: "object"
            explicitCastNeeded: true
      valueType: "org.springframework.boot.jdbc.DataSourceBuilder"
      uuid: "dataSourceBuilder"
      fixed: true
    branches:
    - lineNumber: 233
      expression: "dataSource instanceof EmbeddedDatabase"
      range: "(233,7)-(233,44)"
      evaluatedAs: false
    - lineNumber: 237
      expression: "catch-exception (SQLException)"
      range: "(237,4)-(237,25)"
      evaluatedAs: true
    - lineNumber: 246
      expression: "dataSource.isWrapperFor(DataSource.class)"
      range: "(246,11)-(246,51)"
      evaluatedAs: true
      internalMethodName: "unwrap"
    - lineNumber: 248
      expression: "unwrapped == dataSource"
      range: "(248,9)-(248,31)"
      evaluatedAs: true
      internalMethodName: "unwrap"
    calledSomeStaticInternalMethod: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.sql.SQLException"
  - pathId: "path6"
    testPathName: "derivedFromWhenUnwrappedNotEqualsDataSource"
    modelFingerprint: "4A9280B404859BDFC2F0FBD0C7264C25"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "dataSource"
      modelFingerprint: "621BC0E02503DCEAB1242BF151BFC436"
      valueUuid: "dataSource"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FB19FD68BA68627445D8DEF45F5F25C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:object,message:uniqueUuid10):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "13F2EBE20D17D4A7695CF94E3C11B4B1"
      valueUuid: "dataSourceBuilder"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: javax.sql.DataSource.isWrapperFor(java.lang.Class<javax.sql.DataSource>)\
        \ : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "dataSource"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "DataSource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.jdbc.DataSourceBuilder"
        parameters:
        - name: "deriveFrom"
          value:
            sapientType: "MOCK"
            valueType: "javax.sql.DataSource"
            uuid: "object"
            explicitCastNeeded: true
      valueType: "org.springframework.boot.jdbc.DataSourceBuilder"
      uuid: "dataSourceBuilder"
      fixed: true
    branches:
    - lineNumber: 233
      expression: "dataSource instanceof EmbeddedDatabase"
      range: "(233,7)-(233,44)"
      evaluatedAs: false
    - lineNumber: 237
      expression: "catch-exception (SQLException)"
      range: "(237,4)-(237,25)"
      evaluatedAs: true
    - lineNumber: 246
      expression: "dataSource.isWrapperFor(DataSource.class)"
      range: "(246,11)-(246,51)"
      evaluatedAs: true
      internalMethodName: "unwrap"
    - lineNumber: 248
      expression: "unwrapped == dataSource"
      range: "(248,9)-(248,31)"
      evaluatedAs: false
      internalMethodName: "unwrap"
    calledSomeStaticInternalMethod: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.sql.SQLException"
- method:
    name: "findType"
    sourceCodeSignature: "Class<? extends DataSource> findType(ClassLoader classLoader)"
    returnType: "java.lang.Class"
    parameters:
    - name: "classLoader"
      type: "java.lang.ClassLoader"
    instructionFingerprint: "EADF9B91A78BACAFB72FC8E29032D69B"
  paths:
  - pathId: "path1"
    testPathName: "findTypeWhenMappingsIsNotNull"
    modelFingerprint: "7404D7002BAED46F8B3D1667061B2D2B"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "classLoader"
      modelFingerprint: "C286DE215DE7563ED1CD0033A63BD833"
      valueUuid: "classLoader"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0247C7F43438234010D19265E7D667AD"
      valueUuid: "class"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.springframework.boot.jdbc.DataSourceBuilder$MappedDataSourceProperties.forType(java.lang.ClassLoader,null)\
        \ : org.springframework.boot.jdbc.DataSourceBuilder$MappedDataSourceProperties"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "CLASS"
      content: !<regular>
        value: "? extends javax.sql.DataSource"
      valueType: "java.lang.Class"
      genericValueType: "? extends javax.sql.DataSource"
      uuid: "class"
    branches:
    - lineNumber: 267
      expression: "mappings != null"
      range: "(267,11)-(267,26)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "findTypeWhenMappingsIsNull"
    modelFingerprint: "DE62E9238BBF4924027134BEDA8523BD"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "classLoader"
      modelFingerprint: "C286DE215DE7563ED1CD0033A63BD833"
      valueUuid: "classLoader"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "678BB11625E55BFD3C8DABEA02107DA0"
      valueUuid: "class"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.springframework.boot.jdbc.DataSourceBuilder$MappedDataSourceProperties.forType(java.lang.ClassLoader,null)\
        \ : org.springframework.boot.jdbc.DataSourceBuilder$MappedDataSourceProperties"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "NULL"
      valueType: "java.lang.Class"
      uuid: "class"
      fixed: true
    branches:
    - lineNumber: 267
      expression: "mappings != null"
      range: "(267,11)-(267,26)"
      evaluatedAs: false
