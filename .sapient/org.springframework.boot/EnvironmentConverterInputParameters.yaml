---
modelFingerprint: "6D2A81DA7D9D36FA0EB27B7F42DEF840"
targetClass:
  fullClassName: "org.springframework.boot.EnvironmentConverter"
methods:
- method:
    name: "convertEnvironmentIfNecessary"
    sourceCodeSignature: "ConfigurableEnvironment convertEnvironmentIfNecessary(ConfigurableEnvironment\
      \ environment, Class<? extends ConfigurableEnvironment> type)"
    returnType: "org.springframework.core.env.ConfigurableEnvironment"
    parameters:
    - name: "environment"
      type: "org.springframework.core.env.ConfigurableEnvironment"
    - name: "type"
      type: "java.lang.Class"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Throwable"
    instructionFingerprint: "3E96F1630A96C658C863465533C364E1"
  paths:
  - pathId: "path1"
    testPathName: "convertEnvironmentIfNecessaryWhenTypeEqualsEnvironmentGetClass"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "EC89E86F0EE29612581E10C8AB7E349B"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "3F73E3E0E26E26EEEFAD4DD95D3AE3D4"
      valueUuid: "environment"
    - type: "INPUT"
      name: "type"
      modelFingerprint: "4EF713F58F6916F413AEC685B3553EF6"
      valueUuid: "type"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "33DE3A090EDDEB9C530F23F2A79FFBC9"
      valueUuid: "environment"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.equals(java.lang.Class<?>) : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.EnvironmentConverter"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.EnvironmentConverter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "CLASS"
      content: !<regular>
        value: "? extends org.springframework.core.env.ConfigurableEnvironment"
      valueType: "java.lang.Class"
      genericValueType: "? extends org.springframework.core.env.ConfigurableEnvironment"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    branches:
    - lineNumber: 75
      expression: "type.equals(environment.getClass())"
      range: "(75,7)-(75,41)"
      evaluatedAs: true
  - pathId: "path7"
    testPathName: "convertEnvironmentIfNecessaryWhenNamesIsEmptyAndSourceGetPropertySourcesIsEmpty"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "2BD7226DFC3F04B7F3D4570FE875B0DD"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "2AB40C7309B23844284816875A86BEFD"
      valueUuid: "environment"
    - type: "INPUT"
      name: "type"
      modelFingerprint: "4EF713F58F6916F413AEC685B3553EF6"
      valueUuid: "type"
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "3E7A95529F8A1969025D8152584C67CE"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "makeAccessible(ctor:constructor):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "6E5EFFB4CF18630B9AB902DA8F71B694"
      valueUuid: "environment"
      methodExercised:
        expression: "getActiveProfiles():stringArray"
    - type: "LOCAL_VARIABLE"
      name: "result"
      modelFingerprint: "E0CED6ACB80BA5A03EF365FC76D47307"
      valueUuid: "object"
      methodExercised:
        expression: "setActiveProfiles(profiles:stringArray):void2"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "F96CDDE722C90C4B5B7B722CC448FACB"
      valueUuid: "environment"
      methodExercised:
        expression: "getConversionService():configurableConversionService"
    - type: "LOCAL_VARIABLE"
      name: "result"
      modelFingerprint: "9F35E5BCFDF0DD0D1A603D20F7A670BC"
      valueUuid: "object"
      methodExercised:
        expression: "setConversionService(conversionService:configurableConversionService):void3"
    - type: "LOCAL_VARIABLE"
      name: "target"
      modelFingerprint: "16FE4C91101DED2570BF0D4C7026DF71"
      valueUuid: "object"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "5A72281E673EBC86C8B545C8092A5D8B"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "forName(name:uniqueUuid1,classLoader:classLoader):class3"
        throwsExceptions:
        - "java.lang.ClassNotFoundException"
        - "java.lang.LinkageError"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "propertySources"
      modelFingerprint: "810B8F7BF7D8A192F16D21E395FFAA75"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "iterator():iterator"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "E97B1B215647A456976BAD20E92F84F8"
      valueUuid: "environment"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources2"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "810B8F7BF7D8A192F16D21E395FFAA75"
      valueUuid: "mutablePropertySources2"
      methodExercised:
        expression: "iterator():iterator3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "DC1BB77034D516E13FB3B55A50401FEF"
      valueUuid: "object"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.equals(java.lang.Class<?>) : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.EnvironmentConverter"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.EnvironmentConverter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "CLASS"
      content: !<regular>
        value: "? extends org.springframework.core.env.ConfigurableEnvironment"
      valueType: "java.lang.Class"
      genericValueType: "? extends org.springframework.core.env.ConfigurableEnvironment"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.lang.reflect.Constructor"
      uuid: "constructor"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.support.ConfigurableConversionService"
      uuid: "configurableConversionService"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.support.ConfigurableConversionService"
      uuid: "configurableConversionService"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.web.context.ConfigurableWebEnvironment"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            parameters: []
            values: []
          valueType: "java.util.List"
          genericValueType: "org.springframework.core.env.PropertySource<?>"
          uuid: "iterator-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "org.springframework.core.env.PropertySource<?>"
      uuid: "iterator"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources2"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            parameters: []
            values: []
          valueType: "java.util.List"
          genericValueType: "org.springframework.core.env.PropertySource<?>"
          uuid: "iterator3-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "org.springframework.core.env.PropertySource<?>"
      uuid: "iterator3"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "object"
      explicitCastNeeded: true
    branches:
    - lineNumber: 75
      expression: "type.equals(environment.getClass())"
      range: "(75,7)-(75,41)"
      evaluatedAs: false
    - lineNumber: 113
      expression: "webEnvironmentClass.isAssignableFrom(conversionType)"
      range: "(113,11)-(113,62)"
      evaluatedAs: false
      internalMethodName: "isServletEnvironment"
    - lineNumber: 122
      expression: "for-each(propertySources)"
      range: "(122,43)-(122,57)"
      evaluatedAs: false
      internalMethodName: "removePropertySources"
    - lineNumber: 125
      expression: "for-each(names)"
      range: "(125,22)-(125,26)"
      evaluatedAs: false
      internalMethodName: "removePropertySources"
    - lineNumber: 103
      expression: "for-each(source.getPropertySources())"
      range: "(103,43)-(103,69)"
      evaluatedAs: false
      internalMethodName: "copyPropertySources"
  - pathId: "path9"
    testPathName: "convertEnvironmentIfNecessaryWhenSERVLET_ENVIRONMENT_SOURCE_NAMESNotContainsPropertySourceGetName"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "D756E69424BB6D5061A468BFCC40F5D0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "2AB40C7309B23844284816875A86BEFD"
      valueUuid: "environment"
    - type: "INPUT"
      name: "type"
      modelFingerprint: "4EF713F58F6916F413AEC685B3553EF6"
      valueUuid: "type"
    - type: "LOCAL_VARIABLE"
      name: "type"
      modelFingerprint: "1DDA51B0448D35BABB95D6E3143D3399"
      valueUuid: "type"
      methodExercised:
        expression: "getDeclaredConstructor(parameterTypes:classArray):constructor"
        throwsExceptions:
        - "java.lang.NoSuchMethodException"
        - "java.lang.SecurityException"
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "3E7A95529F8A1969025D8152584C67CE"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "makeAccessible(ctor:constructor):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "constructor"
      modelFingerprint: "C07AA26EDBD5199F915B9DC588348E11"
      valueUuid: "constructor"
      methodExercised:
        expression: "newInstance(initargs:objectArray):object"
        throwsExceptions:
        - "java.lang.InstantiationException"
        - "java.lang.IllegalAccessException"
        - "java.lang.IllegalArgumentException"
        - "java.lang.reflect.InvocationTargetException"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "2B745693B0FF45D6184B7B9007248D5A"
      valueUuid: "environment"
      methodExercised:
        expression: "getActiveProfiles():stringArray"
    - type: "LOCAL_VARIABLE"
      name: "result"
      modelFingerprint: "056DA8F62C27154C4F370AC9499C2D4A"
      valueUuid: "applicationEnvironment"
      methodExercised:
        expression: "setActiveProfiles(profiles:stringArray):void2"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "F96CDDE722C90C4B5B7B722CC448FACB"
      valueUuid: "environment"
      methodExercised:
        expression: "getConversionService():configurableConversionService"
    - type: "LOCAL_VARIABLE"
      name: "result"
      modelFingerprint: "0A5DCD1CEB5FFDD963F22FBFBE5EC704"
      valueUuid: "applicationEnvironment"
      methodExercised:
        expression: "setConversionService(conversionService:configurableConversionService):void3"
    - type: "LOCAL_VARIABLE"
      name: "target"
      modelFingerprint: "AAA47A72E96AECFDA58C4B53AD73DD29"
      valueUuid: "applicationEnvironment"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "5A72281E673EBC86C8B545C8092A5D8B"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "forName(name:uniqueUuid2,classLoader:classLoader):class3"
        throwsExceptions:
        - "java.lang.ClassNotFoundException"
        - "java.lang.LinkageError"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "propertySources"
      modelFingerprint: "D0B37CF14773F15D20016FCB8FDF69B6"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "iterator():iterator"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "E97B1B215647A456976BAD20E92F84F8"
      valueUuid: "environment"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources2"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "3B4F07CC6961480CB59832F8AA7D40EA"
      valueUuid: "mutablePropertySources2"
      methodExercised:
        expression: "iterator():iterator3"
    - type: "LOCAL_VARIABLE"
      name: "propertySource"
      modelFingerprint: "EACCCD4C6AEFCEC7C0F9171E74069A7E"
      valueUuid: "object2"
      methodExercised:
        expression: "getName():name"
    - type: "LOCAL_VARIABLE"
      name: "target"
      modelFingerprint: "AAA47A72E96AECFDA58C4B53AD73DD29"
      valueUuid: "applicationEnvironment"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources3"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "D6E507B6E2D36B340ED1AFD7DA35A2F9"
      valueUuid: "mutablePropertySources3"
      methodExercised:
        expression: "addLast(propertySource:object2):void4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "DED0D597E096A98818F8986CBFEC0666"
      valueUuid: "applicationEnvironment"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.equals(java.lang.Class<?>) : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.EnvironmentConverter"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.EnvironmentConverter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "CLASS"
      content: !<regular>
        value: "? extends org.springframework.core.env.ConfigurableEnvironment"
      valueType: "java.lang.Class"
      genericValueType: "? extends org.springframework.core.env.ConfigurableEnvironment"
      uuid: "type"
    - sapientType: "CLASS"
      content: !<regular>
        value: "? extends org.springframework.core.env.ConfigurableEnvironment"
      valueType: "java.lang.Class"
      genericValueType: "? extends org.springframework.core.env.ConfigurableEnvironment"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "java.lang.reflect.Constructor"
      uuid: "constructor"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Class[]"
      uuid: "classArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.lang.reflect.Constructor"
      uuid: "constructor"
    - sapientType: "MOCK"
      valueType: "java.lang.reflect.Constructor"
      uuid: "constructor"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Object[]"
      uuid: "objectArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ApplicationEnvironment"
        parameters: []
      valueType: "org.springframework.boot.ApplicationEnvironment"
      uuid: "applicationEnvironment"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.support.ConfigurableConversionService"
      uuid: "configurableConversionService"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ApplicationEnvironment"
        parameters: []
      valueType: "org.springframework.boot.ApplicationEnvironment"
      uuid: "applicationEnvironment"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.support.ConfigurableConversionService"
      uuid: "configurableConversionService"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ApplicationEnvironment"
        parameters: []
      valueType: "org.springframework.boot.ApplicationEnvironment"
      uuid: "applicationEnvironment"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.core.env.MutablePropertySources"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.ApplicationEnvironment"
            parameters: []
          valueType: "org.springframework.boot.ApplicationEnvironment"
          uuid: "applicationEnvironment"
          fixed: true
        methodParameters: []
        methodName: "getPropertySources"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.web.context.ConfigurableWebEnvironment"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.core.env.MutablePropertySources"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.ApplicationEnvironment"
            parameters: []
          valueType: "org.springframework.boot.ApplicationEnvironment"
          uuid: "applicationEnvironment"
          fixed: true
        methodParameters: []
        methodName: "getPropertySources"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.Iterator"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<method_return_from_value>
            target: "org.springframework.core.env.MutablePropertySources"
            localVariableValue:
              sapientType: "OBJECT"
              content: !<new>
                target: "org.springframework.boot.ApplicationEnvironment"
                parameters: []
              valueType: "org.springframework.boot.ApplicationEnvironment"
              uuid: "applicationEnvironment"
              fixed: true
            methodParameters: []
            methodName: "getPropertySources"
          valueType: "org.springframework.core.env.MutablePropertySources"
          uuid: "mutablePropertySources"
        methodParameters: []
        methodName: "iterator"
      valueType: "java.util.Iterator"
      genericValueType: "org.springframework.core.env.PropertySource<?>"
      uuid: "iterator"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources2"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            collectionClass: "java.util.ArrayList"
            parameters: []
            values:
            - sapientType: "OBJECT"
              content: !<static_method_return>
                target: "org.springframework.core.env.PropertySource"
                method: "named"
                methodParameters:
                - name: "name"
                  value:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: ""
                    valueType: "java.lang.String"
                    uuid: "name"
              valueType: "org.springframework.core.env.PropertySource"
              uuid: "object2"
              collectionUuid: "iterator3-CollectionContent"
          valueType: "java.util.List"
          genericValueType: "org.springframework.core.env.PropertySource<?>"
          uuid: "iterator3-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "org.springframework.core.env.PropertySource<?>"
      uuid: "iterator3"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.env.PropertySource"
        method: "named"
        methodParameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "name"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "object2"
      collectionUuid: "iterator3-CollectionContent"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ApplicationEnvironment"
        parameters: []
      valueType: "org.springframework.boot.ApplicationEnvironment"
      uuid: "applicationEnvironment"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.core.env.MutablePropertySources"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.ApplicationEnvironment"
            parameters: []
          valueType: "org.springframework.boot.ApplicationEnvironment"
          uuid: "applicationEnvironment"
          fixed: true
        methodParameters: []
        methodName: "getPropertySources"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources3"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.core.env.MutablePropertySources"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.ApplicationEnvironment"
            parameters: []
          valueType: "org.springframework.boot.ApplicationEnvironment"
          uuid: "applicationEnvironment"
          fixed: true
        methodParameters: []
        methodName: "getPropertySources"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources3"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.env.PropertySource"
        method: "named"
        methodParameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "name"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "object2"
      collectionUuid: "iterator3-CollectionContent"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ApplicationEnvironment"
        parameters: []
      valueType: "org.springframework.boot.ApplicationEnvironment"
      uuid: "applicationEnvironment"
      fixed: true
    branches:
    - lineNumber: 75
      expression: "type.equals(environment.getClass())"
      range: "(75,7)-(75,41)"
      evaluatedAs: false
    - lineNumber: 96
      expression: "catch-exception (Exception)"
      range: "(96,3)-(96,21)"
      evaluatedAs: true
      internalMethodName: "createEnvironment"
    - lineNumber: 113
      expression: "webEnvironmentClass.isAssignableFrom(conversionType)"
      range: "(113,11)-(113,62)"
      evaluatedAs: false
      internalMethodName: "isServletEnvironment"
    - lineNumber: 122
      expression: "for-each(propertySources)"
      range: "(122,43)-(122,57)"
      evaluatedAs: false
      internalMethodName: "removePropertySources"
    - lineNumber: 125
      expression: "for-each(names)"
      range: "(125,22)-(125,26)"
      evaluatedAs: false
      internalMethodName: "removePropertySources"
    - lineNumber: 103
      expression: "for-each(source.getPropertySources())"
      range: "(103,43)-(103,69)"
      evaluatedAs: true
      internalMethodName: "copyPropertySources"
    - lineNumber: 104
      expression: "!SERVLET_ENVIRONMENT_SOURCE_NAMES.contains(propertySource.getName())"
      range: "(104,8)-(104,75)"
      evaluatedAs: true
      internalMethodName: "copyPropertySources"
    catchBlockExercised:
      idExternalInstruction: 4
      id: 1
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path8"
    testPathName: "convertEnvironmentIfNecessaryWhenSourceGetPropertySourcesIsNotEmptyAndSERVLET_ENVIRONMENT_SOURCE_NAMESNotContainsProper"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "C1905D60A0798132BD4A0BB7E8DAECA4"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "2AB40C7309B23844284816875A86BEFD"
      valueUuid: "environment"
    - type: "INPUT"
      name: "type"
      modelFingerprint: "4EF713F58F6916F413AEC685B3553EF6"
      valueUuid: "type"
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "3E7A95529F8A1969025D8152584C67CE"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "makeAccessible(ctor:constructor):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "6E5EFFB4CF18630B9AB902DA8F71B694"
      valueUuid: "environment"
      methodExercised:
        expression: "getActiveProfiles():stringArray"
    - type: "LOCAL_VARIABLE"
      name: "result"
      modelFingerprint: "E0CED6ACB80BA5A03EF365FC76D47307"
      valueUuid: "object"
      methodExercised:
        expression: "setActiveProfiles(profiles:stringArray):void2"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "F96CDDE722C90C4B5B7B722CC448FACB"
      valueUuid: "environment"
      methodExercised:
        expression: "getConversionService():configurableConversionService"
    - type: "LOCAL_VARIABLE"
      name: "result"
      modelFingerprint: "9F35E5BCFDF0DD0D1A603D20F7A670BC"
      valueUuid: "object"
      methodExercised:
        expression: "setConversionService(conversionService:configurableConversionService):void3"
    - type: "LOCAL_VARIABLE"
      name: "target"
      modelFingerprint: "16FE4C91101DED2570BF0D4C7026DF71"
      valueUuid: "object"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "5A72281E673EBC86C8B545C8092A5D8B"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "forName(name:uniqueUuid3,classLoader:classLoader):class3"
        throwsExceptions:
        - "java.lang.ClassNotFoundException"
        - "java.lang.LinkageError"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "propertySources"
      modelFingerprint: "3B4F07CC6961480CB59832F8AA7D40EA"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "iterator():iterator"
    - type: "LOCAL_VARIABLE"
      name: "propertySource"
      modelFingerprint: "EACCCD4C6AEFCEC7C0F9171E74069A7E"
      valueUuid: "object2"
      methodExercised:
        expression: "getName():name"
    - type: "LOCAL_VARIABLE"
      name: "propertySources"
      modelFingerprint: "ED4508E8DA8C1321E00768A6B7B54E93"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "remove(name:name):propertySource"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "E97B1B215647A456976BAD20E92F84F8"
      valueUuid: "environment"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources2"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "88BB3143949E94E671750B037F3643E2"
      valueUuid: "mutablePropertySources2"
      methodExercised:
        expression: "iterator():iterator3"
    - type: "LOCAL_VARIABLE"
      name: "propertySource"
      modelFingerprint: "C0D7D8C3405870FFD1AC430258167BFF"
      valueUuid: "object4"
      methodExercised:
        expression: "getName():name2"
    - type: "LOCAL_VARIABLE"
      name: "target"
      modelFingerprint: "16FE4C91101DED2570BF0D4C7026DF71"
      valueUuid: "object"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources3"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "5109F016E14669B1D3F68407912E7552"
      valueUuid: "mutablePropertySources3"
      methodExercised:
        expression: "addLast(propertySource:object4):void4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "DC1BB77034D516E13FB3B55A50401FEF"
      valueUuid: "object"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.equals(java.lang.Class<?>) : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.EnvironmentConverter"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.EnvironmentConverter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "CLASS"
      content: !<regular>
        value: "? extends org.springframework.core.env.ConfigurableEnvironment"
      valueType: "java.lang.Class"
      genericValueType: "? extends org.springframework.core.env.ConfigurableEnvironment"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.lang.reflect.Constructor"
      uuid: "constructor"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.support.ConfigurableConversionService"
      uuid: "configurableConversionService"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.support.ConfigurableConversionService"
      uuid: "configurableConversionService"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.web.context.ConfigurableWebEnvironment"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            collectionClass: "java.util.ArrayList"
            parameters: []
            values:
            - sapientType: "OBJECT"
              content: !<static_method_return>
                target: "org.springframework.core.env.PropertySource"
                method: "named"
                methodParameters:
                - name: "name"
                  value:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "name1"
                    valueType: "java.lang.String"
                    uuid: "name"
              valueType: "org.springframework.core.env.PropertySource"
              uuid: "object2"
              collectionUuid: "iterator-CollectionContent"
          valueType: "java.util.List"
          genericValueType: "org.springframework.core.env.PropertySource<?>"
          uuid: "iterator-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "org.springframework.core.env.PropertySource<?>"
      uuid: "iterator"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.env.PropertySource"
        method: "named"
        methodParameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "name1"
            valueType: "java.lang.String"
            uuid: "name"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "object2"
      collectionUuid: "iterator-CollectionContent"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
      collectionUuid: "hashSet2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
      collectionUuid: "hashSet2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources2"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            collectionClass: "java.util.ArrayList"
            parameters: []
            values:
            - sapientType: "OBJECT"
              content: !<static_method_return>
                target: "org.springframework.core.env.PropertySource"
                method: "named"
                methodParameters:
                - name: "name"
                  value:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "A"
                    valueType: "java.lang.String"
                    uuid: "name2"
              valueType: "org.springframework.core.env.PropertySource"
              uuid: "object4"
              collectionUuid: "iterator3-CollectionContent"
          valueType: "java.util.List"
          genericValueType: "org.springframework.core.env.PropertySource<?>"
          uuid: "iterator3-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "org.springframework.core.env.PropertySource<?>"
      uuid: "iterator3"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.env.PropertySource"
        method: "named"
        methodParameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name2"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "object4"
      collectionUuid: "iterator3-CollectionContent"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources3"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources3"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.env.PropertySource"
        method: "named"
        methodParameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name2"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "object4"
      collectionUuid: "iterator3-CollectionContent"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "object"
      explicitCastNeeded: true
    branches:
    - lineNumber: 75
      expression: "type.equals(environment.getClass())"
      range: "(75,7)-(75,41)"
      evaluatedAs: false
    - lineNumber: 115
      expression: "catch-exception (Throwable)"
      range: "(115,3)-(115,21)"
      evaluatedAs: true
      internalMethodName: "isServletEnvironment"
    - lineNumber: 122
      expression: "for-each(propertySources)"
      range: "(122,43)-(122,57)"
      evaluatedAs: true
      internalMethodName: "removePropertySources"
    - lineNumber: 125
      expression: "for-each(names)"
      range: "(125,22)-(125,26)"
      evaluatedAs: true
      internalMethodName: "removePropertySources"
    - lineNumber: 126
      expression: "!isServletEnvironment"
      range: "(126,8)-(126,28)"
      evaluatedAs: true
      internalMethodName: "removePropertySources"
    - lineNumber: 103
      expression: "for-each(source.getPropertySources())"
      range: "(103,43)-(103,69)"
      evaluatedAs: true
      internalMethodName: "copyPropertySources"
    - lineNumber: 104
      expression: "!SERVLET_ENVIRONMENT_SOURCE_NAMES.contains(propertySource.getName())"
      range: "(104,8)-(104,75)"
      evaluatedAs: true
      internalMethodName: "copyPropertySources"
    catchBlockExercised:
      idExternalInstruction: 10
      id: 2
      catchExceptions:
      - "java.lang.Throwable"
  - pathId: "path2"
    testPathName: "convertEnvironmentIfNecessaryWhenSourceGetPropertySourcesIsNotEmptyAndSERVLET_ENVIRONMENT_SOURCE_NAMESNotContainsProper2"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "2A00C06B3CE2C074E5DAAF416652ADC6"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "2AB40C7309B23844284816875A86BEFD"
      valueUuid: "environment"
    - type: "INPUT"
      name: "type"
      modelFingerprint: "4EF713F58F6916F413AEC685B3553EF6"
      valueUuid: "type"
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "3E7A95529F8A1969025D8152584C67CE"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "makeAccessible(ctor:constructor):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "6E5EFFB4CF18630B9AB902DA8F71B694"
      valueUuid: "environment"
      methodExercised:
        expression: "getActiveProfiles():stringArray"
    - type: "LOCAL_VARIABLE"
      name: "result"
      modelFingerprint: "E0CED6ACB80BA5A03EF365FC76D47307"
      valueUuid: "object"
      methodExercised:
        expression: "setActiveProfiles(profiles:stringArray):void2"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "F96CDDE722C90C4B5B7B722CC448FACB"
      valueUuid: "environment"
      methodExercised:
        expression: "getConversionService():configurableConversionService"
    - type: "LOCAL_VARIABLE"
      name: "result"
      modelFingerprint: "9F35E5BCFDF0DD0D1A603D20F7A670BC"
      valueUuid: "object"
      methodExercised:
        expression: "setConversionService(conversionService:configurableConversionService):void3"
    - type: "LOCAL_VARIABLE"
      name: "target"
      modelFingerprint: "16FE4C91101DED2570BF0D4C7026DF71"
      valueUuid: "object"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "5A72281E673EBC86C8B545C8092A5D8B"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "forName(name:uniqueUuid4,classLoader:classLoader):class3"
        throwsExceptions:
        - "java.lang.ClassNotFoundException"
        - "java.lang.LinkageError"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "propertySources"
      modelFingerprint: "88BB3143949E94E671750B037F3643E2"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "iterator():iterator"
    - type: "LOCAL_VARIABLE"
      name: "propertySource"
      modelFingerprint: "C0D7D8C3405870FFD1AC430258167BFF"
      valueUuid: "object2"
      methodExercised:
        expression: "getName():name"
    - type: "LOCAL_VARIABLE"
      name: "propertySources"
      modelFingerprint: "0DD7EB787D655690C3C136B0B7278F9B"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "remove(name:name):propertySource"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "E97B1B215647A456976BAD20E92F84F8"
      valueUuid: "environment"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources2"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "159725025C17C08CE0E48DC7C72A7BA8"
      valueUuid: "mutablePropertySources2"
      methodExercised:
        expression: "iterator():iterator3"
    - type: "LOCAL_VARIABLE"
      name: "propertySource"
      modelFingerprint: "282EEE8C32126E42B07CFBB266E9DBF1"
      valueUuid: "object4"
      methodExercised:
        expression: "getName():name2"
    - type: "LOCAL_VARIABLE"
      name: "target"
      modelFingerprint: "16FE4C91101DED2570BF0D4C7026DF71"
      valueUuid: "object"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources3"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "5557C19C5C8A8871F7948FE3BDE3B6C0"
      valueUuid: "mutablePropertySources3"
      methodExercised:
        expression: "addLast(propertySource:object4):void4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "DC1BB77034D516E13FB3B55A50401FEF"
      valueUuid: "object"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.equals(java.lang.Class<?>) : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.EnvironmentConverter"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.EnvironmentConverter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "CLASS"
      content: !<regular>
        value: "? extends org.springframework.core.env.ConfigurableEnvironment"
      valueType: "java.lang.Class"
      genericValueType: "? extends org.springframework.core.env.ConfigurableEnvironment"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.lang.reflect.Constructor"
      uuid: "constructor"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.support.ConfigurableConversionService"
      uuid: "configurableConversionService"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.support.ConfigurableConversionService"
      uuid: "configurableConversionService"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.web.context.ConfigurableWebEnvironment"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            collectionClass: "java.util.ArrayList"
            parameters: []
            values:
            - sapientType: "OBJECT"
              content: !<static_method_return>
                target: "org.springframework.core.env.PropertySource"
                method: "named"
                methodParameters:
                - name: "name"
                  value:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "A"
                    valueType: "java.lang.String"
                    uuid: "name"
              valueType: "org.springframework.core.env.PropertySource"
              uuid: "object2"
              collectionUuid: "iterator-CollectionContent"
          valueType: "java.util.List"
          genericValueType: "org.springframework.core.env.PropertySource<?>"
          uuid: "iterator-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "org.springframework.core.env.PropertySource<?>"
      uuid: "iterator"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.env.PropertySource"
        method: "named"
        methodParameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "object2"
      collectionUuid: "iterator-CollectionContent"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name"
      collectionUuid: "hashSet2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name"
      collectionUuid: "hashSet2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources2"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            collectionClass: "java.util.ArrayList"
            parameters: []
            values:
            - sapientType: "OBJECT"
              content: !<static_method_return>
                target: "org.springframework.core.env.PropertySource"
                method: "named"
                methodParameters:
                - name: "name"
                  value:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "B"
                    valueType: "java.lang.String"
                    uuid: "name2"
              valueType: "org.springframework.core.env.PropertySource"
              uuid: "object4"
              collectionUuid: "iterator3-CollectionContent"
          valueType: "java.util.List"
          genericValueType: "org.springframework.core.env.PropertySource<?>"
          uuid: "iterator3-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "org.springframework.core.env.PropertySource<?>"
      uuid: "iterator3"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.env.PropertySource"
        method: "named"
        methodParameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "B"
            valueType: "java.lang.String"
            uuid: "name2"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "object4"
      collectionUuid: "iterator3-CollectionContent"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources3"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources3"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.env.PropertySource"
        method: "named"
        methodParameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "B"
            valueType: "java.lang.String"
            uuid: "name2"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "object4"
      collectionUuid: "iterator3-CollectionContent"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "object"
      explicitCastNeeded: true
    branches:
    - lineNumber: 75
      expression: "type.equals(environment.getClass())"
      range: "(75,7)-(75,41)"
      evaluatedAs: false
    - lineNumber: 113
      expression: "webEnvironmentClass.isAssignableFrom(conversionType)"
      range: "(113,11)-(113,62)"
      evaluatedAs: true
      internalMethodName: "isServletEnvironment"
    - lineNumber: 122
      expression: "for-each(propertySources)"
      range: "(122,43)-(122,57)"
      evaluatedAs: true
      internalMethodName: "removePropertySources"
    - lineNumber: 125
      expression: "for-each(names)"
      range: "(125,22)-(125,26)"
      evaluatedAs: true
      internalMethodName: "removePropertySources"
    - lineNumber: 126
      expression: "!isServletEnvironment"
      range: "(126,8)-(126,28)"
      evaluatedAs: false
      internalMethodName: "removePropertySources"
    - lineNumber: 126
      expression: "!SERVLET_ENVIRONMENT_SOURCE_NAMES.contains(name)"
      range: "(126,33)-(126,80)"
      evaluatedAs: true
      internalMethodName: "removePropertySources"
    - lineNumber: 103
      expression: "for-each(source.getPropertySources())"
      range: "(103,43)-(103,69)"
      evaluatedAs: true
      internalMethodName: "copyPropertySources"
    - lineNumber: 104
      expression: "!SERVLET_ENVIRONMENT_SOURCE_NAMES.contains(propertySource.getName())"
      range: "(104,8)-(104,75)"
      evaluatedAs: true
      internalMethodName: "copyPropertySources"
