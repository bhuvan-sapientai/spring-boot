---
modelFingerprint: "4B3776CA4443DE1385FE4F0A69B6D362"
targetClass:
  fullClassName: "org.springframework.boot.BeanDefinitionLoader"
methods:
- method:
    name: "setBeanNameGenerator"
    sourceCodeSignature: "void setBeanNameGenerator(BeanNameGenerator beanNameGenerator)"
    returnType: "void"
    parameters:
    - name: "beanNameGenerator"
      type: "org.springframework.beans.factory.support.BeanNameGenerator"
    instructionFingerprint: "88D5C9C3E0E59F35FD4946218DD0BA16"
  paths:
  - pathId: "path1"
    testPathName: "setBeanNameGeneratorTest"
    constructorSignature: "<init>(org.springframework.beans.factory.support.BeanDefinitionRegistry,java.lang.Object[])\
      \ : void"
    modelFingerprint: "A7E39C50ACEE09EC41EDFBC8B9039920"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "E51F23D724FABD7A0DC177A3329D481C"
      valueUuid: "target"
    - type: "INPUT"
      name: "beanNameGenerator"
      modelFingerprint: "A020F8D68254D7AA4F4AF4990A153E4C"
      valueUuid: "beanNameGenerator"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "162F5971AE79346A27E9CCA7B16AE8CA"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:registry,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "DF47D37BD194BA9715E305262ADA01E5"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notEmpty(array:sources,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "2F1A5D2395CDD9571A8BA994054F1236"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid3,classLoader:uniqueUuid4):boolean1"
        staticAccess: true
    - type: "FIELD"
      name: "scanner"
      modelFingerprint: "5C9D3BBD5A8DDA8F029E561FFE650364"
      valueUuid: "classPathBeanDefinitionScanner"
      methodExercised:
        expression: "addExcludeFilter(excludeFilter:typeFilter):void3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_UNFILLED_PARAMS"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.BeanDefinitionLoader"
        parameters:
        - name: "registry"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
            uuid: "registry"
        - name: "sources"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.Object[]"
            uuid: "sources"
      valueType: "org.springframework.boot.BeanDefinitionLoader"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.support.BeanNameGenerator"
      uuid: "beanNameGenerator"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
      uuid: "registry"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Registry must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Object[]"
      uuid: "sources"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Sources must not be empty"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "groovy.lang.MetaClass"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid4"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.context.annotation.ClassPathBeanDefinitionScanner"
        parameters:
        - name: "registry"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
            uuid: "registry"
        propertiesMap:
          beanNameGenerator:
            sapientType: "MOCK"
            valueType: "org.springframework.beans.factory.support.BeanNameGenerator"
            uuid: "beanNameGenerator"
      valueType: "org.springframework.context.annotation.ClassPathBeanDefinitionScanner"
      uuid: "classPathBeanDefinitionScanner"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.core.type.filter.TypeFilter"
      uuid: "typeFilter"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "setResourceLoader"
    sourceCodeSignature: "void setResourceLoader(ResourceLoader resourceLoader)"
    returnType: "void"
    parameters:
    - name: "resourceLoader"
      type: "org.springframework.core.io.ResourceLoader"
    instructionFingerprint: "68AC3B4E17E5A5ED863DA9F3A877BEFB"
  paths:
  - pathId: "path1"
    testPathName: "setResourceLoaderTest"
    constructorSignature: "<init>(org.springframework.beans.factory.support.BeanDefinitionRegistry,java.lang.Object[])\
      \ : void"
    modelFingerprint: "9533D7AA34A7D15E5034A558953BFD0D"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "E51F23D724FABD7A0DC177A3329D481C"
      valueUuid: "target"
    - type: "INPUT"
      name: "resourceLoader"
      modelFingerprint: "FDCEEEDB2A3FBA968DEEBF037704477E"
      valueUuid: "resourceLoader"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "162F5971AE79346A27E9CCA7B16AE8CA"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:registry,message:uniqueUuid5):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "DF47D37BD194BA9715E305262ADA01E5"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notEmpty(array:sources,message:uniqueUuid6):void2"
        staticAccess: true
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "2F1A5D2395CDD9571A8BA994054F1236"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid7,classLoader:uniqueUuid8):boolean1"
        staticAccess: true
    - type: "FIELD"
      name: "scanner"
      modelFingerprint: "5C9D3BBD5A8DDA8F029E561FFE650364"
      valueUuid: "classPathBeanDefinitionScanner"
      methodExercised:
        expression: "addExcludeFilter(excludeFilter:typeFilter):void3"
    - type: "FIELD"
      name: "scanner"
      modelFingerprint: "DD83FBB77702718DED5FE76B9AA95675"
      valueUuid: "classPathBeanDefinitionScanner"
      methodExercised:
        expression: "setResourceLoader(resourceLoader:resourceLoader):void4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_UNFILLED_PARAMS"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.BeanDefinitionLoader"
        parameters:
        - name: "registry"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
            uuid: "registry"
        - name: "sources"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.Object[]"
            uuid: "sources"
      valueType: "org.springframework.boot.BeanDefinitionLoader"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.ResourceLoader"
      uuid: "resourceLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
      uuid: "registry"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Registry must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Object[]"
      uuid: "sources"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Sources must not be empty"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "groovy.lang.MetaClass"
      valueType: "java.lang.String"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid8"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.context.annotation.ClassPathBeanDefinitionScanner"
        parameters:
        - name: "registry"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
            uuid: "registry"
      valueType: "org.springframework.context.annotation.ClassPathBeanDefinitionScanner"
      uuid: "classPathBeanDefinitionScanner"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.core.type.filter.TypeFilter"
      uuid: "typeFilter"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.context.annotation.ClassPathBeanDefinitionScanner"
        parameters:
        - name: "registry"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
            uuid: "registry"
      valueType: "org.springframework.context.annotation.ClassPathBeanDefinitionScanner"
      uuid: "classPathBeanDefinitionScanner"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.ResourceLoader"
      uuid: "resourceLoader"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "setEnvironment"
    sourceCodeSignature: "void setEnvironment(ConfigurableEnvironment environment)"
    returnType: "void"
    parameters:
    - name: "environment"
      type: "org.springframework.core.env.ConfigurableEnvironment"
    instructionFingerprint: "043B07F7F3E7A1E9EF285B29947C3B14"
  paths:
  - pathId: "path1"
    testPathName: "setEnvironmentTest"
    constructorSignature: "<init>(org.springframework.beans.factory.support.BeanDefinitionRegistry,java.lang.Object[])\
      \ : void"
    modelFingerprint: "E65458E85873506F97056B7ACAA98C53"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "E51F23D724FABD7A0DC177A3329D481C"
      valueUuid: "target"
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "3F73E3E0E26E26EEEFAD4DD95D3AE3D4"
      valueUuid: "environment"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "162F5971AE79346A27E9CCA7B16AE8CA"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:registry,message:uniqueUuid9):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "DF47D37BD194BA9715E305262ADA01E5"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notEmpty(array:sources,message:uniqueUuid10):void2"
        staticAccess: true
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "2F1A5D2395CDD9571A8BA994054F1236"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid11,classLoader:uniqueUuid12):boolean1"
        staticAccess: true
    - type: "FIELD"
      name: "scanner"
      modelFingerprint: "5C9D3BBD5A8DDA8F029E561FFE650364"
      valueUuid: "classPathBeanDefinitionScanner"
      methodExercised:
        expression: "addExcludeFilter(excludeFilter:typeFilter):void3"
    - type: "FIELD"
      name: "annotatedReader"
      modelFingerprint: "D961DA450B3569BF3B353806F25A7BD6"
      valueUuid: "annotatedBeanDefinitionReader"
      methodExercised:
        expression: "setEnvironment(environment:environment):void4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_UNFILLED_PARAMS"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.BeanDefinitionLoader"
        parameters:
        - name: "registry"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
            uuid: "registry"
        - name: "sources"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.Object[]"
            uuid: "sources"
      valueType: "org.springframework.boot.BeanDefinitionLoader"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
      uuid: "registry"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Registry must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Object[]"
      uuid: "sources"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Sources must not be empty"
      valueType: "java.lang.String"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "groovy.lang.MetaClass"
      valueType: "java.lang.String"
      uuid: "uniqueUuid11"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.context.annotation.ClassPathBeanDefinitionScanner"
        parameters:
        - name: "registry"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
            uuid: "registry"
        propertiesMap:
          environment:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.ConfigurableEnvironment"
            uuid: "environment"
      valueType: "org.springframework.context.annotation.ClassPathBeanDefinitionScanner"
      uuid: "classPathBeanDefinitionScanner"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.core.type.filter.TypeFilter"
      uuid: "typeFilter"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.context.annotation.AnnotatedBeanDefinitionReader"
        parameters:
        - name: "registry"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
            uuid: "registry"
      valueType: "org.springframework.context.annotation.AnnotatedBeanDefinitionReader"
      uuid: "annotatedBeanDefinitionReader"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "load"
    sourceCodeSignature: "void load()"
    returnType: "void"
    instructionFingerprint: "BA201168DF84498283E4A1AF02607FB1"
  paths:
  - pathId: "path1"
    testPathName: "loadWhenSourceInstanceOfClass_"
    constructorSignature: "<init>(org.springframework.beans.factory.support.BeanDefinitionRegistry,java.lang.Object[])\
      \ : void"
    modelFingerprint: "E65BCDC43CB662545968E96F3FD47A28"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "EDF5E1397D60D9133B0D8CE005D7000C"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "162F5971AE79346A27E9CCA7B16AE8CA"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:registry,message:uniqueUuid13):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "00F731878E2F75E020BE248C0DBE75EF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notEmpty(array:sources,message:uniqueUuid14):void2"
        staticAccess: true
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "2F1A5D2395CDD9571A8BA994054F1236"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid15,classLoader:uniqueUuid16):boolean1"
        staticAccess: true
    - type: "FIELD"
      name: "scanner"
      modelFingerprint: "5C9D3BBD5A8DDA8F029E561FFE650364"
      valueUuid: "classPathBeanDefinitionScanner"
      methodExercised:
        expression: "addExcludeFilter(excludeFilter:typeFilter):void3"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "F0E4A5F04CBCDD5D9275ECC3DC522AD0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:object,message:uniqueUuid17):void4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_UNFILLED_PARAMS"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.BeanDefinitionLoader"
        parameters:
        - name: "registry"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
            uuid: "registry"
        - name: "sources"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "CLASS"
                  content: !<regular>
                    value: "java.lang.Object"
                  valueType: "java.lang.Class"
                  uuid: "object"
            valueType: "java.lang.Object[]"
            uuid: "sources"
      valueType: "org.springframework.boot.BeanDefinitionLoader"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
      uuid: "registry"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Registry must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid13"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            uuid: "object"
      valueType: "java.lang.Object[]"
      uuid: "sources"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Sources must not be empty"
      valueType: "java.lang.String"
      uuid: "uniqueUuid14"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "groovy.lang.MetaClass"
      valueType: "java.lang.String"
      uuid: "uniqueUuid15"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid16"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.context.annotation.ClassPathBeanDefinitionScanner"
        parameters:
        - name: "registry"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
            uuid: "registry"
      valueType: "org.springframework.context.annotation.ClassPathBeanDefinitionScanner"
      uuid: "classPathBeanDefinitionScanner"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.core.type.filter.TypeFilter"
      uuid: "typeFilter"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid17"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 128
      expression: "for-each(this.sources)"
      range: "(128,24)-(128,35)"
      evaluatedAs: true
    - lineNumber: 135
      expression: "source instanceof Class<?> clazz"
      range: "(135,7)-(135,38)"
      evaluatedAs: true
      internalMethodName: "load"
  - pathId: "path2"
    testPathName: "loadWhenSourceInstanceOfResource"
    constructorSignature: "<init>(org.springframework.beans.factory.support.BeanDefinitionRegistry,java.lang.Object[])\
      \ : void"
    modelFingerprint: "8161B34E8C1A450168341265D32628D0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "640F17E2FD9AEF5280A1BBCC513568DB"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "162F5971AE79346A27E9CCA7B16AE8CA"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:registry,message:uniqueUuid18):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "7A3B78A0F1B025529ACF83D0F8CA84C3"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notEmpty(array:sources,message:uniqueUuid19):void2"
        staticAccess: true
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "2F1A5D2395CDD9571A8BA994054F1236"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid20,classLoader:uniqueUuid21):boolean1"
        staticAccess: true
    - type: "FIELD"
      name: "scanner"
      modelFingerprint: "5C9D3BBD5A8DDA8F029E561FFE650364"
      valueUuid: "classPathBeanDefinitionScanner"
      methodExercised:
        expression: "addExcludeFilter(excludeFilter:typeFilter):void3"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A03A70433BB384077FC0BA9842C22A60"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:object,message:uniqueUuid22):void4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_UNFILLED_PARAMS"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.BeanDefinitionLoader"
        parameters:
        - name: "registry"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
            uuid: "registry"
        - name: "sources"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "MOCK"
                  valueType: "org.springframework.core.io.Resource"
                  uuid: "object"
            valueType: "java.lang.Object[]"
            uuid: "sources"
      valueType: "org.springframework.boot.BeanDefinitionLoader"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
      uuid: "registry"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Registry must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid18"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "object"
      valueType: "java.lang.Object[]"
      uuid: "sources"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Sources must not be empty"
      valueType: "java.lang.String"
      uuid: "uniqueUuid19"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "groovy.lang.MetaClass"
      valueType: "java.lang.String"
      uuid: "uniqueUuid20"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid21"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.context.annotation.ClassPathBeanDefinitionScanner"
        parameters:
        - name: "registry"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
            uuid: "registry"
      valueType: "org.springframework.context.annotation.ClassPathBeanDefinitionScanner"
      uuid: "classPathBeanDefinitionScanner"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.core.type.filter.TypeFilter"
      uuid: "typeFilter"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid22"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 128
      expression: "for-each(this.sources)"
      range: "(128,24)-(128,35)"
      evaluatedAs: true
    - lineNumber: 135
      expression: "source instanceof Class<?> clazz"
      range: "(135,7)-(135,38)"
      evaluatedAs: false
      internalMethodName: "load"
    - lineNumber: 139
      expression: "source instanceof Resource resource"
      range: "(139,7)-(139,41)"
      evaluatedAs: true
      internalMethodName: "load"
  - pathId: "path3"
    testPathName: "loadWhenSourceInstanceOfPackage"
    constructorSignature: "<init>(org.springframework.beans.factory.support.BeanDefinitionRegistry,java.lang.Object[])\
      \ : void"
    modelFingerprint: "22200F0D6AFCC7992374F6062266AB6E"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "FE618FA146B3C3385A02D66CB8B26EDE"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "162F5971AE79346A27E9CCA7B16AE8CA"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:registry,message:uniqueUuid23):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "AA00CB10651CD58178DD5E801FB4CC25"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notEmpty(array:sources,message:uniqueUuid24):void2"
        staticAccess: true
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "2F1A5D2395CDD9571A8BA994054F1236"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid25,classLoader:uniqueUuid26):boolean1"
        staticAccess: true
    - type: "FIELD"
      name: "scanner"
      modelFingerprint: "5C9D3BBD5A8DDA8F029E561FFE650364"
      valueUuid: "classPathBeanDefinitionScanner"
      methodExercised:
        expression: "addExcludeFilter(excludeFilter:typeFilter):void3"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "BBD62FA3C73BDAB372E0FF0C6501F70F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:object,message:uniqueUuid27):void4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_UNFILLED_PARAMS"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.BeanDefinitionLoader"
        parameters:
        - name: "registry"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
            uuid: "registry"
        - name: "sources"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "OBJECT"
                  content: !<static_method_return>
                    target: "java.lang.Package"
                    method: "getPackage"
                    methodParameters:
                    - name: "name"
                      value:
                        sapientType: "BASIC"
                        content: !<regular>
                          value: "name1"
                        valueType: "java.lang.String"
                        uuid: "object-name"
                  valueType: "java.lang.Package"
                  uuid: "object"
            valueType: "java.lang.Object[]"
            uuid: "sources"
      valueType: "org.springframework.boot.BeanDefinitionLoader"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
      uuid: "registry"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Registry must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid23"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.Package"
              method: "getPackage"
              methodParameters:
              - name: "name"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "name1"
                  valueType: "java.lang.String"
                  uuid: "object-name"
            valueType: "java.lang.Package"
            uuid: "object"
      valueType: "java.lang.Object[]"
      uuid: "sources"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Sources must not be empty"
      valueType: "java.lang.String"
      uuid: "uniqueUuid24"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "groovy.lang.MetaClass"
      valueType: "java.lang.String"
      uuid: "uniqueUuid25"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid26"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.context.annotation.ClassPathBeanDefinitionScanner"
        parameters:
        - name: "registry"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
            uuid: "registry"
      valueType: "org.springframework.context.annotation.ClassPathBeanDefinitionScanner"
      uuid: "classPathBeanDefinitionScanner"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.core.type.filter.TypeFilter"
      uuid: "typeFilter"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.Package"
        method: "getPackage"
        methodParameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "name1"
            valueType: "java.lang.String"
            uuid: "object-name"
      valueType: "java.lang.Package"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid27"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 128
      expression: "for-each(this.sources)"
      range: "(128,24)-(128,35)"
      evaluatedAs: true
    - lineNumber: 135
      expression: "source instanceof Class<?> clazz"
      range: "(135,7)-(135,38)"
      evaluatedAs: false
      internalMethodName: "load"
    - lineNumber: 139
      expression: "source instanceof Resource resource"
      range: "(139,7)-(139,41)"
      evaluatedAs: false
      internalMethodName: "load"
    - lineNumber: 143
      expression: "source instanceof Package pack"
      range: "(143,7)-(143,36)"
      evaluatedAs: true
      internalMethodName: "load"
  - pathId: "path4"
    testPathName: "loadWhenSourceInstanceOfCharSequence"
    constructorSignature: "<init>(org.springframework.beans.factory.support.BeanDefinitionRegistry,java.lang.Object[])\
      \ : void"
    modelFingerprint: "2821B4C3BEE2AC33FFD71368B52A45FF"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "067C207ACFA98495948D49B7C0A9EB9A"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "162F5971AE79346A27E9CCA7B16AE8CA"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:registry,message:uniqueUuid28):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "BBD5999238AE412F33664ABED0EC706A"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notEmpty(array:sources,message:uniqueUuid29):void2"
        staticAccess: true
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "2F1A5D2395CDD9571A8BA994054F1236"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid30,classLoader:uniqueUuid31):boolean1"
        staticAccess: true
    - type: "FIELD"
      name: "scanner"
      modelFingerprint: "5C9D3BBD5A8DDA8F029E561FFE650364"
      valueUuid: "classPathBeanDefinitionScanner"
      methodExercised:
        expression: "addExcludeFilter(excludeFilter:typeFilter):void3"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D57A18166CDE03DEDCBD8674EB428A08"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:object,message:uniqueUuid32):void4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_UNFILLED_PARAMS"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.BeanDefinitionLoader"
        parameters:
        - name: "registry"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
            uuid: "registry"
        - name: "sources"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "object1"
                  valueType: "java.lang.String"
                  uuid: "object"
            valueType: "java.lang.Object[]"
            uuid: "sources"
      valueType: "org.springframework.boot.BeanDefinitionLoader"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
      uuid: "registry"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Registry must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid28"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "object1"
            valueType: "java.lang.String"
            uuid: "object"
      valueType: "java.lang.Object[]"
      uuid: "sources"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Sources must not be empty"
      valueType: "java.lang.String"
      uuid: "uniqueUuid29"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "groovy.lang.MetaClass"
      valueType: "java.lang.String"
      uuid: "uniqueUuid30"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid31"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.context.annotation.ClassPathBeanDefinitionScanner"
        parameters:
        - name: "registry"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
            uuid: "registry"
      valueType: "org.springframework.context.annotation.ClassPathBeanDefinitionScanner"
      uuid: "classPathBeanDefinitionScanner"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.core.type.filter.TypeFilter"
      uuid: "typeFilter"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "object1"
      valueType: "java.lang.String"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid32"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 128
      expression: "for-each(this.sources)"
      range: "(128,24)-(128,35)"
      evaluatedAs: true
    - lineNumber: 135
      expression: "source instanceof Class<?> clazz"
      range: "(135,7)-(135,38)"
      evaluatedAs: false
      internalMethodName: "load"
    - lineNumber: 139
      expression: "source instanceof Resource resource"
      range: "(139,7)-(139,41)"
      evaluatedAs: false
      internalMethodName: "load"
    - lineNumber: 143
      expression: "source instanceof Package pack"
      range: "(143,7)-(143,36)"
      evaluatedAs: false
      internalMethodName: "load"
    - lineNumber: 147
      expression: "source instanceof CharSequence sequence"
      range: "(147,7)-(147,45)"
      evaluatedAs: true
      internalMethodName: "load"
  - pathId: "path5"
    testPathName: "loadWhenSourceNotInstanceOfCharSequenceThrowsIllegalArgumentException"
    constructorSignature: "<init>(org.springframework.beans.factory.support.BeanDefinitionRegistry,java.lang.Object[])\
      \ : void"
    modelFingerprint: "ABF9DB00F7B83665E48919F488AB0E8F"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "F4726AE0314599DBDE6B5AA0ADC020F7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "162F5971AE79346A27E9CCA7B16AE8CA"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:registry,message:uniqueUuid33):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "BCA100DFAFDBD07DBCBF515CB79923FC"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notEmpty(array:sources,message:uniqueUuid34):void2"
        staticAccess: true
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "2F1A5D2395CDD9571A8BA994054F1236"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid35,classLoader:uniqueUuid36):boolean1"
        staticAccess: true
    - type: "FIELD"
      name: "scanner"
      modelFingerprint: "5C9D3BBD5A8DDA8F029E561FFE650364"
      valueUuid: "classPathBeanDefinitionScanner"
      methodExercised:
        expression: "addExcludeFilter(excludeFilter:typeFilter):void3"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "54E082CC328FA827E0BF215907DFE238"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:object,message:uniqueUuid37):void4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4CF30CF8750913430BF1092273BE4484"
      valueUuid: "illegalArgumentException"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_UNFILLED_PARAMS"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.BeanDefinitionLoader"
        parameters:
        - name: "registry"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
            uuid: "registry"
        - name: "sources"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "java.lang.Object"
                    parameters: []
                  valueType: "java.lang.Object"
                  uuid: "object"
            valueType: "java.lang.Object[]"
            uuid: "sources"
      valueType: "org.springframework.boot.BeanDefinitionLoader"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
      uuid: "registry"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Registry must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid33"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "object"
      valueType: "java.lang.Object[]"
      uuid: "sources"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Sources must not be empty"
      valueType: "java.lang.String"
      uuid: "uniqueUuid34"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "groovy.lang.MetaClass"
      valueType: "java.lang.String"
      uuid: "uniqueUuid35"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid36"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.context.annotation.ClassPathBeanDefinitionScanner"
        parameters:
        - name: "registry"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
            uuid: "registry"
      valueType: "org.springframework.context.annotation.ClassPathBeanDefinitionScanner"
      uuid: "classPathBeanDefinitionScanner"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.core.type.filter.TypeFilter"
      uuid: "typeFilter"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid37"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Invalid source type "
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
      fixed: true
    branches:
    - lineNumber: 128
      expression: "for-each(this.sources)"
      range: "(128,24)-(128,35)"
      evaluatedAs: true
    - lineNumber: 135
      expression: "source instanceof Class<?> clazz"
      range: "(135,7)-(135,38)"
      evaluatedAs: false
      internalMethodName: "load"
    - lineNumber: 139
      expression: "source instanceof Resource resource"
      range: "(139,7)-(139,41)"
      evaluatedAs: false
      internalMethodName: "load"
    - lineNumber: 143
      expression: "source instanceof Package pack"
      range: "(143,7)-(143,36)"
      evaluatedAs: false
      internalMethodName: "load"
    - lineNumber: 147
      expression: "source instanceof CharSequence sequence"
      range: "(147,7)-(147,45)"
      evaluatedAs: false
      internalMethodName: "load"
