---
modelFingerprint: "0539BBBC671D6D587DF2162AFD19A0AF"
targetClass:
  fullClassName: "org.springframework.boot.ExitCodeGenerators"
methods:
- method:
    name: "addAll"
    sourceCodeSignature: "void addAll(Throwable exception, ExitCodeExceptionMapper...\
      \ mappers)"
    returnType: "void"
    parameters:
    - name: "exception"
      type: "java.lang.Throwable"
    - name: "mappers"
      type: "org.springframework.boot.ExitCodeExceptionMapper[]"
    instructionFingerprint: "4120729BB907055337DCA307CA6443D8"
  paths:
  - pathId: "path1"
    testPathName: "addAllTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "8BA90B01951D35BE9D65807449524053"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "exception"
      modelFingerprint: "05CFBBFC0FF149D82C9CF6A24EF7BD27"
      valueUuid: "exception"
    - type: "INPUT"
      name: "mappers"
      modelFingerprint: "14B22A1A2A127E26161965CD515BFAA5"
      valueUuid: "mappers"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "6D7503D6CCDE146FC101497213029E51"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:exception,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "9B3F9E56602B59B7640011F822A7ADEA"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:mappers,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "CFECCED6FFFF398E60C252EF5A5B73A5"
      methodExercised:
        expression: "addAll(exception:exception,mappers:list):void3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ExitCodeGenerators"
        parameters: []
      valueType: "org.springframework.boot.ExitCodeGenerators"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "exception"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.ExitCodeExceptionMapper[]"
      uuid: "mappers"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "exception"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Exception must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.ExitCodeExceptionMapper[]"
      uuid: "mappers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Mappers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "exception"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.ExitCodeExceptionMapper"
      uuid: "list"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "addAll"
    sourceCodeSignature: "void addAll(Throwable exception, Iterable<? extends ExitCodeExceptionMapper>\
      \ mappers)"
    returnType: "void"
    parameters:
    - name: "exception"
      type: "java.lang.Throwable"
    - name: "mappers"
      type: "java.lang.Iterable"
    instructionFingerprint: "CADA460E939EAD88C889B37FBEED8505"
  paths:
  - pathId: "path1"
    testPathName: "addAll1WhenMappersIsNotEmpty"
    constructorSignature: "<init>() : void"
    modelFingerprint: "A4FD7B0EBC6A7CF123DF8ED749EDC33F"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "exception"
      modelFingerprint: "9FE67044F8C02FBD5A40CBB5B0B078C7"
      valueUuid: "exception"
    - type: "INPUT"
      name: "mappers"
      modelFingerprint: "9177562B9FAAAF2EBE4E1F5375A57961"
      valueUuid: "mappers"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "C73096D5553141991F813E0E0D25F1AD"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:exception,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C41D925D36A9B073AE8B0E24ABEA8E8F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:mappers,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "F303F18F4C6E01EBD2BE8F0B5C896E33"
      methodExercised:
        expression: "add(exception:exception,mapper:object):void3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ExitCodeGenerators"
        parameters: []
      valueType: "org.springframework.boot.ExitCodeGenerators"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "exception"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.ExitCodeExceptionMapper"
          uuid: "object"
          collectionUuid: "mappers"
      valueType: "java.lang.Iterable"
      genericValueType: "? extends org.springframework.boot.ExitCodeExceptionMapper"
      uuid: "mappers"
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "exception"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Exception must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.ExitCodeExceptionMapper"
          uuid: "object"
          collectionUuid: "mappers"
      valueType: "java.lang.Iterable"
      genericValueType: "? extends org.springframework.boot.ExitCodeExceptionMapper"
      uuid: "mappers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Mappers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "exception"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ExitCodeExceptionMapper"
      uuid: "object"
      collectionUuid: "mappers"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 53
      expression: "for-each(mappers)"
      range: "(53,41)-(53,47)"
      evaluatedAs: true
- method:
    name: "add"
    sourceCodeSignature: "void add(Throwable exception, ExitCodeExceptionMapper mapper)"
    returnType: "void"
    parameters:
    - name: "exception"
      type: "java.lang.Throwable"
    - name: "mapper"
      type: "org.springframework.boot.ExitCodeExceptionMapper"
    instructionFingerprint: "6C961336978E5BF0988CC04576E78686"
  paths:
  - pathId: "path1"
    testPathName: "addTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "32D8E07F1B6FE1017E9B116BF49433B2"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "exception"
      modelFingerprint: "05CFBBFC0FF149D82C9CF6A24EF7BD27"
      valueUuid: "exception"
    - type: "INPUT"
      name: "mapper"
      modelFingerprint: "3DF661DE814D30100C644D1CF94C84D4"
      valueUuid: "mapper"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "6D7503D6CCDE146FC101497213029E51"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:exception,message:uniqueUuid5):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "3681EDDA31BDFF5E79418AF5A3B9C93A"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:mapper,message:uniqueUuid6):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "597B9B43E8B2B5EB9D417128216AAD17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:exitCodeGenerator,message:uniqueUuid7):void3"
        staticAccess: true
    - type: "STATIC"
      name: "AnnotationAwareOrderComparator.class.real"
      modelFingerprint: "089B9519341C57AAB72541F369D8F816"
      valueUuid: "AnnotationAwareOrderComparator.class.real"
      methodExercised:
        expression: "sort(list:arrayList):void4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_UNFILLED_PARAMS"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ExitCodeGenerators"
        parameters: []
      valueType: "org.springframework.boot.ExitCodeGenerators"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "exception"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ExitCodeExceptionMapper"
      uuid: "mapper"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "exception"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Exception must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ExitCodeExceptionMapper"
      uuid: "mapper"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Mapper must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.boot.ExitCodeGenerator"
      uuid: "exitCodeGenerator"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Generator must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.core.annotation.AnnotationAwareOrderComparator"
      uuid: "AnnotationAwareOrderComparator.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          valueType: "org.springframework.boot.ExitCodeGenerator"
          uuid: "exitCodeGenerator"
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.ExitCodeGenerator"
      uuid: "arrayList"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "addAll"
    sourceCodeSignature: "void addAll(ExitCodeGenerator... generators)"
    returnType: "void"
    parameters:
    - name: "generators"
      type: "org.springframework.boot.ExitCodeGenerator[]"
    instructionFingerprint: "4EE917DE988D699DD68D38AEF66A4BA8"
  paths:
  - pathId: "path1"
    testPathName: "addAll2Test"
    constructorSignature: "<init>() : void"
    modelFingerprint: "E6EA7DF23C96886A14F4B5321EE1D518"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "generators"
      modelFingerprint: "F986C26AC11DA11BC114243CE72FBFFD"
      valueUuid: "generators"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "06E1E4F4AE8CAC3203ECF522798CDFA7"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:generators,message:uniqueUuid8):void"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "6210C1C2AE6F8B995BE7610D4E1500B6"
      methodExercised:
        expression: "addAll(generators:list):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ExitCodeGenerators"
        parameters: []
      valueType: "org.springframework.boot.ExitCodeGenerators"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.ExitCodeGenerator[]"
      uuid: "generators"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.ExitCodeGenerator[]"
      uuid: "generators"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Generators must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.ExitCodeGenerator"
      uuid: "list"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "addAll"
    sourceCodeSignature: "void addAll(Iterable<? extends ExitCodeGenerator> generators)"
    returnType: "void"
    parameters:
    - name: "generators"
      type: "java.lang.Iterable"
    instructionFingerprint: "67C3EBF99289578DAD055C811A71663C"
  paths:
  - pathId: "path1"
    testPathName: "addAll3WhenGeneratorsIsNotEmpty"
    constructorSignature: "<init>() : void"
    modelFingerprint: "E254119232B368083BC52056D82B9D43"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "generators"
      modelFingerprint: "53B5A086C702BB4DA89AA4390349880B"
      valueUuid: "generators"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "99CAD3A0CB2B0325627668DB96570D3E"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:generators,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1CBC23ABDB9544A9AEF53D90798D9002"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:object,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "STATIC"
      name: "AnnotationAwareOrderComparator.class"
      modelFingerprint: "D9DB11066E3EF69359E9EC618D5684E1"
      valueUuid: "AnnotationAwareOrderComparator.class"
      methodExercised:
        expression: "sort(list:arrayList):void3"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ExitCodeGenerators"
        parameters: []
      valueType: "org.springframework.boot.ExitCodeGenerators"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.ExitCodeGenerator"
          uuid: "object"
          collectionUuid: "generators"
      valueType: "java.lang.Iterable"
      genericValueType: "? extends org.springframework.boot.ExitCodeGenerator"
      uuid: "generators"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.ExitCodeGenerator"
          uuid: "object"
          collectionUuid: "generators"
      valueType: "java.lang.Iterable"
      genericValueType: "? extends org.springframework.boot.ExitCodeGenerator"
      uuid: "generators"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Generators must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ExitCodeGenerator"
      uuid: "object"
      collectionUuid: "generators"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Generator must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.annotation.AnnotationAwareOrderComparator"
      uuid: "AnnotationAwareOrderComparator.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.ExitCodeGenerator"
          uuid: "object"
          collectionUuid: "generators"
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.ExitCodeGenerator"
      uuid: "arrayList"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 71
      expression: "for-each(generators)"
      range: "(71,38)-(71,47)"
      evaluatedAs: true
- method:
    name: "add"
    sourceCodeSignature: "void add(ExitCodeGenerator generator)"
    returnType: "void"
    parameters:
    - name: "generator"
      type: "org.springframework.boot.ExitCodeGenerator"
    instructionFingerprint: "652A4BBC37E1BEEB2E7CE50C190A292E"
  paths:
  - pathId: "path1"
    testPathName: "add1Test"
    constructorSignature: "<init>() : void"
    modelFingerprint: "3291A71EE982F8BEC551132A4A27ECCC"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "generator"
      modelFingerprint: "5615914F5415E1D3EC0C073992B0517C"
      valueUuid: "generator"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C260E43BE25A53BC3696B0C36483F6A5"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:generator,message:uniqueUuid11):void"
        staticAccess: true
    - type: "STATIC"
      name: "AnnotationAwareOrderComparator.class"
      modelFingerprint: "08476C9C59985B13A0B54E17F88B710B"
      valueUuid: "AnnotationAwareOrderComparator.class"
      methodExercised:
        expression: "sort(list:arrayList):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ExitCodeGenerators"
        parameters: []
      valueType: "org.springframework.boot.ExitCodeGenerators"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ExitCodeGenerator"
      uuid: "generator"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ExitCodeGenerator"
      uuid: "generator"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Generator must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.annotation.AnnotationAwareOrderComparator"
      uuid: "AnnotationAwareOrderComparator.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.ExitCodeGenerator"
          uuid: "generator"
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.ExitCodeGenerator"
      uuid: "arrayList"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "iterator"
    sourceCodeSignature: "Iterator<ExitCodeGenerator> iterator()"
    returnType: "java.util.Iterator"
    genericReturnType: "org.springframework.boot.ExitCodeGenerator"
    instructionFingerprint: "109465E5047B2084C0FEE2384AAD5704"
  paths:
  - pathId: "path1"
    testPathName: "iteratorTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "08C649FF3FC57596E2883FA3FC5EDCF7"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4D0C413889C96140CD673DBA0857B733"
      valueUuid: "iteratorNotNull"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ExitCodeGenerators"
        parameters: []
      valueType: "org.springframework.boot.ExitCodeGenerators"
      uuid: "target"
    - sapientType: "NOT_NULL"
      valueType: "java.util.Iterator"
      genericValueType: "org.springframework.boot.ExitCodeGenerator"
      uuid: "iteratorNotNull"
      fixed: true
      collectionUuid: "arrayList"
- method:
    name: "getExitCode"
    sourceCodeSignature: "int getExitCode()"
    returnType: "int"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "82E037846FFAA59755BBC24368057E04"
  paths:
  - pathId: "path1"
    testPathName: "getExitCodeWhenThisGeneratorsIsEmpty"
    constructorSignature: "<init>() : void"
    modelFingerprint: "C7F3C9BE57EEBC92C2A31934C0C6CAD6"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "99AA433F19FD72FDCF2C9959BA104AF4"
      valueUuid: "int1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ExitCodeGenerators"
        parameters: []
      valueType: "org.springframework.boot.ExitCodeGenerators"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
      fixed: true
    branches:
    - lineNumber: 94
      expression: "for-each(this.generators)"
      range: "(94,38)-(94,52)"
      evaluatedAs: false
