---
modelFingerprint: "01E48EEBDFE2A173B210B16C756DB48C"
targetClass:
  fullClassName: "org.springframework.boot.DefaultApplicationArguments"
methods:
- method:
    name: "getSourceArgs"
    sourceCodeSignature: "String[] getSourceArgs()"
    returnType: "java.lang.String[]"
    instructionFingerprint: "C535102E797DF1E4C8B1887595533C38"
  paths:
  - pathId: "path1"
    testPathName: "getSourceArgsTest"
    constructorSignature: "<init>(java.lang.String[]) : void"
    modelFingerprint: "E30A71E81F27A61EF2D03FEB5397B69E"
    problemWasSolvedByProver: false
    inputParameters: []
    disabled: false
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_UNFILLED_PARAMS"
    allValues: []
- method:
    name: "getOptionNames"
    sourceCodeSignature: "Set<String> getOptionNames()"
    returnType: "java.util.Set"
    genericReturnType: "java.lang.String"
    instructionFingerprint: "831B0FC6C46F499E5E5FF2A5DBC3C531"
  paths:
  - pathId: "path1"
    testPathName: "getOptionNamesTest"
    constructorSignature: "<init>(java.lang.String[]) : void"
    modelFingerprint: "26B9876511CEB99C2C040528B0C11A2D"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "8268463029DBBA4A2E9E8DC1318259B4"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "F193936F5FCA689FCA368942846100F5"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:args,message:uniqueUuid3):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4431287608232F959FCE873CEB606974"
      valueUuid: "set"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "String[] names = this.source.getPropertyNames();"
      lineNumber: 53
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: source - Method: getPropertyNames"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.DefaultApplicationArguments"
        parameters:
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "valid_value"
                  valueType: "java.lang.String"
                  uuid: "uniqueUuid1"
            valueType: "java.lang.String[]"
            uuid: "args"
      valueType: "org.springframework.boot.DefaultApplicationArguments"
      uuid: "target"
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "valid_value"
            valueType: "java.lang.String"
            uuid: "uniqueUuid2"
      valueType: "java.lang.String[]"
      uuid: "args"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Args must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Set"
      genericValueType: "java.lang.String"
      uuid: "set"
- method:
    name: "containsOption"
    sourceCodeSignature: "boolean containsOption(String name)"
    returnType: "boolean"
    parameters:
    - name: "name"
      type: "java.lang.String"
    instructionFingerprint: "FE7D79EE2439B93BB4AA2A88A3165C8E"
  paths:
  - pathId: "path1"
    testPathName: "containsOptionWhenThisSourceContainsPropertyName"
    constructorSignature: "<init>(java.lang.String[]) : void"
    modelFingerprint: "EDB2C3CA8A30FC9C1A6B9AB5F26B81C9"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "35070F527D237BB118B9CFB33534F491"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "3B2E0B9F96901578F5C338B0CF9810A2"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "4F9F87B71F2E9BE36828B122D0732B05"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:args,message:uniqueUuid5):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "boolean1"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.source.containsProperty(name);"
      lineNumber: 59
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: source - Method: containsProperty"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.DefaultApplicationArguments"
        parameters:
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "arg1"
                  valueType: "java.lang.String"
                  uuid: "uniqueUuid1"
                1:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "arg2"
                  valueType: "java.lang.String"
                  uuid: "uniqueUuid2"
            valueType: "java.lang.String[]"
            uuid: "args"
      valueType: "org.springframework.boot.DefaultApplicationArguments"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "John"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "arg1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid3"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "arg2"
            valueType: "java.lang.String"
            uuid: "uniqueUuid4"
      valueType: "java.lang.String[]"
      uuid: "args"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Args must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    branches:
    - lineNumber: 59
      expression: "this.source.containsProperty(name)"
      range: "(59,10)-(59,43)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "containsOptionWhenThisSourceNotContainsPropertyName"
    constructorSignature: "<init>(java.lang.String[]) : void"
    modelFingerprint: "8E122C217351DEB105737B321C8CF288"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "35070F527D237BB118B9CFB33534F491"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "3B2E0B9F96901578F5C338B0CF9810A2"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "4F9F87B71F2E9BE36828B122D0732B05"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:args,message:uniqueUuid5):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5633A2B0C967879105766C98D64A3959"
      valueUuid: "boolean1"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.source.containsProperty(name);"
      lineNumber: 59
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: source - Method: containsProperty"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.DefaultApplicationArguments"
        parameters:
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "arg1"
                  valueType: "java.lang.String"
                  uuid: "uniqueUuid1"
                1:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "arg2"
                  valueType: "java.lang.String"
                  uuid: "uniqueUuid2"
            valueType: "java.lang.String[]"
            uuid: "args"
      valueType: "org.springframework.boot.DefaultApplicationArguments"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "John"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "arg1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid3"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "arg2"
            valueType: "java.lang.String"
            uuid: "uniqueUuid4"
      valueType: "java.lang.String[]"
      uuid: "args"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Args must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    branches:
    - lineNumber: 59
      expression: "this.source.containsProperty(name)"
      range: "(59,10)-(59,43)"
      evaluatedAs: false
- method:
    name: "getOptionValues"
    sourceCodeSignature: "List<String> getOptionValues(String name)"
    returnType: "java.util.List"
    genericReturnType: "java.lang.String"
    parameters:
    - name: "name"
      type: "java.lang.String"
    instructionFingerprint: "2091B3E2E532AA0B657E5C47B0970FEB"
  paths:
  - pathId: "path1"
    testPathName: "getOptionValuesWhenValuesIsNotNull"
    constructorSignature: "<init>(java.lang.String[]) : void"
    modelFingerprint: "5846AFA5FCE150C688DB6DED1EA304D1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "35070F527D237BB118B9CFB33534F491"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "3B2E0B9F96901578F5C338B0CF9810A2"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "4F9F87B71F2E9BE36828B122D0732B05"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:args,message:uniqueUuid5):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A21C27D81F89EF2C62F31578D131A608"
      valueUuid: "list2"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "List<String> values = this.source.getOptionValues(name);"
      lineNumber: 64
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: source - Method: getOptionValues"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.DefaultApplicationArguments"
        parameters:
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "arg1"
                  valueType: "java.lang.String"
                  uuid: "uniqueUuid1"
                1:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "arg2"
                  valueType: "java.lang.String"
                  uuid: "uniqueUuid2"
            valueType: "java.lang.String[]"
            uuid: "args"
      valueType: "org.springframework.boot.DefaultApplicationArguments"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "John"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "arg1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid3"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "arg2"
            valueType: "java.lang.String"
            uuid: "uniqueUuid4"
      valueType: "java.lang.String[]"
      uuid: "args"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Args must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list2"
    branches:
    - lineNumber: 65
      expression: "values != null"
      range: "(65,11)-(65,24)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "getOptionValuesWhenValuesIsNull"
    constructorSignature: "<init>(java.lang.String[]) : void"
    modelFingerprint: "454540777A1DE799A126489116E8FF75"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "35070F527D237BB118B9CFB33534F491"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "3B2E0B9F96901578F5C338B0CF9810A2"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "4F9F87B71F2E9BE36828B122D0732B05"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:args,message:uniqueUuid5):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "81D475C074AB74967CAF6AF4894A84D6"
      valueUuid: "list2"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "List<String> values = this.source.getOptionValues(name);"
      lineNumber: 64
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: source - Method: getOptionValues"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.DefaultApplicationArguments"
        parameters:
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "arg1"
                  valueType: "java.lang.String"
                  uuid: "uniqueUuid1"
                1:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "arg2"
                  valueType: "java.lang.String"
                  uuid: "uniqueUuid2"
            valueType: "java.lang.String[]"
            uuid: "args"
      valueType: "org.springframework.boot.DefaultApplicationArguments"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "John"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "arg1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid3"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "arg2"
            valueType: "java.lang.String"
            uuid: "uniqueUuid4"
      valueType: "java.lang.String[]"
      uuid: "args"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Args must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "NULL"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list2"
      fixed: true
    branches:
    - lineNumber: 65
      expression: "values != null"
      range: "(65,11)-(65,24)"
      evaluatedAs: false
- method:
    name: "getNonOptionArgs"
    sourceCodeSignature: "List<String> getNonOptionArgs()"
    returnType: "java.util.List"
    genericReturnType: "java.lang.String"
    instructionFingerprint: "16A3A6600DEE5CB9D0304DC47B7FE960"
  paths:
  - pathId: "path1"
    testPathName: "getNonOptionArgsTest"
    constructorSignature: "<init>(java.lang.String[]) : void"
    modelFingerprint: "B06129B098235E0D1C90E89A84D1EF29"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "9CAB89AB3410C3CB87822AE6AD0EB5CC"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "65DBDFB90857B61F439A553D9CBF27DE"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:args,message:uniqueUuid3):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "F9FD087D9390811BB0CB83A646FFE188"
      valueUuid: "list"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.source.getNonOptionArgs();"
      lineNumber: 70
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: source - Method: getNonOptionArgs"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.DefaultApplicationArguments"
        parameters:
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "valid input values"
                  valueType: "java.lang.String"
                  uuid: "uniqueUuid1"
            valueType: "java.lang.String[]"
            uuid: "args"
      valueType: "org.springframework.boot.DefaultApplicationArguments"
      uuid: "target"
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "valid input values"
            valueType: "java.lang.String"
            uuid: "uniqueUuid2"
      valueType: "java.lang.String[]"
      uuid: "args"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Args must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list"
