---
modelFingerprint: "2B473CA963251AB379724EAE96C45221"
targetClass:
  fullClassName: "org.springframework.boot.DefaultBootstrapContext"
methods:
- method:
    name: "register"
    sourceCodeSignature: "<T> void register(Class<T> type, InstanceSupplier<T> instanceSupplier)"
    returnType: "void"
    parameters:
    - name: "type"
      type: "java.lang.Class"
    - name: "instanceSupplier"
      type: "org.springframework.boot.BootstrapRegistry$InstanceSupplier"
    instructionFingerprint: "6B79E73C5DD58EB3CED071C9F845CAE5"
  paths:
  - pathId: "path1"
    testPathName: "registerWhenTypeGetNameNotPlus_has_already_been_created"
    constructorSignature: "<init>() : void"
    modelFingerprint: "BA1FCE5FA1073F94013D38569C9DC593"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "type"
      modelFingerprint: "B6D83DC733A4259418906388E0D863D5"
      valueUuid: "type"
    - type: "INPUT"
      name: "instanceSupplier"
      modelFingerprint: "14B6D55764365D01E760FD0657209FD2"
      valueUuid: "instanceSupplier"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "348E874986254FCEFE2182CA8EBED749"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:type,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "80F93A36EEA4E11B4430E65BA8552D32"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:instanceSupplier,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid3,messageSupplier:uniqueUuid4):void3"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.DefaultBootstrapContext"
        parameters: []
      valueType: "org.springframework.boot.DefaultBootstrapContext"
      uuid: "target"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.BootstrapRegistry$InstanceSupplier"
      genericValueType: "java.lang.Object"
      uuid: "instanceSupplier"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "type"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Type must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.BootstrapRegistry$InstanceSupplier"
      genericValueType: "java.lang.Object"
      uuid: "instanceSupplier"
    - sapientType: "BASIC"
      content: !<regular>
        value: "InstanceSupplier must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid4"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 59
      expression: "replaceExisting"
      range: "(59,8)-(59,22)"
      evaluatedAs: true
      internalMethodName: "register"
    - lineNumber: 60
      expression: "type.getName() + \\\" has already been created\\\""
      range: "(60,59)-(60,102)"
      evaluatedAs: false
      internalMethodName: "register"
- method:
    name: "registerIfAbsent"
    sourceCodeSignature: "<T> void registerIfAbsent(Class<T> type, InstanceSupplier<T>\
      \ instanceSupplier)"
    returnType: "void"
    parameters:
    - name: "type"
      type: "java.lang.Class"
    - name: "instanceSupplier"
      type: "org.springframework.boot.BootstrapRegistry$InstanceSupplier"
    instructionFingerprint: "C048838D362814C347C6DA8CDE16EC91"
  paths:
  - pathId: "path1"
    testPathName: "registerIfAbsentWhenTypeGetNameNotPlus_has_already_been_created"
    constructorSignature: "<init>() : void"
    modelFingerprint: "0C53FDD87F7761E97A572E904060BCEB"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "type"
      modelFingerprint: "B6D83DC733A4259418906388E0D863D5"
      valueUuid: "type"
    - type: "INPUT"
      name: "instanceSupplier"
      modelFingerprint: "14B6D55764365D01E760FD0657209FD2"
      valueUuid: "instanceSupplier"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "348E874986254FCEFE2182CA8EBED749"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:type,message:uniqueUuid5):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "80F93A36EEA4E11B4430E65BA8552D32"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:instanceSupplier,message:uniqueUuid6):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid7,messageSupplier:uniqueUuid8):void3"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.DefaultBootstrapContext"
        parameters: []
      valueType: "org.springframework.boot.DefaultBootstrapContext"
      uuid: "target"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.BootstrapRegistry$InstanceSupplier"
      genericValueType: "java.lang.Object"
      uuid: "instanceSupplier"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "type"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Type must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.BootstrapRegistry$InstanceSupplier"
      genericValueType: "java.lang.Object"
      uuid: "instanceSupplier"
    - sapientType: "BASIC"
      content: !<regular>
        value: "InstanceSupplier must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid8"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 59
      expression: "replaceExisting"
      range: "(59,8)-(59,22)"
      evaluatedAs: false
      internalMethodName: "register"
    - lineNumber: 59
      expression: "!alreadyRegistered"
      range: "(59,27)-(59,44)"
      evaluatedAs: true
      internalMethodName: "register"
    - lineNumber: 60
      expression: "type.getName() + \\\" has already been created\\\""
      range: "(60,59)-(60,102)"
      evaluatedAs: false
      internalMethodName: "register"
- method:
    name: "isRegistered"
    sourceCodeSignature: "<T> boolean isRegistered(Class<T> type)"
    returnType: "boolean"
    parameters:
    - name: "type"
      type: "java.lang.Class"
    instructionFingerprint: "11FC31E2F36FD3FBD92D41C6553357BE"
  paths:
  - pathId: "path1"
    testPathName: "isRegisteredTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "F968C6848FCD5A95EAABFAC22E41913E"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "type"
      modelFingerprint: "B6D83DC733A4259418906388E0D863D5"
      valueUuid: "type"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "52785AAEEFCEB874D7B8C5DB08D93CCC"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.DefaultBootstrapContext"
        parameters: []
      valueType: "org.springframework.boot.DefaultBootstrapContext"
      uuid: "target"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "type"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
      collectionUuid: "hashMap"
- method:
    name: "getRegisteredInstanceSupplier"
    sourceCodeSignature: "<T> InstanceSupplier<T> getRegisteredInstanceSupplier(Class<T>\
      \ type)"
    returnType: "org.springframework.boot.BootstrapRegistry$InstanceSupplier"
    parameters:
    - name: "type"
      type: "java.lang.Class"
    instructionFingerprint: "F259F675C5D6DB0ED185D59C56256ED4"
  paths:
  - pathId: "path1"
    testPathName: "getRegisteredInstanceSupplierTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "403883AB2E8FE3E06733BDA04671DBC2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "type"
      modelFingerprint: "B6D83DC733A4259418906388E0D863D5"
      valueUuid: "type"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "3C52224AC228EEF46A39F84696A34E27"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.DefaultBootstrapContext"
        parameters: []
      valueType: "org.springframework.boot.DefaultBootstrapContext"
      uuid: "target"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "type"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.BootstrapRegistry$InstanceSupplier"
      uuid: "object"
      collectionUuid: "hashMap"
      explicitCastNeeded: true
- method:
    name: "addCloseListener"
    sourceCodeSignature: "void addCloseListener(ApplicationListener<BootstrapContextClosedEvent>\
      \ listener)"
    returnType: "void"
    parameters:
    - name: "listener"
      type: "org.springframework.context.ApplicationListener"
    instructionFingerprint: "0F0113867285A6ECFF560320E5610829"
  paths:
  - pathId: "path1"
    testPathName: "addCloseListenerTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "04503EAC9E6A58F4A388F68CF4BBBDE0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "listener"
      modelFingerprint: "D8AEFE7F1906D848DF1176C2D836E707"
      valueUuid: "listener"
    - type: "FIELD"
      name: "events"
      modelFingerprint: "DE30557EAA319D26390DB222345BF4BF"
      valueUuid: "simpleApplicationEventMulticaster"
      methodExercised:
        expression: "addApplicationListener(listener:listener):void"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "this.events.addApplicationListener(listener);"
      lineNumber: 83
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: events - Method: addApplicationListener"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.DefaultBootstrapContext"
        parameters: []
      valueType: "org.springframework.boot.DefaultBootstrapContext"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationListener"
      genericValueType: "org.springframework.boot.BootstrapContextClosedEvent"
      uuid: "listener"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.context.event.SimpleApplicationEventMulticaster"
        parameters: []
      valueType: "org.springframework.context.event.SimpleApplicationEventMulticaster"
      uuid: "simpleApplicationEventMulticaster"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationListener"
      genericValueType: "org.springframework.boot.BootstrapContextClosedEvent"
      uuid: "listener"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "get"
    sourceCodeSignature: "<T> T get(Class<T> type)"
    returnType: "java.lang.Object"
    throwsExceptions:
    - "java.lang.IllegalStateException"
    parameters:
    - name: "type"
      type: "java.lang.Class"
    instructionFingerprint: "7C3E1E4E0364176B2FF0D7B4369E91F1"
  paths:
  - pathId: "path1"
    testPathName: "getTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "573855A414E1C91C8B597E8370A875A5"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "type"
      modelFingerprint: "B6D83DC733A4259418906388E0D863D5"
      valueUuid: "type"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "D04E21E8055498ABCC743EBF72A174F7"
      methodExercised:
        expression: "getOrElseThrow(type:type,exceptionSupplier:uniqueUuid9):object"
        throwsExceptions:
        - "java.lang.Throwable"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A5457F8C44AF90FDF3ACB1B2051E1175"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.DefaultBootstrapContext"
        parameters: []
      valueType: "org.springframework.boot.DefaultBootstrapContext"
      uuid: "target"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "type"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "type"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      uuid: "uniqueUuid9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
- method:
    name: "getOrElse"
    sourceCodeSignature: "<T> T getOrElse(Class<T> type, T other)"
    returnType: "java.lang.Object"
    parameters:
    - name: "type"
      type: "java.lang.Class"
    - name: "other"
      type: "java.lang.Object"
    instructionFingerprint: "289995F62E1FB61D8DF4C6709AFDB510"
  paths:
  - pathId: "path1"
    testPathName: "getOrElseTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "44DE3B30E19B2FD3F631808392EE0524"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "type"
      modelFingerprint: "B6D83DC733A4259418906388E0D863D5"
      valueUuid: "type"
    - type: "INPUT"
      name: "other"
      modelFingerprint: "DFD624BA7714DB52DB5C0B55DB3E2EE9"
      valueUuid: "other"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "CC44B9747852B2AFB7C1B5039C23F996"
      methodExercised:
        expression: "getOrElseSupply(type:type,other:uniqueUuid10):object"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A5457F8C44AF90FDF3ACB1B2051E1175"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.DefaultBootstrapContext"
        parameters: []
      valueType: "org.springframework.boot.DefaultBootstrapContext"
      uuid: "target"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "type"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "other"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "type"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      uuid: "uniqueUuid10"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
- method:
    name: "getOrElseSupply"
    sourceCodeSignature: "<T> T getOrElseSupply(Class<T> type, Supplier<T> other)"
    returnType: "java.lang.Object"
    parameters:
    - name: "type"
      type: "java.lang.Class"
    - name: "other"
      type: "java.util.function.Supplier"
    instructionFingerprint: "65E15EF10E2E2E075E716C7FDDDFFD8F"
  paths:
  - pathId: "path1"
    testPathName: "getOrElseSupplyWhenInstanceSupplierIsNull"
    constructorSignature: "<init>() : void"
    modelFingerprint: "5EFF2771177FB9DF338B82AE6DCC84F8"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "type"
      modelFingerprint: "B6D83DC733A4259418906388E0D863D5"
      valueUuid: "type"
    - type: "INPUT"
      name: "other"
      modelFingerprint: "84F61CF64FAE2CEF568ACDC5B2A02A75"
      valueUuid: "other"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A5457F8C44AF90FDF3ACB1B2051E1175"
      valueUuid: "object2"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.function.Supplier.get() : java.lang.Object"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.DefaultBootstrapContext"
        parameters: []
      valueType: "org.springframework.boot.DefaultBootstrapContext"
      uuid: "target"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "other"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object2"
    branches:
    - lineNumber: 100
      expression: "instanceSupplier != null"
      range: "(100,12)-(100,35)"
      evaluatedAs: false
- method:
    name: "getOrElseThrow"
    sourceCodeSignature: "<T, X extends Throwable> T getOrElseThrow(Class<T> type,\
      \ Supplier<? extends X> exceptionSupplier)"
    returnType: "java.lang.Object"
    throwsExceptions:
    - "java.lang.Throwable"
    parameters:
    - name: "type"
      type: "java.lang.Class"
    - name: "exceptionSupplier"
      type: "java.util.function.Supplier"
    instructionFingerprint: "516ECAFAC2C11A89A61FDC107C7654AE"
  paths:
  - pathId: "path1"
    testPathName: "getOrElseThrowWhenInstanceSupplierIsNullThrowsThrowable"
    constructorSignature: "<init>() : void"
    modelFingerprint: "7F09A251C458F7DBE8F7CC53DA887C35"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "type"
      modelFingerprint: "B6D83DC733A4259418906388E0D863D5"
      valueUuid: "type"
    - type: "INPUT"
      name: "exceptionSupplier"
      modelFingerprint: "EF0EDD3733415323C0DAC163F13A29F9"
      valueUuid: "exceptionSupplier"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "49E493EB56B47EDEB5C173968793BABC"
      valueUuid: "object2"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.function.Supplier.get() : java.lang.Object"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.DefaultBootstrapContext"
        parameters: []
      valueType: "org.springframework.boot.DefaultBootstrapContext"
      uuid: "target"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "exceptionSupplier"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "object2"
      explicitCastNeeded: true
    branches:
    - lineNumber: 108
      expression: "instanceSupplier == null"
      range: "(108,8)-(108,31)"
      evaluatedAs: true
- method:
    name: "close"
    sourceCodeSignature: "void close(ConfigurableApplicationContext applicationContext)"
    returnType: "void"
    parameters:
    - name: "applicationContext"
      type: "org.springframework.context.ConfigurableApplicationContext"
    instructionFingerprint: "087D694189CBCC8C20ED9984A9B12530"
  paths:
  - pathId: "path1"
    testPathName: "closeTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "44564DAF204F73D3624146933C5CF22A"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "applicationContext"
      modelFingerprint: "0F8914E14FE4776E598D442B89C4819D"
      valueUuid: "applicationContext"
    - type: "FIELD"
      name: "events"
      modelFingerprint: "92AA1A3DDCDF221FC5163D2CEA8AF55A"
      valueUuid: "simpleApplicationEventMulticaster"
      methodExercised:
        expression: "multicastEvent(event:bootstrapContextClosedEvent):void"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "this.events.multicastEvent(new BootstrapContextClosedEvent(this, applicationContext));"
      lineNumber: 133
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: events - Method: multicastEvent"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.DefaultBootstrapContext"
        parameters: []
      valueType: "org.springframework.boot.DefaultBootstrapContext"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ConfigurableApplicationContext"
      uuid: "applicationContext"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.context.event.SimpleApplicationEventMulticaster"
        parameters: []
      valueType: "org.springframework.context.event.SimpleApplicationEventMulticaster"
      uuid: "simpleApplicationEventMulticaster"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.boot.BootstrapContextClosedEvent"
      uuid: "bootstrapContextClosedEvent"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
