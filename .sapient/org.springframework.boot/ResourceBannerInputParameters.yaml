---
modelFingerprint: "C6E3E8755BE4AAE83CF0E0B066B30934"
targetClass:
  fullClassName: "org.springframework.boot.ResourceBanner"
methods:
- method:
    name: "printBanner"
    sourceCodeSignature: "void printBanner(Environment environment, Class<?> sourceClass,\
      \ PrintStream out)"
    returnType: "void"
    parameters:
    - name: "environment"
      type: "org.springframework.core.env.Environment"
    - name: "sourceClass"
      type: "java.lang.Class"
    - name: "out"
      type: "java.io.PrintStream"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "AB0C5CB2FA78031088EB817E735338DA"
  paths:
  - pathId: "path1"
    testPathName: "printBannerWhenGetPropertyResolversEnvironmentSourceClassIsNotEmpty"
    constructorSignature: "<init>(org.springframework.core.io.Resource) : void"
    modelFingerprint: "637E8B18B25662441AF7BCAE1DBF3412"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "A49B4356D0EE1A87DC8DE1027FDAFD47"
      valueUuid: "target"
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "4FDFA6C7E478356AE45119A00788DE1A"
      valueUuid: "environment"
    - type: "INPUT"
      name: "sourceClass"
      modelFingerprint: "B2E337343E1870621319FE790F901E1D"
      valueUuid: "sourceClass"
    - type: "INPUT"
      name: "out"
      modelFingerprint: "3F966CFDDBA3400787778EDDF82C4659"
      valueUuid: "out"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "F3ED31DBA06F5C10064FF694798DFF9D"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid1):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "4BAE9190984CD0D4B9188BC7FFFA32E5"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean1"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FC63CD97FFD33E6DB22062D341ABB5D5"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean1,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "FIELD"
      name: "resource"
      modelFingerprint: "413D37C809ADD8D8005D024CB039C74D"
      valueUuid: "resource"
      methodExercised:
        expression: "getInputStream():inputStream"
        throwsExceptions:
        - "java.io.IOException"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "30D4049F66D45EB73540DF694A83E97D"
      valueUuid: "environment"
      methodExercised:
        expression: "getProperty(key:uniqueUuid3,targetType:uniqueUuid4,defaultValue:charset):object"
    - type: "STATIC"
      name: "StreamUtils.class"
      modelFingerprint: "4ECDBD544ED89A5E135FF8E74EF72C7D"
      valueUuid: "StreamUtils.class"
      methodExercised:
        expression: "copyToString(in:inputStream,charset:object):string"
        throwsExceptions:
        - "java.io.IOException"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "779B6BA31C97272D4EFF7336D93E6F03"
      methodExercised:
        expression: "getPropertyResolvers(environment:environment,sourceClass:sourceClass):list"
    - type: "LOCAL_VARIABLE"
      name: "resolver"
      modelFingerprint: "D44A7C5E12F66F5100AA3DC5475DE1B5"
      valueUuid: "object2"
      methodExercised:
        expression: "resolvePlaceholders(text:string):string2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ResourceBanner"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
      valueType: "org.springframework.boot.ResourceBanner"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "sourceClass"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.PrintStream"
        parameters:
        - name: "out"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.ByteArrayOutputStream"
              parameters: []
            valueType: "java.io.OutputStream"
            uuid: "out-out"
      valueType: "java.io.PrintStream"
      uuid: "out"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must exist"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "inputStream"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.nio.charset.Charset"
        method: "defaultCharset"
        methodParameters: []
      valueType: "java.nio.charset.Charset"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.banner.charset"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.nio.charset.Charset"
      valueType: "java.lang.Class"
      genericValueType: "java.nio.charset.Charset"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_field_return>
        target: "java.nio.charset.StandardCharsets"
        fieldName: "UTF_8"
      valueType: "java.nio.charset.Charset"
      uuid: "charset"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StreamUtils"
      uuid: "StreamUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_copyToString1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "inputStream"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.nio.charset.Charset"
        method: "defaultCharset"
        methodParameters: []
      valueType: "java.nio.charset.Charset"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.core.env.PropertyResolver"
          uuid: "object2"
          collectionUuid: "list"
      valueType: "java.util.List"
      genericValueType: "org.springframework.core.env.PropertyResolver"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "sourceClass"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertyResolver"
      uuid: "object2"
      collectionUuid: "list"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_resolvePlaceholders1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_copyToString1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 69
      expression: "for-each(getPropertyResolvers(environment, sourceClass))"
      range: "(69,37)-(69,82)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "printBannerWhenCaughtException"
    constructorSignature: "<init>(org.springframework.core.io.Resource) : void"
    modelFingerprint: "42E9A25243A2A7F8204A1C5DD05AE4FB"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "A49B4356D0EE1A87DC8DE1027FDAFD47"
      valueUuid: "target"
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "4FDFA6C7E478356AE45119A00788DE1A"
      valueUuid: "environment"
    - type: "INPUT"
      name: "sourceClass"
      modelFingerprint: "B2E337343E1870621319FE790F901E1D"
      valueUuid: "sourceClass"
    - type: "INPUT"
      name: "out"
      modelFingerprint: "3F966CFDDBA3400787778EDDF82C4659"
      valueUuid: "out"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "F3ED31DBA06F5C10064FF694798DFF9D"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid1):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "4BAE9190984CD0D4B9188BC7FFFA32E5"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean1"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FC63CD97FFD33E6DB22062D341ABB5D5"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean1,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "FIELD"
      name: "resource"
      modelFingerprint: "413D37C809ADD8D8005D024CB039C74D"
      valueUuid: "resource"
      methodExercised:
        expression: "getInputStream():inputStream"
        throwsExceptions:
        - "java.io.IOException"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "30D4049F66D45EB73540DF694A83E97D"
      valueUuid: "environment"
      methodExercised:
        expression: "getProperty(key:uniqueUuid3,targetType:uniqueUuid4,defaultValue:charset):object"
    - type: "STATIC"
      name: "StreamUtils.class"
      modelFingerprint: "4ECDBD544ED89A5E135FF8E74EF72C7D"
      valueUuid: "StreamUtils.class"
      methodExercised:
        expression: "copyToString(in:inputStream,charset:object):string"
        throwsExceptions:
        - "java.io.IOException"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "779B6BA31C97272D4EFF7336D93E6F03"
      methodExercised:
        expression: "getPropertyResolvers(environment:environment,sourceClass:sourceClass):list"
    - type: "LOCAL_VARIABLE"
      name: "resolver"
      modelFingerprint: "F804818952C1C505AE4829E9EBF26D7D"
      valueUuid: "object2"
      methodExercised:
        expression: "resolvePlaceholders(text:string):string2"
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "0FBBCE0E72F08F1270BA17B1797E7235"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid5,arg1:resource,arg2:class,arg3:message):logMessage"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ResourceBanner"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
      valueType: "org.springframework.boot.ResourceBanner"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "sourceClass"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.PrintStream"
        parameters:
        - name: "out"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.ByteArrayOutputStream"
              parameters: []
            valueType: "java.io.OutputStream"
            uuid: "out-out"
      valueType: "java.io.PrintStream"
      uuid: "out"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must exist"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "inputStream"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.nio.charset.Charset"
        method: "defaultCharset"
        methodParameters: []
      valueType: "java.nio.charset.Charset"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.banner.charset"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.nio.charset.Charset"
      valueType: "java.lang.Class"
      genericValueType: "java.nio.charset.Charset"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_field_return>
        target: "java.nio.charset.StandardCharsets"
        fieldName: "UTF_8"
      valueType: "java.nio.charset.Charset"
      uuid: "charset"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StreamUtils"
      uuid: "StreamUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_copyToString1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "inputStream"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.nio.charset.Charset"
        method: "defaultCharset"
        methodParameters: []
      valueType: "java.nio.charset.Charset"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.core.env.PropertyResolver"
          uuid: "object2"
          collectionUuid: "list"
      valueType: "java.util.List"
      genericValueType: "org.springframework.core.env.PropertyResolver"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "sourceClass"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertyResolver"
      uuid: "object2"
      collectionUuid: "list"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.RuntimeException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "message1"
            valueType: "java.lang.String"
            uuid: "message"
      valueType: "java.lang.RuntimeException"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_copyToString1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Banner not printable: %s (%s: '%s')"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.RuntimeException"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "message1"
      valueType: "java.lang.String"
      uuid: "message"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 69
      expression: "for-each(getPropertyResolvers(environment, sourceClass))"
      range: "(69,37)-(69,82)"
      evaluatedAs: true
    - lineNumber: 74
      expression: "catch-exception (Exception)"
      range: "(74,3)-(74,21)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
- method:
    name: "getPropertyResolvers"
    sourceCodeSignature: "List<PropertyResolver> getPropertyResolvers(Environment\
      \ environment, Class<?> sourceClass)"
    returnType: "java.util.List"
    genericReturnType: "org.springframework.core.env.PropertyResolver"
    parameters:
    - name: "environment"
      type: "org.springframework.core.env.Environment"
    - name: "sourceClass"
      type: "java.lang.Class"
    instructionFingerprint: "98C6241F8A6204FB73FAE003F545CB27"
  paths:
  - pathId: "path1"
    testPathName: "getPropertyResolversWhenNotFormat"
    constructorSignature: "<init>(org.springframework.core.io.Resource) : void"
    modelFingerprint: "9ADB5CBB76C8BA80E9CF9CC3AC7119BE"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "938136B73E4E799E742BDAF524F53582"
      valueUuid: "target"
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "2AB40C7309B23844284816875A86BEFD"
      valueUuid: "environment"
    - type: "INPUT"
      name: "sourceClass"
      modelFingerprint: "ED77967986CC0CE32E9387BCB0C9BB3F"
      valueUuid: "sourceClass"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid10):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "CD82756CE227B3795F9AA3B8CF4323D4"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean1"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FC63CD97FFD33E6DB22062D341ABB5D5"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean1,message:uniqueUuid11):void2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "E97B1B215647A456976BAD20E92F84F8"
      valueUuid: "environment"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources2"
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "86B1459DB3AE515ED75DA88BAAE544EC"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "addLast(null:propertySource):void4"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "7A6668E2C94D6215E247A1FAA815C338"
      valueUuid: "mutablePropertySources2"
      methodExercised:
        expression: "forEach(action:uniqueUuid12):void3"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "43AB43ADF52DF3772BB731781EAC6E4D"
      methodExercised:
        expression: "getApplicationTitle(sourceClass:sourceClass):string"
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "ADF0FDDDDBA72CEF4DBC77B480C54811"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "addLast(propertySource:mapPropertySource):void5"
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "1AFC7BA19820598954F1ECD4B47A7972"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "addLast(propertySource:ansiPropertySource):void6"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "FB4509AF7C717A0200446C335894E039"
      methodExercised:
        expression: "getApplicationVersion(sourceClass:sourceClass):string2"
    - type: "STATIC"
      name: "SpringBootVersion.class.real"
      modelFingerprint: "D86CFDBE144150B8122DAEF78D40A575"
      valueUuid: "SpringBootVersion.class.real"
      methodExercised:
        expression: "getVersion():string3"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "82CE374CDF692E18056BDA7C527B555F"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "addLast(propertySource:mapPropertySource2):void7"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "BC9FD679BA7F5372058B6DA7B750F4F5"
      valueUuid: "arrayList"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "((ConfigurableEnvironment) environment).getPropertySources().forEach(sources::addLast);"
      lineNumber: 90
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: sources - Method: addLast"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ResourceBanner"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
      valueType: "org.springframework.boot.ResourceBanner"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "sourceClass"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must exist"
      valueType: "java.lang.String"
      uuid: "uniqueUuid11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.env.MutablePropertySources"
        parameters: []
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "propertySource"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources2"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Consumer"
      uuid: "uniqueUuid12"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getApplicationTitle1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "sourceClass"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.env.MutablePropertySources"
        parameters: []
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void5"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.core.env.MapPropertySource"
      uuid: "mapPropertySource"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.env.MutablePropertySources"
        parameters: []
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void6"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.boot.ansi.AnsiPropertySource"
      uuid: "ansiPropertySource"
      fixed: true
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string2"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "sourceClass"
    - sapientType: "REAL"
      valueType: "org.springframework.boot.SpringBootVersion"
      uuid: "SpringBootVersion.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "3.3.0-SNAPSHOT"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.env.MutablePropertySources"
        parameters: []
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void7"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.core.env.MapPropertySource"
      uuid: "mapPropertySource2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.core.env.PropertySourcesPropertyResolver"
            parameters:
            - name: "propertySources"
              value:
                sapientType: "OBJECT"
                content: !<new>
                  target: "org.springframework.core.env.MutablePropertySources"
                  parameters: []
                valueType: "org.springframework.core.env.MutablePropertySources"
                uuid: "mutablePropertySources"
                fixed: true
          valueType: "org.springframework.core.env.PropertySourcesPropertyResolver"
          uuid: "propertySourcesPropertyResolver"
          fixed: true
      valueType: "java.util.List"
      genericValueType: "org.springframework.core.env.PropertyResolver"
      uuid: "arrayList"
    branches:
    - lineNumber: 89
      expression: "environment instanceof ConfigurableEnvironment"
      range: "(89,7)-(89,52)"
      evaluatedAs: true
    - lineNumber: 103
      expression: "applicationTitle != null"
      range: "(103,6)-(103,29)"
      evaluatedAs: true
      internalMethodName: "getTitleSource"
    - lineNumber: 147
      expression: "version == null"
      range: "(147,7)-(147,21)"
      evaluatedAs: true
      internalMethodName: "getVersionString"
    - lineNumber: 150
      expression: "format"
      range: "(150,10)-(150,15)"
      evaluatedAs: false
      internalMethodName: "getVersionString"
  - pathId: "path2"
    testPathName: "getPropertyResolversWhenVersionIsNotNullAndNotFormat"
    constructorSignature: "<init>(org.springframework.core.io.Resource) : void"
    modelFingerprint: "1665345DD2F8FC6F6AA7BACD69B68657"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "938136B73E4E799E742BDAF524F53582"
      valueUuid: "target"
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "2AB40C7309B23844284816875A86BEFD"
      valueUuid: "environment"
    - type: "INPUT"
      name: "sourceClass"
      modelFingerprint: "ED77967986CC0CE32E9387BCB0C9BB3F"
      valueUuid: "sourceClass"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid17):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "CD82756CE227B3795F9AA3B8CF4323D4"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean1"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FC63CD97FFD33E6DB22062D341ABB5D5"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean1,message:uniqueUuid18):void2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "E97B1B215647A456976BAD20E92F84F8"
      valueUuid: "environment"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources2"
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "86B1459DB3AE515ED75DA88BAAE544EC"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "addLast(null:propertySource):void4"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "7A6668E2C94D6215E247A1FAA815C338"
      valueUuid: "mutablePropertySources2"
      methodExercised:
        expression: "forEach(action:uniqueUuid19):void3"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "43AB43ADF52DF3772BB731781EAC6E4D"
      methodExercised:
        expression: "getApplicationTitle(sourceClass:sourceClass):string"
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "ADF0FDDDDBA72CEF4DBC77B480C54811"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "addLast(propertySource:mapPropertySource):void5"
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "1AFC7BA19820598954F1ECD4B47A7972"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "addLast(propertySource:ansiPropertySource):void6"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "568B7B9E9688EF69ED3391E693342414"
      methodExercised:
        expression: "getApplicationVersion(sourceClass:sourceClass):string2"
    - type: "STATIC"
      name: "SpringBootVersion.class.real"
      modelFingerprint: "D86CFDBE144150B8122DAEF78D40A575"
      valueUuid: "SpringBootVersion.class.real"
      methodExercised:
        expression: "getVersion():string3"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "F94FDA1915A8D25885D3399BEE203807"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "addLast(propertySource:mapPropertySource2):void7"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "BC9FD679BA7F5372058B6DA7B750F4F5"
      valueUuid: "arrayList"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "((ConfigurableEnvironment) environment).getPropertySources().forEach(sources::addLast);"
      lineNumber: 90
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: sources - Method: addLast"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ResourceBanner"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
      valueType: "org.springframework.boot.ResourceBanner"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "sourceClass"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid17"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must exist"
      valueType: "java.lang.String"
      uuid: "uniqueUuid18"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.env.MutablePropertySources"
        parameters: []
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "propertySource"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources2"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Consumer"
      uuid: "uniqueUuid19"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getApplicationTitle1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "sourceClass"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.env.MutablePropertySources"
        parameters: []
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void5"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.core.env.MapPropertySource"
      uuid: "mapPropertySource"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.env.MutablePropertySources"
        parameters: []
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void6"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.boot.ansi.AnsiPropertySource"
      uuid: "ansiPropertySource"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "sourceClass"
    - sapientType: "REAL"
      valueType: "org.springframework.boot.SpringBootVersion"
      uuid: "SpringBootVersion.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "3.3.0-SNAPSHOT"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.env.MutablePropertySources"
        parameters: []
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void7"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.core.env.MapPropertySource"
      uuid: "mapPropertySource2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.core.env.PropertySourcesPropertyResolver"
            parameters:
            - name: "propertySources"
              value:
                sapientType: "OBJECT"
                content: !<new>
                  target: "org.springframework.core.env.MutablePropertySources"
                  parameters: []
                valueType: "org.springframework.core.env.MutablePropertySources"
                uuid: "mutablePropertySources"
                fixed: true
          valueType: "org.springframework.core.env.PropertySourcesPropertyResolver"
          uuid: "propertySourcesPropertyResolver"
          fixed: true
      valueType: "java.util.List"
      genericValueType: "org.springframework.core.env.PropertyResolver"
      uuid: "arrayList"
    branches:
    - lineNumber: 89
      expression: "environment instanceof ConfigurableEnvironment"
      range: "(89,7)-(89,52)"
      evaluatedAs: true
    - lineNumber: 103
      expression: "applicationTitle != null"
      range: "(103,6)-(103,29)"
      evaluatedAs: true
      internalMethodName: "getTitleSource"
    - lineNumber: 147
      expression: "version == null"
      range: "(147,7)-(147,21)"
      evaluatedAs: false
      internalMethodName: "getVersionString"
    - lineNumber: 150
      expression: "format"
      range: "(150,10)-(150,15)"
      evaluatedAs: false
      internalMethodName: "getVersionString"
  - pathId: "path3"
    testPathName: "getPropertyResolversWhenApplicationTitleIsNullAndVersionIsNotNullAndNotFormat"
    constructorSignature: "<init>(org.springframework.core.io.Resource) : void"
    modelFingerprint: "B10798B8389CC128811A2E1573FDBCF4"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "938136B73E4E799E742BDAF524F53582"
      valueUuid: "target"
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "2AB40C7309B23844284816875A86BEFD"
      valueUuid: "environment"
    - type: "INPUT"
      name: "sourceClass"
      modelFingerprint: "ED77967986CC0CE32E9387BCB0C9BB3F"
      valueUuid: "sourceClass"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid24):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "CD82756CE227B3795F9AA3B8CF4323D4"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean1"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FC63CD97FFD33E6DB22062D341ABB5D5"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean1,message:uniqueUuid25):void2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "E97B1B215647A456976BAD20E92F84F8"
      valueUuid: "environment"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources2"
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "86B1459DB3AE515ED75DA88BAAE544EC"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "addLast(null:propertySource):void4"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "7A6668E2C94D6215E247A1FAA815C338"
      valueUuid: "mutablePropertySources2"
      methodExercised:
        expression: "forEach(action:uniqueUuid26):void3"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "386479A6C73A73C6D880350320A16574"
      methodExercised:
        expression: "getApplicationTitle(sourceClass:sourceClass):string"
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "4DB4CE1864EC95AE0D4365E738159CF1"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "addLast(propertySource:mapPropertySource):void5"
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "1AFC7BA19820598954F1ECD4B47A7972"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "addLast(propertySource:ansiPropertySource):void6"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "568B7B9E9688EF69ED3391E693342414"
      methodExercised:
        expression: "getApplicationVersion(sourceClass:sourceClass):string2"
    - type: "STATIC"
      name: "SpringBootVersion.class.real"
      modelFingerprint: "D86CFDBE144150B8122DAEF78D40A575"
      valueUuid: "SpringBootVersion.class.real"
      methodExercised:
        expression: "getVersion():string3"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "F94FDA1915A8D25885D3399BEE203807"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "addLast(propertySource:mapPropertySource2):void7"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "BC9FD679BA7F5372058B6DA7B750F4F5"
      valueUuid: "arrayList"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "((ConfigurableEnvironment) environment).getPropertySources().forEach(sources::addLast);"
      lineNumber: 90
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: sources - Method: addLast"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ResourceBanner"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
      valueType: "org.springframework.boot.ResourceBanner"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "sourceClass"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid24"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must exist"
      valueType: "java.lang.String"
      uuid: "uniqueUuid25"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.env.MutablePropertySources"
        parameters: []
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "propertySource"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources2"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Consumer"
      uuid: "uniqueUuid26"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "sourceClass"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.env.MutablePropertySources"
        parameters: []
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void5"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.core.env.MapPropertySource"
      uuid: "mapPropertySource"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.env.MutablePropertySources"
        parameters: []
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void6"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.boot.ansi.AnsiPropertySource"
      uuid: "ansiPropertySource"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "sourceClass"
    - sapientType: "REAL"
      valueType: "org.springframework.boot.SpringBootVersion"
      uuid: "SpringBootVersion.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "3.3.0-SNAPSHOT"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.env.MutablePropertySources"
        parameters: []
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void7"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.core.env.MapPropertySource"
      uuid: "mapPropertySource2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.core.env.PropertySourcesPropertyResolver"
            parameters:
            - name: "propertySources"
              value:
                sapientType: "OBJECT"
                content: !<new>
                  target: "org.springframework.core.env.MutablePropertySources"
                  parameters: []
                valueType: "org.springframework.core.env.MutablePropertySources"
                uuid: "mutablePropertySources"
                fixed: true
          valueType: "org.springframework.core.env.PropertySourcesPropertyResolver"
          uuid: "propertySourcesPropertyResolver"
          fixed: true
      valueType: "java.util.List"
      genericValueType: "org.springframework.core.env.PropertyResolver"
      uuid: "arrayList"
    branches:
    - lineNumber: 89
      expression: "environment instanceof ConfigurableEnvironment"
      range: "(89,7)-(89,52)"
      evaluatedAs: true
    - lineNumber: 103
      expression: "applicationTitle != null"
      range: "(103,6)-(103,29)"
      evaluatedAs: false
      internalMethodName: "getTitleSource"
    - lineNumber: 147
      expression: "version == null"
      range: "(147,7)-(147,21)"
      evaluatedAs: false
      internalMethodName: "getVersionString"
    - lineNumber: 150
      expression: "format"
      range: "(150,10)-(150,15)"
      evaluatedAs: false
      internalMethodName: "getVersionString"
- method:
    name: "getApplicationTitle"
    sourceCodeSignature: "String getApplicationTitle(Class<?> sourceClass)"
    returnType: "java.lang.String"
    parameters:
    - name: "sourceClass"
      type: "java.lang.Class"
    instructionFingerprint: "ED781BC7465773138B9EA5B02A43D27E"
  paths:
  - pathId: "path1"
    testPathName: "getApplicationTitleWhenSourcePackageIsNotNull"
    constructorSignature: "<init>(org.springframework.core.io.Resource) : void"
    modelFingerprint: "1B2B0C1144476127C05514AE09BA1A41"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "938136B73E4E799E742BDAF524F53582"
      valueUuid: "target"
    - type: "INPUT"
      name: "sourceClass"
      modelFingerprint: "B2E337343E1870621319FE790F901E1D"
      valueUuid: "sourceClass"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid1):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "CD82756CE227B3795F9AA3B8CF4323D4"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean1"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FC63CD97FFD33E6DB22062D341ABB5D5"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean1,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "3B069F997AA68588C9A626969FFA418E"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ResourceBanner"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
      valueType: "org.springframework.boot.ResourceBanner"
      uuid: "target"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "sourceClass"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must exist"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 114
      expression: "sourceClass != null"
      range: "(114,28)-(114,46)"
      evaluatedAs: true
    - lineNumber: 115
      expression: "sourcePackage != null"
      range: "(115,11)-(115,31)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "getApplicationTitleWhenSourceClassIsNullAndSourcePackageIsNull"
    constructorSignature: "<init>(org.springframework.core.io.Resource) : void"
    modelFingerprint: "87254EBD6657BA9661A5A93DB84D8B9C"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "938136B73E4E799E742BDAF524F53582"
      valueUuid: "target"
    - type: "INPUT"
      name: "sourceClass"
      modelFingerprint: "9209C883A63923EE90421167F0224708"
      valueUuid: "sourceClass"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid33):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "CD82756CE227B3795F9AA3B8CF4323D4"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean1"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FC63CD97FFD33E6DB22062D341ABB5D5"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean1,message:uniqueUuid34):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "494333D8A9619E3B4E57274C75B778A3"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ResourceBanner"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
      valueType: "org.springframework.boot.ResourceBanner"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "sourceClass"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid33"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must exist"
      valueType: "java.lang.String"
      uuid: "uniqueUuid34"
      fixed: true
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
      fixed: true
    branches:
    - lineNumber: 114
      expression: "sourceClass != null"
      range: "(114,28)-(114,46)"
      evaluatedAs: false
    - lineNumber: 115
      expression: "sourcePackage != null"
      range: "(115,11)-(115,31)"
      evaluatedAs: false
- method:
    name: "getApplicationVersion"
    sourceCodeSignature: "String getApplicationVersion(Class<?> sourceClass)"
    returnType: "java.lang.String"
    parameters:
    - name: "sourceClass"
      type: "java.lang.Class"
    instructionFingerprint: "8F15970A19CB72EFB48AC1785F795274"
  paths:
  - pathId: "path1"
    testPathName: "getApplicationVersionWhenSourcePackageIsNotNull"
    constructorSignature: "<init>(org.springframework.core.io.Resource) : void"
    modelFingerprint: "1B2B0C1144476127C05514AE09BA1A41"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "938136B73E4E799E742BDAF524F53582"
      valueUuid: "target"
    - type: "INPUT"
      name: "sourceClass"
      modelFingerprint: "B2E337343E1870621319FE790F901E1D"
      valueUuid: "sourceClass"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid1):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "CD82756CE227B3795F9AA3B8CF4323D4"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean1"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FC63CD97FFD33E6DB22062D341ABB5D5"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean1,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "3B069F997AA68588C9A626969FFA418E"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ResourceBanner"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
      valueType: "org.springframework.boot.ResourceBanner"
      uuid: "target"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "sourceClass"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must exist"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 138
      expression: "sourceClass != null"
      range: "(138,28)-(138,46)"
      evaluatedAs: true
    - lineNumber: 139
      expression: "sourcePackage != null"
      range: "(139,11)-(139,31)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "getApplicationVersionWhenSourceClassIsNullAndSourcePackageIsNull"
    constructorSignature: "<init>(org.springframework.core.io.Resource) : void"
    modelFingerprint: "87254EBD6657BA9661A5A93DB84D8B9C"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "938136B73E4E799E742BDAF524F53582"
      valueUuid: "target"
    - type: "INPUT"
      name: "sourceClass"
      modelFingerprint: "9209C883A63923EE90421167F0224708"
      valueUuid: "sourceClass"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid37):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "CD82756CE227B3795F9AA3B8CF4323D4"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean1"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FC63CD97FFD33E6DB22062D341ABB5D5"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean1,message:uniqueUuid38):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "494333D8A9619E3B4E57274C75B778A3"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ResourceBanner"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
      valueType: "org.springframework.boot.ResourceBanner"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "sourceClass"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid37"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must exist"
      valueType: "java.lang.String"
      uuid: "uniqueUuid38"
      fixed: true
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
      fixed: true
    branches:
    - lineNumber: 138
      expression: "sourceClass != null"
      range: "(138,28)-(138,46)"
      evaluatedAs: false
    - lineNumber: 139
      expression: "sourcePackage != null"
      range: "(139,11)-(139,31)"
      evaluatedAs: false
- method:
    name: "getBootVersion"
    sourceCodeSignature: "String getBootVersion()"
    returnType: "java.lang.String"
    instructionFingerprint: "AA81767D9CB109DFF3E6EC61B156E0D1"
  paths:
  - pathId: "path1"
    testPathName: "getBootVersionTest"
    constructorSignature: "<init>(org.springframework.core.io.Resource) : void"
    modelFingerprint: "44331A1D03F1F56FE477C2E993B5C2CC"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "938136B73E4E799E742BDAF524F53582"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid39):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "CD82756CE227B3795F9AA3B8CF4323D4"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean1"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FC63CD97FFD33E6DB22062D341ABB5D5"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean1,message:uniqueUuid40):void2"
        staticAccess: true
    - type: "STATIC"
      name: "SpringBootVersion.class.real"
      modelFingerprint: "D86CFDBE144150B8122DAEF78D40A575"
      valueUuid: "SpringBootVersion.class.real"
      methodExercised:
        expression: "getVersion():string"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4F6F0EE528E6C81FAC086470251CA52D"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ResourceBanner"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
      valueType: "org.springframework.boot.ResourceBanner"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid39"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must exist"
      valueType: "java.lang.String"
      uuid: "uniqueUuid40"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.boot.SpringBootVersion"
      uuid: "SpringBootVersion.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "3.3.0-SNAPSHOT"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "3.3.0-SNAPSHOT"
      valueType: "java.lang.String"
      uuid: "string"
