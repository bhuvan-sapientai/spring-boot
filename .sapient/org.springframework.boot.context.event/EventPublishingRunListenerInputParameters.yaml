---
modelFingerprint: "5693EC9BFCF8011194B70F8AC43D518E"
targetClass:
  fullClassName: "org.springframework.boot.context.event.EventPublishingRunListener"
methods:
- method:
    name: "getOrder"
    sourceCodeSignature: "int getOrder()"
    returnType: "int"
    instructionFingerprint: "5CCCD28068BEDF66326C9AB359DAF377"
  paths:
  - pathId: "path1"
    testPathName: "getOrderTest"
    constructorSignature: "<init>(org.springframework.boot.SpringApplication,java.lang.String[])\
      \ : void"
    modelFingerprint: "37F5BD8574270CC05D0374F9E639891E"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "52E330C3C96336077F14DB882A20A8BC"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "99AA433F19FD72FDCF2C9959BA104AF4"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.event.EventPublishingRunListener"
        parameters:
        - name: "application"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.SpringApplication"
            uuid: "application"
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "args"
      valueType: "org.springframework.boot.context.event.EventPublishingRunListener"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "starting"
    sourceCodeSignature: "void starting(ConfigurableBootstrapContext bootstrapContext)"
    returnType: "void"
    parameters:
    - name: "bootstrapContext"
      type: "org.springframework.boot.ConfigurableBootstrapContext"
    instructionFingerprint: "9DF80B6EB0D98A22EC12C2A3C01A0746"
  paths:
  - pathId: "path1"
    testPathName: "startingTest"
    constructorSignature: "<init>(org.springframework.boot.SpringApplication,java.lang.String[])\
      \ : void"
    modelFingerprint: "BFA149A8E1231BA46A94B67C5C0B6339"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4ED339E20FD6D33B2DA9F1B04AB23FBB"
      valueUuid: "target"
    - type: "INPUT"
      name: "bootstrapContext"
      modelFingerprint: "10B4C5E8932B1B51CBD0F88CC11CB35F"
      valueUuid: "bootstrapContext"
    - type: "FIELD"
      name: "application"
      modelFingerprint: "71EB2D33D4D5679F0DC39D2573428905"
      valueUuid: "application"
      methodExercised:
        expression: "getListeners():set"
    - type: "FIELD"
      name: "initialMulticaster"
      modelFingerprint: "8F4AA02E5A592E4B6E097D4DE52CFFA6"
      valueUuid: "simpleApplicationEventMulticaster"
      methodExercised:
        expression: "addApplicationListener(null:applicationListener):void2"
    - type: "FIELD"
      name: "initialMulticaster"
      modelFingerprint: "4B1B3667521C9415CE27D43F270C4928"
      valueUuid: "simpleApplicationEventMulticaster"
      methodExercised:
        expression: "multicastEvent(event:applicationStartingEvent):void3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "this.application.getListeners().forEach(this.initialMulticaster::addApplicationListener);"
      lineNumber: 140
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: initialMulticaster - Method: addApplicationListener"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.event.EventPublishingRunListener"
        parameters:
        - name: "application"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.SpringApplication"
            uuid: "application"
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "args"
      valueType: "org.springframework.boot.context.event.EventPublishingRunListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ConfigurableBootstrapContext"
      uuid: "bootstrapContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.SpringApplication"
      uuid: "application"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashSet"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.context.ApplicationListener"
          genericValueType: "?"
          uuid: "applicationListener"
          collectionUuid: "set"
      valueType: "java.util.Set"
      genericValueType: "org.springframework.context.ApplicationListener<?>"
      uuid: "set"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.context.event.SimpleApplicationEventMulticaster"
        parameters: []
      valueType: "org.springframework.context.event.SimpleApplicationEventMulticaster"
      uuid: "simpleApplicationEventMulticaster"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationListener"
      genericValueType: "?"
      uuid: "applicationListener"
      collectionUuid: "set"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.context.event.SimpleApplicationEventMulticaster"
        parameters: []
      valueType: "org.springframework.context.event.SimpleApplicationEventMulticaster"
      uuid: "simpleApplicationEventMulticaster"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.boot.context.event.ApplicationStartingEvent"
      uuid: "applicationStartingEvent"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "environmentPrepared"
    sourceCodeSignature: "void environmentPrepared(ConfigurableBootstrapContext bootstrapContext,\
      \ ConfigurableEnvironment environment)"
    returnType: "void"
    parameters:
    - name: "bootstrapContext"
      type: "org.springframework.boot.ConfigurableBootstrapContext"
    - name: "environment"
      type: "org.springframework.core.env.ConfigurableEnvironment"
    instructionFingerprint: "4D863DE76801ABF86FD57BED7787F425"
  paths:
  - pathId: "path1"
    testPathName: "environmentPreparedTest"
    constructorSignature: "<init>(org.springframework.boot.SpringApplication,java.lang.String[])\
      \ : void"
    modelFingerprint: "9D83DCAF07EC0A513430AE1A09264914"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4ED339E20FD6D33B2DA9F1B04AB23FBB"
      valueUuid: "target"
    - type: "INPUT"
      name: "bootstrapContext"
      modelFingerprint: "10B4C5E8932B1B51CBD0F88CC11CB35F"
      valueUuid: "bootstrapContext"
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "3F73E3E0E26E26EEEFAD4DD95D3AE3D4"
      valueUuid: "environment"
    - type: "FIELD"
      name: "application"
      modelFingerprint: "71EB2D33D4D5679F0DC39D2573428905"
      valueUuid: "application"
      methodExercised:
        expression: "getListeners():set"
    - type: "FIELD"
      name: "initialMulticaster"
      modelFingerprint: "8F4AA02E5A592E4B6E097D4DE52CFFA6"
      valueUuid: "simpleApplicationEventMulticaster"
      methodExercised:
        expression: "addApplicationListener(null:applicationListener):void2"
    - type: "FIELD"
      name: "initialMulticaster"
      modelFingerprint: "12471BF295753826C9832067C7278805"
      valueUuid: "simpleApplicationEventMulticaster"
      methodExercised:
        expression: "multicastEvent(event:applicationEnvironmentPreparedEvent):void3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "this.application.getListeners().forEach(this.initialMulticaster::addApplicationListener);"
      lineNumber: 140
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: initialMulticaster - Method: addApplicationListener"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.event.EventPublishingRunListener"
        parameters:
        - name: "application"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.SpringApplication"
            uuid: "application"
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "args"
      valueType: "org.springframework.boot.context.event.EventPublishingRunListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ConfigurableBootstrapContext"
      uuid: "bootstrapContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.SpringApplication"
      uuid: "application"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashSet"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.context.ApplicationListener"
          genericValueType: "?"
          uuid: "applicationListener"
          collectionUuid: "set"
      valueType: "java.util.Set"
      genericValueType: "org.springframework.context.ApplicationListener<?>"
      uuid: "set"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.context.event.SimpleApplicationEventMulticaster"
        parameters: []
      valueType: "org.springframework.context.event.SimpleApplicationEventMulticaster"
      uuid: "simpleApplicationEventMulticaster"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationListener"
      genericValueType: "?"
      uuid: "applicationListener"
      collectionUuid: "set"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.context.event.SimpleApplicationEventMulticaster"
        parameters: []
      valueType: "org.springframework.context.event.SimpleApplicationEventMulticaster"
      uuid: "simpleApplicationEventMulticaster"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
      uuid: "applicationEnvironmentPreparedEvent"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "contextPrepared"
    sourceCodeSignature: "void contextPrepared(ConfigurableApplicationContext context)"
    returnType: "void"
    parameters:
    - name: "context"
      type: "org.springframework.context.ConfigurableApplicationContext"
    instructionFingerprint: "3C67E4A31619BAC41F43291C85BDBD1B"
  paths:
  - pathId: "path1"
    testPathName: "contextPreparedTest"
    constructorSignature: "<init>(org.springframework.boot.SpringApplication,java.lang.String[])\
      \ : void"
    modelFingerprint: "7D42147A9A647ABD22F4FE81863BDFCC"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4ED339E20FD6D33B2DA9F1B04AB23FBB"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "6DEF13B8BEABCF66180D86ACB2708D19"
      valueUuid: "context"
    - type: "FIELD"
      name: "application"
      modelFingerprint: "71EB2D33D4D5679F0DC39D2573428905"
      valueUuid: "application"
      methodExercised:
        expression: "getListeners():set"
    - type: "FIELD"
      name: "initialMulticaster"
      modelFingerprint: "8F4AA02E5A592E4B6E097D4DE52CFFA6"
      valueUuid: "simpleApplicationEventMulticaster"
      methodExercised:
        expression: "addApplicationListener(null:applicationListener):void2"
    - type: "FIELD"
      name: "initialMulticaster"
      modelFingerprint: "C2534A97C31D5B1B9AC5A48D78AE33E4"
      valueUuid: "simpleApplicationEventMulticaster"
      methodExercised:
        expression: "multicastEvent(event:applicationContextInitializedEvent):void3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "this.application.getListeners().forEach(this.initialMulticaster::addApplicationListener);"
      lineNumber: 140
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: initialMulticaster - Method: addApplicationListener"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.event.EventPublishingRunListener"
        parameters:
        - name: "application"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.SpringApplication"
            uuid: "application"
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "args"
      valueType: "org.springframework.boot.context.event.EventPublishingRunListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ConfigurableApplicationContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.SpringApplication"
      uuid: "application"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashSet"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.context.ApplicationListener"
          genericValueType: "?"
          uuid: "applicationListener"
          collectionUuid: "set"
      valueType: "java.util.Set"
      genericValueType: "org.springframework.context.ApplicationListener<?>"
      uuid: "set"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.context.event.SimpleApplicationEventMulticaster"
        parameters: []
      valueType: "org.springframework.context.event.SimpleApplicationEventMulticaster"
      uuid: "simpleApplicationEventMulticaster"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationListener"
      genericValueType: "?"
      uuid: "applicationListener"
      collectionUuid: "set"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.context.event.SimpleApplicationEventMulticaster"
        parameters: []
      valueType: "org.springframework.context.event.SimpleApplicationEventMulticaster"
      uuid: "simpleApplicationEventMulticaster"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.boot.context.event.ApplicationContextInitializedEvent"
      uuid: "applicationContextInitializedEvent"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "contextLoaded"
    sourceCodeSignature: "void contextLoaded(ConfigurableApplicationContext context)"
    returnType: "void"
    parameters:
    - name: "context"
      type: "org.springframework.context.ConfigurableApplicationContext"
    instructionFingerprint: "314236E85B1FBAB629027EF5A4169EFA"
  paths:
  - pathId: "path1"
    testPathName: "contextLoadedWhenListenerNotInstanceOfApplicationContextAware"
    constructorSignature: "<init>(org.springframework.boot.SpringApplication,java.lang.String[])\
      \ : void"
    modelFingerprint: "E070F0D9C2FA3DC5D12D6A1AD3352A94"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4ED339E20FD6D33B2DA9F1B04AB23FBB"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "22F7680E81C8A00E4B019BF90B716E88"
      valueUuid: "context"
    - type: "FIELD"
      name: "application"
      modelFingerprint: "71EB2D33D4D5679F0DC39D2573428905"
      valueUuid: "application"
      methodExercised:
        expression: "getListeners():set"
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "792B09A33DED96B1EE08DB4FBA9FA659"
      valueUuid: "context"
      methodExercised:
        expression: "addApplicationListener(listener:object):void"
    - type: "FIELD"
      name: "application"
      modelFingerprint: "71EB2D33D4D5679F0DC39D2573428905"
      valueUuid: "application"
      methodExercised:
        expression: "getListeners():set2"
    - type: "FIELD"
      name: "initialMulticaster"
      modelFingerprint: "8F4AA02E5A592E4B6E097D4DE52CFFA6"
      valueUuid: "simpleApplicationEventMulticaster"
      methodExercised:
        expression: "addApplicationListener(null:applicationListener):void3"
    - type: "FIELD"
      name: "initialMulticaster"
      modelFingerprint: "52C4422F1683648AAC24F921CFC67E5C"
      valueUuid: "simpleApplicationEventMulticaster"
      methodExercised:
        expression: "multicastEvent(event:applicationPreparedEvent):void4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "this.application.getListeners().forEach(this.initialMulticaster::addApplicationListener);"
      lineNumber: 140
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: initialMulticaster - Method: addApplicationListener"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.event.EventPublishingRunListener"
        parameters:
        - name: "application"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.SpringApplication"
            uuid: "application"
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "args"
      valueType: "org.springframework.boot.context.event.EventPublishingRunListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ConfigurableApplicationContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.SpringApplication"
      uuid: "application"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashSet"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.context.ApplicationListener"
          genericValueType: "?"
          uuid: "object"
          collectionUuid: "set"
      valueType: "java.util.Set"
      genericValueType: "org.springframework.context.ApplicationListener<?>"
      uuid: "set"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ConfigurableApplicationContext"
      uuid: "context"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationListener"
      genericValueType: "?"
      uuid: "object"
      collectionUuid: "set"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.SpringApplication"
      uuid: "application"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashSet"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.context.ApplicationListener"
          genericValueType: "?"
          uuid: "applicationListener"
          collectionUuid: "set2"
      valueType: "java.util.Set"
      genericValueType: "org.springframework.context.ApplicationListener<?>"
      uuid: "set2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.context.event.SimpleApplicationEventMulticaster"
        parameters: []
      valueType: "org.springframework.context.event.SimpleApplicationEventMulticaster"
      uuid: "simpleApplicationEventMulticaster"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationListener"
      genericValueType: "?"
      uuid: "applicationListener"
      collectionUuid: "set2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.context.event.SimpleApplicationEventMulticaster"
        parameters: []
      valueType: "org.springframework.context.event.SimpleApplicationEventMulticaster"
      uuid: "simpleApplicationEventMulticaster"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.boot.context.event.ApplicationPreparedEvent"
      uuid: "applicationPreparedEvent"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 92
      expression: "for-each(this.application.getListeners())"
      range: "(92,42)-(92,72)"
      evaluatedAs: true
    - lineNumber: 93
      expression: "listener instanceof ApplicationContextAware contextAware"
      range: "(93,8)-(93,63)"
      evaluatedAs: false
- method:
    name: "started"
    sourceCodeSignature: "void started(ConfigurableApplicationContext context, Duration\
      \ timeTaken)"
    returnType: "void"
    parameters:
    - name: "context"
      type: "org.springframework.context.ConfigurableApplicationContext"
    - name: "timeTaken"
      type: "java.time.Duration"
    instructionFingerprint: "EB68BABA904EDD430BFC4D319FCD7B54"
  paths:
  - pathId: "path1"
    testPathName: "startedTest"
    constructorSignature: "<init>(org.springframework.boot.SpringApplication,java.lang.String[])\
      \ : void"
    modelFingerprint: "AC9D575804648C0E0B22BA2DFAED988E"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "52E330C3C96336077F14DB882A20A8BC"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "22F7680E81C8A00E4B019BF90B716E88"
      valueUuid: "context"
    - type: "INPUT"
      name: "timeTaken"
      modelFingerprint: "29263421FF8181F1EA1C2D31E3BBA7A1"
      valueUuid: "timeTaken"
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "D57F76BB192B0041DDDDC4D7E805B90C"
      valueUuid: "context"
      methodExercised:
        expression: "publishEvent(event:applicationStartedEvent):void"
    - type: "STATIC"
      name: "AvailabilityChangeEvent.class"
      modelFingerprint: "E84E5A56A68E116B213ACDCEE824ACD8"
      valueUuid: "AvailabilityChangeEvent.class"
      methodExercised:
        expression: "publish(context:context,state:Enum-org.springframework.boot.availability.LivenessState-CORRECT):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.event.EventPublishingRunListener"
        parameters:
        - name: "application"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.SpringApplication"
            uuid: "application"
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "args"
      valueType: "org.springframework.boot.context.event.EventPublishingRunListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ConfigurableApplicationContext"
      uuid: "context"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.time.Duration"
        method: "ofDays"
        methodParameters:
        - name: "days"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "long"
            uuid: "timeTaken-days"
      valueType: "java.time.Duration"
      uuid: "timeTaken"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ConfigurableApplicationContext"
      uuid: "context"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.boot.context.event.ApplicationStartedEvent"
      uuid: "applicationStartedEvent"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityChangeEvent"
      uuid: "AvailabilityChangeEvent.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ConfigurableApplicationContext"
      uuid: "context"
    - sapientType: "ENUM"
      content: !<regular>
        value: "CORRECT"
      valueType: "org.springframework.boot.availability.LivenessState"
      uuid: "Enum-org.springframework.boot.availability.LivenessState-CORRECT"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "ready"
    sourceCodeSignature: "void ready(ConfigurableApplicationContext context, Duration\
      \ timeTaken)"
    returnType: "void"
    parameters:
    - name: "context"
      type: "org.springframework.context.ConfigurableApplicationContext"
    - name: "timeTaken"
      type: "java.time.Duration"
    instructionFingerprint: "7930964395FF8565172AA9AE26D5EC6E"
  paths:
  - pathId: "path1"
    testPathName: "readyTest"
    constructorSignature: "<init>(org.springframework.boot.SpringApplication,java.lang.String[])\
      \ : void"
    modelFingerprint: "B756806C29BDA5D91B09747DF0BF0520"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "52E330C3C96336077F14DB882A20A8BC"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "22F7680E81C8A00E4B019BF90B716E88"
      valueUuid: "context"
    - type: "INPUT"
      name: "timeTaken"
      modelFingerprint: "29263421FF8181F1EA1C2D31E3BBA7A1"
      valueUuid: "timeTaken"
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "744B6209B06E5D9F91467CCAA7300B40"
      valueUuid: "context"
      methodExercised:
        expression: "publishEvent(event:applicationReadyEvent):void"
    - type: "STATIC"
      name: "AvailabilityChangeEvent.class"
      modelFingerprint: "065DC6ACB2E474CE8CDA1927C0AB37F7"
      valueUuid: "AvailabilityChangeEvent.class"
      methodExercised:
        expression: "publish(context:context,state:Enum-org.springframework.boot.availability.ReadinessState-ACCEPTING_TRAFFIC):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.event.EventPublishingRunListener"
        parameters:
        - name: "application"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.SpringApplication"
            uuid: "application"
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "args"
      valueType: "org.springframework.boot.context.event.EventPublishingRunListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ConfigurableApplicationContext"
      uuid: "context"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.time.Duration"
        method: "ofDays"
        methodParameters:
        - name: "days"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "long"
            uuid: "timeTaken-days"
      valueType: "java.time.Duration"
      uuid: "timeTaken"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ConfigurableApplicationContext"
      uuid: "context"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.boot.context.event.ApplicationReadyEvent"
      uuid: "applicationReadyEvent"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityChangeEvent"
      uuid: "AvailabilityChangeEvent.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ConfigurableApplicationContext"
      uuid: "context"
    - sapientType: "ENUM"
      content: !<regular>
        value: "ACCEPTING_TRAFFIC"
      valueType: "org.springframework.boot.availability.ReadinessState"
      uuid: "Enum-org.springframework.boot.availability.ReadinessState-ACCEPTING_TRAFFIC"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "failed"
    sourceCodeSignature: "void failed(ConfigurableApplicationContext context, Throwable\
      \ exception)"
    returnType: "void"
    parameters:
    - name: "context"
      type: "org.springframework.context.ConfigurableApplicationContext"
    - name: "exception"
      type: "java.lang.Throwable"
    instructionFingerprint: "ED4B25F4CCC30B20EB9A16C536DF0F77"
  paths:
  - pathId: "path1"
    testPathName: "failedWhenContextIsActive"
    constructorSignature: "<init>(org.springframework.boot.SpringApplication,java.lang.String[])\
      \ : void"
    modelFingerprint: "AC0ECF0C61B9816D0FDE28522642D9F2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "52E330C3C96336077F14DB882A20A8BC"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "22F7680E81C8A00E4B019BF90B716E88"
      valueUuid: "context"
    - type: "INPUT"
      name: "exception"
      modelFingerprint: "05CFBBFC0FF149D82C9CF6A24EF7BD27"
      valueUuid: "exception"
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "584F21E7A1D2791A7B2CE8049FF47762"
      valueUuid: "context"
      methodExercised:
        expression: "isActive():boolean1"
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "D0686F21F253C64797170B94764808C6"
      valueUuid: "context"
      methodExercised:
        expression: "publishEvent(event:applicationFailedEvent):void"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.event.EventPublishingRunListener"
        parameters:
        - name: "application"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.SpringApplication"
            uuid: "application"
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "args"
      valueType: "org.springframework.boot.context.event.EventPublishingRunListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ConfigurableApplicationContext"
      uuid: "context"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "exception"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ConfigurableApplicationContext"
      uuid: "context"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ConfigurableApplicationContext"
      uuid: "context"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.boot.context.event.ApplicationFailedEvent"
      uuid: "applicationFailedEvent"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 116
      expression: "context != null"
      range: "(116,7)-(116,21)"
      evaluatedAs: true
    - lineNumber: 116
      expression: "context.isActive()"
      range: "(116,26)-(116,43)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "failedWhenContextNotIsActiveAndContextNotInstanceOfAbstractApplicationContext"
    constructorSignature: "<init>(org.springframework.boot.SpringApplication,java.lang.String[])\
      \ : void"
    modelFingerprint: "8D1BDEA61923A4EA224F487597E80CF8"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "52E330C3C96336077F14DB882A20A8BC"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "22F7680E81C8A00E4B019BF90B716E88"
      valueUuid: "context"
    - type: "INPUT"
      name: "exception"
      modelFingerprint: "05CFBBFC0FF149D82C9CF6A24EF7BD27"
      valueUuid: "exception"
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "7F6A4EF5E61107A3FD8127C6C0E812E3"
      valueUuid: "context"
      methodExercised:
        expression: "isActive():boolean1"
    - type: "FIELD"
      name: "initialMulticaster"
      modelFingerprint: "EDB1E0648762A4A1166A840A97424B22"
      valueUuid: "simpleApplicationEventMulticaster"
      methodExercised:
        expression: "multicastEvent(event:applicationFailedEvent):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "this.initialMulticaster.multicastEvent(event);"
      lineNumber: 130
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: initialMulticaster - Method: multicastEvent"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.event.EventPublishingRunListener"
        parameters:
        - name: "application"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.SpringApplication"
            uuid: "application"
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "args"
      valueType: "org.springframework.boot.context.event.EventPublishingRunListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ConfigurableApplicationContext"
      uuid: "context"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "exception"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ConfigurableApplicationContext"
      uuid: "context"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.context.event.SimpleApplicationEventMulticaster"
        parameters: []
        propertiesMap:
          errorHandler:
            sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
            valueType: "org.springframework.util.ErrorHandler"
            uuid: "errorHandler"
      valueType: "org.springframework.context.event.SimpleApplicationEventMulticaster"
      uuid: "simpleApplicationEventMulticaster"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.boot.context.event.ApplicationFailedEvent"
      uuid: "applicationFailedEvent"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 116
      expression: "context != null"
      range: "(116,7)-(116,21)"
      evaluatedAs: true
    - lineNumber: 116
      expression: "context.isActive()"
      range: "(116,26)-(116,43)"
      evaluatedAs: false
    - lineNumber: 124
      expression: "context instanceof AbstractApplicationContext abstractApplicationContext"
      range: "(124,8)-(124,79)"
      evaluatedAs: false
