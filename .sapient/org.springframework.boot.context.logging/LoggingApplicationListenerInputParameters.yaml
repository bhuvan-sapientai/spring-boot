---
modelFingerprint: "4006157E3F50A022F9AC534F6E1C5DD9"
targetClass:
  fullClassName: "org.springframework.boot.context.logging.LoggingApplicationListener"
methods:
- method:
    name: "supportsEventType"
    sourceCodeSignature: "boolean supportsEventType(ResolvableType resolvableType)"
    returnType: "boolean"
    parameters:
    - name: "resolvableType"
      type: "org.springframework.core.ResolvableType"
    instructionFingerprint: "8D83954BEC49A63D6776B8B2DF862BC0"
  paths:
  - pathId: "path1"
    testPathName: "supportsEventTypeWhenSupportedTypeIsAssignableFromType"
    constructorSignature: "<init>() : void"
    modelFingerprint: "CC84A3B2F46C825F5A14580F962D0E86"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "resolvableType"
      modelFingerprint: "7C096C28936DF2E33919BA9049EB80B0"
      valueUuid: "resolvableType"
    - type: "LOCAL_VARIABLE"
      name: "resolvableType"
      modelFingerprint: "80DA6634E487F40863C3811AC42CFD5A"
      valueUuid: "resolvableType"
      methodExercised:
        expression: "getRawClass():class"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isAssignableFrom(java.lang.Class<?>)\
        \ : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.logging.LoggingApplicationListener"
        parameters: []
      valueType: "org.springframework.boot.context.logging.LoggingApplicationListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 207
      expression: "type != null"
      range: "(207,7)-(207,18)"
      evaluatedAs: true
      internalMethodName: "isAssignableFrom"
    - lineNumber: 208
      expression: "for-each(supportedTypes)"
      range: "(208,34)-(208,47)"
      evaluatedAs: true
      internalMethodName: "isAssignableFrom"
    - lineNumber: 209
      expression: "supportedType.isAssignableFrom(type)"
      range: "(209,9)-(209,44)"
      evaluatedAs: true
      internalMethodName: "isAssignableFrom"
  - pathId: "path2"
    testPathName: "supportsEventTypeWhenSupportedTypeNotIsAssignableFromType"
    constructorSignature: "<init>() : void"
    modelFingerprint: "D96BB7E670A642C7E3C937E15B887642"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "resolvableType"
      modelFingerprint: "7C096C28936DF2E33919BA9049EB80B0"
      valueUuid: "resolvableType"
    - type: "LOCAL_VARIABLE"
      name: "resolvableType"
      modelFingerprint: "80DA6634E487F40863C3811AC42CFD5A"
      valueUuid: "resolvableType"
      methodExercised:
        expression: "getRawClass():class"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5633A2B0C967879105766C98D64A3959"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isAssignableFrom(java.lang.Class<?>)\
        \ : boolean"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.logging.LoggingApplicationListener"
        parameters: []
      valueType: "org.springframework.boot.context.logging.LoggingApplicationListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 207
      expression: "type != null"
      range: "(207,7)-(207,18)"
      evaluatedAs: true
      internalMethodName: "isAssignableFrom"
    - lineNumber: 208
      expression: "for-each(supportedTypes)"
      range: "(208,34)-(208,47)"
      evaluatedAs: true
      internalMethodName: "isAssignableFrom"
    - lineNumber: 209
      expression: "supportedType.isAssignableFrom(type)"
      range: "(209,9)-(209,44)"
      evaluatedAs: false
      internalMethodName: "isAssignableFrom"
- method:
    name: "supportsSourceType"
    sourceCodeSignature: "boolean supportsSourceType(Class<?> sourceType)"
    returnType: "boolean"
    parameters:
    - name: "sourceType"
      type: "java.lang.Class"
    instructionFingerprint: "4E18904AA6D18B248DE294A930AA4AA4"
  paths:
  - pathId: "path1"
    testPathName: "supportsSourceTypeWhenSupportedTypeIsAssignableFromType"
    constructorSignature: "<init>() : void"
    modelFingerprint: "0E4A3135D83DEB77E8E457A446B12BCC"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "sourceType"
      modelFingerprint: "3040701FEB9CD54D1C47E46550ED05FB"
      valueUuid: "sourceType"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isAssignableFrom(java.lang.Class<?>)\
        \ : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.logging.LoggingApplicationListener"
        parameters: []
      valueType: "org.springframework.boot.context.logging.LoggingApplicationListener"
      uuid: "target"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "sourceType"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 207
      expression: "type != null"
      range: "(207,7)-(207,18)"
      evaluatedAs: true
      internalMethodName: "isAssignableFrom"
    - lineNumber: 208
      expression: "for-each(supportedTypes)"
      range: "(208,34)-(208,47)"
      evaluatedAs: true
      internalMethodName: "isAssignableFrom"
    - lineNumber: 209
      expression: "supportedType.isAssignableFrom(type)"
      range: "(209,9)-(209,44)"
      evaluatedAs: true
      internalMethodName: "isAssignableFrom"
  - pathId: "path2"
    testPathName: "supportsSourceTypeWhenSupportedTypeNotIsAssignableFromType"
    constructorSignature: "<init>() : void"
    modelFingerprint: "ED190F2149A08DA538FA9E18AF3D4DF6"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "sourceType"
      modelFingerprint: "274C5B744840839E6C609385C7EC5319"
      valueUuid: "sourceType"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5633A2B0C967879105766C98D64A3959"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.logging.LoggingApplicationListener"
        parameters: []
      valueType: "org.springframework.boot.context.logging.LoggingApplicationListener"
      uuid: "target"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "sourceType"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 207
      expression: "type != null"
      range: "(207,7)-(207,18)"
      evaluatedAs: true
      internalMethodName: "isAssignableFrom"
    - lineNumber: 208
      expression: "for-each(supportedTypes)"
      range: "(208,34)-(208,47)"
      evaluatedAs: true
      internalMethodName: "isAssignableFrom"
    - lineNumber: 209
      expression: "supportedType.isAssignableFrom(type)"
      range: "(209,9)-(209,44)"
      evaluatedAs: false
      internalMethodName: "isAssignableFrom"
- method:
    name: "onApplicationEvent"
    sourceCodeSignature: "void onApplicationEvent(ApplicationEvent event)"
    returnType: "void"
    parameters:
    - name: "event"
      type: "org.springframework.context.ApplicationEvent"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Throwable"
    instructionFingerprint: "0131761AA87D373FDE8595E70ECCAD8C"
  paths:
  - pathId: "path1"
    testPathName: "onApplicationEventWhenEventInstanceOfApplicationStartingEvent"
    constructorSignature: "<init>() : void"
    modelFingerprint: "4D2710FEF98851D19399B9A2132ED9CB"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "event"
      modelFingerprint: "019EF865E9856D08E62DED22E4A2CF9C"
      valueUuid: "event"
    - type: "LOCAL_VARIABLE"
      name: "event"
      modelFingerprint: "9E3D8947F92FC18155924849AB317088"
      valueUuid: "event"
      methodExercised:
        expression: "getSpringApplication():springApplication"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "01833C1237BFE6F9025C5A37826BD578"
      valueUuid: "springApplication"
      methodExercised:
        expression: "getClassLoader():classLoader"
    - type: "STATIC"
      name: "LoggingSystem.class"
      modelFingerprint: "00DF34C637011108EA6E77C051233CAD"
      valueUuid: "LoggingSystem.class"
      methodExercised:
        expression: "get(classLoader:classLoader):loggingSystem"
        staticAccess: true
    - type: "FIELD"
      name: "loggingSystem"
      modelFingerprint: "5FBBB13D8EC2B0695EB5E8E22B7BAF04"
      valueUuid: "loggingSystem"
      methodExercised:
        expression: "beforeInitialize():void17"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.logging.LoggingApplicationListener"
        parameters: []
        propertiesMap:
          loggingSystem:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.LoggingSystem"
            uuid: "loggingSystem"
      valueType: "org.springframework.boot.context.logging.LoggingApplicationListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.event.ApplicationStartingEvent"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.event.ApplicationStartingEvent"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.SpringApplication"
      uuid: "springApplication"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.SpringApplication"
      uuid: "springApplication"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingSystem"
      uuid: "LoggingSystem.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingSystem"
      uuid: "loggingSystem"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingSystem"
      uuid: "loggingSystem"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void17"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 219
      expression: "event instanceof ApplicationStartingEvent startingEvent"
      range: "(219,7)-(219,61)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "onApplicationEventWhenThisLoggingSystemIsNull"
    constructorSignature: "<init>() : void"
    modelFingerprint: "802D41646E964E9207461564D1301290"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "event"
      modelFingerprint: "BCA843B1CF64881555A94C3191C4A824"
      valueUuid: "event"
    - type: "LOCAL_VARIABLE"
      name: "event"
      modelFingerprint: "0E25A23B695920E6C61CB2BD17B1A2C7"
      valueUuid: "event"
      methodExercised:
        expression: "getSpringApplication():springApplication"
    - type: "LOCAL_VARIABLE"
      name: "springApplication"
      modelFingerprint: "01833C1237BFE6F9025C5A37826BD578"
      valueUuid: "springApplication"
      methodExercised:
        expression: "getClassLoader():classLoader"
    - type: "STATIC"
      name: "LoggingSystem.class"
      modelFingerprint: "42C778A200F017C2F4A442E73A2C741C"
      valueUuid: "LoggingSystem.class"
      methodExercised:
        expression: "get(classLoader:classLoader):loggingSystem"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "event"
      modelFingerprint: "88806B0BB27CAC71BC12436B296393BE"
      valueUuid: "event"
      methodExercised:
        expression: "getEnvironment():configurableEnvironment"
    - type: "LOCAL_VARIABLE"
      name: "springApplication"
      modelFingerprint: "01833C1237BFE6F9025C5A37826BD578"
      valueUuid: "springApplication"
      methodExercised:
        expression: "getClassLoader():classLoader2"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "4C45198320A0D9818782D350429D54EE"
      methodExercised:
        expression: "initialize(environment:configurableEnvironment,classLoader:classLoader2):void17"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.logging.LoggingApplicationListener"
        parameters: []
      valueType: "org.springframework.boot.context.logging.LoggingApplicationListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.SpringApplication"
      uuid: "springApplication"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.SpringApplication"
      uuid: "springApplication"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingSystem"
      uuid: "LoggingSystem.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingSystem"
      uuid: "loggingSystem"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "configurableEnvironment"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.SpringApplication"
      uuid: "springApplication"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader2"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void17"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "configurableEnvironment"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader2"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 219
      expression: "event instanceof ApplicationStartingEvent startingEvent"
      range: "(219,7)-(219,61)"
      evaluatedAs: false
    - lineNumber: 222
      expression: "event instanceof ApplicationEnvironmentPreparedEvent environmentPreparedEvent"
      range: "(222,12)-(222,88)"
      evaluatedAs: true
    - lineNumber: 243
      expression: "this.loggingSystem == null"
      range: "(243,7)-(243,32)"
      evaluatedAs: true
      internalMethodName: "onApplicationEnvironmentPreparedEvent"
  - pathId: "path12"
    testPathName: "onApplicationEventWhenEventInstanceOfApplicationFailedEvent"
    constructorSignature: "<init>() : void"
    modelFingerprint: "2D4EF92E8B8D5C7523AB89CED6371087"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "event"
      modelFingerprint: "D369CC8CBA4CCD33366D1004A6407399"
      valueUuid: "event"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "5D6920AFF9F8D8AEBC296E5FEB0E48BB"
      methodExercised:
        expression: "cleanupLoggingSystem():void17"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.logging.LoggingApplicationListener"
        parameters: []
      valueType: "org.springframework.boot.context.logging.LoggingApplicationListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.event.ApplicationFailedEvent"
      uuid: "event"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void17"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 219
      expression: "event instanceof ApplicationStartingEvent startingEvent"
      range: "(219,7)-(219,61)"
      evaluatedAs: false
    - lineNumber: 222
      expression: "event instanceof ApplicationEnvironmentPreparedEvent environmentPreparedEvent"
      range: "(222,12)-(222,88)"
      evaluatedAs: false
    - lineNumber: 225
      expression: "event instanceof ApplicationPreparedEvent preparedEvent"
      range: "(225,12)-(225,66)"
      evaluatedAs: false
    - lineNumber: 228
      expression: "event instanceof ContextClosedEvent"
      range: "(228,12)-(228,46)"
      evaluatedAs: false
    - lineNumber: 231
      expression: "event instanceof ApplicationFailedEvent"
      range: "(231,12)-(231,50)"
      evaluatedAs: true
  - pathId: "path9"
    testPathName: "onApplicationEventWhenApplicationContextContainsBeanLOGGING_LIFECYCLE_BEAN_NAME"
    constructorSignature: "<init>() : void"
    modelFingerprint: "C9EE6FE2A2C2666851FF20605548B52E"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "event"
      modelFingerprint: "9726808C74F397A26B87448625A206C3"
      valueUuid: "event"
    - type: "LOCAL_VARIABLE"
      name: "event"
      modelFingerprint: "6181F15000EFDEC6C23FDC6C81496450"
      valueUuid: "event"
      methodExercised:
        expression: "getApplicationContext():applicationContext"
    - type: "LOCAL_VARIABLE"
      name: "applicationContext"
      modelFingerprint: "6E24D6263BC5D6A68D5D3133805B85BD"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "getParent():applicationContext2"
    - type: "LOCAL_VARIABLE"
      name: "applicationContext"
      modelFingerprint: "4D2DA7F4B7994D6B3AAB7A643A4DA34D"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "containsBean(name:uniqueUuid1):boolean5"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.logging.LoggingApplicationListener"
        parameters: []
      valueType: "org.springframework.boot.context.logging.LoggingApplicationListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.event.ContextClosedEvent"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.event.ContextClosedEvent"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "NULL"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "BASIC"
      content: !<regular>
        value: "springBootLoggingLifecycle"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 219
      expression: "event instanceof ApplicationStartingEvent startingEvent"
      range: "(219,7)-(219,61)"
      evaluatedAs: false
    - lineNumber: 222
      expression: "event instanceof ApplicationEnvironmentPreparedEvent environmentPreparedEvent"
      range: "(222,12)-(222,88)"
      evaluatedAs: false
    - lineNumber: 225
      expression: "event instanceof ApplicationPreparedEvent preparedEvent"
      range: "(225,12)-(225,66)"
      evaluatedAs: false
    - lineNumber: 228
      expression: "event instanceof ContextClosedEvent"
      range: "(228,12)-(228,46)"
      evaluatedAs: true
    - lineNumber: 268
      expression: "applicationContext.getParent() != null"
      range: "(268,7)-(268,44)"
      evaluatedAs: false
      internalMethodName: "onContextClosedEvent"
    - lineNumber: 268
      expression: "applicationContext.containsBean(LOGGING_LIFECYCLE_BEAN_NAME)"
      range: "(268,49)-(268,108)"
      evaluatedAs: true
      internalMethodName: "onContextClosedEvent"
  - pathId: "path10"
    testPathName: "onApplicationEventWhenApplicationContextNotContainsBeanLOGGING_LIFECYCLE_BEAN_NAME"
    constructorSignature: "<init>() : void"
    modelFingerprint: "97F2A6529FB168879EA7DEC2D35FD21F"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "event"
      modelFingerprint: "9726808C74F397A26B87448625A206C3"
      valueUuid: "event"
    - type: "LOCAL_VARIABLE"
      name: "event"
      modelFingerprint: "6181F15000EFDEC6C23FDC6C81496450"
      valueUuid: "event"
      methodExercised:
        expression: "getApplicationContext():applicationContext"
    - type: "LOCAL_VARIABLE"
      name: "applicationContext"
      modelFingerprint: "6E24D6263BC5D6A68D5D3133805B85BD"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "getParent():applicationContext2"
    - type: "LOCAL_VARIABLE"
      name: "applicationContext"
      modelFingerprint: "D4C49D97D6A5EF33F197AC33D996C1E8"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "containsBean(name:uniqueUuid2):boolean5"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "5D6920AFF9F8D8AEBC296E5FEB0E48BB"
      methodExercised:
        expression: "cleanupLoggingSystem():void17"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.logging.LoggingApplicationListener"
        parameters: []
      valueType: "org.springframework.boot.context.logging.LoggingApplicationListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.event.ContextClosedEvent"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.event.ContextClosedEvent"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "NULL"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "BASIC"
      content: !<regular>
        value: "springBootLoggingLifecycle"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void17"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 219
      expression: "event instanceof ApplicationStartingEvent startingEvent"
      range: "(219,7)-(219,61)"
      evaluatedAs: false
    - lineNumber: 222
      expression: "event instanceof ApplicationEnvironmentPreparedEvent environmentPreparedEvent"
      range: "(222,12)-(222,88)"
      evaluatedAs: false
    - lineNumber: 225
      expression: "event instanceof ApplicationPreparedEvent preparedEvent"
      range: "(225,12)-(225,66)"
      evaluatedAs: false
    - lineNumber: 228
      expression: "event instanceof ContextClosedEvent"
      range: "(228,12)-(228,46)"
      evaluatedAs: true
    - lineNumber: 268
      expression: "applicationContext.getParent() != null"
      range: "(268,7)-(268,44)"
      evaluatedAs: false
      internalMethodName: "onContextClosedEvent"
    - lineNumber: 268
      expression: "applicationContext.containsBean(LOGGING_LIFECYCLE_BEAN_NAME)"
      range: "(268,49)-(268,108)"
      evaluatedAs: false
      internalMethodName: "onContextClosedEvent"
  - pathId: "path3"
    testPathName: "onApplicationEventWhenApplicationContextGetParentIsNull"
    constructorSignature: "<init>() : void"
    modelFingerprint: "81B161C3BF64F352636CECA7258BBF69"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "event"
      modelFingerprint: "91C3351E64171F1F62CA16BA373E3153"
      valueUuid: "event"
    - type: "LOCAL_VARIABLE"
      name: "event"
      modelFingerprint: "2E669968B9C304ABA14F2A74AC638B51"
      valueUuid: "event"
      methodExercised:
        expression: "getApplicationContext():configurableApplicationContext"
    - type: "LOCAL_VARIABLE"
      name: "applicationContext"
      modelFingerprint: "6A01AAC3461FC3A19CF28FB5CC4FB9E4"
      valueUuid: "configurableApplicationContext"
      methodExercised:
        expression: "getBeanFactory():configurableListableBeanFactory"
        throwsExceptions:
        - "java.lang.IllegalStateException"
    - type: "LOCAL_VARIABLE"
      name: "beanFactory"
      modelFingerprint: "36C5108E4B8A476748DEDA4FC2885705"
      valueUuid: "configurableListableBeanFactory"
      methodExercised:
        expression: "containsBean(name:uniqueUuid3):boolean4"
    - type: "LOCAL_VARIABLE"
      name: "beanFactory"
      modelFingerprint: "102FA399681985622E31D050108CA3BF"
      valueUuid: "configurableListableBeanFactory"
      methodExercised:
        expression: "registerSingleton(beanName:uniqueUuid4,singletonObject:fieldLoggingSystem):void17"
    - type: "LOCAL_VARIABLE"
      name: "beanFactory"
      modelFingerprint: "C38D3273D7C70C0E26C367A1CE024900"
      valueUuid: "configurableListableBeanFactory"
      methodExercised:
        expression: "containsBean(name:uniqueUuid5):boolean5"
    - type: "LOCAL_VARIABLE"
      name: "applicationContext"
      modelFingerprint: "5E3904425938E13844EB71188213737A"
      valueUuid: "configurableApplicationContext"
      methodExercised:
        expression: "getParent():applicationContext"
    - type: "LOCAL_VARIABLE"
      name: "beanFactory"
      modelFingerprint: "9061C3A9D2800FADB2CA3892F286DDDF"
      valueUuid: "configurableListableBeanFactory"
      methodExercised:
        expression: "registerSingleton(beanName:uniqueUuid6,singletonObject:object):void18"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.logging.LoggingApplicationListener"
        parameters: []
      valueType: "org.springframework.boot.context.logging.LoggingApplicationListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.event.ApplicationPreparedEvent"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.event.ApplicationPreparedEvent"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ConfigurableApplicationContext"
      uuid: "configurableApplicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ConfigurableApplicationContext"
      uuid: "configurableApplicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.config.ConfigurableListableBeanFactory"
      uuid: "configurableListableBeanFactory"
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.config.ConfigurableListableBeanFactory"
      uuid: "configurableListableBeanFactory"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "springBootLoggingSystem"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.config.ConfigurableListableBeanFactory"
      uuid: "configurableListableBeanFactory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void17"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "springBootLoggingSystem"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "NULL"
      valueType: "org.springframework.boot.logging.LoggingSystem"
      uuid: "fieldLoggingSystem"
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.config.ConfigurableListableBeanFactory"
      uuid: "configurableListableBeanFactory"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "BASIC"
      content: !<regular>
        value: "springBootLoggingLifecycle"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ConfigurableApplicationContext"
      uuid: "configurableApplicationContext"
    - sapientType: "NULL"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.config.ConfigurableListableBeanFactory"
      uuid: "configurableListableBeanFactory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void18"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "springBootLoggingLifecycle"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 219
      expression: "event instanceof ApplicationStartingEvent startingEvent"
      range: "(219,7)-(219,61)"
      evaluatedAs: false
    - lineNumber: 222
      expression: "event instanceof ApplicationEnvironmentPreparedEvent environmentPreparedEvent"
      range: "(222,12)-(222,88)"
      evaluatedAs: false
    - lineNumber: 225
      expression: "event instanceof ApplicationPreparedEvent preparedEvent"
      range: "(225,12)-(225,66)"
      evaluatedAs: true
    - lineNumber: 252
      expression: "!beanFactory.containsBean(LOGGING_SYSTEM_BEAN_NAME)"
      range: "(252,7)-(252,57)"
      evaluatedAs: true
      internalMethodName: "onApplicationPreparedEvent"
    - lineNumber: 255
      expression: "this.logFile != null"
      range: "(255,7)-(255,26)"
      evaluatedAs: false
      internalMethodName: "onApplicationPreparedEvent"
    - lineNumber: 258
      expression: "this.loggerGroups != null"
      range: "(258,7)-(258,31)"
      evaluatedAs: false
      internalMethodName: "onApplicationPreparedEvent"
    - lineNumber: 261
      expression: "!beanFactory.containsBean(LOGGING_LIFECYCLE_BEAN_NAME)"
      range: "(261,7)-(261,60)"
      evaluatedAs: true
      internalMethodName: "onApplicationPreparedEvent"
    - lineNumber: 261
      expression: "applicationContext.getParent() == null"
      range: "(261,65)-(261,102)"
      evaluatedAs: true
      internalMethodName: "onApplicationPreparedEvent"
- method:
    name: "cleanupLoggingSystem"
    sourceCodeSignature: "void cleanupLoggingSystem()"
    returnType: "void"
    instructionFingerprint: "353FCF4E7B6A0F6189739B317094EEF6"
  paths:
  - pathId: "path1"
    testPathName: "cleanupLoggingSystemWhenThisLoggingSystemIsNull"
    constructorSignature: "<init>() : void"
    modelFingerprint: "8758C3AD85B7FA6893E257844C1FA797"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.logging.LoggingApplicationListener"
        parameters: []
      valueType: "org.springframework.boot.context.logging.LoggingApplicationListener"
      uuid: "target"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 275
      expression: "this.loggingSystem != null"
      range: "(275,7)-(275,32)"
      evaluatedAs: false
- method:
    name: "initialize"
    sourceCodeSignature: "void initialize(ConfigurableEnvironment environment, ClassLoader\
      \ classLoader)"
    returnType: "void"
    parameters:
    - name: "environment"
      type: "org.springframework.core.env.ConfigurableEnvironment"
    - name: "classLoader"
      type: "java.lang.ClassLoader"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Throwable"
    instructionFingerprint: "186B0C353F2FD5101A33C46DB2C03D01"
  paths:
  - pathId: "path11"
    testPathName: "initializeWhenIgnoreLogConfigLogConfigAndExceptionToReportIsNullAndExceptionToReportIsNull4ThrowsNullPointerException"
    constructorSignature: "<init>() : void"
    modelFingerprint: "402C216906A3D754415B7397E8DB6D0E"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "2AB40C7309B23844284816875A86BEFD"
      valueUuid: "environment"
    - type: "INPUT"
      name: "classLoader"
      modelFingerprint: "C286DE215DE7563ED1CD0033A63BD833"
      valueUuid: "classLoader"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "7FF9E86A2A042E826575EA5C23D38FEE"
      valueUuid: "loggingSystemProperties"
      methodExercised:
        expression: "apply():void17"
    - type: "STATIC"
      name: "LogFile.class"
      modelFingerprint: "D9EC89B1BA23AE7EE082BCA51BCA148E"
      valueUuid: "LogFile.class"
      methodExercised:
        expression: "get(propertyResolver:environment):logFile"
        staticAccess: true
    - type: "FIELD"
      name: "logFile"
      modelFingerprint: "468B7D7A22A9170C671A45A6964C062F"
      valueUuid: "logFile"
      methodExercised:
        expression: "applyToSystemProperties():void18"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "637AF450683DAA5302EC5E97DB6DF6C2"
      valueUuid: "environment"
      methodExercised:
        expression: "getProperty(key:uniqueUuid7):string"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "3A372DB7F32603F8E494A824C9B8AD3F"
      valueUuid: "environment"
      methodExercised:
        expression: "getProperty(key:uniqueUuid8):string2"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "9521F7849E966405B44B8C059EE432F3"
      valueUuid: "environment"
      methodExercised:
        expression: "getProperty(key:uniqueUuid9):string3"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "25FD9920EAB36AEB9ABCDC4C1708075C"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:string3):boolean2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "25FD9920EAB36AEB9ABCDC4C1708075C"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:string3):boolean3"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "system"
      modelFingerprint: "14462A42BDD72176011BCBC85DEDA1A1"
      valueUuid: "fieldLoggingSystem"
      methodExercised:
        expression: "initialize(initializationContext:loggingInitializationContext,configLocation:uniqueUuid10,logFile:logFile):uniqueUuid11"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4630731AEA7806FC43F83B475DCE814E"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "getLoggingSystemProperties(environment).apply();"
      lineNumber: 291
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type LoggingSystemProperties - Method: apply"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.logging.LoggingApplicationListener"
        parameters: []
        propertiesMap:
          logFile:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.LogFile"
            uuid: "logFile"
      valueType: "org.springframework.boot.context.logging.LoggingApplicationListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.LoggingSystemProperties"
        parameters:
        - name: "environment"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.ConfigurableEnvironment"
            uuid: "environment"
      valueType: "org.springframework.boot.logging.LoggingSystemProperties"
      uuid: "loggingSystemProperties"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void17"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "LogFile.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void18"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "BASIC"
      content: !<regular>
        value: "false"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "debug"
      valueType: "java.lang.String"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "trace"
      valueType: "java.lang.String"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "logging.config"
      valueType: "java.lang.String"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.logging.LoggingSystem"
      uuid: "fieldLoggingSystem"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "uniqueUuid11"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "loggingInitializationContext"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid10"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 304
      expression: "this.loggingSystem != null"
      range: "(304,11)-(304,36)"
      evaluatedAs: false
      internalMethodName: "getLoggingSystemProperties"
    - lineNumber: 293
      expression: "this.logFile != null"
      range: "(293,7)-(293,26)"
      evaluatedAs: true
    - lineNumber: 309
      expression: "this.parseArgs"
      range: "(309,7)-(309,20)"
      evaluatedAs: true
      internalMethodName: "initializeEarlyLoggingLevel"
    - lineNumber: 309
      expression: "this.springBootLogging == null"
      range: "(309,25)-(309,54)"
      evaluatedAs: true
      internalMethodName: "initializeEarlyLoggingLevel"
    - lineNumber: 321
      expression: "value != null"
      range: "(321,11)-(321,23)"
      evaluatedAs: true
      internalMethodName: "isSet"
    - lineNumber: 321
      expression: "!value.equals(\\\"false\\\")"
      range: "(321,28)-(321,49)"
      evaluatedAs: false
      internalMethodName: "isSet"
    - lineNumber: 310
      expression: "isSet(environment, \\\"debug\\\")"
      range: "(310,8)-(310,34)"
      evaluatedAs: false
      internalMethodName: "initializeEarlyLoggingLevel"
    - lineNumber: 313
      expression: "isSet(environment, \\\"trace\\\")"
      range: "(313,8)-(313,34)"
      evaluatedAs: false
      internalMethodName: "initializeEarlyLoggingLevel"
    - lineNumber: 326
      expression: "StringUtils.hasLength(logConfig)"
      range: "(326,7)-(326,38)"
      evaluatedAs: false
      internalMethodName: "initializeSystem"
    - lineNumber: 352
      expression: "!StringUtils.hasLength(logConfig)"
      range: "(352,10)-(352,42)"
      evaluatedAs: true
      internalMethodName: "ignoreLogConfig"
    - lineNumber: 331
      expression: "ignoreLogConfig(logConfig)"
      range: "(331,8)-(331,33)"
      evaluatedAs: true
      internalMethodName: "initializeSystem"
    - lineNumber: 340
      expression: "exceptionToReport != null"
      range: "(340,11)-(340,35)"
      evaluatedAs: false
      internalMethodName: "initializeSystem"
    - lineNumber: 343
      expression: "exceptionToReport != null"
      range: "(343,25)-(343,49)"
      evaluatedAs: false
      internalMethodName: "initializeSystem"
  - pathId: "path4"
    testPathName: "initializeWhenIgnoreLogConfigNotLogConfigAndExceptionToReportIsNullAndExceptionToReportIsNullThrowsNullPointerException"
    constructorSignature: "<init>() : void"
    modelFingerprint: "419986EE7F0385B62838D974834BA74E"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "2AB40C7309B23844284816875A86BEFD"
      valueUuid: "environment"
    - type: "INPUT"
      name: "classLoader"
      modelFingerprint: "C286DE215DE7563ED1CD0033A63BD833"
      valueUuid: "classLoader"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "7FF9E86A2A042E826575EA5C23D38FEE"
      valueUuid: "loggingSystemProperties"
      methodExercised:
        expression: "apply():void17"
    - type: "STATIC"
      name: "LogFile.class"
      modelFingerprint: "D9EC89B1BA23AE7EE082BCA51BCA148E"
      valueUuid: "LogFile.class"
      methodExercised:
        expression: "get(propertyResolver:environment):logFile"
        staticAccess: true
    - type: "FIELD"
      name: "logFile"
      modelFingerprint: "468B7D7A22A9170C671A45A6964C062F"
      valueUuid: "logFile"
      methodExercised:
        expression: "applyToSystemProperties():void18"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "B9B5E4DB1AD645B231657DFBC785CA69"
      valueUuid: "environment"
      methodExercised:
        expression: "getProperty(key:uniqueUuid12):string"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "C456A3A408E072820438EFB4EADB29CA"
      valueUuid: "environment"
      methodExercised:
        expression: "getProperty(key:uniqueUuid13):string2"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "AE0E552BC6C0CA81DDB5656D186241E6"
      valueUuid: "environment"
      methodExercised:
        expression: "getProperty(key:uniqueUuid14):string3"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "70289CD2E355833BE9010E5E897D7DF5"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:string3):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "70289CD2E355833BE9010E5E897D7DF5"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:string4):boolean4"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "system"
      modelFingerprint: "FDD898EAD1D0CCE8F8EAA0BC021A2D47"
      valueUuid: "fieldLoggingSystem"
      methodExercised:
        expression: "initialize(initializationContext:loggingInitializationContext,configLocation:string4,logFile:logFile):uniqueUuid15"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4630731AEA7806FC43F83B475DCE814E"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "getLoggingSystemProperties(environment).apply();"
      lineNumber: 291
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type LoggingSystemProperties - Method: apply"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.logging.LoggingApplicationListener"
        parameters: []
        propertiesMap:
          logFile:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.LogFile"
            uuid: "logFile"
      valueType: "org.springframework.boot.context.logging.LoggingApplicationListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.LoggingSystemProperties"
        parameters:
        - name: "environment"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.ConfigurableEnvironment"
            uuid: "environment"
      valueType: "org.springframework.boot.logging.LoggingSystemProperties"
      uuid: "loggingSystemProperties"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void17"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "LogFile.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void18"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "debug"
      valueType: "java.lang.String"
      uuid: "uniqueUuid12"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "trace"
      valueType: "java.lang.String"
      uuid: "uniqueUuid13"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "BASIC"
      content: !<regular>
        value: "F"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "logging.config"
      valueType: "java.lang.String"
      uuid: "uniqueUuid14"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "F"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "F"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.logging.LoggingSystem"
      uuid: "fieldLoggingSystem"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "uniqueUuid15"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "loggingInitializationContext"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "F"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 304
      expression: "this.loggingSystem != null"
      range: "(304,11)-(304,36)"
      evaluatedAs: false
      internalMethodName: "getLoggingSystemProperties"
    - lineNumber: 293
      expression: "this.logFile != null"
      range: "(293,7)-(293,26)"
      evaluatedAs: true
    - lineNumber: 309
      expression: "this.parseArgs"
      range: "(309,7)-(309,20)"
      evaluatedAs: true
      internalMethodName: "initializeEarlyLoggingLevel"
    - lineNumber: 309
      expression: "this.springBootLogging == null"
      range: "(309,25)-(309,54)"
      evaluatedAs: true
      internalMethodName: "initializeEarlyLoggingLevel"
    - lineNumber: 321
      expression: "value != null"
      range: "(321,11)-(321,23)"
      evaluatedAs: true
      internalMethodName: "isSet"
    - lineNumber: 321
      expression: "!value.equals(\\\"false\\\")"
      range: "(321,28)-(321,49)"
      evaluatedAs: true
      internalMethodName: "isSet"
    - lineNumber: 310
      expression: "isSet(environment, \\\"debug\\\")"
      range: "(310,8)-(310,34)"
      evaluatedAs: true
      internalMethodName: "initializeEarlyLoggingLevel"
    - lineNumber: 313
      expression: "isSet(environment, \\\"trace\\\")"
      range: "(313,8)-(313,34)"
      evaluatedAs: true
      internalMethodName: "initializeEarlyLoggingLevel"
    - lineNumber: 326
      expression: "StringUtils.hasLength(logConfig)"
      range: "(326,7)-(326,38)"
      evaluatedAs: true
      internalMethodName: "initializeSystem"
    - lineNumber: 352
      expression: "!StringUtils.hasLength(logConfig)"
      range: "(352,10)-(352,42)"
      evaluatedAs: false
      internalMethodName: "ignoreLogConfig"
    - lineNumber: 352
      expression: "logConfig.startsWith(\\\"-D\\\")"
      range: "(352,47)-(352,72)"
      evaluatedAs: false
      internalMethodName: "ignoreLogConfig"
    - lineNumber: 331
      expression: "ignoreLogConfig(logConfig)"
      range: "(331,8)-(331,33)"
      evaluatedAs: false
      internalMethodName: "initializeSystem"
    - lineNumber: 340
      expression: "exceptionToReport != null"
      range: "(340,11)-(340,35)"
      evaluatedAs: false
      internalMethodName: "initializeSystem"
    - lineNumber: 343
      expression: "exceptionToReport != null"
      range: "(343,25)-(343,49)"
      evaluatedAs: false
      internalMethodName: "initializeSystem"
  - pathId: "path1"
    testPathName: "initializeWhenExceptionToReportNotInstanceOfFileNotFoundExceptionAndExceptionToReportIsNullThrowsIllegalStateException"
    constructorSignature: "<init>() : void"
    modelFingerprint: "7703E2E4F73514C87DF9A17AA74F7A8C"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "2AB40C7309B23844284816875A86BEFD"
      valueUuid: "environment"
    - type: "INPUT"
      name: "classLoader"
      modelFingerprint: "C286DE215DE7563ED1CD0033A63BD833"
      valueUuid: "classLoader"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "7FF9E86A2A042E826575EA5C23D38FEE"
      valueUuid: "loggingSystemProperties"
      methodExercised:
        expression: "apply():void17"
    - type: "STATIC"
      name: "LogFile.class"
      modelFingerprint: "D9EC89B1BA23AE7EE082BCA51BCA148E"
      valueUuid: "LogFile.class"
      methodExercised:
        expression: "get(propertyResolver:environment):logFile"
        staticAccess: true
    - type: "FIELD"
      name: "logFile"
      modelFingerprint: "468B7D7A22A9170C671A45A6964C062F"
      valueUuid: "logFile"
      methodExercised:
        expression: "applyToSystemProperties():void18"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "D5191E42FAAA6755B3611B00D0DBF8AF"
      valueUuid: "environment"
      methodExercised:
        expression: "getProperty(key:uniqueUuid16):string"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "77CC3F8B9534A111D66437AD56AADC8C"
      valueUuid: "environment"
      methodExercised:
        expression: "getProperty(key:uniqueUuid17):string2"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "E0C9D7711661C37E8D3F6C3D15DA525A"
      valueUuid: "environment"
      methodExercised:
        expression: "getProperty(key:uniqueUuid18):string3"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "7D3C6260718FE67E066C612175EB9EFF"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:string3):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "7D3C6260718FE67E066C612175EB9EFF"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:string4):boolean4"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "system"
      modelFingerprint: "14462A42BDD72176011BCBC85DEDA1A1"
      valueUuid: "fieldLoggingSystem"
      methodExercised:
        expression: "initialize(initializationContext:loggingInitializationContext,configLocation:uniqueUuid19,logFile:logFile):uniqueUuid20"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4730752B12CED7916BB2385D230012A5"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "getLoggingSystemProperties(environment).apply();"
      lineNumber: 291
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type LoggingSystemProperties - Method: apply"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.logging.LoggingApplicationListener"
        parameters: []
        propertiesMap:
          logFile:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.LogFile"
            uuid: "logFile"
      valueType: "org.springframework.boot.context.logging.LoggingApplicationListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.LoggingSystemProperties"
        parameters:
        - name: "environment"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.ConfigurableEnvironment"
            uuid: "environment"
      valueType: "org.springframework.boot.logging.LoggingSystemProperties"
      uuid: "loggingSystemProperties"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void17"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "LogFile.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void18"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProperty1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "debug"
      valueType: "java.lang.String"
      uuid: "uniqueUuid16"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProperty1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "trace"
      valueType: "java.lang.String"
      uuid: "uniqueUuid17"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProperty1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "logging.config"
      valueType: "java.lang.String"
      uuid: "uniqueUuid18"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProperty1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.logging.LoggingSystem"
      uuid: "fieldLoggingSystem"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "uniqueUuid20"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "loggingInitializationContext"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid19"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Throwable"
              parameters: []
            valueType: "java.lang.Throwable"
            uuid: "throwable"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 304
      expression: "this.loggingSystem != null"
      range: "(304,11)-(304,36)"
      evaluatedAs: false
      internalMethodName: "getLoggingSystemProperties"
    - lineNumber: 293
      expression: "this.logFile != null"
      range: "(293,7)-(293,26)"
      evaluatedAs: true
    - lineNumber: 309
      expression: "this.parseArgs"
      range: "(309,7)-(309,20)"
      evaluatedAs: true
      internalMethodName: "initializeEarlyLoggingLevel"
    - lineNumber: 309
      expression: "this.springBootLogging == null"
      range: "(309,25)-(309,54)"
      evaluatedAs: true
      internalMethodName: "initializeEarlyLoggingLevel"
    - lineNumber: 321
      expression: "value != null"
      range: "(321,11)-(321,23)"
      evaluatedAs: true
      internalMethodName: "isSet"
    - lineNumber: 321
      expression: "!value.equals(\\\"false\\\")"
      range: "(321,28)-(321,49)"
      evaluatedAs: true
      internalMethodName: "isSet"
    - lineNumber: 310
      expression: "isSet(environment, \\\"debug\\\")"
      range: "(310,8)-(310,34)"
      evaluatedAs: true
      internalMethodName: "initializeEarlyLoggingLevel"
    - lineNumber: 313
      expression: "isSet(environment, \\\"trace\\\")"
      range: "(313,8)-(313,34)"
      evaluatedAs: true
      internalMethodName: "initializeEarlyLoggingLevel"
    - lineNumber: 326
      expression: "StringUtils.hasLength(logConfig)"
      range: "(326,7)-(326,38)"
      evaluatedAs: true
      internalMethodName: "initializeSystem"
    - lineNumber: 352
      expression: "!StringUtils.hasLength(logConfig)"
      range: "(352,10)-(352,42)"
      evaluatedAs: false
      internalMethodName: "ignoreLogConfig"
    - lineNumber: 352
      expression: "logConfig.startsWith(\\\"-D\\\")"
      range: "(352,47)-(352,72)"
      evaluatedAs: true
      internalMethodName: "ignoreLogConfig"
    - lineNumber: 331
      expression: "ignoreLogConfig(logConfig)"
      range: "(331,8)-(331,33)"
      evaluatedAs: true
      internalMethodName: "initializeSystem"
    - lineNumber: 340
      expression: "exceptionToReport != null"
      range: "(340,11)-(340,35)"
      evaluatedAs: true
      internalMethodName: "initializeSystem"
    - lineNumber: 340
      expression: "!(exceptionToReport instanceof FileNotFoundException)"
      range: "(340,40)-(340,92)"
      evaluatedAs: true
      internalMethodName: "initializeSystem"
    - lineNumber: 343
      expression: "exceptionToReport != null"
      range: "(343,25)-(343,49)"
      evaluatedAs: false
      internalMethodName: "initializeSystem"
  - pathId: "path2"
    testPathName: "initializeWhenExceptionToReportInstanceOfFileNotFoundExceptionAndExceptionToReportIsNotNullThrowsIllegalStateException"
    constructorSignature: "<init>() : void"
    modelFingerprint: "8FF4194B0330E26B1C6BF606E305AC87"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "2AB40C7309B23844284816875A86BEFD"
      valueUuid: "environment"
    - type: "INPUT"
      name: "classLoader"
      modelFingerprint: "C286DE215DE7563ED1CD0033A63BD833"
      valueUuid: "classLoader"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "7FF9E86A2A042E826575EA5C23D38FEE"
      valueUuid: "loggingSystemProperties"
      methodExercised:
        expression: "apply():void17"
    - type: "STATIC"
      name: "LogFile.class"
      modelFingerprint: "D9EC89B1BA23AE7EE082BCA51BCA148E"
      valueUuid: "LogFile.class"
      methodExercised:
        expression: "get(propertyResolver:environment):logFile"
        staticAccess: true
    - type: "FIELD"
      name: "logFile"
      modelFingerprint: "468B7D7A22A9170C671A45A6964C062F"
      valueUuid: "logFile"
      methodExercised:
        expression: "applyToSystemProperties():void18"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "D5191E42FAAA6755B3611B00D0DBF8AF"
      valueUuid: "environment"
      methodExercised:
        expression: "getProperty(key:uniqueUuid21):string"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "77CC3F8B9534A111D66437AD56AADC8C"
      valueUuid: "environment"
      methodExercised:
        expression: "getProperty(key:uniqueUuid22):string2"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "E0C9D7711661C37E8D3F6C3D15DA525A"
      valueUuid: "environment"
      methodExercised:
        expression: "getProperty(key:uniqueUuid23):string3"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "7D3C6260718FE67E066C612175EB9EFF"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:string3):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "7D3C6260718FE67E066C612175EB9EFF"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:string4):boolean4"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "system"
      modelFingerprint: "14462A42BDD72176011BCBC85DEDA1A1"
      valueUuid: "fieldLoggingSystem"
      methodExercised:
        expression: "initialize(initializationContext:loggingInitializationContext,configLocation:uniqueUuid24,logFile:logFile):uniqueUuid25"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "958CFD65E670E5A62EA2AB500A03B7D1"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "getLoggingSystemProperties(environment).apply();"
      lineNumber: 291
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type LoggingSystemProperties - Method: apply"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.logging.LoggingApplicationListener"
        parameters: []
        propertiesMap:
          logFile:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.LogFile"
            uuid: "logFile"
      valueType: "org.springframework.boot.context.logging.LoggingApplicationListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.LoggingSystemProperties"
        parameters:
        - name: "environment"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.ConfigurableEnvironment"
            uuid: "environment"
      valueType: "org.springframework.boot.logging.LoggingSystemProperties"
      uuid: "loggingSystemProperties"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void17"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "LogFile.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void18"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProperty1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "debug"
      valueType: "java.lang.String"
      uuid: "uniqueUuid21"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProperty1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "trace"
      valueType: "java.lang.String"
      uuid: "uniqueUuid22"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProperty1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "logging.config"
      valueType: "java.lang.String"
      uuid: "uniqueUuid23"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProperty1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.logging.LoggingSystem"
      uuid: "fieldLoggingSystem"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "uniqueUuid25"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "loggingInitializationContext"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid24"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.FileNotFoundException"
              parameters: []
            valueType: "java.io.FileNotFoundException"
            uuid: "throwable"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 304
      expression: "this.loggingSystem != null"
      range: "(304,11)-(304,36)"
      evaluatedAs: false
      internalMethodName: "getLoggingSystemProperties"
    - lineNumber: 293
      expression: "this.logFile != null"
      range: "(293,7)-(293,26)"
      evaluatedAs: true
    - lineNumber: 309
      expression: "this.parseArgs"
      range: "(309,7)-(309,20)"
      evaluatedAs: true
      internalMethodName: "initializeEarlyLoggingLevel"
    - lineNumber: 309
      expression: "this.springBootLogging == null"
      range: "(309,25)-(309,54)"
      evaluatedAs: true
      internalMethodName: "initializeEarlyLoggingLevel"
    - lineNumber: 321
      expression: "value != null"
      range: "(321,11)-(321,23)"
      evaluatedAs: true
      internalMethodName: "isSet"
    - lineNumber: 321
      expression: "!value.equals(\\\"false\\\")"
      range: "(321,28)-(321,49)"
      evaluatedAs: true
      internalMethodName: "isSet"
    - lineNumber: 310
      expression: "isSet(environment, \\\"debug\\\")"
      range: "(310,8)-(310,34)"
      evaluatedAs: true
      internalMethodName: "initializeEarlyLoggingLevel"
    - lineNumber: 313
      expression: "isSet(environment, \\\"trace\\\")"
      range: "(313,8)-(313,34)"
      evaluatedAs: true
      internalMethodName: "initializeEarlyLoggingLevel"
    - lineNumber: 326
      expression: "StringUtils.hasLength(logConfig)"
      range: "(326,7)-(326,38)"
      evaluatedAs: true
      internalMethodName: "initializeSystem"
    - lineNumber: 352
      expression: "!StringUtils.hasLength(logConfig)"
      range: "(352,10)-(352,42)"
      evaluatedAs: false
      internalMethodName: "ignoreLogConfig"
    - lineNumber: 352
      expression: "logConfig.startsWith(\\\"-D\\\")"
      range: "(352,47)-(352,72)"
      evaluatedAs: true
      internalMethodName: "ignoreLogConfig"
    - lineNumber: 331
      expression: "ignoreLogConfig(logConfig)"
      range: "(331,8)-(331,33)"
      evaluatedAs: true
      internalMethodName: "initializeSystem"
    - lineNumber: 340
      expression: "exceptionToReport != null"
      range: "(340,11)-(340,35)"
      evaluatedAs: true
      internalMethodName: "initializeSystem"
    - lineNumber: 340
      expression: "!(exceptionToReport instanceof FileNotFoundException)"
      range: "(340,40)-(340,92)"
      evaluatedAs: false
      internalMethodName: "initializeSystem"
    - lineNumber: 343
      expression: "exceptionToReport != null"
      range: "(343,25)-(343,49)"
      evaluatedAs: true
      internalMethodName: "initializeSystem"
- method:
    name: "initializeSpringBootLogging"
    sourceCodeSignature: "void initializeSpringBootLogging(LoggingSystem system, LogLevel\
      \ springBootLogging)"
    returnType: "void"
    parameters:
    - name: "system"
      type: "org.springframework.boot.logging.LoggingSystem"
    - name: "springBootLogging"
      type: "org.springframework.boot.logging.LogLevel"
    instructionFingerprint: "8E8B760CDE61E6CC3B3572F0454A44C5"
  paths:
  - pathId: "path1"
    testPathName: "initializeSpringBootLoggingTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "13D98A069F782828C6EB680C9AB60910"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "system"
      modelFingerprint: "8D5F5E4508BB541BB51712B717147E34"
      valueUuid: "system"
    - type: "INPUT"
      name: "springBootLogging"
      modelFingerprint: "B644BED4AA5FB2D34B4A132E9337D7F2"
      valueUuid: "springBootLogging"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.logging.LoggingApplicationListener"
        parameters: []
      valueType: "org.springframework.boot.context.logging.LoggingApplicationListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingSystem"
      uuid: "system"
    - sapientType: "ENUM"
      content: !<regular>
        value: "TRACE"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "springBootLogging"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "setLogLevels"
    sourceCodeSignature: "void setLogLevels(LoggingSystem system, ConfigurableEnvironment\
      \ environment)"
    returnType: "void"
    parameters:
    - name: "system"
      type: "org.springframework.boot.logging.LoggingSystem"
    - name: "environment"
      type: "org.springframework.core.env.ConfigurableEnvironment"
    instructionFingerprint: "04CA5DD87F08D4031330C82413890C50"
  paths:
  - pathId: "path1"
    testPathName: "setLogLevelsWhenThisLoggerGroupsIsNull"
    constructorSignature: "<init>() : void"
    modelFingerprint: "015F30EAFF10D98090F1698F950C424C"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "system"
      modelFingerprint: "8D5F5E4508BB541BB51712B717147E34"
      valueUuid: "system"
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "3F73E3E0E26E26EEEFAD4DD95D3AE3D4"
      valueUuid: "environment"
    - type: "STATIC"
      name: "Binder.class"
      modelFingerprint: "E3F8DFDCDD3BF8F6213238E0F38BB0FA"
      valueUuid: "Binder.class"
      methodExercised:
        expression: "get(environment:environment):binder"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "7FC66E222D3B89F4ADAC5233B01C8B86"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:configurationPropertyName,target:bindable):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "C100AFA2962D6E6DB02001CF541399B2"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElseGet(other:uniqueUuid29):object"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "configurer.accept(name, level);"
      lineNumber: 405
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: configurer - Method: accept"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.logging.LoggingApplicationListener"
        parameters: []
      valueType: "org.springframework.boot.context.logging.LoggingApplicationListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingSystem"
      uuid: "system"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "Binder.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
        method: "of"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "logging.level"
            valueType: "java.lang.String"
            uuid: "uniqueUuid26"
            fixed: true
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "mapOf"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.String"
            valueType: "java.lang.Class"
            genericValueType: "java.lang.String"
            uuid: "uniqueUuid27"
            fixed: true
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "org.springframework.boot.logging.LogLevel"
            valueType: "java.lang.Class"
            genericValueType: "org.springframework.boot.logging.LogLevel"
            uuid: "uniqueUuid28"
            fixed: true
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      genericValueType: "java.util.Map<java.lang.String,org.springframework.boot.logging.LogLevel>"
      uuid: "bindable"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      uuid: "uniqueUuid29"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 398
      expression: "this.loggerGroups != null"
      range: "(398,7)-(398,31)"
      evaluatedAs: false
      internalMethodName: "configureLogLevel"
- method:
    name: "registerShutdownHook"
    sourceCodeSignature: "void registerShutdownHook(Runnable shutdownHandler)"
    returnType: "void"
    parameters:
    - name: "shutdownHandler"
      type: "java.lang.Runnable"
    instructionFingerprint: "ABD4632622D9272A5A77B9D7A341E201"
  paths:
  - pathId: "path1"
    testPathName: "registerShutdownHookTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "C1EDCACCA8202716F53422C52D123781"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "shutdownHandler"
      modelFingerprint: "FD5752D077A0A04E4BA760C83795F2C5"
      valueUuid: "shutdownHandler"
    - type: "STATIC"
      name: "SpringApplication.class"
      modelFingerprint: "F8CD1572DA8AD16438440292C376B0DF"
      valueUuid: "SpringApplication.class"
      methodExercised:
        expression: "getShutdownHandlers():springApplicationShutdownHandlers"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "3C7688B3C04A91DB679ABD3C7B4DD28A"
      valueUuid: "springApplicationShutdownHandlers"
      methodExercised:
        expression: "add(action:shutdownHandler):void17"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.logging.LoggingApplicationListener"
        parameters: []
      valueType: "org.springframework.boot.context.logging.LoggingApplicationListener"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "java.lang.Runnable"
      uuid: "shutdownHandler"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.SpringApplication"
      uuid: "SpringApplication.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.SpringApplicationShutdownHandlers"
      uuid: "springApplicationShutdownHandlers"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.SpringApplicationShutdownHandlers"
      uuid: "springApplicationShutdownHandlers"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void17"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.lang.Runnable"
      uuid: "shutdownHandler"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "setOrder"
    sourceCodeSignature: "void setOrder(int order)"
    returnType: "void"
    parameters:
    - name: "order"
      type: "int"
    instructionFingerprint: "F88C98C2D7593841680C2CA0FECB4028"
  paths:
  - pathId: "path1"
    testPathName: "setOrderTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "508F327E707578A7601DD6859FED6F5D"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "getOrder"
    sourceCodeSignature: "int getOrder()"
    returnType: "int"
    instructionFingerprint: "342D4E4F854A43E567A525BCBCDEA20C"
  paths:
  - pathId: "path1"
    testPathName: "getOrderTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "F0B689137A62A71C43172EC6BA8C088F"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "setSpringBootLogging"
    sourceCodeSignature: "void setSpringBootLogging(LogLevel springBootLogging)"
    returnType: "void"
    parameters:
    - name: "springBootLogging"
      type: "org.springframework.boot.logging.LogLevel"
    instructionFingerprint: "F9E8053BF3A0332DAC95C61F66E79A57"
  paths:
  - pathId: "path1"
    testPathName: "setSpringBootLoggingTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "EEC5E600F0EBAA72315B3BA12DD4EAA0"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "setParseArgs"
    sourceCodeSignature: "void setParseArgs(boolean parseArgs)"
    returnType: "void"
    parameters:
    - name: "parseArgs"
      type: "boolean"
    instructionFingerprint: "2D014D99C665EDB4973112712AA0C0D0"
  paths:
  - pathId: "path1"
    testPathName: "setParseArgsTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "D46079C9AC4F5840326CA48A38521FB7"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
