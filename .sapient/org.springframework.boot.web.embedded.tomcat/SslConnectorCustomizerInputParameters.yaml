---
modelFingerprint: "DBE5E5D40433EF90DC60061836A585FF"
targetClass:
  fullClassName: "org.springframework.boot.web.embedded.tomcat.SslConnectorCustomizer"
methods:
- method:
    name: "update"
    sourceCodeSignature: "void update(SslBundle updatedSslBundle)"
    returnType: "void"
    parameters:
    - name: "updatedSslBundle"
      type: "org.springframework.boot.ssl.SslBundle"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "A8075D40F7342EC529C7A6959ACBB589"
  paths:
  - pathId: "path1"
    testPathName: "updateTest"
    constructorSignature: "<init>(org.apache.commons.logging.Log,org.apache.catalina.connector.Connector,org.springframework.boot.web.server.Ssl$ClientAuth)\
      \ : void"
    modelFingerprint: "1E4B20F3BBB2D2594C2AD5E96DBF2C95"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "CDA6D482D44BF7513EA1132F1262751C"
      valueUuid: "target"
    - type: "INPUT"
      name: "updatedSslBundle"
      modelFingerprint: "AE53EB3ED106747640089F970B7BDB8B"
      valueUuid: "updatedSslBundle"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "1757C88F9218C5F45C6E5FB07B9D7A4C"
      methodExercised:
        expression: "customize(sslBundle:updatedSslBundle):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.tomcat.SslConnectorCustomizer"
        parameters:
        - name: "logger"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.apache.commons.logging.impl.NoOpLog"
              parameters: []
            valueType: "org.apache.commons.logging.impl.NoOpLog"
            uuid: "logger"
        - name: "connector"
          value:
            sapientType: "MOCK"
            valueType: "org.apache.catalina.connector.Connector"
            uuid: "connector"
        - name: "clientAuth"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "NONE"
            valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
            uuid: "clientAuth"
      valueType: "org.springframework.boot.web.embedded.tomcat.SslConnectorCustomizer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "updatedSslBundle"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "updatedSslBundle"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "customize"
    sourceCodeSignature: "void customize(SslBundle sslBundle)"
    returnType: "void"
    parameters:
    - name: "sslBundle"
      type: "org.springframework.boot.ssl.SslBundle"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "0158C8BFC7DB9FFC57BF87FFB8A82F36"
  paths:
  - pathId: "path1"
    testPathName: "customizeWhenOptionsGetEnabledProtocolsIsNotNull"
    constructorSignature: "<init>(org.apache.commons.logging.Log,org.apache.catalina.connector.Connector,org.springframework.boot.web.server.Ssl$ClientAuth)\
      \ : void"
    modelFingerprint: "EA1206AACA1C9C5F5361AF606F3AFCA1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "FB793C748CAC51F328A7859E384F1586"
      valueUuid: "target"
    - type: "INPUT"
      name: "sslBundle"
      modelFingerprint: "7DBE9A89C45B8DC7FFA8424BB77942A3"
      valueUuid: "sslBundle"
    - type: "FIELD"
      name: "connector"
      modelFingerprint: "8A3D1BA50448F8DC592A104AA23B6D52"
      valueUuid: "connector"
      methodExercised:
        expression: "getProtocolHandler():protocolHandler"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "63CD76E3F76C59053480FA6AD6B6B05D"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean1,message:uniqueUuid3):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "protocol"
      modelFingerprint: "EC557E8B2823AA79DB17FEF750EF84C6"
      valueUuid: "protocolHandler"
      methodExercised:
        expression: "setSSLEnabled(SSLEnabled:uniqueUuid4):void2"
    - type: "LOCAL_VARIABLE"
      name: "protocol"
      modelFingerprint: "E88B5A4631DA341C363D3F7997E53EE9"
      valueUuid: "protocolHandler"
      methodExercised:
        expression: "getDefaultSSLHostConfigName():string"
    - type: "STATIC"
      name: "Ssl.ClientAuth.class.real"
      modelFingerprint: "035EB2B6CBD8842E260F87CDE66D87AE"
      valueUuid: "Ssl.ClientAuth.class.real"
      methodExercised:
        expression: "map(clientAuth:clientAuth,none:uniqueUuid5,want:uniqueUuid6,need:uniqueUuid7):string2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "config"
      modelFingerprint: "CBCA34AC80FA11C1439F57F944E22010"
      valueUuid: "sSLHostConfig"
      methodExercised:
        expression: "setCertificateVerification(certificateVerification:string2):void4"
    - type: "LOCAL_VARIABLE"
      name: "sslBundle"
      modelFingerprint: "A6C03503778814921584A31FF495E9F7"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getKey():sslBundleKey"
    - type: "LOCAL_VARIABLE"
      name: "sslBundle"
      modelFingerprint: "E8CE97B8FD7E60BCCB18BF4E92E8DFBB"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getStores():sslStoreBundle"
    - type: "LOCAL_VARIABLE"
      name: "sslBundle"
      modelFingerprint: "8B50072218265B4159EA5BC2B13C4F63"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getOptions():sslOptions"
    - type: "LOCAL_VARIABLE"
      name: "sslBundle"
      modelFingerprint: "FFDD8D890A4A92EB90DC59D6C8D009A3"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getProtocol():string3"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "7DC84945E3BE5ED5AED8206ECBE577AC"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getKeyStorePassword():string4"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "7DC84945E3BE5ED5AED8206ECBE577AC"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getKeyStorePassword():string5"
    - type: "LOCAL_VARIABLE"
      name: "key"
      modelFingerprint: "E1682CF1AEA8AE1C035DD187A2F526E1"
      valueUuid: "sslBundleKey"
      methodExercised:
        expression: "getPassword():string6"
    - type: "LOCAL_VARIABLE"
      name: "key"
      modelFingerprint: "E1682CF1AEA8AE1C035DD187A2F526E1"
      valueUuid: "sslBundleKey"
      methodExercised:
        expression: "getPassword():string7"
    - type: "LOCAL_VARIABLE"
      name: "key"
      modelFingerprint: "F15DAEFDAD5010690CB13DDDF58AC64D"
      valueUuid: "sslBundleKey"
      methodExercised:
        expression: "getAlias():string8"
    - type: "LOCAL_VARIABLE"
      name: "key"
      modelFingerprint: "F15DAEFDAD5010690CB13DDDF58AC64D"
      valueUuid: "sslBundleKey"
      methodExercised:
        expression: "getAlias():string9"
    - type: "LOCAL_VARIABLE"
      name: "sslHostConfig"
      modelFingerprint: "6747974685DDF06CFC66F09612669848"
      valueUuid: "sSLHostConfig"
      methodExercised:
        expression: "addCertificate(certificate:sSLHostConfigCertificate):void9"
    - type: "LOCAL_VARIABLE"
      name: "options"
      modelFingerprint: "0E66F9C360EB6426AC057606DD1A218B"
      valueUuid: "sslOptions"
      methodExercised:
        expression: "getCiphers():stringArray"
    - type: "LOCAL_VARIABLE"
      name: "options"
      modelFingerprint: "E3C4A99D1E2152F69729FACFD6418113"
      valueUuid: "sslOptions"
      methodExercised:
        expression: "getCiphers():stringArray2"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "258640FD53DB3D01A891299BAC4C2DC5"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "arrayToCommaDelimitedString(arr:stringArray2):string10"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B24256B87F8A53CCE7407CC0DBD4A911"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid8,obj:protocolHandler,message:uniqueUuid9):void11"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "F109B046AD4A787DC08F4F076C3768AF"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getKeyStore():keyStore"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "F109B046AD4A787DC08F4F076C3768AF"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getKeyStore():keyStore2"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "68832D25C9B45D80E917978CB93D4004"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getTrustStore():keyStore3"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "68832D25C9B45D80E917978CB93D4004"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getTrustStore():keyStore4"
    - type: "LOCAL_VARIABLE"
      name: "sslHostConfig"
      modelFingerprint: "505B1DF53E0D6571828A4ED581D17A92"
      valueUuid: "sSLHostConfig"
      methodExercised:
        expression: "setTrustStore(truststore:keyStore4):void13"
    - type: "LOCAL_VARIABLE"
      name: "options"
      modelFingerprint: "64C9161995BBED0B41AB11A83AA25EDC"
      valueUuid: "sslOptions"
      methodExercised:
        expression: "getEnabledProtocols():stringArray3"
    - type: "LOCAL_VARIABLE"
      name: "options"
      modelFingerprint: "112EF7ED2E5B1FFE8308337970FE157C"
      valueUuid: "sslOptions"
      methodExercised:
        expression: "getEnabledProtocols():stringArray4"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "0015894B348106ED3DB97FD03474FBBD"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "arrayToDelimitedString(arr:stringArray4,delim:uniqueUuid10):string11"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "sslHostConfig"
      modelFingerprint: "ED18FD5A6522D001D803DCA42CE76397"
      valueUuid: "sSLHostConfig"
      methodExercised:
        expression: "setProtocols(input:string11):void14"
    - type: "LOCAL_VARIABLE"
      name: "protocol"
      modelFingerprint: "01C9FCA25B75AF43313B2449B50CA6C9"
      valueUuid: "protocolHandler"
      methodExercised:
        expression: "addSslHostConfig(sslHostConfig:sSLHostConfig,replace:uniqueUuid11):void15"
    - type: "FIELD"
      name: "connector"
      modelFingerprint: "D54A78AE16E1B238ACB765A78575A9CF"
      valueUuid: "connector"
      methodExercised:
        expression: "setScheme(scheme:uniqueUuid12):void16"
    - type: "FIELD"
      name: "connector"
      modelFingerprint: "C61050D4BF4FAEB97952CE4624A1569F"
      valueUuid: "connector"
      methodExercised:
        expression: "setSecure(secure:uniqueUuid15):void17"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "sslHostConfig.addCertificate(certificate);"
      lineNumber: 102
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: sslHostConfig - Method: addCertificate"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.tomcat.SslConnectorCustomizer"
        parameters:
        - name: "logger"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.apache.commons.logging.impl.NoOpLog"
              parameters: []
            valueType: "org.apache.commons.logging.impl.NoOpLog"
            uuid: "logger"
        - name: "connector"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.apache.catalina.connector.Connector"
              parameters:
              - name: "protocolHandler"
                value:
                  sapientType: "MOCK"
                  valueType: "org.apache.coyote.http11.AbstractHttp11JsseProtocol"
                  uuid: "protocolHandler"
                  explicitCastNeeded: true
              propertiesMap:
                scheme:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "https"
                  valueType: "java.lang.String"
                  fixed: true
                secure:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: true
                  valueType: "boolean"
                  fixed: true
            valueType: "org.apache.catalina.connector.Connector"
            uuid: "connector"
        - name: "clientAuth"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "NEED"
            valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
            uuid: "clientAuth"
      valueType: "org.springframework.boot.web.embedded.tomcat.SslConnectorCustomizer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.catalina.connector.Connector"
        parameters:
        - name: "protocolHandler"
          value:
            sapientType: "MOCK"
            valueType: "org.apache.coyote.http11.AbstractHttp11JsseProtocol"
            uuid: "protocolHandler"
            explicitCastNeeded: true
        propertiesMap:
          scheme:
            sapientType: "BASIC"
            content: !<regular>
              value: "https"
            valueType: "java.lang.String"
            uuid: "uniqueUuid16"
            fixed: true
          secure:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "uniqueUuid17"
            fixed: true
      valueType: "org.apache.catalina.connector.Connector"
      uuid: "connector"
    - sapientType: "MOCK"
      valueType: "org.apache.coyote.http11.AbstractHttp11JsseProtocol"
      uuid: "protocolHandler"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "To use SSL, the connector's protocol handler must be an AbstractHttp11JsseProtocol\
          \ subclass"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.apache.coyote.http11.AbstractHttp11JsseProtocol"
      uuid: "protocolHandler"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.apache.coyote.http11.AbstractHttp11JsseProtocol"
      uuid: "protocolHandler"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDefaultSSLHostConfigName1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "REAL"
      valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
      uuid: "Ssl.ClientAuth.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "required"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "ENUM"
      content: !<regular>
        value: "NEED"
      valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
      uuid: "clientAuth"
    - sapientType: "BASIC"
      content: !<regular>
        value: "none"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "optional"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "required"
      valueType: "java.lang.String"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.apache.tomcat.util.net.SSLHostConfig"
      uuid: "sSLHostConfig"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "required"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "sslProtocol1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getKeyStorePassword1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getKeyStorePassword1"
      valueType: "java.lang.String"
      uuid: "string5"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getPassword1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getPassword1"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getAlias1"
      valueType: "java.lang.String"
      uuid: "string8"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getAlias1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "ANY"
      valueType: "org.apache.tomcat.util.net.SSLHostConfig"
      uuid: "sSLHostConfig"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.apache.tomcat.util.net.SSLHostConfigCertificate"
      uuid: "sSLHostConfigCertificate"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.apache.coyote.http11.Http11NioProtocol"
      valueType: "java.lang.Class"
      genericValueType: "org.apache.coyote.http11.Http11NioProtocol"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.apache.coyote.http11.AbstractHttp11JsseProtocol"
      uuid: "protocolHandler"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "SslStoreProvider can only be used with Http11NioProtocol"
      valueType: "java.lang.String"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore3"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore4"
    - sapientType: "ANY"
      valueType: "org.apache.tomcat.util.net.SSLHostConfig"
      uuid: "sSLHostConfig"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void13"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore4"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray3"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray4"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "+"
      valueType: "java.lang.String"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.apache.tomcat.util.net.SSLHostConfig"
      uuid: "sSLHostConfig"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void14"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "MOCK"
      valueType: "org.apache.coyote.http11.AbstractHttp11JsseProtocol"
      uuid: "protocolHandler"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void15"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.apache.tomcat.util.net.SSLHostConfig"
      uuid: "sSLHostConfig"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid11"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.catalina.connector.Connector"
        parameters:
        - name: "protocolHandler"
          value:
            sapientType: "MOCK"
            valueType: "org.apache.coyote.http11.AbstractHttp11JsseProtocol"
            uuid: "protocolHandler"
            explicitCastNeeded: true
        propertiesMap:
          scheme:
            sapientType: "BASIC"
            content: !<regular>
              value: "https"
            valueType: "java.lang.String"
            uuid: "uniqueUuid16"
            fixed: true
          secure:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "uniqueUuid17"
            fixed: true
      valueType: "org.apache.catalina.connector.Connector"
      uuid: "connector"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void16"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "https"
      valueType: "java.lang.String"
      uuid: "uniqueUuid12"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.catalina.connector.Connector"
        parameters:
        - name: "protocolHandler"
          value:
            sapientType: "MOCK"
            valueType: "org.apache.coyote.http11.AbstractHttp11JsseProtocol"
            uuid: "protocolHandler"
            explicitCastNeeded: true
        propertiesMap:
          scheme:
            sapientType: "BASIC"
            content: !<regular>
              value: "https"
            valueType: "java.lang.String"
            uuid: "uniqueUuid16"
            fixed: true
          secure:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "uniqueUuid17"
            fixed: true
      valueType: "org.apache.catalina.connector.Connector"
      uuid: "connector"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void17"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid15"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 94
      expression: "stores.getKeyStorePassword() != null"
      range: "(94,30)-(94,65)"
      evaluatedAs: true
      internalMethodName: "applySslBundle"
    - lineNumber: 96
      expression: "key.getPassword() != null"
      range: "(96,7)-(96,31)"
      evaluatedAs: true
      internalMethodName: "applySslBundle"
    - lineNumber: 99
      expression: "key.getAlias() != null"
      range: "(99,7)-(99,28)"
      evaluatedAs: true
      internalMethodName: "applySslBundle"
    - lineNumber: 103
      expression: "options.getCiphers() != null"
      range: "(103,7)-(103,34)"
      evaluatedAs: true
      internalMethodName: "applySslBundle"
    - lineNumber: 127
      expression: "stores.getKeyStore() != null"
      range: "(127,8)-(127,35)"
      evaluatedAs: true
      internalMethodName: "configureSslStoreProvider"
    - lineNumber: 130
      expression: "stores.getTrustStore() != null"
      range: "(130,8)-(130,37)"
      evaluatedAs: true
      internalMethodName: "configureSslStoreProvider"
    - lineNumber: 112
      expression: "options.getEnabledProtocols() != null"
      range: "(112,7)-(112,43)"
      evaluatedAs: true
      internalMethodName: "configureEnabledProtocols"
  - pathId: "path21"
    testPathName: "customizeWhenCaughtExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(org.apache.commons.logging.Log,org.apache.catalina.connector.Connector,org.springframework.boot.web.server.Ssl$ClientAuth)\
      \ : void"
    modelFingerprint: "ED46C88DA0DB458BD5460A2B9561631F"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "FB793C748CAC51F328A7859E384F1586"
      valueUuid: "target"
    - type: "INPUT"
      name: "sslBundle"
      modelFingerprint: "7DBE9A89C45B8DC7FFA8424BB77942A3"
      valueUuid: "sslBundle"
    - type: "FIELD"
      name: "connector"
      modelFingerprint: "8A3D1BA50448F8DC592A104AA23B6D52"
      valueUuid: "connector"
      methodExercised:
        expression: "getProtocolHandler():protocolHandler"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "63CD76E3F76C59053480FA6AD6B6B05D"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean1,message:uniqueUuid18):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "protocol"
      modelFingerprint: "EC557E8B2823AA79DB17FEF750EF84C6"
      valueUuid: "protocolHandler"
      methodExercised:
        expression: "setSSLEnabled(SSLEnabled:uniqueUuid19):void2"
    - type: "LOCAL_VARIABLE"
      name: "protocol"
      modelFingerprint: "E88B5A4631DA341C363D3F7997E53EE9"
      valueUuid: "protocolHandler"
      methodExercised:
        expression: "getDefaultSSLHostConfigName():string"
    - type: "STATIC"
      name: "Ssl.ClientAuth.class.real"
      modelFingerprint: "035EB2B6CBD8842E260F87CDE66D87AE"
      valueUuid: "Ssl.ClientAuth.class.real"
      methodExercised:
        expression: "map(clientAuth:clientAuth,none:uniqueUuid20,want:uniqueUuid21,need:uniqueUuid22):string2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "config"
      modelFingerprint: "CBCA34AC80FA11C1439F57F944E22010"
      valueUuid: "sSLHostConfig"
      methodExercised:
        expression: "setCertificateVerification(certificateVerification:string2):void4"
    - type: "LOCAL_VARIABLE"
      name: "sslBundle"
      modelFingerprint: "A6C03503778814921584A31FF495E9F7"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getKey():sslBundleKey"
    - type: "LOCAL_VARIABLE"
      name: "sslBundle"
      modelFingerprint: "E8CE97B8FD7E60BCCB18BF4E92E8DFBB"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getStores():sslStoreBundle"
    - type: "LOCAL_VARIABLE"
      name: "sslBundle"
      modelFingerprint: "8B50072218265B4159EA5BC2B13C4F63"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getOptions():sslOptions"
    - type: "LOCAL_VARIABLE"
      name: "sslBundle"
      modelFingerprint: "FFDD8D890A4A92EB90DC59D6C8D009A3"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getProtocol():string3"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "7DC84945E3BE5ED5AED8206ECBE577AC"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getKeyStorePassword():string4"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "7DC84945E3BE5ED5AED8206ECBE577AC"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getKeyStorePassword():string5"
    - type: "LOCAL_VARIABLE"
      name: "key"
      modelFingerprint: "E1682CF1AEA8AE1C035DD187A2F526E1"
      valueUuid: "sslBundleKey"
      methodExercised:
        expression: "getPassword():string6"
    - type: "LOCAL_VARIABLE"
      name: "key"
      modelFingerprint: "E1682CF1AEA8AE1C035DD187A2F526E1"
      valueUuid: "sslBundleKey"
      methodExercised:
        expression: "getPassword():string7"
    - type: "LOCAL_VARIABLE"
      name: "key"
      modelFingerprint: "F15DAEFDAD5010690CB13DDDF58AC64D"
      valueUuid: "sslBundleKey"
      methodExercised:
        expression: "getAlias():string8"
    - type: "LOCAL_VARIABLE"
      name: "key"
      modelFingerprint: "F15DAEFDAD5010690CB13DDDF58AC64D"
      valueUuid: "sslBundleKey"
      methodExercised:
        expression: "getAlias():string9"
    - type: "LOCAL_VARIABLE"
      name: "sslHostConfig"
      modelFingerprint: "6747974685DDF06CFC66F09612669848"
      valueUuid: "sSLHostConfig"
      methodExercised:
        expression: "addCertificate(certificate:sSLHostConfigCertificate):void9"
    - type: "LOCAL_VARIABLE"
      name: "options"
      modelFingerprint: "0E66F9C360EB6426AC057606DD1A218B"
      valueUuid: "sslOptions"
      methodExercised:
        expression: "getCiphers():stringArray"
    - type: "LOCAL_VARIABLE"
      name: "options"
      modelFingerprint: "E3C4A99D1E2152F69729FACFD6418113"
      valueUuid: "sslOptions"
      methodExercised:
        expression: "getCiphers():stringArray2"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "258640FD53DB3D01A891299BAC4C2DC5"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "arrayToCommaDelimitedString(arr:stringArray2):string10"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B24256B87F8A53CCE7407CC0DBD4A911"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid23,obj:protocolHandler,message:uniqueUuid24):void11"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "F109B046AD4A787DC08F4F076C3768AF"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getKeyStore():keyStore"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "F109B046AD4A787DC08F4F076C3768AF"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getKeyStore():keyStore2"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "68832D25C9B45D80E917978CB93D4004"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getTrustStore():keyStore3"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "68832D25C9B45D80E917978CB93D4004"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getTrustStore():keyStore4"
    - type: "LOCAL_VARIABLE"
      name: "sslHostConfig"
      modelFingerprint: "505B1DF53E0D6571828A4ED581D17A92"
      valueUuid: "sSLHostConfig"
      methodExercised:
        expression: "setTrustStore(truststore:keyStore4):void13"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "18F6EF8EF359F533F153465CAE066B3F"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "sslHostConfig.addCertificate(certificate);"
      lineNumber: 102
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: sslHostConfig - Method: addCertificate"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.tomcat.SslConnectorCustomizer"
        parameters:
        - name: "logger"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.apache.commons.logging.impl.NoOpLog"
              parameters: []
            valueType: "org.apache.commons.logging.impl.NoOpLog"
            uuid: "logger"
        - name: "connector"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.apache.catalina.connector.Connector"
              parameters:
              - name: "protocolHandler"
                value:
                  sapientType: "MOCK"
                  valueType: "org.apache.coyote.http11.AbstractHttp11JsseProtocol"
                  uuid: "protocolHandler"
                  explicitCastNeeded: true
            valueType: "org.apache.catalina.connector.Connector"
            uuid: "connector"
        - name: "clientAuth"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "NEED"
            valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
            uuid: "clientAuth"
      valueType: "org.springframework.boot.web.embedded.tomcat.SslConnectorCustomizer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.catalina.connector.Connector"
        parameters:
        - name: "protocolHandler"
          value:
            sapientType: "MOCK"
            valueType: "org.apache.coyote.http11.AbstractHttp11JsseProtocol"
            uuid: "protocolHandler"
            explicitCastNeeded: true
      valueType: "org.apache.catalina.connector.Connector"
      uuid: "connector"
    - sapientType: "MOCK"
      valueType: "org.apache.coyote.http11.AbstractHttp11JsseProtocol"
      uuid: "protocolHandler"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "To use SSL, the connector's protocol handler must be an AbstractHttp11JsseProtocol\
          \ subclass"
      valueType: "java.lang.String"
      uuid: "uniqueUuid18"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.apache.coyote.http11.AbstractHttp11JsseProtocol"
      uuid: "protocolHandler"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid19"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.apache.coyote.http11.AbstractHttp11JsseProtocol"
      uuid: "protocolHandler"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDefaultSSLHostConfigName1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "REAL"
      valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
      uuid: "Ssl.ClientAuth.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "required"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "ENUM"
      content: !<regular>
        value: "NEED"
      valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
      uuid: "clientAuth"
    - sapientType: "BASIC"
      content: !<regular>
        value: "none"
      valueType: "java.lang.String"
      uuid: "uniqueUuid20"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "optional"
      valueType: "java.lang.String"
      uuid: "uniqueUuid21"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "required"
      valueType: "java.lang.String"
      uuid: "uniqueUuid22"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.tomcat.util.net.SSLHostConfig"
        parameters: []
        propertiesMap:
          hostName:
            sapientType: "BASIC"
            content: !<regular>
              value: "return_of_getDefaultSSLHostConfigName1"
            valueType: "java.lang.String"
            uuid: "string"
          ciphers:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "string10"
          sslProtocol:
            sapientType: "BASIC"
            content: !<regular>
              value: "sslProtocol1"
            valueType: "java.lang.String"
            uuid: "string3"
      valueType: "org.apache.tomcat.util.net.SSLHostConfig"
      uuid: "sSLHostConfig"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "required"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "sslProtocol1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getKeyStorePassword1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getKeyStorePassword1"
      valueType: "java.lang.String"
      uuid: "string5"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getPassword1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getPassword1"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getAlias1"
      valueType: "java.lang.String"
      uuid: "string8"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getAlias1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.tomcat.util.net.SSLHostConfig"
        parameters: []
        propertiesMap:
          hostName:
            sapientType: "BASIC"
            content: !<regular>
              value: "return_of_getDefaultSSLHostConfigName1"
            valueType: "java.lang.String"
            uuid: "string"
          ciphers:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "string10"
          sslProtocol:
            sapientType: "BASIC"
            content: !<regular>
              value: "sslProtocol1"
            valueType: "java.lang.String"
            uuid: "string3"
      valueType: "org.apache.tomcat.util.net.SSLHostConfig"
      uuid: "sSLHostConfig"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.apache.tomcat.util.net.SSLHostConfigCertificate"
      uuid: "sSLHostConfigCertificate"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.apache.coyote.http11.Http11NioProtocol"
      valueType: "java.lang.Class"
      genericValueType: "org.apache.coyote.http11.Http11NioProtocol"
      uuid: "uniqueUuid23"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.apache.coyote.http11.AbstractHttp11JsseProtocol"
      uuid: "protocolHandler"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "SslStoreProvider can only be used with Http11NioProtocol"
      valueType: "java.lang.String"
      uuid: "uniqueUuid24"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore3"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore4"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.tomcat.util.net.SSLHostConfig"
        parameters: []
        propertiesMap:
          hostName:
            sapientType: "BASIC"
            content: !<regular>
              value: "return_of_getDefaultSSLHostConfigName1"
            valueType: "java.lang.String"
            uuid: "string"
          ciphers:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "string10"
          sslProtocol:
            sapientType: "BASIC"
            content: !<regular>
              value: "sslProtocol1"
            valueType: "java.lang.String"
            uuid: "string3"
      valueType: "org.apache.tomcat.util.net.SSLHostConfig"
      uuid: "sSLHostConfig"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void13"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore4"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Could not load store: "
            valueType: "java.lang.String"
            uuid: "string12"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Exception"
              parameters:
              - name: "message"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: ""
                  valueType: "java.lang.String"
                  uuid: "message"
            valueType: "java.lang.Exception"
            uuid: "exception"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 94
      expression: "stores.getKeyStorePassword() != null"
      range: "(94,30)-(94,65)"
      evaluatedAs: true
      internalMethodName: "applySslBundle"
    - lineNumber: 96
      expression: "key.getPassword() != null"
      range: "(96,7)-(96,31)"
      evaluatedAs: true
      internalMethodName: "applySslBundle"
    - lineNumber: 99
      expression: "key.getAlias() != null"
      range: "(99,7)-(99,28)"
      evaluatedAs: true
      internalMethodName: "applySslBundle"
    - lineNumber: 103
      expression: "options.getCiphers() != null"
      range: "(103,7)-(103,34)"
      evaluatedAs: true
      internalMethodName: "applySslBundle"
    - lineNumber: 127
      expression: "stores.getKeyStore() != null"
      range: "(127,8)-(127,35)"
      evaluatedAs: true
      internalMethodName: "configureSslStoreProvider"
    - lineNumber: 130
      expression: "stores.getTrustStore() != null"
      range: "(130,8)-(130,37)"
      evaluatedAs: true
      internalMethodName: "configureSslStoreProvider"
    - lineNumber: 134
      expression: "catch-exception (Exception)"
      range: "(134,3)-(134,21)"
      evaluatedAs: true
      internalMethodName: "configureSslStoreProvider"
    catchBlockExercised:
      idExternalInstruction: 101
      id: 1
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path13"
    testPathName: "customizeWhenStoresGetKeyStoreIsNullAndStoresGetTrustStoreIsNullAndOptionsGetEnabledProtocolsIsNull7"
    constructorSignature: "<init>(org.apache.commons.logging.Log,org.apache.catalina.connector.Connector,org.springframework.boot.web.server.Ssl$ClientAuth)\
      \ : void"
    modelFingerprint: "BF932AC9CEBFEF674D776CE2AAE783D5"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "1680B0C0171267EBF618C76D9AB1661A"
      valueUuid: "target"
    - type: "INPUT"
      name: "sslBundle"
      modelFingerprint: "7DBE9A89C45B8DC7FFA8424BB77942A3"
      valueUuid: "sslBundle"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "78C98EF06E6B3EB487EB5A62B3C56AFA"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "state(expression:uniqueUuid3,message:uniqueUuid4):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "protocol"
      modelFingerprint: "EC557E8B2823AA79DB17FEF750EF84C6"
      valueUuid: "protocolHandler"
      methodExercised:
        expression: "setSSLEnabled(SSLEnabled:uniqueUuid5):void2"
    - type: "LOCAL_VARIABLE"
      name: "protocol"
      modelFingerprint: "E88B5A4631DA341C363D3F7997E53EE9"
      valueUuid: "protocolHandler"
      methodExercised:
        expression: "getDefaultSSLHostConfigName():string"
    - type: "STATIC"
      name: "Ssl.ClientAuth.class.real"
      modelFingerprint: "725266E70175C49B753DA5B19477F4A0"
      valueUuid: "Ssl.ClientAuth.class.real"
      methodExercised:
        expression: "map(clientAuth:clientAuth,none:uniqueUuid6,want:uniqueUuid7,need:uniqueUuid8):string2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "config"
      modelFingerprint: "148A70139E1B449607116DAB92FB4B92"
      valueUuid: "sSLHostConfig"
      methodExercised:
        expression: "setCertificateVerification(certificateVerification:string2):void4"
    - type: "LOCAL_VARIABLE"
      name: "sslBundle"
      modelFingerprint: "A6C03503778814921584A31FF495E9F7"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getKey():sslBundleKey"
    - type: "LOCAL_VARIABLE"
      name: "sslBundle"
      modelFingerprint: "E8CE97B8FD7E60BCCB18BF4E92E8DFBB"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getStores():sslStoreBundle"
    - type: "LOCAL_VARIABLE"
      name: "sslBundle"
      modelFingerprint: "8B50072218265B4159EA5BC2B13C4F63"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getOptions():sslOptions"
    - type: "LOCAL_VARIABLE"
      name: "sslBundle"
      modelFingerprint: "FFDD8D890A4A92EB90DC59D6C8D009A3"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getProtocol():string3"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "62EE4F6ACA4934FA8F3905A951519511"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getKeyStorePassword():string4"
    - type: "LOCAL_VARIABLE"
      name: "key"
      modelFingerprint: "E1682CF1AEA8AE1C035DD187A2F526E1"
      valueUuid: "sslBundleKey"
      methodExercised:
        expression: "getPassword():string6"
    - type: "LOCAL_VARIABLE"
      name: "key"
      modelFingerprint: "E1682CF1AEA8AE1C035DD187A2F526E1"
      valueUuid: "sslBundleKey"
      methodExercised:
        expression: "getPassword():string7"
    - type: "LOCAL_VARIABLE"
      name: "key"
      modelFingerprint: "F15DAEFDAD5010690CB13DDDF58AC64D"
      valueUuid: "sslBundleKey"
      methodExercised:
        expression: "getAlias():string8"
    - type: "LOCAL_VARIABLE"
      name: "key"
      modelFingerprint: "F15DAEFDAD5010690CB13DDDF58AC64D"
      valueUuid: "sslBundleKey"
      methodExercised:
        expression: "getAlias():string9"
    - type: "LOCAL_VARIABLE"
      name: "sslHostConfig"
      modelFingerprint: "6747974685DDF06CFC66F09612669848"
      valueUuid: "sSLHostConfig"
      methodExercised:
        expression: "addCertificate(certificate:sSLHostConfigCertificate):void9"
    - type: "LOCAL_VARIABLE"
      name: "options"
      modelFingerprint: "0E66F9C360EB6426AC057606DD1A218B"
      valueUuid: "sslOptions"
      methodExercised:
        expression: "getCiphers():stringArray"
    - type: "LOCAL_VARIABLE"
      name: "options"
      modelFingerprint: "E3C4A99D1E2152F69729FACFD6418113"
      valueUuid: "sslOptions"
      methodExercised:
        expression: "getCiphers():stringArray2"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "258640FD53DB3D01A891299BAC4C2DC5"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "arrayToCommaDelimitedString(arr:stringArray2):string10"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B24256B87F8A53CCE7407CC0DBD4A911"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid9,obj:protocolHandler,message:uniqueUuid10):void11"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "F91A1996AE54CB528B23708E8E755F32"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getKeyStore():keyStore"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "F9FCE2C23BA7259F70456842F9AA0036"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getTrustStore():keyStore2"
    - type: "LOCAL_VARIABLE"
      name: "options"
      modelFingerprint: "39EDBCFE2AF7D00DF69B1162A38956FB"
      valueUuid: "sslOptions"
      methodExercised:
        expression: "getEnabledProtocols():stringArray3"
    - type: "LOCAL_VARIABLE"
      name: "protocol"
      modelFingerprint: "01C9FCA25B75AF43313B2449B50CA6C9"
      valueUuid: "protocolHandler"
      methodExercised:
        expression: "addSslHostConfig(sslHostConfig:sSLHostConfig,replace:uniqueUuid11):void12"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.tomcat.SslConnectorCustomizer"
        parameters:
        - name: "logger"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.apache.commons.logging.impl.NoOpLog"
              parameters: []
            valueType: "org.apache.commons.logging.impl.NoOpLog"
            uuid: "logger"
        - name: "connector"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.apache.catalina.connector.Connector"
              parameters:
              - name: "protocolHandler"
                value:
                  sapientType: "MOCK"
                  valueType: "org.apache.coyote.http11.AbstractHttp11JsseProtocol"
                  uuid: "protocolHandler"
                  explicitCastNeeded: true
              propertiesMap:
                scheme:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "https"
                  valueType: "java.lang.String"
                  fixed: true
                secure:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: true
                  valueType: "boolean"
                  fixed: true
            valueType: "org.apache.catalina.connector.Connector"
            uuid: "connector"
        - name: "clientAuth"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "NEED"
            valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
            uuid: "clientAuth"
      valueType: "org.springframework.boot.web.embedded.tomcat.SslConnectorCustomizer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "To use SSL, the connector's protocol handler must be an AbstractHttp11JsseProtocol\
          \ subclass"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.apache.coyote.http11.AbstractHttp11JsseProtocol"
      uuid: "protocolHandler"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.apache.coyote.http11.AbstractHttp11JsseProtocol"
      uuid: "protocolHandler"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDefaultSSLHostConfigName1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "REAL"
      valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
      uuid: "Ssl.ClientAuth.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "required"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "ENUM"
      content: !<regular>
        value: "NEED"
      valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
      uuid: "clientAuth"
    - sapientType: "BASIC"
      content: !<regular>
        value: "none"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "optional"
      valueType: "java.lang.String"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "required"
      valueType: "java.lang.String"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.apache.tomcat.util.net.SSLHostConfig"
      uuid: "sSLHostConfig"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "required"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "sslProtocol1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getPassword1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getPassword1"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getAlias1"
      valueType: "java.lang.String"
      uuid: "string8"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getAlias1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "ANY"
      valueType: "org.apache.tomcat.util.net.SSLHostConfig"
      uuid: "sSLHostConfig"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.apache.tomcat.util.net.SSLHostConfigCertificate"
      uuid: "sSLHostConfigCertificate"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.apache.coyote.http11.Http11NioProtocol"
      valueType: "java.lang.Class"
      genericValueType: "org.apache.coyote.http11.Http11NioProtocol"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.apache.coyote.http11.AbstractHttp11JsseProtocol"
      uuid: "protocolHandler"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "SslStoreProvider can only be used with Http11NioProtocol"
      valueType: "java.lang.String"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "NULL"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "NULL"
      valueType: "java.security.KeyStore"
      uuid: "keyStore2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "NULL"
      valueType: "java.lang.String[]"
      uuid: "stringArray3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.apache.coyote.http11.AbstractHttp11JsseProtocol"
      uuid: "protocolHandler"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void12"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.apache.tomcat.util.net.SSLHostConfig"
      uuid: "sSLHostConfig"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid11"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 94
      expression: "stores.getKeyStorePassword() != null"
      range: "(94,30)-(94,65)"
      evaluatedAs: false
      internalMethodName: "applySslBundle"
    - lineNumber: 96
      expression: "key.getPassword() != null"
      range: "(96,7)-(96,31)"
      evaluatedAs: true
      internalMethodName: "applySslBundle"
    - lineNumber: 99
      expression: "key.getAlias() != null"
      range: "(99,7)-(99,28)"
      evaluatedAs: true
      internalMethodName: "applySslBundle"
    - lineNumber: 103
      expression: "options.getCiphers() != null"
      range: "(103,7)-(103,34)"
      evaluatedAs: true
      internalMethodName: "applySslBundle"
    - lineNumber: 127
      expression: "stores.getKeyStore() != null"
      range: "(127,8)-(127,35)"
      evaluatedAs: false
      internalMethodName: "configureSslStoreProvider"
    - lineNumber: 130
      expression: "stores.getTrustStore() != null"
      range: "(130,8)-(130,37)"
      evaluatedAs: false
      internalMethodName: "configureSslStoreProvider"
    - lineNumber: 112
      expression: "options.getEnabledProtocols() != null"
      range: "(112,7)-(112,43)"
      evaluatedAs: false
      internalMethodName: "configureEnabledProtocols"
