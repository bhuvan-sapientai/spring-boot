---
modelFingerprint: "D3138FA05B696959DAD8BCA4352FD489"
targetClass:
  fullClassName: "org.springframework.boot.web.reactive.error.DefaultErrorAttributes"
methods:
- method:
    name: "getErrorAttributes"
    sourceCodeSignature: "Map<String, Object> getErrorAttributes(ServerRequest request,\
      \ ErrorAttributeOptions options)"
    returnType: "java.util.Map"
    genericReturnType: "java.lang.String,java.lang.Object"
    parameters:
    - name: "request"
      type: "org.springframework.web.reactive.function.server.ServerRequest"
    - name: "options"
      type: "org.springframework.boot.web.error.ErrorAttributeOptions"
    instructionFingerprint: "8C8F665B4B6289CF3C0AE0F870A3EF41"
  paths:
  - pathId: "path1"
    testPathName: "getErrorAttributesThrowsIllegalStateException"
    constructorSignature: "<init>() : void"
    modelFingerprint: "157CCF5CA69F6C0E8E7BB1FC5CB81751"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "request"
      modelFingerprint: "C44D4BC90280DFC423BC46A69FEB7099"
      valueUuid: "request"
    - type: "INPUT"
      name: "options"
      modelFingerprint: "8DD62EA4E4FCEEBD9E8D02B70DBCE39B"
      valueUuid: "options"
    - type: "LOCAL_VARIABLE"
      name: "options"
      modelFingerprint: "A43A8ECF2C9781E298CD1717E42D5891"
      valueUuid: "options"
      methodExercised:
        expression: "isIncluded(include:Enum-org.springframework.boot.web.error.ErrorAttributeOptions$Include-STACK_TRACE):boolean1"
    - type: "LOCAL_VARIABLE"
      name: "request"
      modelFingerprint: "311A48438FD47CA0A73BB750F2B98EEC"
      valueUuid: "request"
      methodExercised:
        expression: "requestPath():requestPath"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "0578DCC352F09C294F2EA6C815AF7DF3"
      valueUuid: "requestPath"
      methodExercised:
        expression: "value():string4"
    - type: "LOCAL_VARIABLE"
      name: "request"
      modelFingerprint: "F2AAAEB1224C6DF62E2F1205C6009A5F"
      valueUuid: "request"
      methodExercised:
        expression: "attribute(name:string3):optional"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "182627B2C5A0CEE4DCEE4A0865BD3CEF"
      valueUuid: "illegalStateException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.reactive.error.DefaultErrorAttributes"
        parameters: []
      valueType: "org.springframework.boot.web.reactive.error.DefaultErrorAttributes"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.web.reactive.function.server.ServerRequest"
      uuid: "request"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.error.ErrorAttributeOptions"
      uuid: "options"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.error.ErrorAttributeOptions"
      uuid: "options"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ENUM"
      content: !<regular>
        value: "STACK_TRACE"
      valueType: "org.springframework.boot.web.error.ErrorAttributeOptions$Include"
      uuid: "Enum-org.springframework.boot.web.error.ErrorAttributeOptions$Include-STACK_TRACE"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.web.reactive.function.server.ServerRequest"
      uuid: "request"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.server.RequestPath"
      uuid: "requestPath"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.server.RequestPath"
      uuid: "requestPath"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_value1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "MOCK"
      valueType: "org.springframework.web.reactive.function.server.ServerRequest"
      uuid: "request"
    - sapientType: "OPTIONAL"
      content: !<optional>
        value:
          sapientType: "NULL"
        target: "java.util.Optional"
      valueType: "java.util.Optional"
      genericValueType: "java.lang.Object"
      uuid: "optional"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.web.reactive.error.DefaultErrorAttributes.ERROR"
      valueType: "java.lang.String"
      uuid: "string3"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Missing exception attribute in ServerWebExchange"
            valueType: "java.lang.String"
            uuid: "uniqueUuid1"
            fixed: true
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
- method:
    name: "getError"
    sourceCodeSignature: "Throwable getError(ServerRequest request)"
    returnType: "java.lang.Throwable"
    parameters:
    - name: "request"
      type: "org.springframework.web.reactive.function.server.ServerRequest"
    instructionFingerprint: "DFBF49716D0EF1FE59D223AEDC8D2055"
  paths:
  - pathId: "path1"
    testPathName: "getErrorThrowsIllegalStateException"
    constructorSignature: "<init>() : void"
    modelFingerprint: "65DC03DCD70BE99A51756801D01C2E34"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "request"
      modelFingerprint: "C44D4BC90280DFC423BC46A69FEB7099"
      valueUuid: "request"
    - type: "LOCAL_VARIABLE"
      name: "request"
      modelFingerprint: "F2AAAEB1224C6DF62E2F1205C6009A5F"
      valueUuid: "request"
      methodExercised:
        expression: "attribute(name:string3):optional"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "182627B2C5A0CEE4DCEE4A0865BD3CEF"
      valueUuid: "illegalStateException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.reactive.error.DefaultErrorAttributes"
        parameters: []
      valueType: "org.springframework.boot.web.reactive.error.DefaultErrorAttributes"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.web.reactive.function.server.ServerRequest"
      uuid: "request"
    - sapientType: "MOCK"
      valueType: "org.springframework.web.reactive.function.server.ServerRequest"
      uuid: "request"
    - sapientType: "OPTIONAL"
      content: !<optional>
        value:
          sapientType: "NULL"
        target: "java.util.Optional"
      valueType: "java.util.Optional"
      genericValueType: "java.lang.Object"
      uuid: "optional"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.web.reactive.error.DefaultErrorAttributes.ERROR"
      valueType: "java.lang.String"
      uuid: "string3"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Missing exception attribute in ServerWebExchange"
            valueType: "java.lang.String"
            uuid: "uniqueUuid2"
            fixed: true
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
- method:
    name: "storeErrorInformation"
    sourceCodeSignature: "void storeErrorInformation(Throwable error, ServerWebExchange\
      \ exchange)"
    returnType: "void"
    parameters:
    - name: "error"
      type: "java.lang.Throwable"
    - name: "exchange"
      type: "org.springframework.web.server.ServerWebExchange"
    instructionFingerprint: "A68EDD6A5A48C3EB4FF55E5093A5A293"
  paths:
  - pathId: "path1"
    testPathName: "storeErrorInformationTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "BD9EF7CAF4A232DA2A0F629D0E979AE3"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "error"
      modelFingerprint: "3995F965464C7AD18BCF971DFF568BE5"
      valueUuid: "error"
    - type: "INPUT"
      name: "exchange"
      modelFingerprint: "0628AE06C1C4B8B348F48F63FBE49813"
      valueUuid: "exchange"
    - type: "LOCAL_VARIABLE"
      name: "exchange"
      modelFingerprint: "AF8FC34C7EC6948D30B01BCB5BE40418"
      valueUuid: "exchange"
      methodExercised:
        expression: "getAttributes():map"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.reactive.error.DefaultErrorAttributes"
        parameters: []
      valueType: "org.springframework.boot.web.reactive.error.DefaultErrorAttributes"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "error"
    - sapientType: "MOCK"
      valueType: "org.springframework.web.server.ServerWebExchange"
      uuid: "exchange"
    - sapientType: "MOCK"
      valueType: "org.springframework.web.server.ServerWebExchange"
      uuid: "exchange"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,java.lang.Object"
      uuid: "map"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
