---
modelFingerprint: "7CAEEBDC9C4BA2C6B5FD54F50649AE82"
targetClass:
  fullClassName: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
methods:
- method:
    name: "getStandardConfigLocations"
    sourceCodeSignature: "String[] getStandardConfigLocations()"
    returnType: "java.lang.String[]"
    instructionFingerprint: "4CBD2280F1CE610697018971867669A5"
  paths:
  - pathId: "path1"
    testPathName: "getStandardConfigLocationsWhenPropertyDefinedLocationIsNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "88AADBC8408A4F1BDDB2D96D348E04DC"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "35BAD19A5A730AE7FFAD007A1B08F349"
      methodExercised:
        expression: "isClassAvailable(className:uniqueUuid1):boolean2"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "99AF10803574DE76B8DDFB99D3B43B48"
      methodExercised:
        expression: "isClassAvailable(className:uniqueUuid2):boolean4"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "35BAD19A5A730AE7FFAD007A1B08F349"
      methodExercised:
        expression: "isClassAvailable(className:uniqueUuid3):boolean8"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "99AF10803574DE76B8DDFB99D3B43B48"
      methodExercised:
        expression: "isClassAvailable(className:uniqueUuid4):boolean10"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "7F8CEBA652F7CF31050350836EDCD212"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "toStringArray(collection:arrayList):stringArray5"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "9C64A4011F63BF53D1AF157C9AEF3908"
      valueUuid: "stringArray5"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Collections.addAll(java.util.List<java.lang.String>,java.lang.String[])\
        \ : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "com.fasterxml.jackson.dataformat.yaml.YAMLParser"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "com.fasterxml.jackson.databind.ObjectMapper"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "com.fasterxml.jackson.dataformat.yaml.YAMLParser"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean10"
    - sapientType: "BASIC"
      content: !<regular>
        value: "com.fasterxml.jackson.databind.ObjectMapper"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "log4j2-test.properties"
            valueType: "java.lang.String"
            uuid: "stringArray5-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "log4j2-test.xml"
            valueType: "java.lang.String"
            uuid: "stringArray5-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: "log4j2.properties"
            valueType: "java.lang.String"
            uuid: "stringArray5-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: "log4j2.xml"
            valueType: "java.lang.String"
            uuid: "stringArray5-item3"
      valueType: "java.lang.String[]"
      uuid: "stringArray5"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "log4j2-test.properties"
          valueType: "java.lang.String"
          uuid: "arrayList-item0"
          fixed: true
          collectionUuid: "arrayList"
        - sapientType: "BASIC"
          content: !<regular>
            value: "log4j2-test.xml"
          valueType: "java.lang.String"
          uuid: "arrayList-item1"
          fixed: true
          collectionUuid: "arrayList"
        - sapientType: "BASIC"
          content: !<regular>
            value: "log4j2.properties"
          valueType: "java.lang.String"
          uuid: "arrayList-item2"
          fixed: true
          collectionUuid: "arrayList"
        - sapientType: "BASIC"
          content: !<regular>
            value: "log4j2.xml"
          valueType: "java.lang.String"
          uuid: "arrayList-item3"
          fixed: true
          collectionUuid: "arrayList"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "arrayList"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "log4j2-test.properties"
            valueType: "java.lang.String"
            uuid: "stringArray5-item0"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "log4j2-test.xml"
            valueType: "java.lang.String"
            uuid: "stringArray5-item1"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: "log4j2.properties"
            valueType: "java.lang.String"
            uuid: "stringArray5-item2"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: "log4j2.xml"
            valueType: "java.lang.String"
            uuid: "stringArray5-item3"
      valueType: "java.lang.String[]"
      uuid: "stringArray5"
    branches:
    - lineNumber: 141
      expression: "isClassAvailable(\\\"com.fasterxml.jackson.dataformat.yaml.YAMLParser\\\
        \")"
      range: "(141,7)-(141,74)"
      evaluatedAs: true
    - lineNumber: 144
      expression: "isClassAvailable(\\\"com.fasterxml.jackson.databind.ObjectMapper\\\
        \")"
      range: "(144,7)-(144,69)"
      evaluatedAs: true
    - lineNumber: 149
      expression: "isClassAvailable(\\\"com.fasterxml.jackson.dataformat.yaml.YAMLParser\\\
        \")"
      range: "(149,7)-(149,74)"
      evaluatedAs: true
    - lineNumber: 152
      expression: "isClassAvailable(\\\"com.fasterxml.jackson.databind.ObjectMapper\\\
        \")"
      range: "(152,7)-(152,69)"
      evaluatedAs: true
    - lineNumber: 158
      expression: "propertyDefinedLocation != null"
      range: "(158,7)-(158,37)"
      evaluatedAs: false
- method:
    name: "isClassAvailable"
    sourceCodeSignature: "boolean isClassAvailable(String className)"
    returnType: "boolean"
    parameters:
    - name: "className"
      type: "java.lang.String"
    instructionFingerprint: "206563D4E80EC822085E5CDC9CEBCD77"
  paths:
  - pathId: "path1"
    testPathName: "isClassAvailableWhenClassUtilsIsPresentClassNameGetClassLoader"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "DC2C2931AB8C197911F42CF52FEDDA6A"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "className"
      modelFingerprint: "44D8DC6E34038B5AADDA6FE09C308148"
      valueUuid: "className"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "E78690121A8EC7263EABA8508B22D603"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:className,classLoader:classLoader):boolean1"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    branches:
    - lineNumber: 165
      expression: "ClassUtils.isPresent(className, getClassLoader())"
      range: "(165,10)-(165,58)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "isClassAvailableWhenClassUtilsNotIsPresentClassNameGetClassLoader"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "EF1E985532398F907AF5B4A059B937A0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "className"
      modelFingerprint: "44D8DC6E34038B5AADDA6FE09C308148"
      valueUuid: "className"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "B921F3DE0B52D63BFE2FDB5362753F2D"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:className,classLoader:classLoader):boolean1"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5633A2B0C967879105766C98D64A3959"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.String"
      uuid: "className"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    branches:
    - lineNumber: 165
      expression: "ClassUtils.isPresent(className, getClassLoader())"
      range: "(165,10)-(165,58)"
      evaluatedAs: false
- method:
    name: "beforeInitialize"
    sourceCodeSignature: "void beforeInitialize()"
    returnType: "void"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Throwable"
    - idExternalInstruction: 0
      id: 3
      catchExceptions:
      - "java.lang.Throwable"
    instructionFingerprint: "09992560081B0FE34B1552ECB08E1772"
  paths:
  - pathId: "path2"
    testPathName: "beforeInitializeWhenIsAlreadyInitializedLoggerContext"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "A345E76DEDA9E581563D96B42BD82F6D"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 171
      expression: "isAlreadyInitialized(loggerContext)"
      range: "(171,7)-(171,41)"
      evaluatedAs: true
  - pathId: "path1"
    testPathName: "beforeInitializeWhenConfigureJdkLoggingBridgeHandler"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "B336C2751B9618DD65F1E0EE58F8659C"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "800DFB0912ECE36FF2FCEEC4F431FA48"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid5,classLoader:classLoader):boolean4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.logging.log4j.jul.Log4jBridgeHandler.install(boolean,null,boolean)\
        \ : void"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.apache.logging.log4j.jul.Log4jBridgeHandler"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 171
      expression: "isAlreadyInitialized(loggerContext)"
      range: "(171,7)-(171,41)"
      evaluatedAs: false
    - lineNumber: 198
      expression: "handlers.length == 0"
      range: "(198,10)-(198,29)"
      evaluatedAs: false
      internalMethodName: "isJulUsingASingleConsoleHandlerAtMost"
    - lineNumber: 198
      expression: "handlers.length == 1"
      range: "(198,35)-(198,54)"
      evaluatedAs: true
      internalMethodName: "isJulUsingASingleConsoleHandlerAtMost"
    - lineNumber: 198
      expression: "handlers[0] instanceof ConsoleHandler"
      range: "(198,59)-(198,95)"
      evaluatedAs: true
      internalMethodName: "isJulUsingASingleConsoleHandlerAtMost"
    - lineNumber: 182
      expression: "isJulUsingASingleConsoleHandlerAtMost()"
      range: "(182,8)-(182,46)"
      evaluatedAs: true
      internalMethodName: "configureJdkLoggingBridgeHandler"
    - lineNumber: 182
      expression: "!isLog4jLogManagerInstalled()"
      range: "(182,51)-(182,79)"
      evaluatedAs: true
      internalMethodName: "configureJdkLoggingBridgeHandler"
    - lineNumber: 207
      expression: "ClassUtils.isPresent(LOG4J_BRIDGE_HANDLER, getClassLoader())"
      range: "(207,10)-(207,69)"
      evaluatedAs: true
      internalMethodName: "isLog4jBridgeHandlerAvailable"
    - lineNumber: 183
      expression: "isLog4jBridgeHandlerAvailable()"
      range: "(183,9)-(183,39)"
      evaluatedAs: true
      internalMethodName: "configureJdkLoggingBridgeHandler"
    - lineNumber: 225
      expression: "handlers.length == 1"
      range: "(225,8)-(225,27)"
      evaluatedAs: true
      internalMethodName: "removeDefaultRootHandler"
    - lineNumber: 225
      expression: "handlers[0] instanceof ConsoleHandler"
      range: "(225,32)-(225,68)"
      evaluatedAs: true
      internalMethodName: "removeDefaultRootHandler"
    - lineNumber: 174
      expression: "!configureJdkLoggingBridgeHandler()"
      range: "(174,7)-(174,41)"
      evaluatedAs: false
- method:
    name: "initialize"
    sourceCodeSignature: "void initialize(LoggingInitializationContext initializationContext,\
      \ String configLocation, LogFile logFile)"
    returnType: "void"
    parameters:
    - name: "initializationContext"
      type: "org.springframework.boot.logging.LoggingInitializationContext"
    - name: "configLocation"
      type: "java.lang.String"
    - name: "logFile"
      type: "org.springframework.boot.logging.LogFile"
    instructionFingerprint: "E775BB3B1BCB88B8D4D8ACF66A784BF4"
  paths:
  - pathId: "path2"
    testPathName: "initializeWhenIsAlreadyInitializedLoggerContext"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "CDC955627E1D86D8E29B54C53B4FE70F"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "configLocation"
      modelFingerprint: "B3892ED02ADD2D85E9D4127CB28982BA"
      valueUuid: "configLocation"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: "configLocation1"
      valueType: "java.lang.String"
      uuid: "configLocation"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 237
      expression: "isAlreadyInitialized(loggerContext)"
      range: "(237,7)-(237,41)"
      evaluatedAs: true
  - pathId: "path1"
    testPathName: "initializeWhenStringUtilsHasLengthConfigLocation"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "E14EA6445230056ACF616820B98CBF8F"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "103943554753788D91DF39AF76338D95"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "configLocation"
      modelFingerprint: "A0FC8324DE9BC1A4EBE5B431EF21B8CE"
      valueUuid: "configLocation"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "LOCAL_VARIABLE"
      name: "initializationContext"
      modelFingerprint: "B43BCFF9474519DE3742BE7B13AE4678"
      valueUuid: "initializationContext"
      methodExercised:
        expression: "getEnvironment():environment"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "343F4757C4E645C5D95B6C1E12B9BF12"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:configLocation):boolean2"
        staticAccess: true
    - type: "STATIC"
      name: "SystemPropertyUtils.class.real"
      modelFingerprint: "BE4F3C0573505F13F3344CAEF0337590"
      valueUuid: "SystemPropertyUtils.class.real"
      methodExercised:
        expression: "resolvePlaceholders(text:configLocation):string3"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "getLoggerContext().putObjectIfAbsent(ENVIRONMENT_KEY, environment);"
      lineNumber: 242
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type LoggerContext - Method: putObjectIfAbsent"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "configLocation"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "configLocation"
    - sapientType: "REAL"
      valueType: "org.springframework.util.SystemPropertyUtils"
      uuid: "SystemPropertyUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "configLocation"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 237
      expression: "isAlreadyInitialized(loggerContext)"
      range: "(237,7)-(237,41)"
      evaluatedAs: false
    - lineNumber: 241
      expression: "environment != null"
      range: "(241,7)-(241,25)"
      evaluatedAs: true
    - lineNumber: 57
      expression: "StringUtils.hasLength(configLocation)"
      range: "(57,7)-(57,43)"
      evaluatedAs: true
      internalMethodName: "initialize"
- method:
    name: "loadDefaults"
    sourceCodeSignature: "void loadDefaults(LoggingInitializationContext initializationContext,\
      \ LogFile logFile)"
    returnType: "void"
    parameters:
    - name: "initializationContext"
      type: "org.springframework.boot.logging.LoggingInitializationContext"
    - name: "logFile"
      type: "org.springframework.boot.logging.LogFile"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 4
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "8C4E68CAF987002D1C0D3949302C7200"
  paths:
  - pathId: "path1"
    testPathName: "loadDefaultsWhenInitializationContextIsNotNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "A9DA07B6E3F77AB789CD8B9A6A00F027"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "103943554753788D91DF39AF76338D95"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "ClassUtils.class.real"
      modelFingerprint: "AD7456451003924289BEE8CDD9FA8CB8"
      valueUuid: "ClassUtils.class.real"
      methodExercised:
        expression: "getPackageName(clazz:uniqueUuid6):string2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "initializationContext"
      modelFingerprint: "B43BCFF9474519DE3742BE7B13AE4678"
      valueUuid: "initializationContext"
      methodExercised:
        expression: "getEnvironment():environment"
    - type: "STATIC"
      name: "Binder.class"
      modelFingerprint: "B5675488A8670E7C369B5584B6787902"
      valueUuid: "Binder.class"
      methodExercised:
        expression: "get(environment:environment):binder"
        staticAccess: true
    - type: "STATIC"
      name: "Bindable.class.real"
      modelFingerprint: "BAC37037B358609B7F8B94808962E01C"
      valueUuid: "Bindable.class.real"
      methodExercised:
        expression: "listOf(elementType:uniqueUuid7):bindable"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "AB570C2EB8FB1595FA5D1038D439B2D2"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid9,target:bindable):bindResult"
    - type: "LOCAL_VARIABLE"
      name: "overrides"
      modelFingerprint: "AD2F1D0DFFD942C027F51A1905846AC9"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:list):object"
    - type: "LOCAL_VARIABLE"
      name: "initializationContext"
      modelFingerprint: "B43BCFF9474519DE3742BE7B13AE4678"
      valueUuid: "initializationContext"
      methodExercised:
        expression: "getEnvironment():environment2"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "0B755E70477B7BAB57860A8A7DD3D3C9"
      valueUuid: "loggingSystemProperties"
      methodExercised:
        expression: "apply(logFile:logFile):void8"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "B98F464037A61CE5FB8FB752EF5A4027"
      methodExercised:
        expression: "loadConfiguration(location:string7,logFile:logFile,overrides:object):void9"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "}"
      lineNumber: 178
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type LoggingSystemProperties - Method: apply"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.log4j2"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "Binder.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "REAL"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "Bindable.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "listOf"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.String"
            valueType: "java.lang.Class"
            genericValueType: "java.lang.String"
            uuid: "uniqueUuid10"
            fixed: true
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "bindable"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      genericValueType: "java.util.List<java.lang.String>"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "logging.log4j2.config.override"
      valueType: "java.lang.String"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "listOf"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.String"
            valueType: "java.lang.Class"
            genericValueType: "java.lang.String"
            uuid: "uniqueUuid10"
            fixed: true
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "bindable"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      genericValueType: "java.util.List<java.lang.String>"
      uuid: "bindResult"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.LoggingSystemProperties"
        parameters:
        - name: "environment"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.Environment"
            uuid: "environment2"
        - name: "defaultValueResolver"
          value:
            sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
            valueType: "java.util.function.Function"
            genericValueType: "java.lang.String,java.lang.String"
            uuid: "function"
        - name: "setter"
          value:
            sapientType: "NULL"
            valueType: "java.util.function.BiConsumer"
            uuid: "uniqueUuid11"
      valueType: "org.springframework.boot.logging.LoggingSystemProperties"
      uuid: "loggingSystemProperties"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void8"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "classpath:org/springframework/boot/logging/log4j2/log4j2-file.xml"
      valueType: "java.lang.String"
      uuid: "string7"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 252
      expression: "logFile != null"
      range: "(252,44)-(252,58)"
      evaluatedAs: true
    - lineNumber: 264
      expression: "initializationContext != null"
      range: "(264,7)-(264,35)"
      evaluatedAs: true
      internalMethodName: "load"
  - pathId: "path2"
    testPathName: "loadDefaultsWhenLogFileIsNullAndInitializationContextIsNotNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "A40BBD9AB6B93D118FE7A62FA4A368EF"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "103943554753788D91DF39AF76338D95"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "9B1BF83008E682F052DC52C99E63D7C5"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "ClassUtils.class.real"
      modelFingerprint: "AD7456451003924289BEE8CDD9FA8CB8"
      valueUuid: "ClassUtils.class.real"
      methodExercised:
        expression: "getPackageName(clazz:uniqueUuid12):string2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "initializationContext"
      modelFingerprint: "B43BCFF9474519DE3742BE7B13AE4678"
      valueUuid: "initializationContext"
      methodExercised:
        expression: "getEnvironment():environment"
    - type: "STATIC"
      name: "Binder.class"
      modelFingerprint: "B5675488A8670E7C369B5584B6787902"
      valueUuid: "Binder.class"
      methodExercised:
        expression: "get(environment:environment):binder"
        staticAccess: true
    - type: "STATIC"
      name: "Bindable.class.real"
      modelFingerprint: "BAC37037B358609B7F8B94808962E01C"
      valueUuid: "Bindable.class.real"
      methodExercised:
        expression: "listOf(elementType:uniqueUuid13):bindable"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "AB570C2EB8FB1595FA5D1038D439B2D2"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid15,target:bindable):bindResult"
    - type: "LOCAL_VARIABLE"
      name: "overrides"
      modelFingerprint: "AD2F1D0DFFD942C027F51A1905846AC9"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:list):object"
    - type: "LOCAL_VARIABLE"
      name: "initializationContext"
      modelFingerprint: "B43BCFF9474519DE3742BE7B13AE4678"
      valueUuid: "initializationContext"
      methodExercised:
        expression: "getEnvironment():environment2"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "DB18B0B8CB9BFA69BB931837489EA289"
      valueUuid: "loggingSystemProperties"
      methodExercised:
        expression: "apply(logFile:logFile):void8"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "4998DB629B06E2DC028014DF70B13645"
      methodExercised:
        expression: "loadConfiguration(location:string7,logFile:logFile,overrides:object):void9"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "}"
      lineNumber: 178
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type LoggingSystemProperties - Method: apply"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.log4j2"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "uniqueUuid12"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "Binder.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "REAL"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "Bindable.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "listOf"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.String"
            valueType: "java.lang.Class"
            genericValueType: "java.lang.String"
            uuid: "uniqueUuid16"
            fixed: true
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "bindable"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid13"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      genericValueType: "java.util.List<java.lang.String>"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "logging.log4j2.config.override"
      valueType: "java.lang.String"
      uuid: "uniqueUuid15"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "listOf"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.String"
            valueType: "java.lang.Class"
            genericValueType: "java.lang.String"
            uuid: "uniqueUuid16"
            fixed: true
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "bindable"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      genericValueType: "java.util.List<java.lang.String>"
      uuid: "bindResult"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.LoggingSystemProperties"
        parameters:
        - name: "environment"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.Environment"
            uuid: "environment2"
        - name: "defaultValueResolver"
          value:
            sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
            valueType: "java.util.function.Function"
            genericValueType: "java.lang.String,java.lang.String"
            uuid: "function"
        - name: "setter"
          value:
            sapientType: "NULL"
            valueType: "java.util.function.BiConsumer"
            uuid: "uniqueUuid17"
      valueType: "org.springframework.boot.logging.LoggingSystemProperties"
      uuid: "loggingSystemProperties"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void8"
      fixed: true
    - sapientType: "NULL"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "classpath:org/springframework/boot/logging/log4j2/log4j2.xml"
      valueType: "java.lang.String"
      uuid: "string7"
      fixed: true
    - sapientType: "NULL"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 252
      expression: "logFile != null"
      range: "(252,44)-(252,58)"
      evaluatedAs: false
    - lineNumber: 264
      expression: "initializationContext != null"
      range: "(264,7)-(264,35)"
      evaluatedAs: true
      internalMethodName: "load"
- method:
    name: "loadConfiguration"
    sourceCodeSignature: "void loadConfiguration(LoggingInitializationContext initializationContext,\
      \ String location, LogFile logFile)"
    returnType: "void"
    parameters:
    - name: "initializationContext"
      type: "org.springframework.boot.logging.LoggingInitializationContext"
    - name: "location"
      type: "java.lang.String"
    - name: "logFile"
      type: "org.springframework.boot.logging.LogFile"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 4
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "A4F2A3DF653F45742922E8375DF6ED65"
  paths:
  - pathId: "path1"
    testPathName: "loadConfigurationWhenInitializationContextIsNotNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "497947443AD27B3BE43FE8D1356B4D16"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "103943554753788D91DF39AF76338D95"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "3AFB819A3AF82CB03439BE094E5D74A5"
      valueUuid: "location"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "LOCAL_VARIABLE"
      name: "initializationContext"
      modelFingerprint: "B43BCFF9474519DE3742BE7B13AE4678"
      valueUuid: "initializationContext"
      methodExercised:
        expression: "getEnvironment():environment"
    - type: "STATIC"
      name: "Binder.class"
      modelFingerprint: "B5675488A8670E7C369B5584B6787902"
      valueUuid: "Binder.class"
      methodExercised:
        expression: "get(environment:environment):binder"
        staticAccess: true
    - type: "STATIC"
      name: "Bindable.class.real"
      modelFingerprint: "BAC37037B358609B7F8B94808962E01C"
      valueUuid: "Bindable.class.real"
      methodExercised:
        expression: "listOf(elementType:uniqueUuid18):bindable"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "AB570C2EB8FB1595FA5D1038D439B2D2"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid20,target:bindable):bindResult"
    - type: "LOCAL_VARIABLE"
      name: "overrides"
      modelFingerprint: "AD2F1D0DFFD942C027F51A1905846AC9"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:list):object"
    - type: "LOCAL_VARIABLE"
      name: "initializationContext"
      modelFingerprint: "B43BCFF9474519DE3742BE7B13AE4678"
      valueUuid: "initializationContext"
      methodExercised:
        expression: "getEnvironment():environment2"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "0B755E70477B7BAB57860A8A7DD3D3C9"
      valueUuid: "loggingSystemProperties"
      methodExercised:
        expression: "apply(logFile:logFile):void8"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "7BFB010BF034001ECE01860DA6578D79"
      methodExercised:
        expression: "loadConfiguration(location:location,logFile:logFile,overrides:object):void9"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "}"
      lineNumber: 178
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type LoggingSystemProperties - Method: apply"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "Binder.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "REAL"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "Bindable.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "listOf"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.String"
            valueType: "java.lang.Class"
            genericValueType: "java.lang.String"
            uuid: "uniqueUuid21"
            fixed: true
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "bindable"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid18"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      genericValueType: "java.util.List<java.lang.String>"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "logging.log4j2.config.override"
      valueType: "java.lang.String"
      uuid: "uniqueUuid20"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "listOf"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.String"
            valueType: "java.lang.Class"
            genericValueType: "java.lang.String"
            uuid: "uniqueUuid21"
            fixed: true
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "bindable"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      genericValueType: "java.util.List<java.lang.String>"
      uuid: "bindResult"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.LoggingSystemProperties"
        parameters:
        - name: "environment"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.Environment"
            uuid: "environment2"
        - name: "defaultValueResolver"
          value:
            sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
            valueType: "java.util.function.Function"
            genericValueType: "java.lang.String,java.lang.String"
            uuid: "function"
        - name: "setter"
          value:
            sapientType: "NULL"
            valueType: "java.util.function.BiConsumer"
            uuid: "uniqueUuid22"
      valueType: "org.springframework.boot.logging.LoggingSystemProperties"
      uuid: "loggingSystemProperties"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void8"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 264
      expression: "initializationContext != null"
      range: "(264,7)-(264,35)"
      evaluatedAs: true
      internalMethodName: "load"
- method:
    name: "loadConfiguration"
    sourceCodeSignature: "void loadConfiguration(String location, LogFile logFile,\
      \ List<String> overrides)"
    returnType: "void"
    parameters:
    - name: "location"
      type: "java.lang.String"
    - name: "logFile"
      type: "org.springframework.boot.logging.LogFile"
    - name: "overrides"
      type: "java.util.List"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 4
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "E7C50B0BB13F833EB8B395E6A5475749"
  paths:
  - pathId: "path1"
    testPathName: "loadConfiguration1WhenConfigurationsSizeGreaterThan1"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "989E85EA95242DFAEC6459353E009E43"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "B6387B9F3CEF19C379B39729ADDA5D1C"
      valueUuid: "location"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "INPUT"
      name: "overrides"
      modelFingerprint: "683E87DBD6B142522E9D19A71102AEB1"
      valueUuid: "overrides"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "47CAEF5B9AA188F54F71893F62E67791"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:location,message:uniqueUuid23):void8"
        staticAccess: true
    - type: "STATIC"
      name: "ResourceUtils.class.real"
      modelFingerprint: "F099CBB9774888E0624FDCDB5F4A509A"
      valueUuid: "ResourceUtils.class.real"
      methodExercised:
        expression: "getURL(resourceLocation:location):uRL"
        throwsExceptions:
        - "java.io.FileNotFoundException"
        staticAccess: true
    - type: "STATIC"
      name: "ResourceUtils.class"
      modelFingerprint: "C868F487CB7824F015658A208D84A9ED"
      valueUuid: "ResourceUtils.class"
      methodExercised:
        expression: "getFile(resourceUrl:uRL):file"
        throwsExceptions:
        - "java.io.FileNotFoundException"
        staticAccess: true
    - type: "STATIC"
      name: "ResourceUtils.class.real"
      modelFingerprint: "2257204E84523B2B78D4C3B1BB060906"
      valueUuid: "ResourceUtils.class.real"
      methodExercised:
        expression: "getURL(resourceLocation:object):uRL2"
        throwsExceptions:
        - "java.io.FileNotFoundException"
        staticAccess: true
    - type: "STATIC"
      name: "ResourceUtils.class"
      modelFingerprint: "955B65AF7D112ED3086F56C85EA78E56"
      valueUuid: "ResourceUtils.class"
      methodExercised:
        expression: "getFile(resourceUrl:uRL2):file2"
        throwsExceptions:
        - "java.io.FileNotFoundException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_FAILURE"
      source: "return new ConfigurationSource(url.openStream(), ResourceUtils.getFile(url));"
      lineNumber: 310
      details: "No constructor found to create an object without any exception for\
        \ class org.apache.logging.log4j.core.config.ConfigurationSource"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "B"
          valueType: "java.lang.String"
          uuid: "object"
          collectionUuid: "overrides"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "overrides"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void8"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Location must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid23"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ResourceUtils"
        method: "getURL"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "location"
      valueType: "java.net.URL"
      uuid: "uRL"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ResourceUtils"
        method: "getURL"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "location"
      valueType: "java.net.URL"
      uuid: "uRL"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ResourceUtils"
        method: "getURL"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "B"
            valueType: "java.lang.String"
            uuid: "object"
            collectionUuid: "overrides"
      valueType: "java.net.URL"
      uuid: "uRL2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "object"
      collectionUuid: "overrides"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file2-pathname"
      valueType: "java.io.File"
      uuid: "file2"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ResourceUtils"
        method: "getURL"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "B"
            valueType: "java.lang.String"
            uuid: "object"
            collectionUuid: "overrides"
      valueType: "java.net.URL"
      uuid: "uRL2"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 309
      expression: "FILE_PROTOCOL.equals(url.getProtocol())"
      range: "(309,7)-(309,45)"
      evaluatedAs: true
      internalMethodName: "getConfigurationSource"
    - lineNumber: 290
      expression: "for-each(overrides)"
      range: "(290,27)-(290,35)"
      evaluatedAs: true
    - lineNumber: 293
      expression: "configurations.size() > 1"
      range: "(293,35)-(293,59)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "loadConfiguration1WhenUrlGetProtocolEqualsHttpsAndConfigurationsSizeGreaterThan1"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "D9C61E83FB3031C058F7586D496B5335"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "3AFB819A3AF82CB03439BE094E5D74A5"
      valueUuid: "location"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "INPUT"
      name: "overrides"
      modelFingerprint: "5950A5B5EB7AD25A170A1E0C24B822B9"
      valueUuid: "overrides"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B1124DB6A7AC4452AF85217A517A3C57"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:location,message:uniqueUuid24):void8"
        staticAccess: true
    - type: "STATIC"
      name: "ResourceUtils.class.real"
      modelFingerprint: "93A37E0CB883D058427316DBAD79671D"
      valueUuid: "ResourceUtils.class.real"
      methodExercised:
        expression: "getURL(resourceLocation:location):uRL"
        throwsExceptions:
        - "java.io.FileNotFoundException"
        staticAccess: true
    - type: "STATIC"
      name: "ResourceUtils.class"
      modelFingerprint: "C868F487CB7824F015658A208D84A9ED"
      valueUuid: "ResourceUtils.class"
      methodExercised:
        expression: "getFile(resourceUrl:uRL):file"
        throwsExceptions:
        - "java.io.FileNotFoundException"
        staticAccess: true
    - type: "STATIC"
      name: "ResourceUtils.class.real"
      modelFingerprint: "D056A5B60D3EAB29CBDE777FA89F7278"
      valueUuid: "ResourceUtils.class.real"
      methodExercised:
        expression: "getURL(resourceLocation:object):uRL2"
        throwsExceptions:
        - "java.io.FileNotFoundException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_FAILURE"
      source: "return new ConfigurationSource(url.openStream(), ResourceUtils.getFile(url));"
      lineNumber: 310
      details: "No constructor found to create an object without any exception for\
        \ class org.apache.logging.log4j.core.config.ConfigurationSource"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "overrides"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void8"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Location must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid24"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ResourceUtils"
        method: "getURL"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "location"
      valueType: "java.net.URL"
      uuid: "uRL"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ResourceUtils"
        method: "getURL"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "location"
      valueType: "java.net.URL"
      uuid: "uRL"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ResourceUtils"
        method: "getURL"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "B"
            valueType: "java.lang.String"
            uuid: "object"
            collectionUuid: "overrides"
      valueType: "java.net.URL"
      uuid: "uRL2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resourceLocation1"
      valueType: "java.lang.String"
      uuid: "object"
      collectionUuid: "overrides"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 309
      expression: "FILE_PROTOCOL.equals(url.getProtocol())"
      range: "(309,7)-(309,45)"
      evaluatedAs: true
      internalMethodName: "getConfigurationSource"
    - lineNumber: 290
      expression: "for-each(overrides)"
      range: "(290,27)-(290,35)"
      evaluatedAs: true
    - lineNumber: 314
      expression: "url.getProtocol().equals(\\\"https\\\")"
      range: "(314,39)-(314,71)"
      evaluatedAs: true
      internalMethodName: "getConfigurationSource"
    - lineNumber: 293
      expression: "configurations.size() > 1"
      range: "(293,35)-(293,59)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "loadConfiguration1WhenUrlGetProtocolNotEqualsHttpsAndConfigurationsSizeGreaterThan1"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "2CC785AC2FEF6C1D2DE45A98BCD1E5BB"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "3AFB819A3AF82CB03439BE094E5D74A5"
      valueUuid: "location"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "INPUT"
      name: "overrides"
      modelFingerprint: "5950A5B5EB7AD25A170A1E0C24B822B9"
      valueUuid: "overrides"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B1124DB6A7AC4452AF85217A517A3C57"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:location,message:uniqueUuid25):void8"
        staticAccess: true
    - type: "STATIC"
      name: "ResourceUtils.class.real"
      modelFingerprint: "93A37E0CB883D058427316DBAD79671D"
      valueUuid: "ResourceUtils.class.real"
      methodExercised:
        expression: "getURL(resourceLocation:location):uRL"
        throwsExceptions:
        - "java.io.FileNotFoundException"
        staticAccess: true
    - type: "STATIC"
      name: "ResourceUtils.class"
      modelFingerprint: "C868F487CB7824F015658A208D84A9ED"
      valueUuid: "ResourceUtils.class"
      methodExercised:
        expression: "getFile(resourceUrl:uRL):file"
        throwsExceptions:
        - "java.io.FileNotFoundException"
        staticAccess: true
    - type: "STATIC"
      name: "ResourceUtils.class.real"
      modelFingerprint: "5816CA2CDD6EB65D431CFC36B100C95E"
      valueUuid: "ResourceUtils.class.real"
      methodExercised:
        expression: "getURL(resourceLocation:object):uRL2"
        throwsExceptions:
        - "java.io.FileNotFoundException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_FAILURE"
      source: "return new ConfigurationSource(url.openStream(), ResourceUtils.getFile(url));"
      lineNumber: 310
      details: "No constructor found to create an object without any exception for\
        \ class org.apache.logging.log4j.core.config.ConfigurationSource"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "overrides"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void8"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Location must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid25"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ResourceUtils"
        method: "getURL"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "location"
      valueType: "java.net.URL"
      uuid: "uRL"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ResourceUtils"
        method: "getURL"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "location"
      valueType: "java.net.URL"
      uuid: "uRL"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ResourceUtils"
        method: "getURL"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "D"
            valueType: "java.lang.String"
            uuid: "object"
            collectionUuid: "overrides"
      valueType: "java.net.URL"
      uuid: "uRL2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resourceLocation1"
      valueType: "java.lang.String"
      uuid: "object"
      collectionUuid: "overrides"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 309
      expression: "FILE_PROTOCOL.equals(url.getProtocol())"
      range: "(309,7)-(309,45)"
      evaluatedAs: true
      internalMethodName: "getConfigurationSource"
    - lineNumber: 290
      expression: "for-each(overrides)"
      range: "(290,27)-(290,35)"
      evaluatedAs: true
    - lineNumber: 314
      expression: "url.getProtocol().equals(\\\"https\\\")"
      range: "(314,39)-(314,71)"
      evaluatedAs: false
      internalMethodName: "getConfigurationSource"
    - lineNumber: 293
      expression: "configurations.size() > 1"
      range: "(293,35)-(293,59)"
      evaluatedAs: true
  - pathId: "path5"
    testPathName: "loadConfiguration1WhenOverridesIsEmptyAndConfigurationsSizeNotGreaterThan1"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "416A5394171F56D928D659848FE6E12E"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "3AFB819A3AF82CB03439BE094E5D74A5"
      valueUuid: "location"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "INPUT"
      name: "overrides"
      modelFingerprint: "5950A5B5EB7AD25A170A1E0C24B822B9"
      valueUuid: "overrides"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B1124DB6A7AC4452AF85217A517A3C57"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:location,message:uniqueUuid26):void8"
        staticAccess: true
    - type: "STATIC"
      name: "ResourceUtils.class.real"
      modelFingerprint: "93A37E0CB883D058427316DBAD79671D"
      valueUuid: "ResourceUtils.class.real"
      methodExercised:
        expression: "getURL(resourceLocation:location):uRL"
        throwsExceptions:
        - "java.io.FileNotFoundException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.logging.log4j.core.net.ssl.SslConfigurationFactory.getSslConfiguration()\
        \ : org.apache.logging.log4j.core.net.ssl.SslConfiguration"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "overrides"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void8"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Location must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid26"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ResourceUtils"
        method: "getURL"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "location"
      valueType: "java.net.URL"
      uuid: "uRL"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 309
      expression: "FILE_PROTOCOL.equals(url.getProtocol())"
      range: "(309,7)-(309,45)"
      evaluatedAs: false
      internalMethodName: "getConfigurationSource"
    - lineNumber: 314
      expression: "url.getProtocol().equals(\\\"https\\\")"
      range: "(314,39)-(314,71)"
      evaluatedAs: true
      internalMethodName: "getConfigurationSource"
    - lineNumber: 290
      expression: "for-each(overrides)"
      range: "(290,27)-(290,35)"
      evaluatedAs: false
    - lineNumber: 293
      expression: "configurations.size() > 1"
      range: "(293,35)-(293,59)"
      evaluatedAs: false
  - pathId: "path6"
    testPathName: "loadConfiguration1WhenCaughtExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "0A13F7F6853C92006500F3AFFB2E3FA3"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "3AFB819A3AF82CB03439BE094E5D74A5"
      valueUuid: "location"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "INPUT"
      name: "overrides"
      modelFingerprint: "5950A5B5EB7AD25A170A1E0C24B822B9"
      valueUuid: "overrides"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B1124DB6A7AC4452AF85217A517A3C57"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:location,message:uniqueUuid27):void8"
        staticAccess: true
    - type: "STATIC"
      name: "ResourceUtils.class"
      modelFingerprint: "93A37E0CB883D058427316DBAD79671D"
      valueUuid: "ResourceUtils.class"
      methodExercised:
        expression: "getURL(resourceLocation:location):uRL"
        throwsExceptions:
        - "java.io.FileNotFoundException"
        staticAccess: true
    - type: "STATIC"
      name: "ResourceUtils.class"
      modelFingerprint: "C57A6606BE06426BBC26EC75162D01A5"
      valueUuid: "ResourceUtils.class"
      methodExercised:
        expression: "getURL(resourceLocation:object):uRL2"
        throwsExceptions:
        - "java.io.FileNotFoundException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "6A624C31AC15C93C21FEF06ADE270942"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.logging.log4j.core.net.UrlConnectionFactory.createConnection(java.net.URL,long,org.apache.logging.log4j.core.net.ssl.SslConfiguration,org.apache.logging.log4j.core.util.AuthorizationProvider)\
        \ : java.net.URLConnection"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "overrides"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void8"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Location must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid27"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ResourceUtils"
        method: "getURL"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "location"
      valueType: "java.net.URL"
      uuid: "uRL"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class"
    - sapientType: "MOCK"
      valueType: "java.net.URL"
      uuid: "uRL2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resourceLocation1"
      valueType: "java.lang.String"
      uuid: "object"
      collectionUuid: "overrides"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "message1"
            valueType: "java.lang.String"
            uuid: "string6"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Exception"
              parameters: []
            valueType: "java.lang.Exception"
            uuid: "exception"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 309
      expression: "FILE_PROTOCOL.equals(url.getProtocol())"
      range: "(309,7)-(309,45)"
      evaluatedAs: false
      internalMethodName: "getConfigurationSource"
    - lineNumber: 314
      expression: "url.getProtocol().equals(\\\"https\\\")"
      range: "(314,39)-(314,71)"
      evaluatedAs: false
      internalMethodName: "getConfigurationSource"
    - lineNumber: 290
      expression: "for-each(overrides)"
      range: "(290,27)-(290,35)"
      evaluatedAs: true
    - lineNumber: 293
      expression: "configurations.size() > 1"
      range: "(293,35)-(293,59)"
      evaluatedAs: true
    - lineNumber: 297
      expression: "catch-exception (Exception)"
      range: "(297,3)-(297,21)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 4
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path7"
    testPathName: "loadConfiguration1WhenConfigurationsSizeNotGreaterThan1AndCaughtExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "D226DD741C1849EB97D70FE78EF3F27B"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "3AFB819A3AF82CB03439BE094E5D74A5"
      valueUuid: "location"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "INPUT"
      name: "overrides"
      modelFingerprint: "5950A5B5EB7AD25A170A1E0C24B822B9"
      valueUuid: "overrides"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B1124DB6A7AC4452AF85217A517A3C57"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:location,message:uniqueUuid28):void8"
        staticAccess: true
    - type: "STATIC"
      name: "ResourceUtils.class.real"
      modelFingerprint: "93A37E0CB883D058427316DBAD79671D"
      valueUuid: "ResourceUtils.class.real"
      methodExercised:
        expression: "getURL(resourceLocation:location):uRL"
        throwsExceptions:
        - "java.io.FileNotFoundException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "6A624C31AC15C93C21FEF06ADE270942"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.logging.log4j.core.net.UrlConnectionFactory.createConnection(java.net.URL,long,org.apache.logging.log4j.core.net.ssl.SslConfiguration,org.apache.logging.log4j.core.util.AuthorizationProvider)\
        \ : java.net.URLConnection"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "overrides"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void8"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Location must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid28"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ResourceUtils"
        method: "getURL"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "location"
      valueType: "java.net.URL"
      uuid: "uRL"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "message1"
            valueType: "java.lang.String"
            uuid: "string4"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Exception"
              parameters: []
            valueType: "java.lang.Exception"
            uuid: "exception"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 309
      expression: "FILE_PROTOCOL.equals(url.getProtocol())"
      range: "(309,7)-(309,45)"
      evaluatedAs: false
      internalMethodName: "getConfigurationSource"
    - lineNumber: 314
      expression: "url.getProtocol().equals(\\\"https\\\")"
      range: "(314,39)-(314,71)"
      evaluatedAs: false
      internalMethodName: "getConfigurationSource"
    - lineNumber: 290
      expression: "for-each(overrides)"
      range: "(290,27)-(290,35)"
      evaluatedAs: false
    - lineNumber: 293
      expression: "configurations.size() > 1"
      range: "(293,35)-(293,59)"
      evaluatedAs: false
    - lineNumber: 297
      expression: "catch-exception (Exception)"
      range: "(297,3)-(297,21)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 4
      catchExceptions:
      - "java.lang.Exception"
- method:
    name: "reinitialize"
    sourceCodeSignature: "void reinitialize(LoggingInitializationContext initializationContext)"
    returnType: "void"
    parameters:
    - name: "initializationContext"
      type: "org.springframework.boot.logging.LoggingInitializationContext"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.io.IOException"
    instructionFingerprint: "D6BBB0AFEC026F3FBB4A914F3DABEB15"
  paths:
  - pathId: "path4"
    testPathName: "reinitializeWhenCollectionUtilsIsEmptyOverrides"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "1F1BD86B5D3007DB8B732EE925990993"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "103943554753788D91DF39AF76338D95"
      valueUuid: "initializationContext"
    - type: "LOCAL_VARIABLE"
      name: "initializationContext"
      modelFingerprint: "B43BCFF9474519DE3742BE7B13AE4678"
      valueUuid: "initializationContext"
      methodExercised:
        expression: "getEnvironment():environment"
    - type: "STATIC"
      name: "Binder.class"
      modelFingerprint: "B5675488A8670E7C369B5584B6787902"
      valueUuid: "Binder.class"
      methodExercised:
        expression: "get(environment:environment):binder"
        staticAccess: true
    - type: "STATIC"
      name: "Bindable.class.real"
      modelFingerprint: "BAC37037B358609B7F8B94808962E01C"
      valueUuid: "Bindable.class.real"
      methodExercised:
        expression: "listOf(elementType:uniqueUuid29):bindable"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "AB570C2EB8FB1595FA5D1038D439B2D2"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid31,target:bindable):bindResult"
    - type: "LOCAL_VARIABLE"
      name: "overrides"
      modelFingerprint: "AD2F1D0DFFD942C027F51A1905846AC9"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:list):object"
    - type: "STATIC"
      name: "CollectionUtils.class"
      modelFingerprint: "09E4BECE4417DC44291F888648C13FC8"
      valueUuid: "CollectionUtils.class"
      methodExercised:
        expression: "isEmpty(collection:object):boolean1"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "Binder.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "REAL"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "Bindable.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "listOf"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.String"
            valueType: "java.lang.Class"
            genericValueType: "java.lang.String"
            uuid: "uniqueUuid32"
            fixed: true
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "bindable"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid29"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      genericValueType: "java.util.List<java.lang.String>"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "logging.log4j2.config.override"
      valueType: "java.lang.String"
      uuid: "uniqueUuid31"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "listOf"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.String"
            valueType: "java.lang.Class"
            genericValueType: "java.lang.String"
            uuid: "uniqueUuid32"
            fixed: true
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "bindable"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      genericValueType: "java.util.List<java.lang.String>"
      uuid: "bindResult"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.CollectionUtils"
      uuid: "CollectionUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 328
      expression: "!CollectionUtils.isEmpty(overrides)"
      range: "(328,7)-(328,41)"
      evaluatedAs: false
  - pathId: "path1"
    testPathName: "reinitializeWhenFILE_PROTOCOLEqualsUrlGetProtocol"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "68C18165515F0A2083BF849945D45F0B"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "103943554753788D91DF39AF76338D95"
      valueUuid: "initializationContext"
    - type: "LOCAL_VARIABLE"
      name: "initializationContext"
      modelFingerprint: "B43BCFF9474519DE3742BE7B13AE4678"
      valueUuid: "initializationContext"
      methodExercised:
        expression: "getEnvironment():environment"
    - type: "STATIC"
      name: "Binder.class"
      modelFingerprint: "B5675488A8670E7C369B5584B6787902"
      valueUuid: "Binder.class"
      methodExercised:
        expression: "get(environment:environment):binder"
        staticAccess: true
    - type: "STATIC"
      name: "Bindable.class.real"
      modelFingerprint: "BAC37037B358609B7F8B94808962E01C"
      valueUuid: "Bindable.class.real"
      methodExercised:
        expression: "listOf(elementType:uniqueUuid33):bindable"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "AB570C2EB8FB1595FA5D1038D439B2D2"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid35,target:bindable):bindResult"
    - type: "LOCAL_VARIABLE"
      name: "overrides"
      modelFingerprint: "7F4A5B9D2BC017CAC7C8EFC20864934F"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:list):object"
    - type: "STATIC"
      name: "CollectionUtils.class"
      modelFingerprint: "EEB0C80EC0BEEEF7B1906352D1A96D52"
      valueUuid: "CollectionUtils.class"
      methodExercised:
        expression: "isEmpty(collection:object):boolean1"
        staticAccess: true
    - type: "STATIC"
      name: "ResourceUtils.class.real"
      modelFingerprint: "D8C5BBBB0702FE0EE6908AF29D32176B"
      valueUuid: "ResourceUtils.class.real"
      methodExercised:
        expression: "getURL(resourceLocation:object2):uRL"
        throwsExceptions:
        - "java.io.FileNotFoundException"
        staticAccess: true
    - type: "STATIC"
      name: "ResourceUtils.class"
      modelFingerprint: "64257515EA9876E1B44636CA47C98DBD"
      valueUuid: "ResourceUtils.class"
      methodExercised:
        expression: "getFile(resourceUrl:uRL):file"
        throwsExceptions:
        - "java.io.FileNotFoundException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_FAILURE"
      source: "return new ConfigurationSource(url.openStream(), ResourceUtils.getFile(url));"
      lineNumber: 310
      details: "No constructor found to create an object without any exception for\
        \ class org.apache.logging.log4j.core.config.ConfigurationSource"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "Binder.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "REAL"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "Bindable.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "listOf"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.String"
            valueType: "java.lang.Class"
            genericValueType: "java.lang.String"
            uuid: "uniqueUuid36"
            fixed: true
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "bindable"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid33"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      genericValueType: "java.util.List<java.lang.String>"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "logging.log4j2.config.override"
      valueType: "java.lang.String"
      uuid: "uniqueUuid35"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "listOf"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.String"
            valueType: "java.lang.Class"
            genericValueType: "java.lang.String"
            uuid: "uniqueUuid36"
            fixed: true
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "bindable"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      genericValueType: "java.util.List<java.lang.String>"
      uuid: "bindResult"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "A"
          valueType: "java.lang.String"
          uuid: "object2"
          collectionUuid: "object"
          explicitCastNeeded: true
      valueType: "java.util.List"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.CollectionUtils"
      uuid: "CollectionUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "A"
          valueType: "java.lang.String"
          uuid: "object2"
          collectionUuid: "object"
          explicitCastNeeded: true
      valueType: "java.util.List"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ResourceUtils"
        method: "getURL"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "object"
            explicitCastNeeded: true
      valueType: "java.net.URL"
      uuid: "uRL"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "object2"
      collectionUuid: "object"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ResourceUtils"
        method: "getURL"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "object"
            explicitCastNeeded: true
      valueType: "java.net.URL"
      uuid: "uRL"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 328
      expression: "!CollectionUtils.isEmpty(overrides)"
      range: "(328,7)-(328,41)"
      evaluatedAs: true
    - lineNumber: 342
      expression: "for-each(overrides)"
      range: "(342,26)-(342,34)"
      evaluatedAs: true
      internalMethodName: "reinitializeWithOverrides"
    - lineNumber: 309
      expression: "FILE_PROTOCOL.equals(url.getProtocol())"
      range: "(309,7)-(309,45)"
      evaluatedAs: true
      internalMethodName: "getConfigurationSource"
  - pathId: "path2"
    testPathName: "reinitializeWhenUrlGetProtocolEqualsHttps"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "77F805F978A38E99569A0C7DE6DDF657"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "103943554753788D91DF39AF76338D95"
      valueUuid: "initializationContext"
    - type: "LOCAL_VARIABLE"
      name: "initializationContext"
      modelFingerprint: "B43BCFF9474519DE3742BE7B13AE4678"
      valueUuid: "initializationContext"
      methodExercised:
        expression: "getEnvironment():environment"
    - type: "STATIC"
      name: "Binder.class"
      modelFingerprint: "B5675488A8670E7C369B5584B6787902"
      valueUuid: "Binder.class"
      methodExercised:
        expression: "get(environment:environment):binder"
        staticAccess: true
    - type: "STATIC"
      name: "Bindable.class.real"
      modelFingerprint: "BAC37037B358609B7F8B94808962E01C"
      valueUuid: "Bindable.class.real"
      methodExercised:
        expression: "listOf(elementType:uniqueUuid37):bindable"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "AB570C2EB8FB1595FA5D1038D439B2D2"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid39,target:bindable):bindResult"
    - type: "LOCAL_VARIABLE"
      name: "overrides"
      modelFingerprint: "AD2F1D0DFFD942C027F51A1905846AC9"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:list):object"
    - type: "STATIC"
      name: "CollectionUtils.class"
      modelFingerprint: "77A937E8E83F8FF131F78E1FCCF2BEC6"
      valueUuid: "CollectionUtils.class"
      methodExercised:
        expression: "isEmpty(collection:object):boolean1"
        staticAccess: true
    - type: "STATIC"
      name: "ResourceUtils.class.real"
      modelFingerprint: "A8ECEED515F154ECB00D6016B88BFE90"
      valueUuid: "ResourceUtils.class.real"
      methodExercised:
        expression: "getURL(resourceLocation:object2):uRL"
        throwsExceptions:
        - "java.io.FileNotFoundException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.logging.log4j.core.net.ssl.SslConfigurationFactory.getSslConfiguration()\
        \ : org.apache.logging.log4j.core.net.ssl.SslConfiguration"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "Binder.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "REAL"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "Bindable.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "listOf"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.String"
            valueType: "java.lang.Class"
            genericValueType: "java.lang.String"
            uuid: "uniqueUuid40"
            fixed: true
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "bindable"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid37"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      genericValueType: "java.util.List<java.lang.String>"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "logging.log4j2.config.override"
      valueType: "java.lang.String"
      uuid: "uniqueUuid39"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "listOf"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.String"
            valueType: "java.lang.Class"
            genericValueType: "java.lang.String"
            uuid: "uniqueUuid40"
            fixed: true
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "bindable"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      genericValueType: "java.util.List<java.lang.String>"
      uuid: "bindResult"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.CollectionUtils"
      uuid: "CollectionUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ResourceUtils"
        method: "getURL"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "object"
            explicitCastNeeded: true
      valueType: "java.net.URL"
      uuid: "uRL"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resourceLocation1"
      valueType: "java.lang.String"
      uuid: "object2"
      collectionUuid: "object"
      explicitCastNeeded: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 328
      expression: "!CollectionUtils.isEmpty(overrides)"
      range: "(328,7)-(328,41)"
      evaluatedAs: true
    - lineNumber: 342
      expression: "for-each(overrides)"
      range: "(342,26)-(342,34)"
      evaluatedAs: true
      internalMethodName: "reinitializeWithOverrides"
    - lineNumber: 309
      expression: "FILE_PROTOCOL.equals(url.getProtocol())"
      range: "(309,7)-(309,45)"
      evaluatedAs: false
      internalMethodName: "getConfigurationSource"
    - lineNumber: 314
      expression: "url.getProtocol().equals(\\\"https\\\")"
      range: "(314,39)-(314,71)"
      evaluatedAs: true
      internalMethodName: "getConfigurationSource"
  - pathId: "path5"
    testPathName: "reinitializeWhenCaughtIOExceptionThrowsRuntimeException"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "F303BAA5E6B5DEFA6C44C6B5A2A0BCEF"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "103943554753788D91DF39AF76338D95"
      valueUuid: "initializationContext"
    - type: "LOCAL_VARIABLE"
      name: "initializationContext"
      modelFingerprint: "B43BCFF9474519DE3742BE7B13AE4678"
      valueUuid: "initializationContext"
      methodExercised:
        expression: "getEnvironment():environment"
    - type: "STATIC"
      name: "Binder.class"
      modelFingerprint: "B5675488A8670E7C369B5584B6787902"
      valueUuid: "Binder.class"
      methodExercised:
        expression: "get(environment:environment):binder"
        staticAccess: true
    - type: "STATIC"
      name: "Bindable.class.real"
      modelFingerprint: "BAC37037B358609B7F8B94808962E01C"
      valueUuid: "Bindable.class.real"
      methodExercised:
        expression: "listOf(elementType:uniqueUuid41):bindable"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "AB570C2EB8FB1595FA5D1038D439B2D2"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid43,target:bindable):bindResult"
    - type: "LOCAL_VARIABLE"
      name: "overrides"
      modelFingerprint: "AD2F1D0DFFD942C027F51A1905846AC9"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:list):object"
    - type: "STATIC"
      name: "CollectionUtils.class"
      modelFingerprint: "77A937E8E83F8FF131F78E1FCCF2BEC6"
      valueUuid: "CollectionUtils.class"
      methodExercised:
        expression: "isEmpty(collection:object):boolean1"
        staticAccess: true
    - type: "STATIC"
      name: "ResourceUtils.class.real"
      modelFingerprint: "A8ECEED515F154ECB00D6016B88BFE90"
      valueUuid: "ResourceUtils.class.real"
      methodExercised:
        expression: "getURL(resourceLocation:object2):uRL"
        throwsExceptions:
        - "java.io.FileNotFoundException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "3FE1FB291241AE642F22E421511BBDA7"
      valueUuid: "runtimeException"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.apache.logging.log4j.core.net.UrlConnectionFactory.createConnection(java.net.URL,long,org.apache.logging.log4j.core.net.ssl.SslConfiguration,org.apache.logging.log4j.core.util.AuthorizationProvider)\
        \ : java.net.URLConnection"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "Binder.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "REAL"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "Bindable.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "listOf"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.String"
            valueType: "java.lang.Class"
            genericValueType: "java.lang.String"
            uuid: "uniqueUuid44"
            fixed: true
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "bindable"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid41"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      genericValueType: "java.util.List<java.lang.String>"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "logging.log4j2.config.override"
      valueType: "java.lang.String"
      uuid: "uniqueUuid43"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "listOf"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.String"
            valueType: "java.lang.Class"
            genericValueType: "java.lang.String"
            uuid: "uniqueUuid44"
            fixed: true
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "bindable"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      genericValueType: "java.util.List<java.lang.String>"
      uuid: "bindResult"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.CollectionUtils"
      uuid: "CollectionUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ResourceUtils"
        method: "getURL"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "object"
            explicitCastNeeded: true
      valueType: "java.net.URL"
      uuid: "uRL"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resourceLocation1"
      valueType: "java.lang.String"
      uuid: "object2"
      collectionUuid: "object"
      explicitCastNeeded: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.RuntimeException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "message1"
            valueType: "java.lang.String"
            uuid: "string4"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.IOException"
              parameters: []
            valueType: "java.io.IOException"
            uuid: "iOException"
      valueType: "java.lang.RuntimeException"
      uuid: "runtimeException"
      fixed: true
    branches:
    - lineNumber: 328
      expression: "!CollectionUtils.isEmpty(overrides)"
      range: "(328,7)-(328,41)"
      evaluatedAs: true
    - lineNumber: 342
      expression: "for-each(overrides)"
      range: "(342,26)-(342,34)"
      evaluatedAs: true
      internalMethodName: "reinitializeWithOverrides"
    - lineNumber: 309
      expression: "FILE_PROTOCOL.equals(url.getProtocol())"
      range: "(309,7)-(309,45)"
      evaluatedAs: false
      internalMethodName: "getConfigurationSource"
    - lineNumber: 314
      expression: "url.getProtocol().equals(\\\"https\\\")"
      range: "(314,39)-(314,71)"
      evaluatedAs: false
      internalMethodName: "getConfigurationSource"
    - lineNumber: 346
      expression: "catch-exception (IOException)"
      range: "(346,4)-(346,24)"
      evaluatedAs: true
      internalMethodName: "reinitializeWithOverrides"
    catchBlockExercised:
      idExternalInstruction: 15
      id: 5
      catchExceptions:
      - "java.io.IOException"
- method:
    name: "getSupportedLogLevels"
    sourceCodeSignature: "Set<LogLevel> getSupportedLogLevels()"
    returnType: "java.util.Set"
    genericReturnType: "org.springframework.boot.logging.LogLevel"
    instructionFingerprint: "653C4270B007FB1CFE98607766E8C982"
  paths:
  - pathId: "path1"
    testPathName: "getSupportedLogLevelsTest"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "67D975028719EA5B22C53420F11721B5"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "7B1A8C3CABFA388370F8CD206235C897"
      valueUuid: "set"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return LEVELS.getSupported();"
      lineNumber: 356
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: LEVELS - Method: getSupported"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Set"
      genericValueType: "org.springframework.boot.logging.LogLevel"
      uuid: "set"
- method:
    name: "setLogLevel"
    sourceCodeSignature: "void setLogLevel(String loggerName, LogLevel logLevel)"
    returnType: "void"
    parameters:
    - name: "loggerName"
      type: "java.lang.String"
    - name: "logLevel"
      type: "org.springframework.boot.logging.LogLevel"
    instructionFingerprint: "4DBF611D886E8B64DFA8CA786D002A53"
  paths:
  - pathId: "path1"
    testPathName: "setLogLevelWhenLoggerInstanceOfLevelSetLoggerConfig"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "5277763FB6867FF53DB2B61152A15955"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "92E6E94B493D274576D3BDC78C61F78B"
      valueUuid: "loggerName"
    - type: "INPUT"
      name: "logLevel"
      modelFingerprint: "D8BBE8CBBBFEDA9CFF8D0690B5A6F568"
      valueUuid: "logLevel"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "684342B1C5C273BF0CBB28A6FD251B3B"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:loggerName):boolean1"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return configuration.getLoggers().get(name);"
      lineNumber: 477
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: configuration - Method: getLoggers"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "ENUM"
      content: !<regular>
        value: "OFF"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "logLevel"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 468
      expression: "!StringUtils.hasLength(name)"
      range: "(468,26)-(468,53)"
      evaluatedAs: false
      internalMethodName: "getLogger"
    - lineNumber: 468
      expression: "ROOT_LOGGER_NAME.equals(name)"
      range: "(468,58)-(468,86)"
      evaluatedAs: true
      internalMethodName: "getLogger"
    - lineNumber: 469
      expression: "isRootLogger"
      range: "(469,21)-(469,32)"
      evaluatedAs: true
      internalMethodName: "getLogger"
    - lineNumber: 474
      expression: "configuration instanceof AbstractConfiguration abstractConfiguration"
      range: "(474,7)-(474,74)"
      evaluatedAs: false
      internalMethodName: "findLogger"
    - lineNumber: 366
      expression: "level == null"
      range: "(366,7)-(366,19)"
      evaluatedAs: true
      internalMethodName: "setLogLevel"
    - lineNumber: 376
      expression: "logger instanceof LevelSetLoggerConfig"
      range: "(376,7)-(376,44)"
      evaluatedAs: true
      internalMethodName: "clearLogLevel"
  - pathId: "path2"
    testPathName: "setLogLevelWhenLoggerNotInstanceOfLevelSetLoggerConfig"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "4AF1BFBD9F250082F964EF027E07E6E2"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "92E6E94B493D274576D3BDC78C61F78B"
      valueUuid: "loggerName"
    - type: "INPUT"
      name: "logLevel"
      modelFingerprint: "D8BBE8CBBBFEDA9CFF8D0690B5A6F568"
      valueUuid: "logLevel"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "684342B1C5C273BF0CBB28A6FD251B3B"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:loggerName):boolean1"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return configuration.getLoggers().get(name);"
      lineNumber: 477
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: configuration - Method: getLoggers"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "ENUM"
      content: !<regular>
        value: "OFF"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "logLevel"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 468
      expression: "!StringUtils.hasLength(name)"
      range: "(468,26)-(468,53)"
      evaluatedAs: false
      internalMethodName: "getLogger"
    - lineNumber: 468
      expression: "ROOT_LOGGER_NAME.equals(name)"
      range: "(468,58)-(468,86)"
      evaluatedAs: true
      internalMethodName: "getLogger"
    - lineNumber: 469
      expression: "isRootLogger"
      range: "(469,21)-(469,32)"
      evaluatedAs: true
      internalMethodName: "getLogger"
    - lineNumber: 474
      expression: "configuration instanceof AbstractConfiguration abstractConfiguration"
      range: "(474,7)-(474,74)"
      evaluatedAs: false
      internalMethodName: "findLogger"
    - lineNumber: 366
      expression: "level == null"
      range: "(366,7)-(366,19)"
      evaluatedAs: true
      internalMethodName: "setLogLevel"
    - lineNumber: 376
      expression: "logger instanceof LevelSetLoggerConfig"
      range: "(376,7)-(376,44)"
      evaluatedAs: false
      internalMethodName: "clearLogLevel"
  - pathId: "path3"
    testPathName: "setLogLevelWhenLoggerIsNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "933644D0D15252B8C89C51D8AC5F7B5B"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "92E6E94B493D274576D3BDC78C61F78B"
      valueUuid: "loggerName"
    - type: "INPUT"
      name: "logLevel"
      modelFingerprint: "D8BBE8CBBBFEDA9CFF8D0690B5A6F568"
      valueUuid: "logLevel"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "684342B1C5C273BF0CBB28A6FD251B3B"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:loggerName):boolean1"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return configuration.getLoggers().get(name);"
      lineNumber: 477
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: configuration - Method: getLoggers"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "ENUM"
      content: !<regular>
        value: "OFF"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "logLevel"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 468
      expression: "!StringUtils.hasLength(name)"
      range: "(468,26)-(468,53)"
      evaluatedAs: false
      internalMethodName: "getLogger"
    - lineNumber: 468
      expression: "ROOT_LOGGER_NAME.equals(name)"
      range: "(468,58)-(468,86)"
      evaluatedAs: true
      internalMethodName: "getLogger"
    - lineNumber: 469
      expression: "isRootLogger"
      range: "(469,21)-(469,32)"
      evaluatedAs: true
      internalMethodName: "getLogger"
    - lineNumber: 474
      expression: "configuration instanceof AbstractConfiguration abstractConfiguration"
      range: "(474,7)-(474,74)"
      evaluatedAs: false
      internalMethodName: "findLogger"
    - lineNumber: 366
      expression: "level == null"
      range: "(366,7)-(366,19)"
      evaluatedAs: false
      internalMethodName: "setLogLevel"
    - lineNumber: 385
      expression: "logger == null"
      range: "(385,7)-(385,20)"
      evaluatedAs: true
      internalMethodName: "setLogLevel"
  - pathId: "path5"
    testPathName: "setLogLevelWhenConfigurationNotInstanceOfAbstractConfigurationAndLevelIsNotNullAndLoggerIsNotNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "8B021141A8E3AF7131AF7022C64DC1F2"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "005B1D51E03EEF348A5715FF374CAA2B"
      valueUuid: "loggerName"
    - type: "INPUT"
      name: "logLevel"
      modelFingerprint: "AC70FD1D5225938724253709144692EF"
      valueUuid: "logLevel"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "0F11A90B2C3181629F37C76B8530C9E4"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:loggerName):boolean1"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return configuration.getLoggers().get(name);"
      lineNumber: 477
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: configuration - Method: getLoggers"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "H"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "ENUM"
      content: !<regular>
        value: "FATAL"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "logLevel"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "H"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 468
      expression: "!StringUtils.hasLength(name)"
      range: "(468,26)-(468,53)"
      evaluatedAs: false
      internalMethodName: "getLogger"
    - lineNumber: 468
      expression: "ROOT_LOGGER_NAME.equals(name)"
      range: "(468,58)-(468,86)"
      evaluatedAs: false
      internalMethodName: "getLogger"
    - lineNumber: 469
      expression: "isRootLogger"
      range: "(469,21)-(469,32)"
      evaluatedAs: false
      internalMethodName: "getLogger"
    - lineNumber: 474
      expression: "configuration instanceof AbstractConfiguration abstractConfiguration"
      range: "(474,7)-(474,74)"
      evaluatedAs: false
      internalMethodName: "findLogger"
    - lineNumber: 366
      expression: "level == null"
      range: "(366,7)-(366,19)"
      evaluatedAs: false
      internalMethodName: "setLogLevel"
    - lineNumber: 385
      expression: "logger == null"
      range: "(385,7)-(385,20)"
      evaluatedAs: false
      internalMethodName: "setLogLevel"
- method:
    name: "getLoggerConfigurations"
    sourceCodeSignature: "List<LoggerConfiguration> getLoggerConfigurations()"
    returnType: "java.util.List"
    genericReturnType: "org.springframework.boot.logging.LoggerConfiguration"
    instructionFingerprint: "B98E432CFFF02629442773FAEBE979AE"
  paths:
  - pathId: "path1"
    testPathName: "getLoggerConfigurationsWhenNameIsNotNullAndStringUtilsNotHasLengthName"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "F7DA856D0D5DD8403A933D8E837BA738"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "25FD9920EAB36AEB9ABCDC4C1708075C"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:name):boolean2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "C2604A03CA03BFAB37C0AD4EFDCC34F5"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:string4):boolean4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4D64FBA7B368BEA3D8AE139750165213"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "for (Logger logger : getLoggerContext().getLoggers()) {"
      lineNumber: 410
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type LoggerContext - Method: getLoggers"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "string4"
      collectionUuid: "set"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "arrayList"
    branches:
    - lineNumber: 410
      expression: "for-each(getLoggerContext().getLoggers())"
      range: "(410,24)-(410,54)"
      evaluatedAs: true
      internalMethodName: "getAllLoggers"
    - lineNumber: 419
      expression: "name != null"
      range: "(419,10)-(419,21)"
      evaluatedAs: true
      internalMethodName: "addLogger"
    - lineNumber: 426
      expression: "!StringUtils.hasLength(name)"
      range: "(426,7)-(426,34)"
      evaluatedAs: true
      internalMethodName: "getSubName"
  - pathId: "path2"
    testPathName: "getLoggerConfigurationsWhenNestedNotEqualsMinus1"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "8618D9252CD259EDFCA75E455BA1592A"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "7D3C6260718FE67E066C612175EB9EFF"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:name):boolean2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "7D3C6260718FE67E066C612175EB9EFF"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:string4):boolean4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4D64FBA7B368BEA3D8AE139750165213"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "for (Logger logger : getLoggerContext().getLoggers()) {"
      lineNumber: 410
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type LoggerContext - Method: getLoggers"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "string4"
      collectionUuid: "set"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "arrayList"
    branches:
    - lineNumber: 410
      expression: "for-each(getLoggerContext().getLoggers())"
      range: "(410,24)-(410,54)"
      evaluatedAs: true
      internalMethodName: "getAllLoggers"
    - lineNumber: 419
      expression: "name != null"
      range: "(419,10)-(419,21)"
      evaluatedAs: true
      internalMethodName: "addLogger"
    - lineNumber: 426
      expression: "!StringUtils.hasLength(name)"
      range: "(426,7)-(426,34)"
      evaluatedAs: true
      internalMethodName: "getSubName"
    - lineNumber: 430
      expression: "nested != -1"
      range: "(430,11)-(430,22)"
      evaluatedAs: true
      internalMethodName: "getSubName"
  - pathId: "path3"
    testPathName: "getLoggerConfigurationsWhenNestedEqualsMinus1"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "5FB842FE3F1A4EBEFE540AE7D4A1BD1E"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "25FD9920EAB36AEB9ABCDC4C1708075C"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:name):boolean2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "7134351239132D3AEBB7FA91063DD3AC"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:string4):boolean4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4D64FBA7B368BEA3D8AE139750165213"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "for (Logger logger : getLoggerContext().getLoggers()) {"
      lineNumber: 410
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type LoggerContext - Method: getLoggers"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "string4"
      collectionUuid: "set"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "arrayList"
    branches:
    - lineNumber: 410
      expression: "for-each(getLoggerContext().getLoggers())"
      range: "(410,24)-(410,54)"
      evaluatedAs: true
      internalMethodName: "getAllLoggers"
    - lineNumber: 419
      expression: "name != null"
      range: "(419,10)-(419,21)"
      evaluatedAs: true
      internalMethodName: "addLogger"
    - lineNumber: 426
      expression: "!StringUtils.hasLength(name)"
      range: "(426,7)-(426,34)"
      evaluatedAs: true
      internalMethodName: "getSubName"
    - lineNumber: 430
      expression: "nested != -1"
      range: "(430,11)-(430,22)"
      evaluatedAs: false
      internalMethodName: "getSubName"
  - pathId: "path5"
    testPathName: "getLoggerConfigurationsWhenStringUtilsHasLengthNameAndNestedNotEqualsMinus1"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "9662FA8E21B19CB9594AC726B6D9F5B6"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "7D3C6260718FE67E066C612175EB9EFF"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:name):boolean2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4D64FBA7B368BEA3D8AE139750165213"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "for (Logger logger : getLoggerContext().getLoggers()) {"
      lineNumber: 410
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type LoggerContext - Method: getLoggers"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "arrayList"
    branches:
    - lineNumber: 410
      expression: "for-each(getLoggerContext().getLoggers())"
      range: "(410,24)-(410,54)"
      evaluatedAs: true
      internalMethodName: "getAllLoggers"
    - lineNumber: 419
      expression: "name != null"
      range: "(419,10)-(419,21)"
      evaluatedAs: true
      internalMethodName: "addLogger"
    - lineNumber: 426
      expression: "!StringUtils.hasLength(name)"
      range: "(426,7)-(426,34)"
      evaluatedAs: false
      internalMethodName: "getSubName"
    - lineNumber: 430
      expression: "nested != -1"
      range: "(430,11)-(430,22)"
      evaluatedAs: true
      internalMethodName: "getSubName"
  - pathId: "path6"
    testPathName: "getLoggerConfigurationsWhenStringUtilsHasLengthNameAndNestedEqualsMinus1"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "A10F9BC1071D9AB5DA10DF92462A5BC3"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "7B623EE582A0C2E878E2D18F466E3DE6"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:name):boolean2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4D64FBA7B368BEA3D8AE139750165213"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "for (Logger logger : getLoggerContext().getLoggers()) {"
      lineNumber: 410
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type LoggerContext - Method: getLoggers"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "arrayList"
    branches:
    - lineNumber: 410
      expression: "for-each(getLoggerContext().getLoggers())"
      range: "(410,24)-(410,54)"
      evaluatedAs: true
      internalMethodName: "getAllLoggers"
    - lineNumber: 419
      expression: "name != null"
      range: "(419,10)-(419,21)"
      evaluatedAs: true
      internalMethodName: "addLogger"
    - lineNumber: 426
      expression: "!StringUtils.hasLength(name)"
      range: "(426,7)-(426,34)"
      evaluatedAs: false
      internalMethodName: "getSubName"
    - lineNumber: 430
      expression: "nested != -1"
      range: "(430,11)-(430,22)"
      evaluatedAs: false
      internalMethodName: "getSubName"
- method:
    name: "getLoggerConfiguration"
    sourceCodeSignature: "LoggerConfiguration getLoggerConfiguration(String loggerName)"
    returnType: "org.springframework.boot.logging.LoggerConfiguration"
    parameters:
    - name: "loggerName"
      type: "java.lang.String"
    instructionFingerprint: "4D4480EC1A71AA8561E0D2B7AC857455"
  paths:
  - pathId: "path1"
    testPathName: "getLoggerConfigurationWhenNameIsNotNullAndStringUtilsNotHasLengthNameAndLoggerConfigIsNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "38407DD5E6EEB41DF0C8E8CAD937BB18"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "279D111B2A92306DC84BCC9AF8EB546F"
      valueUuid: "loggerName"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "25FD9920EAB36AEB9ABCDC4C1708075C"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:name):boolean2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "C2604A03CA03BFAB37C0AD4EFDCC34F5"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:string4):boolean4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "3A5A60D2947E5A7C6022611FE6C7947B"
      valueUuid: "loggerConfiguration"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "for (Logger logger : getLoggerContext().getLoggers()) {"
      lineNumber: 410
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type LoggerContext - Method: getLoggers"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "loggerName1"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "string4"
      collectionUuid: "set"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration"
      fixed: true
    branches:
    - lineNumber: 410
      expression: "for-each(getLoggerContext().getLoggers())"
      range: "(410,24)-(410,54)"
      evaluatedAs: true
      internalMethodName: "getAllLoggers"
    - lineNumber: 419
      expression: "name != null"
      range: "(419,10)-(419,21)"
      evaluatedAs: true
      internalMethodName: "addLogger"
    - lineNumber: 426
      expression: "!StringUtils.hasLength(name)"
      range: "(426,7)-(426,34)"
      evaluatedAs: true
      internalMethodName: "getSubName"
    - lineNumber: 405
      expression: "loggerConfig != null"
      range: "(405,11)-(405,30)"
      evaluatedAs: false
  - pathId: "path2"
    testPathName: "getLoggerConfigurationWhenNestedNotEqualsMinus1AndLoggerConfigIsNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "AE138FAD966E5046D5B2544C2B83B84C"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "279D111B2A92306DC84BCC9AF8EB546F"
      valueUuid: "loggerName"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "7D3C6260718FE67E066C612175EB9EFF"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:name):boolean2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "7D3C6260718FE67E066C612175EB9EFF"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:string4):boolean4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "3A5A60D2947E5A7C6022611FE6C7947B"
      valueUuid: "loggerConfiguration"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "for (Logger logger : getLoggerContext().getLoggers()) {"
      lineNumber: 410
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type LoggerContext - Method: getLoggers"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "loggerName1"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "string4"
      collectionUuid: "set"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration"
      fixed: true
    branches:
    - lineNumber: 410
      expression: "for-each(getLoggerContext().getLoggers())"
      range: "(410,24)-(410,54)"
      evaluatedAs: true
      internalMethodName: "getAllLoggers"
    - lineNumber: 419
      expression: "name != null"
      range: "(419,10)-(419,21)"
      evaluatedAs: true
      internalMethodName: "addLogger"
    - lineNumber: 426
      expression: "!StringUtils.hasLength(name)"
      range: "(426,7)-(426,34)"
      evaluatedAs: true
      internalMethodName: "getSubName"
    - lineNumber: 430
      expression: "nested != -1"
      range: "(430,11)-(430,22)"
      evaluatedAs: true
      internalMethodName: "getSubName"
    - lineNumber: 405
      expression: "loggerConfig != null"
      range: "(405,11)-(405,30)"
      evaluatedAs: false
  - pathId: "path3"
    testPathName: "getLoggerConfigurationWhenNestedEqualsMinus1AndLoggerConfigIsNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "B799920E337DFD03D7C6DB6E54D328C1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "279D111B2A92306DC84BCC9AF8EB546F"
      valueUuid: "loggerName"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "25FD9920EAB36AEB9ABCDC4C1708075C"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:name):boolean2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "7134351239132D3AEBB7FA91063DD3AC"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:string4):boolean4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "3A5A60D2947E5A7C6022611FE6C7947B"
      valueUuid: "loggerConfiguration"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "for (Logger logger : getLoggerContext().getLoggers()) {"
      lineNumber: 410
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type LoggerContext - Method: getLoggers"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "loggerName1"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "string4"
      collectionUuid: "set"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration"
      fixed: true
    branches:
    - lineNumber: 410
      expression: "for-each(getLoggerContext().getLoggers())"
      range: "(410,24)-(410,54)"
      evaluatedAs: true
      internalMethodName: "getAllLoggers"
    - lineNumber: 419
      expression: "name != null"
      range: "(419,10)-(419,21)"
      evaluatedAs: true
      internalMethodName: "addLogger"
    - lineNumber: 426
      expression: "!StringUtils.hasLength(name)"
      range: "(426,7)-(426,34)"
      evaluatedAs: true
      internalMethodName: "getSubName"
    - lineNumber: 430
      expression: "nested != -1"
      range: "(430,11)-(430,22)"
      evaluatedAs: false
      internalMethodName: "getSubName"
    - lineNumber: 405
      expression: "loggerConfig != null"
      range: "(405,11)-(405,30)"
      evaluatedAs: false
  - pathId: "path5"
    testPathName: "getLoggerConfigurationWhenStringUtilsHasLengthNameAndNestedNotEqualsMinus1AndLoggerConfigIsNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "29489FF4DACD33700DBCE0A3B971FB24"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "279D111B2A92306DC84BCC9AF8EB546F"
      valueUuid: "loggerName"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "7D3C6260718FE67E066C612175EB9EFF"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:name):boolean2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "3A5A60D2947E5A7C6022611FE6C7947B"
      valueUuid: "loggerConfiguration"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "for (Logger logger : getLoggerContext().getLoggers()) {"
      lineNumber: 410
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type LoggerContext - Method: getLoggers"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "loggerName1"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration"
      fixed: true
    branches:
    - lineNumber: 410
      expression: "for-each(getLoggerContext().getLoggers())"
      range: "(410,24)-(410,54)"
      evaluatedAs: true
      internalMethodName: "getAllLoggers"
    - lineNumber: 419
      expression: "name != null"
      range: "(419,10)-(419,21)"
      evaluatedAs: true
      internalMethodName: "addLogger"
    - lineNumber: 426
      expression: "!StringUtils.hasLength(name)"
      range: "(426,7)-(426,34)"
      evaluatedAs: false
      internalMethodName: "getSubName"
    - lineNumber: 430
      expression: "nested != -1"
      range: "(430,11)-(430,22)"
      evaluatedAs: true
      internalMethodName: "getSubName"
    - lineNumber: 405
      expression: "loggerConfig != null"
      range: "(405,11)-(405,30)"
      evaluatedAs: false
  - pathId: "path6"
    testPathName: "getLoggerConfigurationWhenStringUtilsHasLengthNameAndNestedEqualsMinus1AndLoggerConfigIsNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "9DB79BEFDBFA0349EC37A01E8AC4FF3C"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "279D111B2A92306DC84BCC9AF8EB546F"
      valueUuid: "loggerName"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "7B623EE582A0C2E878E2D18F466E3DE6"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:name):boolean2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "3A5A60D2947E5A7C6022611FE6C7947B"
      valueUuid: "loggerConfiguration"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "for (Logger logger : getLoggerContext().getLoggers()) {"
      lineNumber: 410
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type LoggerContext - Method: getLoggers"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "loggerName1"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration"
      fixed: true
    branches:
    - lineNumber: 410
      expression: "for-each(getLoggerContext().getLoggers())"
      range: "(410,24)-(410,54)"
      evaluatedAs: true
      internalMethodName: "getAllLoggers"
    - lineNumber: 419
      expression: "name != null"
      range: "(419,10)-(419,21)"
      evaluatedAs: true
      internalMethodName: "addLogger"
    - lineNumber: 426
      expression: "!StringUtils.hasLength(name)"
      range: "(426,7)-(426,34)"
      evaluatedAs: false
      internalMethodName: "getSubName"
    - lineNumber: 430
      expression: "nested != -1"
      range: "(430,11)-(430,22)"
      evaluatedAs: false
      internalMethodName: "getSubName"
    - lineNumber: 405
      expression: "loggerConfig != null"
      range: "(405,11)-(405,30)"
      evaluatedAs: false
- method:
    name: "getShutdownHandler"
    sourceCodeSignature: "Runnable getShutdownHandler()"
    returnType: "java.lang.Runnable"
    instructionFingerprint: "50B331B2816ACE10F50A59CAB1B1880F"
  paths:
  - pathId: "path1"
    testPathName: "getShutdownHandlerTest"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "D47464FDF87C5F59E40DE7F61FA7270A"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "992B3E5D2952F893CF69794C32319CB3"
      valueUuid: "runnableNotNull"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "NOT_NULL"
      valueType: "java.lang.Runnable"
      uuid: "runnableNotNull"
      fixed: true
- method:
    name: "cleanUp"
    sourceCodeSignature: "void cleanUp()"
    returnType: "void"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 3
      catchExceptions:
      - "java.lang.Throwable"
    instructionFingerprint: "2E15C99DF510D21E8F6111F7544AFBAF"
  paths:
  - pathId: "path2"
    testPathName: "cleanUpWhenIsLog4jBridgeHandlerAvailableNot"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "46707AC0644EE2AE93BCE733F0EB578F"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "1D5A0BEAFFF48F10D152898B8D90526E"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid45,classLoader:classLoader):boolean1"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_INTERNAL_METHOD_FAILURE"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.apache.logging.log4j.jul.Log4jBridgeHandler"
      valueType: "java.lang.String"
      uuid: "uniqueUuid45"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 207
      expression: "ClassUtils.isPresent(LOG4J_BRIDGE_HANDLER, getClassLoader())"
      range: "(207,10)-(207,69)"
      evaluatedAs: false
      internalMethodName: "isLog4jBridgeHandlerAvailable"
    - lineNumber: 458
      expression: "isLog4jBridgeHandlerAvailable()"
      range: "(458,7)-(458,37)"
      evaluatedAs: false
  - pathId: "path1"
    testPathName: "cleanUpWhenHandlerInstanceOfLog4jBridgeHandler"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "69465C21BC60A6BB09CC94BAFFFA3653"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "800DFB0912ECE36FF2FCEEC4F431FA48"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid46,classLoader:classLoader):boolean1"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.logging.Handler.close() : void"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.apache.logging.log4j.jul.Log4jBridgeHandler"
      valueType: "java.lang.String"
      uuid: "uniqueUuid46"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 207
      expression: "ClassUtils.isPresent(LOG4J_BRIDGE_HANDLER, getClassLoader())"
      range: "(207,10)-(207,69)"
      evaluatedAs: true
      internalMethodName: "isLog4jBridgeHandlerAvailable"
    - lineNumber: 458
      expression: "isLog4jBridgeHandlerAvailable()"
      range: "(458,7)-(458,37)"
      evaluatedAs: true
    - lineNumber: 225
      expression: "handlers.length == 1"
      range: "(225,8)-(225,27)"
      evaluatedAs: true
      internalMethodName: "removeDefaultRootHandler"
    - lineNumber: 225
      expression: "handlers[0] instanceof ConsoleHandler"
      range: "(225,32)-(225,68)"
      evaluatedAs: true
      internalMethodName: "removeDefaultRootHandler"
    - lineNumber: 213
      expression: "for-each(rootLogger.getHandlers())"
      range: "(213,32)-(213,55)"
      evaluatedAs: true
      internalMethodName: "removeLog4jBridgeHandler"
    - lineNumber: 214
      expression: "handler instanceof Log4jBridgeHandler"
      range: "(214,8)-(214,44)"
      evaluatedAs: true
      internalMethodName: "removeLog4jBridgeHandler"
  - pathId: "path3"
    testPathName: "cleanUpWhenRootLoggerGetHandlersIsNotEmptyAndHandlerInstanceOfLog4jBridgeHandler"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "9FAC5C94524E85371A99E9BD871057A7"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "800DFB0912ECE36FF2FCEEC4F431FA48"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid47,classLoader:classLoader):boolean1"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "rootLogger"
      modelFingerprint: "BED32E8806E42D5EC03C5172EB5289A7"
      valueUuid: "logger"
      methodExercised:
        expression: "removeHandler(handler:handler):void8"
        throwsExceptions:
        - "java.lang.SecurityException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.logging.Handler.close() : void"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.apache.logging.log4j.jul.Log4jBridgeHandler"
      valueType: "java.lang.String"
      uuid: "uniqueUuid47"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.logging.Logger"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.logging.LogManager"
            method: "getLogManager"
            methodParameters: []
          valueType: "java.util.logging.LogManager"
          uuid: "logManager"
        methodParameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "uniqueUuid48"
            fixed: true
        methodName: "getLogger"
      valueType: "java.util.logging.Logger"
      uuid: "logger"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void8"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.logging.ConsoleHandler"
        parameters: []
      valueType: "java.util.logging.ConsoleHandler"
      uuid: "handler"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 207
      expression: "ClassUtils.isPresent(LOG4J_BRIDGE_HANDLER, getClassLoader())"
      range: "(207,10)-(207,69)"
      evaluatedAs: true
      internalMethodName: "isLog4jBridgeHandlerAvailable"
    - lineNumber: 458
      expression: "isLog4jBridgeHandlerAvailable()"
      range: "(458,7)-(458,37)"
      evaluatedAs: true
    - lineNumber: 225
      expression: "handlers.length == 1"
      range: "(225,8)-(225,27)"
      evaluatedAs: true
      internalMethodName: "removeDefaultRootHandler"
    - lineNumber: 225
      expression: "handlers[0] instanceof ConsoleHandler"
      range: "(225,32)-(225,68)"
      evaluatedAs: true
      internalMethodName: "removeDefaultRootHandler"
    - lineNumber: 229
      expression: "catch-exception (Throwable)"
      range: "(229,3)-(229,21)"
      evaluatedAs: true
      internalMethodName: "removeDefaultRootHandler"
    - lineNumber: 213
      expression: "for-each(rootLogger.getHandlers())"
      range: "(213,32)-(213,55)"
      evaluatedAs: true
      internalMethodName: "removeLog4jBridgeHandler"
    - lineNumber: 214
      expression: "handler instanceof Log4jBridgeHandler"
      range: "(214,8)-(214,44)"
      evaluatedAs: true
      internalMethodName: "removeLog4jBridgeHandler"
    catchBlockExercised:
      idExternalInstruction: 3
      id: 3
      catchExceptions:
      - "java.lang.Throwable"
- method:
    name: "getDefaultLogCorrelationPattern"
    sourceCodeSignature: "String getDefaultLogCorrelationPattern()"
    returnType: "java.lang.String"
    instructionFingerprint: "C0EF50AD88945131799CB6BA2E2AD04A"
  paths:
  - pathId: "path1"
    testPathName: "getDefaultLogCorrelationPatternTest"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "EE52CEF6A7C14F6AF9A9D7341F5165A2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B4685CBF115E12399B9B83DFBE3DE1E5"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "%correlationId"
      valueType: "java.lang.String"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "getEnvironment"
    sourceCodeSignature: "Environment getEnvironment(LoggerContext loggerContext)"
    returnType: "org.springframework.core.env.Environment"
    parameters:
    - name: "loggerContext"
      type: "org.apache.logging.log4j.core.LoggerContext"
    instructionFingerprint: "087E3D1218F68BBA5FF25E0F26A0A85F"
  paths:
  - pathId: "path1"
    testPathName: "getEnvironmentWhenLoggerContextIsNotNull"
    modelFingerprint: "B748A1642BAF192AF46B6F2902CC16DB"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "loggerContext"
      modelFingerprint: "988EC39D0436630E0123C2DB69BE65B4"
      valueUuid: "loggerContext"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "F33578148810594D62C8394C67C84F3F"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.logging.log4j.core.LoggerContext"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "name1"
            valueType: "java.lang.String"
            uuid: "loggerContext-name"
      valueType: "org.apache.logging.log4j.core.LoggerContext"
      uuid: "loggerContext"
    - sapientType: "NULL"
      valueType: "org.springframework.core.env.Environment"
      uuid: "object"
      explicitCastNeeded: true
    branches:
    - lineNumber: 509
      expression: "loggerContext != null"
      range: "(509,26)-(509,46)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "getEnvironmentWhenLoggerContextIsNull"
    modelFingerprint: "67367BB72118C1C1A930BD5E3CAA9C3E"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "loggerContext"
      modelFingerprint: "960F8FFCF99A3A8588F71A59FA29677F"
      valueUuid: "loggerContext"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "E4A77F580F0B20263F8EC11CA46A60BB"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "org.apache.logging.log4j.core.LoggerContext"
      uuid: "loggerContext"
      fixed: true
    - sapientType: "NULL"
      valueType: "org.springframework.core.env.Environment"
      uuid: "expectedResult"
      explicitCastNeeded: true
    branches:
    - lineNumber: 509
      expression: "loggerContext != null"
      range: "(509,26)-(509,46)"
      evaluatedAs: false
