---
modelFingerprint: "FE9CC1FFA0CC88E6446E10A39A88D314"
targetClass:
  fullClassName: "org.springframework.boot.util.LambdaSafe"
methods:
- method:
    name: "callback"
    sourceCodeSignature: "<C, A> Callback<C, A> callback(Class<C> callbackType, C\
      \ callbackInstance, A argument, Object... additionalArguments)"
    returnType: "org.springframework.boot.util.LambdaSafe$Callback"
    genericReturnType: "java.lang.Object,java.lang.Object"
    parameters:
    - name: "callbackType"
      type: "java.lang.Class"
    - name: "callbackInstance"
      type: "java.lang.Object"
    - name: "argument"
      type: "java.lang.Object"
    - name: "additionalArguments"
      type: "java.lang.Object[]"
    instructionFingerprint: "E493ACB073094F4D61DCCD99970B05B0"
  paths:
  - pathId: "path1"
    testPathName: "callbackTest"
    modelFingerprint: "6B40AAE179FAA6D20BE321C8A418E2D5"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "callbackType"
      modelFingerprint: "93B5D92450F445A2FACA182F7D555106"
      valueUuid: "callbackType"
    - type: "INPUT"
      name: "callbackInstance"
      modelFingerprint: "E9630470F116C8F836B5B35CF3763C92"
      valueUuid: "callbackInstance"
    - type: "INPUT"
      name: "argument"
      modelFingerprint: "FB876F3CA9930809BAAA293D9505BB52"
      valueUuid: "argument"
    - type: "INPUT"
      name: "additionalArguments"
      modelFingerprint: "7C04CF5F6F833FEF1CFA5C8A5840741E"
      valueUuid: "additionalArguments"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "C2E71DF026DBCC1B1FD5642F18010C49"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:callbackType,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "CC5A39F91100C38231A9CCF9B5ED4443"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:callbackInstance,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "11952E8D73DD1C0D182DC23BA8BC638D"
      valueUuid: "lambdaSafe.Callback"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "callbackType"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "callbackInstance"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "argument"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Object[]"
      uuid: "additionalArguments"
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "callbackType"
    - sapientType: "BASIC"
      content: !<regular>
        value: "CallbackType must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "callbackInstance"
    - sapientType: "BASIC"
      content: !<regular>
        value: "CallbackInstance must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.util.LambdaSafe$Callback"
        parameters:
        - name: "callbackType"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "java.lang.Object"
            uuid: "callbackType"
        - name: "callbackInstance"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "callbackInstance"
        - name: "argument"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "argument"
        - name: "additionalArguments"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.Object[]"
            uuid: "additionalArguments"
      valueType: "org.springframework.boot.util.LambdaSafe$Callback"
      genericValueType: "java.lang.Object,java.lang.Object"
      uuid: "lambdaSafe.Callback"
      fixed: true
- method:
    name: "callbacks"
    sourceCodeSignature: "<C, A> Callbacks<C, A> callbacks(Class<C> callbackType,\
      \ Collection<? extends C> callbackInstances, A argument, Object... additionalArguments)"
    returnType: "org.springframework.boot.util.LambdaSafe$Callbacks"
    genericReturnType: "java.lang.Object,java.lang.Object"
    parameters:
    - name: "callbackType"
      type: "java.lang.Class"
    - name: "callbackInstances"
      type: "java.util.Collection"
    - name: "argument"
      type: "java.lang.Object"
    - name: "additionalArguments"
      type: "java.lang.Object[]"
    instructionFingerprint: "7BD3DC9D517004E95804223A8C590EAF"
  paths:
  - pathId: "path1"
    testPathName: "callbacksTest"
    modelFingerprint: "51DEA11BCFC8642451BE17CC7A12E7B4"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "callbackType"
      modelFingerprint: "93B5D92450F445A2FACA182F7D555106"
      valueUuid: "callbackType"
    - type: "INPUT"
      name: "callbackInstances"
      modelFingerprint: "0F628A1BF25906B1BCF41F9187405F18"
      valueUuid: "callbackInstances"
    - type: "INPUT"
      name: "argument"
      modelFingerprint: "FB876F3CA9930809BAAA293D9505BB52"
      valueUuid: "argument"
    - type: "INPUT"
      name: "additionalArguments"
      modelFingerprint: "7C04CF5F6F833FEF1CFA5C8A5840741E"
      valueUuid: "additionalArguments"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "C2E71DF026DBCC1B1FD5642F18010C49"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:callbackType,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "7F69BD56AC235534DF7377019A4E1143"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:callbackInstances,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "DBD7C6C0595806FDC9FD9625EC1943B1"
      valueUuid: "lambdaSafe.Callbacks"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "callbackType"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "? extends java.lang.Object"
      uuid: "callbackInstances"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "argument"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Object[]"
      uuid: "additionalArguments"
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "callbackType"
    - sapientType: "BASIC"
      content: !<regular>
        value: "CallbackType must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "? extends java.lang.Object"
      uuid: "callbackInstances"
    - sapientType: "BASIC"
      content: !<regular>
        value: "CallbackInstances must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.util.LambdaSafe$Callbacks"
        parameters:
        - name: "callbackType"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "java.lang.Object"
            uuid: "callbackType"
        - name: "callbackInstances"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Collection"
            genericValueType: "? extends java.lang.Object"
            uuid: "callbackInstances"
        - name: "argument"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "argument"
        - name: "additionalArguments"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.Object[]"
            uuid: "additionalArguments"
      valueType: "org.springframework.boot.util.LambdaSafe$Callbacks"
      genericValueType: "java.lang.Object,java.lang.Object"
      uuid: "lambdaSafe.Callbacks"
      fixed: true
