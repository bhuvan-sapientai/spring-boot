---
modelFingerprint: "BCD930D20FCB1E857CE5018CC6FA3672"
targetClass:
  fullClassName: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
methods:
- method:
    name: "start"
    sourceCodeSignature: "void start()"
    returnType: "void"
    throwsExceptions:
    - "org.springframework.boot.web.server.WebServerException"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.Exception"
    - idExternalInstruction: 0
      id: 3
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "BDF53C0412EC37731522C36449B3DC28"
  paths:
  - pathId: "path1"
    testPathName: "startWhenThisNotAutoStart"
    constructorSignature: "<init>(io.undertow.Undertow$Builder,java.lang.Iterable<org.springframework.boot.web.embedded.undertow.HttpHandlerFactory>,boolean)\
      \ : void"
    modelFingerprint: "865C23D8A82E42339213D9EC83A9B21F"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "F701E2F8BBD58EC82FAF56181E918588"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
        parameters:
        - name: "builder"
          value:
            sapientType: "MOCK"
            valueType: "io.undertow.Undertow$Builder"
            uuid: "builder"
        - name: "httpHandlerFactories"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
            uuid: "httpHandlerFactories"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "autoStart"
      valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
      uuid: "target"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 108
      expression: "this.started"
      range: "(108,8)-(108,19)"
      evaluatedAs: false
    - lineNumber: 112
      expression: "!this.autoStart"
      range: "(112,9)-(112,23)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "startWhenThisUndertowIsNull"
    constructorSignature: "<init>(io.undertow.Undertow$Builder,java.lang.Iterable<org.springframework.boot.web.embedded.undertow.HttpHandlerFactory>,boolean)\
      \ : void"
    modelFingerprint: "B86E725AD356D814DAFB415076B0D368"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "8D5D60ED65486E7B8BC4F3DC56123F7F"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "C5CF1A252CDB43C6B39643900F50F596"
      methodExercised:
        expression: "createHttpHandler():httpHandler"
    - type: "FIELD"
      name: "builder"
      modelFingerprint: "99FE11A07AC1989EFA691CA5D7A64D4D"
      valueUuid: "builder"
      methodExercised:
        expression: "setHandler(handler:httpHandler):undertow.Builder"
    - type: "FIELD"
      name: "builder"
      modelFingerprint: "A044243975C1662525AC99388E3E277D"
      valueUuid: "builder"
      methodExercised:
        expression: "build():undertow"
    - type: "FIELD"
      name: "undertow"
      modelFingerprint: "EB351E2518491978FF67FE732C7CCE07"
      valueUuid: "undertow"
      methodExercised:
        expression: "start():void"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "CFE6D30B95DABE2A56588EA0EAAD4B9B"
      methodExercised:
        expression: "getStartLogMessage():string"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
        parameters:
        - name: "builder"
          value:
            sapientType: "MOCK"
            valueType: "io.undertow.Undertow$Builder"
            uuid: "builder"
        - name: "httpHandlerFactories"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
            uuid: "httpHandlerFactories"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "autoStart"
      valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "io.undertow.server.HttpHandler"
      uuid: "httpHandler"
    - sapientType: "MOCK"
      valueType: "io.undertow.Undertow$Builder"
      uuid: "builder"
    - sapientType: "MOCK"
      valueType: "io.undertow.Undertow$Builder"
      uuid: "undertow.Builder"
    - sapientType: "MOCK"
      valueType: "io.undertow.server.HttpHandler"
      uuid: "httpHandler"
    - sapientType: "MOCK"
      valueType: "io.undertow.Undertow$Builder"
      uuid: "builder"
    - sapientType: "MOCK"
      valueType: "io.undertow.Undertow"
      uuid: "undertow"
    - sapientType: "MOCK"
      valueType: "io.undertow.Undertow"
      uuid: "undertow"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getStartLogMessage1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 108
      expression: "this.started"
      range: "(108,8)-(108,19)"
      evaluatedAs: false
    - lineNumber: 112
      expression: "!this.autoStart"
      range: "(112,9)-(112,23)"
      evaluatedAs: false
    - lineNumber: 115
      expression: "this.undertow == null"
      range: "(115,9)-(115,29)"
      evaluatedAs: true
  - pathId: "path5"
    testPathName: "startWhenThisUndertowIsNullAndCaughtExceptionThrowsWebServerException"
    constructorSignature: "<init>(io.undertow.Undertow$Builder,java.lang.Iterable<org.springframework.boot.web.embedded.undertow.HttpHandlerFactory>,boolean)\
      \ : void"
    modelFingerprint: "9D3831E901F39F59EAC6D7CE836BF212"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "53D274145668F888A83536CC989BB9FB"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "C5CF1A252CDB43C6B39643900F50F596"
      methodExercised:
        expression: "createHttpHandler():httpHandler"
    - type: "FIELD"
      name: "builder"
      modelFingerprint: "9C334B68E86121370CC284D458500F74"
      valueUuid: "builder"
      methodExercised:
        expression: "setHandler(handler:httpHandler):undertow.Builder"
    - type: "FIELD"
      name: "builder"
      modelFingerprint: "4B83450AB954E6E164CC063C81B134CE"
      valueUuid: "builder"
      methodExercised:
        expression: "build():undertow"
    - type: "FIELD"
      name: "undertow"
      modelFingerprint: "CA9A5E1C758CC789585374B975B3A091"
      valueUuid: "undertow"
      methodExercised:
        expression: "start():void"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "18960414D2A3C615EA002B9FD30D02CB"
      methodExercised:
        expression: "getStartLogMessage():string"
    - type: "STATIC"
      name: "PortInUseException.class"
      modelFingerprint: "064352A2CFC5E83FB420E745AAD5C433"
      valueUuid: "PortInUseException.class"
      methodExercised:
        expression: "ifPortBindingException(ex:string,action:uniqueUuid1):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "75B5C664B23DEC27891E978DB5BF1A52"
      valueUuid: "webServerException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
        parameters:
        - name: "builder"
          value:
            sapientType: "MOCK"
            valueType: "io.undertow.Undertow$Builder"
            uuid: "builder"
        - name: "httpHandlerFactories"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
            uuid: "httpHandlerFactories"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "autoStart"
      valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "io.undertow.server.HttpHandler"
      uuid: "httpHandler"
    - sapientType: "MOCK"
      valueType: "io.undertow.Undertow$Builder"
      uuid: "builder"
    - sapientType: "MOCK"
      valueType: "io.undertow.Undertow$Builder"
      uuid: "undertow.Builder"
    - sapientType: "MOCK"
      valueType: "io.undertow.server.HttpHandler"
      uuid: "httpHandler"
    - sapientType: "MOCK"
      valueType: "io.undertow.Undertow$Builder"
      uuid: "builder"
    - sapientType: "MOCK"
      valueType: "io.undertow.Undertow"
      uuid: "undertow"
    - sapientType: "MOCK"
      valueType: "io.undertow.Undertow"
      uuid: "undertow"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.RuntimeException"
        parameters: []
      valueType: "java.lang.RuntimeException"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.server.PortInUseException"
      uuid: "PortInUseException.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.RuntimeException"
        parameters: []
      valueType: "java.lang.RuntimeException"
      uuid: "string"
    - sapientType: "ANY"
      valueType: "java.util.function.Consumer"
      genericValueType: "java.net.BindException"
      uuid: "uniqueUuid1"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "org.springframework.boot.web.server.WebServerException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Unable to start embedded Undertow"
            valueType: "java.lang.String"
            uuid: "uniqueUuid2"
            fixed: true
        - name: "cause"
          value:
            sapientType: "EXCEPTION"
            content: !<new>
              target: "java.lang.RuntimeException"
              parameters: []
            valueType: "java.lang.RuntimeException"
            uuid: "string"
      valueType: "org.springframework.boot.web.server.WebServerException"
      uuid: "webServerException"
      fixed: true
    branches:
    - lineNumber: 108
      expression: "this.started"
      range: "(108,8)-(108,19)"
      evaluatedAs: false
    - lineNumber: 112
      expression: "!this.autoStart"
      range: "(112,9)-(112,23)"
      evaluatedAs: false
    - lineNumber: 115
      expression: "this.undertow == null"
      range: "(115,9)-(115,29)"
      evaluatedAs: true
    - lineNumber: 123
      expression: "catch-exception (Exception)"
      range: "(123,4)-(123,22)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
- method:
    name: "createHttpHandler"
    sourceCodeSignature: "HttpHandler createHttpHandler()"
    returnType: "io.undertow.server.HttpHandler"
    instructionFingerprint: "98124083E281F30799B4D55EE01BF84F"
  paths:
  - pathId: "path1"
    testPathName: "createHttpHandlerWhenHandlerInstanceOfGracefulShutdownHandler"
    constructorSignature: "<init>(io.undertow.Undertow$Builder,java.lang.Iterable<org.springframework.boot.web.embedded.undertow.HttpHandlerFactory>,boolean)\
      \ : void"
    modelFingerprint: "E6A235483C7FD6ADFAB4BD702786582A"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "B6DBE4963813B68B2F15F63E20E29159"
      valueUuid: "target"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "4AB8E149E4EF612207F70AAF5C4F6D19"
      valueUuid: "object2"
      methodExercised:
        expression: "getHandler(next:uniqueUuid1):httpHandler"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "9B5E0C0A1D2666EA25F1F393C59C6EF6"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "isNull(object:fieldGracefulShutdownHandler,message:uniqueUuid2):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "E2D322C707AAD48E9CD5EA31E568F865"
      valueUuid: "httpHandler"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
        parameters:
        - name: "builder"
          value:
            sapientType: "MOCK"
            valueType: "io.undertow.Undertow$Builder"
            uuid: "builder"
        - name: "httpHandlerFactories"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.ArrayList"
              parameters: []
              values:
              - sapientType: "MOCK"
                valueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
                uuid: "object2"
                collectionUuid: "httpHandlerFactories"
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
            uuid: "httpHandlerFactories"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "autoStart"
      valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
      uuid: "object2"
      collectionUuid: "httpHandlerFactories"
    - sapientType: "MOCK"
      valueType: "io.undertow.server.handlers.GracefulShutdownHandler"
      uuid: "httpHandler"
    - sapientType: "NULL"
      valueType: "io.undertow.server.HttpHandler"
      uuid: "uniqueUuid1"
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "NULL"
      valueType: "io.undertow.server.handlers.GracefulShutdownHandler"
      uuid: "fieldGracefulShutdownHandler"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Only a single GracefulShutdownHandler can be defined"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "io.undertow.server.handlers.GracefulShutdownHandler"
      uuid: "httpHandler"
    branches:
    - lineNumber: 171
      expression: "for-each(this.httpHandlerFactories)"
      range: "(171,37)-(171,61)"
      evaluatedAs: true
    - lineNumber: 173
      expression: "handler instanceof Closeable closeable"
      range: "(173,8)-(173,45)"
      evaluatedAs: false
    - lineNumber: 176
      expression: "handler instanceof GracefulShutdownHandler shutdownHandler"
      range: "(176,8)-(176,65)"
      evaluatedAs: true
- method:
    name: "stop"
    sourceCodeSignature: "void stop()"
    returnType: "void"
    throwsExceptions:
    - "org.springframework.boot.web.server.WebServerException"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 7
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "8AA4C62FBFFB9F4473C29BC26EE0FAD6"
  paths:
  - pathId: "path1"
    testPathName: "stopWhenThisNotStarted"
    constructorSignature: "<init>(io.undertow.Undertow$Builder,java.lang.Iterable<org.springframework.boot.web.embedded.undertow.HttpHandlerFactory>,boolean)\
      \ : void"
    modelFingerprint: "5010155CB7C5F8A5E17919164EFBC2CA"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "AA1DD5C9AE42F66ED11592A4981EA7F9"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
        parameters:
        - name: "builder"
          value:
            sapientType: "MOCK"
            valueType: "io.undertow.Undertow$Builder"
            uuid: "builder"
        - name: "httpHandlerFactories"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
            uuid: "httpHandlerFactories"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "autoStart"
      valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
      uuid: "target"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 272
      expression: "!this.started"
      range: "(272,8)-(272,20)"
      evaluatedAs: true
- method:
    name: "getPort"
    sourceCodeSignature: "int getPort()"
    returnType: "int"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "DF15E7C2E4D24C455672039F416F9DCA"
  paths:
  - pathId: "path1"
    testPathName: "getPortWhenPortsNotIsEmpty"
    constructorSignature: "<init>(io.undertow.Undertow$Builder,java.lang.Iterable<org.springframework.boot.web.embedded.undertow.HttpHandlerFactory>,boolean)\
      \ : void"
    modelFingerprint: "8F94B03DB6E4D9262359CF67E5F2E906"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "F701E2F8BBD58EC82FAF56181E918588"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D59799CAFC96C0482BA7B23AC5F38441"
      valueUuid: "int2"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return ports.get(0).getNumber();"
      lineNumber: 297
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type UndertowWebServer.Port - Method: getNumber"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
        parameters:
        - name: "builder"
          value:
            sapientType: "MOCK"
            valueType: "io.undertow.Undertow$Builder"
            uuid: "builder"
        - name: "httpHandlerFactories"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
            uuid: "httpHandlerFactories"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "autoStart"
      valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    branches:
    - lineNumber: 204
      expression: "!this.autoStart"
      range: "(204,8)-(204,22)"
      evaluatedAs: true
      internalMethodName: "getActualPorts"
    - lineNumber: 294
      expression: "ports.isEmpty()"
      range: "(294,7)-(294,21)"
      evaluatedAs: false
  - pathId: "path5"
    testPathName: "getPortWhenPortsIsEmpty"
    constructorSignature: "<init>(io.undertow.Undertow$Builder,java.lang.Iterable<org.springframework.boot.web.embedded.undertow.HttpHandlerFactory>,boolean)\
      \ : void"
    modelFingerprint: "0394BE078CE2A82A16CA6F1A04B36E69"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "2CB5058B67C5DC4775A32555AD979590"
      valueUuid: "target"
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "7E78E558E921797B233EB0656218E3E4"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "findField(clazz:uniqueUuid5,name:uniqueUuid6):field"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "B4394E886934FF175523896008CB1C09"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "makeAccessible(field:field):void"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "425F7DB1E6657282F3A354CC620956DC"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "getField(field:field,target:fieldUndertow):object2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "CF1F5D4123F6E66B21425B46488E3BA4"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
        parameters:
        - name: "builder"
          value:
            sapientType: "MOCK"
            valueType: "io.undertow.Undertow$Builder"
            uuid: "builder"
        - name: "httpHandlerFactories"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
            uuid: "httpHandlerFactories"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "autoStart"
      valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
      uuid: "target"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid11"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid12"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "CLASS"
      content: !<regular>
        value: "io.undertow.Undertow"
      valueType: "java.lang.Class"
      genericValueType: "io.undertow.Undertow"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "channels"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid11"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid12"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      uuid: "object2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid11"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid12"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "NULL"
      valueType: "io.undertow.Undertow"
      uuid: "fieldUndertow"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 204
      expression: "!this.autoStart"
      range: "(204,8)-(204,22)"
      evaluatedAs: false
      internalMethodName: "getActualPorts"
    - lineNumber: 208
      expression: "for-each(extractChannels())"
      range: "(208,33)-(208,49)"
      evaluatedAs: false
      internalMethodName: "getActualPorts"
    - lineNumber: 294
      expression: "ports.isEmpty()"
      range: "(294,7)-(294,21)"
      evaluatedAs: true
  - pathId: "path4"
    testPathName: "getPortWhenPortsNotIsEmptyThrowsNullPointerException"
    constructorSignature: "<init>(io.undertow.Undertow$Builder,java.lang.Iterable<org.springframework.boot.web.embedded.undertow.HttpHandlerFactory>,boolean)\
      \ : void"
    modelFingerprint: "F27F89C8AC02790F7B6487991331DD86"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "AA010FEB5B89C095B359C4DC7AF56C81"
      valueUuid: "target"
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "7E78E558E921797B233EB0656218E3E4"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "findField(clazz:uniqueUuid1,name:uniqueUuid2):field"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "B4394E886934FF175523896008CB1C09"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "makeAccessible(field:field):void"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "8EDF12BD8768BFDE1B926F9D133F6E4B"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "getField(field:field,target:fieldUndertow):object2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "channel"
      modelFingerprint: "2971F779A48B5AE7E14B68408087E1CE"
      valueUuid: "object3"
      methodExercised:
        expression: "getLocalAddress():socketAddress"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "085DC12750BAC37E63C370C4A90AE3FA"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
        parameters:
        - name: "builder"
          value:
            sapientType: "MOCK"
            valueType: "io.undertow.Undertow$Builder"
            uuid: "builder"
        - name: "httpHandlerFactories"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
            uuid: "httpHandlerFactories"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "autoStart"
      valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
      uuid: "target"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid7"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid8"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "CLASS"
      content: !<regular>
        value: "io.undertow.Undertow"
      valueType: "java.lang.Class"
      genericValueType: "io.undertow.Undertow"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "channels"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid7"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid8"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.xnio.channels.BoundChannel"
          uuid: "object3"
          collectionUuid: "object2"
          explicitCastNeeded: true
      valueType: "java.util.List"
      uuid: "object2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid7"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid8"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "NULL"
      valueType: "io.undertow.Undertow"
      uuid: "fieldUndertow"
    - sapientType: "MOCK"
      valueType: "org.xnio.channels.BoundChannel"
      uuid: "object3"
      collectionUuid: "object2"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "java.net.SocketAddress"
      uuid: "socketAddress"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "expectedResult"
    branches:
    - lineNumber: 204
      expression: "!this.autoStart"
      range: "(204,8)-(204,22)"
      evaluatedAs: false
      internalMethodName: "getActualPorts"
    - lineNumber: 208
      expression: "for-each(extractChannels())"
      range: "(208,33)-(208,49)"
      evaluatedAs: true
      internalMethodName: "getActualPorts"
    - lineNumber: 228
      expression: "socketAddress instanceof InetSocketAddress inetSocketAddress"
      range: "(228,7)-(228,66)"
      evaluatedAs: false
      internalMethodName: "getPortFromChannel"
    - lineNumber: 294
      expression: "ports.isEmpty()"
      range: "(294,7)-(294,21)"
      evaluatedAs: false
  - pathId: "path8"
    testPathName: "getPortWhenCaughtExceptionAndPortsIsEmpty"
    constructorSignature: "<init>(io.undertow.Undertow$Builder,java.lang.Iterable<org.springframework.boot.web.embedded.undertow.HttpHandlerFactory>,boolean)\
      \ : void"
    modelFingerprint: "FB6BB63652E60F40AE9D15A56924E5CD"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "2CB5058B67C5DC4775A32555AD979590"
      valueUuid: "target"
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "7E78E558E921797B233EB0656218E3E4"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "findField(clazz:uniqueUuid1,name:uniqueUuid2):field"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "B4394E886934FF175523896008CB1C09"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "makeAccessible(field:field):void"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "2B4EE28D1D7C9BC8BE08EF9CB7726F4F"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "getField(field:field,target:fieldUndertow):object2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "CF1F5D4123F6E66B21425B46488E3BA4"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
        parameters:
        - name: "builder"
          value:
            sapientType: "MOCK"
            valueType: "io.undertow.Undertow$Builder"
            uuid: "builder"
        - name: "httpHandlerFactories"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
            uuid: "httpHandlerFactories"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "autoStart"
      valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
      uuid: "target"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid7"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid8"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "CLASS"
      content: !<regular>
        value: "io.undertow.Undertow"
      valueType: "java.lang.Class"
      genericValueType: "io.undertow.Undertow"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "channels"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid7"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid8"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.RuntimeException"
        parameters: []
      valueType: "java.lang.RuntimeException"
      uuid: "object2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid7"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid8"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "NULL"
      valueType: "io.undertow.Undertow"
      uuid: "fieldUndertow"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 204
      expression: "!this.autoStart"
      range: "(204,8)-(204,22)"
      evaluatedAs: false
      internalMethodName: "getActualPorts"
    - lineNumber: 213
      expression: "catch-exception (Exception)"
      range: "(213,3)-(213,21)"
      evaluatedAs: true
      internalMethodName: "getActualPorts"
    - lineNumber: 294
      expression: "ports.isEmpty()"
      range: "(294,7)-(294,21)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 3
      id: 5
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path2"
    testPathName: "getPortWhenSslFieldIsNotNullAndPortsNotIsEmpty"
    constructorSignature: "<init>(io.undertow.Undertow$Builder,java.lang.Iterable<org.springframework.boot.web.embedded.undertow.HttpHandlerFactory>,boolean)\
      \ : void"
    modelFingerprint: "2D15415C586A4CE4D4928DECBC9A0ADC"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "2CB5058B67C5DC4775A32555AD979590"
      valueUuid: "target"
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "7E78E558E921797B233EB0656218E3E4"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "findField(clazz:uniqueUuid29,name:uniqueUuid30):field"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "B4394E886934FF175523896008CB1C09"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "makeAccessible(field:field):void"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "8EDF12BD8768BFDE1B926F9D133F6E4B"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "getField(field:field,target:fieldUndertow):object2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "channel"
      modelFingerprint: "8E1231DAA6B0410BF1EAE3B68D7C9EF1"
      valueUuid: "object3"
      methodExercised:
        expression: "getLocalAddress():socketAddress"
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "0DA648D3E65A60D8727130A74962991E"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "findField(clazz:class,name:uniqueUuid37):field2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D59799CAFC96C0482BA7B23AC5F38441"
      valueUuid: "int3"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.net.InetSocketAddress.getPort() : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
        parameters:
        - name: "builder"
          value:
            sapientType: "MOCK"
            valueType: "io.undertow.Undertow$Builder"
            uuid: "builder"
        - name: "httpHandlerFactories"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
            uuid: "httpHandlerFactories"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "autoStart"
      valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
      uuid: "target"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid35"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid36"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "CLASS"
      content: !<regular>
        value: "io.undertow.Undertow"
      valueType: "java.lang.Class"
      genericValueType: "io.undertow.Undertow"
      uuid: "uniqueUuid29"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "channels"
      valueType: "java.lang.String"
      uuid: "uniqueUuid30"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid35"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid36"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.xnio.channels.BoundChannel"
          uuid: "object3"
          collectionUuid: "object2"
          explicitCastNeeded: true
      valueType: "java.util.List"
      uuid: "object2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid35"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid36"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "NULL"
      valueType: "io.undertow.Undertow"
      uuid: "fieldUndertow"
    - sapientType: "MOCK"
      valueType: "org.xnio.channels.BoundChannel"
      uuid: "object3"
      collectionUuid: "object2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.net.InetSocketAddress"
        parameters:
        - name: "port"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "socketAddress-port"
      valueType: "java.net.InetSocketAddress"
      uuid: "socketAddress"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "MOCK"
      valueType: "java.lang.reflect.Field"
      uuid: "field2"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.xnio.channels.BoundChannel"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ssl"
      valueType: "java.lang.String"
      uuid: "uniqueUuid37"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int3"
    branches:
    - lineNumber: 204
      expression: "!this.autoStart"
      range: "(204,8)-(204,22)"
      evaluatedAs: false
      internalMethodName: "getActualPorts"
    - lineNumber: 208
      expression: "for-each(extractChannels())"
      range: "(208,33)-(208,49)"
      evaluatedAs: true
      internalMethodName: "getActualPorts"
    - lineNumber: 228
      expression: "socketAddress instanceof InetSocketAddress inetSocketAddress"
      range: "(228,7)-(228,66)"
      evaluatedAs: true
      internalMethodName: "getPortFromChannel"
    - lineNumber: 230
      expression: "sslField != null"
      range: "(230,23)-(230,38)"
      evaluatedAs: true
      internalMethodName: "getPortFromChannel"
    - lineNumber: 294
      expression: "ports.isEmpty()"
      range: "(294,7)-(294,21)"
      evaluatedAs: false
  - pathId: "path3"
    testPathName: "getPortWhenSslFieldIsNullAndPortsNotIsEmpty"
    constructorSignature: "<init>(io.undertow.Undertow$Builder,java.lang.Iterable<org.springframework.boot.web.embedded.undertow.HttpHandlerFactory>,boolean)\
      \ : void"
    modelFingerprint: "4280140DACA959AF3AF197AF34B73530"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "2CB5058B67C5DC4775A32555AD979590"
      valueUuid: "target"
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "7E78E558E921797B233EB0656218E3E4"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "findField(clazz:uniqueUuid38,name:uniqueUuid39):field"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "B4394E886934FF175523896008CB1C09"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "makeAccessible(field:field):void"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "8EDF12BD8768BFDE1B926F9D133F6E4B"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "getField(field:field,target:fieldUndertow):object2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "channel"
      modelFingerprint: "8E1231DAA6B0410BF1EAE3B68D7C9EF1"
      valueUuid: "object3"
      methodExercised:
        expression: "getLocalAddress():socketAddress"
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "48E9D928337D8AF91B79F9CBDB419D42"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "findField(clazz:class,name:uniqueUuid46):field2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D59799CAFC96C0482BA7B23AC5F38441"
      valueUuid: "int3"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.net.InetSocketAddress.getPort() : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
        parameters:
        - name: "builder"
          value:
            sapientType: "MOCK"
            valueType: "io.undertow.Undertow$Builder"
            uuid: "builder"
        - name: "httpHandlerFactories"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
            uuid: "httpHandlerFactories"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "autoStart"
      valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
      uuid: "target"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid44"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid45"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "CLASS"
      content: !<regular>
        value: "io.undertow.Undertow"
      valueType: "java.lang.Class"
      genericValueType: "io.undertow.Undertow"
      uuid: "uniqueUuid38"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "channels"
      valueType: "java.lang.String"
      uuid: "uniqueUuid39"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid44"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid45"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.xnio.channels.BoundChannel"
          uuid: "object3"
          collectionUuid: "object2"
          explicitCastNeeded: true
      valueType: "java.util.List"
      uuid: "object2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid44"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid45"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "NULL"
      valueType: "io.undertow.Undertow"
      uuid: "fieldUndertow"
    - sapientType: "MOCK"
      valueType: "org.xnio.channels.BoundChannel"
      uuid: "object3"
      collectionUuid: "object2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.net.InetSocketAddress"
        parameters:
        - name: "port"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "socketAddress-port"
      valueType: "java.net.InetSocketAddress"
      uuid: "socketAddress"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "NULL"
      valueType: "java.lang.reflect.Field"
      uuid: "field2"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.xnio.channels.BoundChannel"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ssl"
      valueType: "java.lang.String"
      uuid: "uniqueUuid46"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int3"
    branches:
    - lineNumber: 204
      expression: "!this.autoStart"
      range: "(204,8)-(204,22)"
      evaluatedAs: false
      internalMethodName: "getActualPorts"
    - lineNumber: 208
      expression: "for-each(extractChannels())"
      range: "(208,33)-(208,49)"
      evaluatedAs: true
      internalMethodName: "getActualPorts"
    - lineNumber: 228
      expression: "socketAddress instanceof InetSocketAddress inetSocketAddress"
      range: "(228,7)-(228,66)"
      evaluatedAs: true
      internalMethodName: "getPortFromChannel"
    - lineNumber: 230
      expression: "sslField != null"
      range: "(230,23)-(230,38)"
      evaluatedAs: false
      internalMethodName: "getPortFromChannel"
    - lineNumber: 294
      expression: "ports.isEmpty()"
      range: "(294,7)-(294,21)"
      evaluatedAs: false
  - pathId: "path7"
    testPathName: "getPortWhenCaughtExceptionAndPortsNotIsEmptyThrowsNullPointerException"
    constructorSignature: "<init>(io.undertow.Undertow$Builder,java.lang.Iterable<org.springframework.boot.web.embedded.undertow.HttpHandlerFactory>,boolean)\
      \ : void"
    modelFingerprint: "CDA2B8AA4BA92C4F81795CE0B1EA1EE1"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "AA010FEB5B89C095B359C4DC7AF56C81"
      valueUuid: "target"
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "7E78E558E921797B233EB0656218E3E4"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "findField(clazz:uniqueUuid1,name:uniqueUuid2):field"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "B4394E886934FF175523896008CB1C09"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "makeAccessible(field:field):void"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "8EDF12BD8768BFDE1B926F9D133F6E4B"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "getField(field:field,target:fieldUndertow):object2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "channel"
      modelFingerprint: "229C40427C3B4923A4CAD5827AE1B9DA"
      valueUuid: "object3"
      methodExercised:
        expression: "getLocalAddress():socketAddress"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "CF1F5D4123F6E66B21425B46488E3BA4"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
        parameters:
        - name: "builder"
          value:
            sapientType: "MOCK"
            valueType: "io.undertow.Undertow$Builder"
            uuid: "builder"
        - name: "httpHandlerFactories"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
            uuid: "httpHandlerFactories"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "autoStart"
      valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
      uuid: "target"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid7"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid8"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "CLASS"
      content: !<regular>
        value: "io.undertow.Undertow"
      valueType: "java.lang.Class"
      genericValueType: "io.undertow.Undertow"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "channels"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid7"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid8"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.xnio.channels.BoundChannel"
          uuid: "object3"
          collectionUuid: "object2"
          explicitCastNeeded: true
      valueType: "java.util.List"
      uuid: "object2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid7"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid8"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "NULL"
      valueType: "io.undertow.Undertow"
      uuid: "fieldUndertow"
    - sapientType: "MOCK"
      valueType: "org.xnio.channels.BoundChannel"
      uuid: "object3"
      collectionUuid: "object2"
      explicitCastNeeded: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.RuntimeException"
        parameters: []
      valueType: "java.lang.RuntimeException"
      uuid: "socketAddress"
    - sapientType: "BASIC"
      content: !<regular>
        value: -1
      valueType: "int"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 204
      expression: "!this.autoStart"
      range: "(204,8)-(204,22)"
      evaluatedAs: false
      internalMethodName: "getActualPorts"
    - lineNumber: 208
      expression: "for-each(extractChannels())"
      range: "(208,33)-(208,49)"
      evaluatedAs: true
      internalMethodName: "getActualPorts"
    - lineNumber: 213
      expression: "catch-exception (Exception)"
      range: "(213,3)-(213,21)"
      evaluatedAs: true
      internalMethodName: "getActualPorts"
    - lineNumber: 294
      expression: "ports.isEmpty()"
      range: "(294,7)-(294,21)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 3
      id: 5
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path6"
    testPathName: "getPortWhenCaughtExceptionAndPortsNotIsEmpty"
    constructorSignature: "<init>(io.undertow.Undertow$Builder,java.lang.Iterable<org.springframework.boot.web.embedded.undertow.HttpHandlerFactory>,boolean)\
      \ : void"
    modelFingerprint: "9FDCC325A6E18DE903C21CA6FB35D5BE"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "2CB5058B67C5DC4775A32555AD979590"
      valueUuid: "target"
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "7E78E558E921797B233EB0656218E3E4"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "findField(clazz:uniqueUuid55,name:uniqueUuid56):field"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "B4394E886934FF175523896008CB1C09"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "makeAccessible(field:field):void"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "8EDF12BD8768BFDE1B926F9D133F6E4B"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "getField(field:field,target:fieldUndertow):object2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "channel"
      modelFingerprint: "8E1231DAA6B0410BF1EAE3B68D7C9EF1"
      valueUuid: "object3"
      methodExercised:
        expression: "getLocalAddress():socketAddress"
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "0DA648D3E65A60D8727130A74962991E"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "findField(clazz:class,name:uniqueUuid63):field2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D59799CAFC96C0482BA7B23AC5F38441"
      valueUuid: "int3"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.net.InetSocketAddress.getPort() : int"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
        parameters:
        - name: "builder"
          value:
            sapientType: "MOCK"
            valueType: "io.undertow.Undertow$Builder"
            uuid: "builder"
        - name: "httpHandlerFactories"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
            uuid: "httpHandlerFactories"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "autoStart"
      valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
      uuid: "target"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid61"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid62"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "CLASS"
      content: !<regular>
        value: "io.undertow.Undertow"
      valueType: "java.lang.Class"
      genericValueType: "io.undertow.Undertow"
      uuid: "uniqueUuid55"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "channels"
      valueType: "java.lang.String"
      uuid: "uniqueUuid56"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid61"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid62"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.xnio.channels.BoundChannel"
          uuid: "object3"
          collectionUuid: "object2"
          explicitCastNeeded: true
      valueType: "java.util.List"
      uuid: "object2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid61"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid62"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "NULL"
      valueType: "io.undertow.Undertow"
      uuid: "fieldUndertow"
    - sapientType: "MOCK"
      valueType: "org.xnio.channels.BoundChannel"
      uuid: "object3"
      collectionUuid: "object2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.net.InetSocketAddress"
        parameters:
        - name: "port"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "socketAddress-port"
      valueType: "java.net.InetSocketAddress"
      uuid: "socketAddress"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "MOCK"
      valueType: "java.lang.reflect.Field"
      uuid: "field2"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.xnio.channels.BoundChannel"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ssl"
      valueType: "java.lang.String"
      uuid: "uniqueUuid63"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int3"
    branches:
    - lineNumber: 204
      expression: "!this.autoStart"
      range: "(204,8)-(204,22)"
      evaluatedAs: false
      internalMethodName: "getActualPorts"
    - lineNumber: 208
      expression: "for-each(extractChannels())"
      range: "(208,33)-(208,49)"
      evaluatedAs: true
      internalMethodName: "getActualPorts"
    - lineNumber: 228
      expression: "socketAddress instanceof InetSocketAddress inetSocketAddress"
      range: "(228,7)-(228,66)"
      evaluatedAs: true
      internalMethodName: "getPortFromChannel"
    - lineNumber: 230
      expression: "sslField != null"
      range: "(230,23)-(230,38)"
      evaluatedAs: true
      internalMethodName: "getPortFromChannel"
    - lineNumber: 213
      expression: "catch-exception (Exception)"
      range: "(213,3)-(213,21)"
      evaluatedAs: true
      internalMethodName: "getActualPorts"
    - lineNumber: 294
      expression: "ports.isEmpty()"
      range: "(294,7)-(294,21)"
      evaluatedAs: false
    catchBlockExercised:
      idExternalInstruction: 3
      id: 5
      catchExceptions:
      - "java.lang.Exception"
- method:
    name: "shutDownGracefully"
    sourceCodeSignature: "void shutDownGracefully(GracefulShutdownCallback callback)"
    returnType: "void"
    parameters:
    - name: "callback"
      type: "org.springframework.boot.web.server.GracefulShutdownCallback"
    instructionFingerprint: "DE5A5E9FB70C38C0AD5507B5DC81603F"
  paths:
  - pathId: "path1"
    testPathName: "shutDownGracefullyWhenThisGracefulShutdownIsNull"
    constructorSignature: "<init>(io.undertow.Undertow$Builder,java.lang.Iterable<org.springframework.boot.web.embedded.undertow.HttpHandlerFactory>,boolean)\
      \ : void"
    modelFingerprint: "9005C89BBA9BDC47B2970B4015664B9E"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "AA1DD5C9AE42F66ED11592A4981EA7F9"
      valueUuid: "target"
    - type: "INPUT"
      name: "callback"
      modelFingerprint: "E794D4594AF84E45AAF8CF2FA83F9BD2"
      valueUuid: "callback"
    - type: "LOCAL_VARIABLE"
      name: "callback"
      modelFingerprint: "E0D029D2A38926D21E0A3FCDB93D0646"
      valueUuid: "callback"
      methodExercised:
        expression: "shutdownComplete(result:Enum-org.springframework.boot.web.server.GracefulShutdownResult-IMMEDIATE):void"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
        parameters:
        - name: "builder"
          value:
            sapientType: "MOCK"
            valueType: "io.undertow.Undertow$Builder"
            uuid: "builder"
        - name: "httpHandlerFactories"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
            uuid: "httpHandlerFactories"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "autoStart"
      valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.server.GracefulShutdownCallback"
      uuid: "callback"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.server.GracefulShutdownCallback"
      uuid: "callback"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ENUM"
      content: !<regular>
        value: "IMMEDIATE"
      valueType: "org.springframework.boot.web.server.GracefulShutdownResult"
      uuid: "Enum-org.springframework.boot.web.server.GracefulShutdownResult-IMMEDIATE"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 302
      expression: "this.gracefulShutdown == null"
      range: "(302,7)-(302,35)"
      evaluatedAs: true
- method:
    name: "getStartLogMessage"
    sourceCodeSignature: "String getStartLogMessage()"
    returnType: "java.lang.String"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "F36B1D506881689B1AD3D1AEF71CF13C"
  paths:
  - pathId: "path1"
    testPathName: "getStartLogMessageWhenPortsNotIsEmpty"
    constructorSignature: "<init>(io.undertow.Undertow$Builder,java.lang.Iterable<org.springframework.boot.web.embedded.undertow.HttpHandlerFactory>,boolean)\
      \ : void"
    modelFingerprint: "A8D47D2696BC42CD905BFD7536ABC893"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "F701E2F8BBD58EC82FAF56181E918588"
      valueUuid: "target"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "014136492887FCB31FF43B4FEAF12F25"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "collectionToDelimitedString(coll:arrayList,delim:uniqueUuid64):string"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C8F8E7B4ACB0F7F36332797DD7549467"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
        parameters:
        - name: "builder"
          value:
            sapientType: "MOCK"
            valueType: "io.undertow.Undertow$Builder"
            uuid: "builder"
        - name: "httpHandlerFactories"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
            uuid: "httpHandlerFactories"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "autoStart"
      valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
      uuid: "target"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "null"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer$Port"
          uuid: "object2"
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer$Port"
      uuid: "arrayList"
    - sapientType: "BASIC"
      content: !<regular>
        value: ", "
      valueType: "java.lang.String"
      uuid: "uniqueUuid64"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Undertow started on port null"
      valueType: "java.lang.String"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 204
      expression: "!this.autoStart"
      range: "(204,8)-(204,22)"
      evaluatedAs: true
      internalMethodName: "getActualPorts"
    - lineNumber: 188
      expression: "ports.size() != 1"
      range: "(188,7)-(188,23)"
      evaluatedAs: false
      internalMethodName: "getPortsDescription"
    - lineNumber: 192
      expression: "!ports.isEmpty()"
      range: "(192,7)-(192,22)"
      evaluatedAs: true
      internalMethodName: "getPortsDescription"
  - pathId: "path5"
    testPathName: "getStartLogMessageWhenPortsIsEmpty"
    constructorSignature: "<init>(io.undertow.Undertow$Builder,java.lang.Iterable<org.springframework.boot.web.embedded.undertow.HttpHandlerFactory>,boolean)\
      \ : void"
    modelFingerprint: "8C554818DC6E8E72FBF8803CD27E87FC"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "2CB5058B67C5DC4775A32555AD979590"
      valueUuid: "target"
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "7E78E558E921797B233EB0656218E3E4"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "findField(clazz:uniqueUuid65,name:uniqueUuid66):field"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "B4394E886934FF175523896008CB1C09"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "makeAccessible(field:field):void"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "425F7DB1E6657282F3A354CC620956DC"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "getField(field:field,target:fieldUndertow):object2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "243BEF753BB3BBC152DF43A872FD2C83"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
        parameters:
        - name: "builder"
          value:
            sapientType: "MOCK"
            valueType: "io.undertow.Undertow$Builder"
            uuid: "builder"
        - name: "httpHandlerFactories"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
            uuid: "httpHandlerFactories"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "autoStart"
      valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
      uuid: "target"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid71"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid72"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "CLASS"
      content: !<regular>
        value: "io.undertow.Undertow"
      valueType: "java.lang.Class"
      genericValueType: "io.undertow.Undertow"
      uuid: "uniqueUuid65"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "channels"
      valueType: "java.lang.String"
      uuid: "uniqueUuid66"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid71"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid72"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      uuid: "object2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid71"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid72"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "NULL"
      valueType: "io.undertow.Undertow"
      uuid: "fieldUndertow"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Undertow started on ports unknown"
      valueType: "java.lang.String"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 204
      expression: "!this.autoStart"
      range: "(204,8)-(204,22)"
      evaluatedAs: false
      internalMethodName: "getActualPorts"
    - lineNumber: 208
      expression: "for-each(extractChannels())"
      range: "(208,33)-(208,49)"
      evaluatedAs: false
      internalMethodName: "getActualPorts"
    - lineNumber: 188
      expression: "ports.size() != 1"
      range: "(188,7)-(188,23)"
      evaluatedAs: true
      internalMethodName: "getPortsDescription"
    - lineNumber: 192
      expression: "!ports.isEmpty()"
      range: "(192,7)-(192,22)"
      evaluatedAs: false
      internalMethodName: "getPortsDescription"
  - pathId: "path4"
    testPathName: "getStartLogMessageWhenPortsSizeEquals1AndPortsNotIsEmpty"
    constructorSignature: "<init>(io.undertow.Undertow$Builder,java.lang.Iterable<org.springframework.boot.web.embedded.undertow.HttpHandlerFactory>,boolean)\
      \ : void"
    modelFingerprint: "1234613156C8E5642E2D2E46D0860672"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "AA010FEB5B89C095B359C4DC7AF56C81"
      valueUuid: "target"
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "7E78E558E921797B233EB0656218E3E4"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "findField(clazz:uniqueUuid1,name:uniqueUuid2):field"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "B4394E886934FF175523896008CB1C09"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "makeAccessible(field:field):void"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "8EDF12BD8768BFDE1B926F9D133F6E4B"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "getField(field:field,target:fieldUndertow):object2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "channel"
      modelFingerprint: "2971F779A48B5AE7E14B68408087E1CE"
      valueUuid: "object3"
      methodExercised:
        expression: "getLocalAddress():socketAddress"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "8C888319AEC3FD60180518A829F29FEF"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "collectionToDelimitedString(coll:arrayList,delim:uniqueUuid9):string"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "3CA3FB7A695A228EB769F5D130B697BE"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
        parameters:
        - name: "builder"
          value:
            sapientType: "MOCK"
            valueType: "io.undertow.Undertow$Builder"
            uuid: "builder"
        - name: "httpHandlerFactories"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
            uuid: "httpHandlerFactories"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "autoStart"
      valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
      uuid: "target"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid7"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid8"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "CLASS"
      content: !<regular>
        value: "io.undertow.Undertow"
      valueType: "java.lang.Class"
      genericValueType: "io.undertow.Undertow"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "channels"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid7"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid8"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.xnio.channels.BoundChannel"
          uuid: "object3"
          collectionUuid: "object2"
          explicitCastNeeded: true
      valueType: "java.util.List"
      uuid: "object2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid7"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid8"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "NULL"
      valueType: "io.undertow.Undertow"
      uuid: "fieldUndertow"
    - sapientType: "MOCK"
      valueType: "org.xnio.channels.BoundChannel"
      uuid: "object3"
      collectionUuid: "object2"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "java.net.SocketAddress"
      uuid: "socketAddress"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "NULL"
          valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer$Port"
          uuid: "undertowWebServer.Port"
          fixed: true
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer$Port"
      uuid: "arrayList"
    - sapientType: "BASIC"
      content: !<regular>
        value: ", "
      valueType: "java.lang.String"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Undertow started on port "
      valueType: "java.lang.String"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 204
      expression: "!this.autoStart"
      range: "(204,8)-(204,22)"
      evaluatedAs: false
      internalMethodName: "getActualPorts"
    - lineNumber: 208
      expression: "for-each(extractChannels())"
      range: "(208,33)-(208,49)"
      evaluatedAs: true
      internalMethodName: "getActualPorts"
    - lineNumber: 228
      expression: "socketAddress instanceof InetSocketAddress inetSocketAddress"
      range: "(228,7)-(228,66)"
      evaluatedAs: false
      internalMethodName: "getPortFromChannel"
    - lineNumber: 188
      expression: "ports.size() != 1"
      range: "(188,7)-(188,23)"
      evaluatedAs: false
      internalMethodName: "getPortsDescription"
    - lineNumber: 192
      expression: "!ports.isEmpty()"
      range: "(192,7)-(192,22)"
      evaluatedAs: true
      internalMethodName: "getPortsDescription"
  - pathId: "path8"
    testPathName: "getStartLogMessageWhenPortsSizeNotEquals1AndPortsIsEmpty"
    constructorSignature: "<init>(io.undertow.Undertow$Builder,java.lang.Iterable<org.springframework.boot.web.embedded.undertow.HttpHandlerFactory>,boolean)\
      \ : void"
    modelFingerprint: "B224A40247B589EBEFB7D88F8ECC56E2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "2CB5058B67C5DC4775A32555AD979590"
      valueUuid: "target"
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "7E78E558E921797B233EB0656218E3E4"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "findField(clazz:uniqueUuid1,name:uniqueUuid2):field"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "B4394E886934FF175523896008CB1C09"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "makeAccessible(field:field):void"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "2B4EE28D1D7C9BC8BE08EF9CB7726F4F"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "getField(field:field,target:fieldUndertow):object2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "243BEF753BB3BBC152DF43A872FD2C83"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
        parameters:
        - name: "builder"
          value:
            sapientType: "MOCK"
            valueType: "io.undertow.Undertow$Builder"
            uuid: "builder"
        - name: "httpHandlerFactories"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
            uuid: "httpHandlerFactories"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "autoStart"
      valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
      uuid: "target"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid7"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid8"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "CLASS"
      content: !<regular>
        value: "io.undertow.Undertow"
      valueType: "java.lang.Class"
      genericValueType: "io.undertow.Undertow"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "channels"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid7"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid8"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.RuntimeException"
        parameters: []
      valueType: "java.lang.RuntimeException"
      uuid: "object2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid7"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid8"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "NULL"
      valueType: "io.undertow.Undertow"
      uuid: "fieldUndertow"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Undertow started on ports unknown"
      valueType: "java.lang.String"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 204
      expression: "!this.autoStart"
      range: "(204,8)-(204,22)"
      evaluatedAs: false
      internalMethodName: "getActualPorts"
    - lineNumber: 213
      expression: "catch-exception (Exception)"
      range: "(213,3)-(213,21)"
      evaluatedAs: true
      internalMethodName: "getActualPorts"
    - lineNumber: 188
      expression: "ports.size() != 1"
      range: "(188,7)-(188,23)"
      evaluatedAs: true
      internalMethodName: "getPortsDescription"
    - lineNumber: 192
      expression: "!ports.isEmpty()"
      range: "(192,7)-(192,22)"
      evaluatedAs: false
      internalMethodName: "getPortsDescription"
    catchBlockExercised:
      idExternalInstruction: 9
      id: 5
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path2"
    testPathName: "getStartLogMessageWhenSslFieldIsNotNullAndPortsSizeEquals1AndPortsNotIsEmpty"
    constructorSignature: "<init>(io.undertow.Undertow$Builder,java.lang.Iterable<org.springframework.boot.web.embedded.undertow.HttpHandlerFactory>,boolean)\
      \ : void"
    modelFingerprint: "BAAB15547A1AC6CAB12EAAC7C775BA27"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "2CB5058B67C5DC4775A32555AD979590"
      valueUuid: "target"
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "7E78E558E921797B233EB0656218E3E4"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "findField(clazz:uniqueUuid90,name:uniqueUuid91):field"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "B4394E886934FF175523896008CB1C09"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "makeAccessible(field:field):void"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "8EDF12BD8768BFDE1B926F9D133F6E4B"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "getField(field:field,target:fieldUndertow):object2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "channel"
      modelFingerprint: "8E1231DAA6B0410BF1EAE3B68D7C9EF1"
      valueUuid: "object3"
      methodExercised:
        expression: "getLocalAddress():socketAddress"
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "0DA648D3E65A60D8727130A74962991E"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "findField(clazz:class,name:uniqueUuid98):field2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "014136492887FCB31FF43B4FEAF12F25"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "collectionToDelimitedString(coll:arrayList,delim:uniqueUuid99):string2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C8F8E7B4ACB0F7F36332797DD7549467"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.net.InetSocketAddress.getPort() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
        parameters:
        - name: "builder"
          value:
            sapientType: "MOCK"
            valueType: "io.undertow.Undertow$Builder"
            uuid: "builder"
        - name: "httpHandlerFactories"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
            uuid: "httpHandlerFactories"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "autoStart"
      valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
      uuid: "target"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid96"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid97"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "CLASS"
      content: !<regular>
        value: "io.undertow.Undertow"
      valueType: "java.lang.Class"
      genericValueType: "io.undertow.Undertow"
      uuid: "uniqueUuid90"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "channels"
      valueType: "java.lang.String"
      uuid: "uniqueUuid91"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid96"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid97"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.xnio.channels.BoundChannel"
          uuid: "object3"
          collectionUuid: "object2"
          explicitCastNeeded: true
      valueType: "java.util.List"
      uuid: "object2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid96"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid97"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "NULL"
      valueType: "io.undertow.Undertow"
      uuid: "fieldUndertow"
    - sapientType: "MOCK"
      valueType: "org.xnio.channels.BoundChannel"
      uuid: "object3"
      collectionUuid: "object2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.net.InetSocketAddress"
        parameters:
        - name: "port"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "socketAddress-port"
      valueType: "java.net.InetSocketAddress"
      uuid: "socketAddress"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "MOCK"
      valueType: "java.lang.reflect.Field"
      uuid: "field2"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.xnio.channels.BoundChannel"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ssl"
      valueType: "java.lang.String"
      uuid: "uniqueUuid98"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "null"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer$Port"
          uuid: "undertowWebServer.Port"
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer$Port"
      uuid: "arrayList"
    - sapientType: "BASIC"
      content: !<regular>
        value: ", "
      valueType: "java.lang.String"
      uuid: "uniqueUuid99"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Undertow started on port null"
      valueType: "java.lang.String"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 204
      expression: "!this.autoStart"
      range: "(204,8)-(204,22)"
      evaluatedAs: false
      internalMethodName: "getActualPorts"
    - lineNumber: 208
      expression: "for-each(extractChannels())"
      range: "(208,33)-(208,49)"
      evaluatedAs: true
      internalMethodName: "getActualPorts"
    - lineNumber: 228
      expression: "socketAddress instanceof InetSocketAddress inetSocketAddress"
      range: "(228,7)-(228,66)"
      evaluatedAs: true
      internalMethodName: "getPortFromChannel"
    - lineNumber: 230
      expression: "sslField != null"
      range: "(230,23)-(230,38)"
      evaluatedAs: true
      internalMethodName: "getPortFromChannel"
    - lineNumber: 188
      expression: "ports.size() != 1"
      range: "(188,7)-(188,23)"
      evaluatedAs: false
      internalMethodName: "getPortsDescription"
    - lineNumber: 192
      expression: "!ports.isEmpty()"
      range: "(192,7)-(192,22)"
      evaluatedAs: true
      internalMethodName: "getPortsDescription"
  - pathId: "path3"
    testPathName: "getStartLogMessageWhenSslFieldIsNullAndPortsSizeEquals1AndPortsNotIsEmpty"
    constructorSignature: "<init>(io.undertow.Undertow$Builder,java.lang.Iterable<org.springframework.boot.web.embedded.undertow.HttpHandlerFactory>,boolean)\
      \ : void"
    modelFingerprint: "F5C9B72C092CE3711D86531EA1134ACF"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "2CB5058B67C5DC4775A32555AD979590"
      valueUuid: "target"
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "7E78E558E921797B233EB0656218E3E4"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "findField(clazz:uniqueUuid100,name:uniqueUuid101):field"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "B4394E886934FF175523896008CB1C09"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "makeAccessible(field:field):void"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "8EDF12BD8768BFDE1B926F9D133F6E4B"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "getField(field:field,target:fieldUndertow):object2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "channel"
      modelFingerprint: "8E1231DAA6B0410BF1EAE3B68D7C9EF1"
      valueUuid: "object3"
      methodExercised:
        expression: "getLocalAddress():socketAddress"
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "48E9D928337D8AF91B79F9CBDB419D42"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "findField(clazz:class,name:uniqueUuid108):field2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "014136492887FCB31FF43B4FEAF12F25"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "collectionToDelimitedString(coll:arrayList,delim:uniqueUuid109):string2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C8F8E7B4ACB0F7F36332797DD7549467"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.net.InetSocketAddress.getPort() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
        parameters:
        - name: "builder"
          value:
            sapientType: "MOCK"
            valueType: "io.undertow.Undertow$Builder"
            uuid: "builder"
        - name: "httpHandlerFactories"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
            uuid: "httpHandlerFactories"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "autoStart"
      valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
      uuid: "target"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid106"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid107"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "CLASS"
      content: !<regular>
        value: "io.undertow.Undertow"
      valueType: "java.lang.Class"
      genericValueType: "io.undertow.Undertow"
      uuid: "uniqueUuid100"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "channels"
      valueType: "java.lang.String"
      uuid: "uniqueUuid101"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid106"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid107"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.xnio.channels.BoundChannel"
          uuid: "object3"
          collectionUuid: "object2"
          explicitCastNeeded: true
      valueType: "java.util.List"
      uuid: "object2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid106"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid107"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "NULL"
      valueType: "io.undertow.Undertow"
      uuid: "fieldUndertow"
    - sapientType: "MOCK"
      valueType: "org.xnio.channels.BoundChannel"
      uuid: "object3"
      collectionUuid: "object2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.net.InetSocketAddress"
        parameters:
        - name: "port"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "socketAddress-port"
      valueType: "java.net.InetSocketAddress"
      uuid: "socketAddress"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "NULL"
      valueType: "java.lang.reflect.Field"
      uuid: "field2"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.xnio.channels.BoundChannel"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ssl"
      valueType: "java.lang.String"
      uuid: "uniqueUuid108"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "null"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer$Port"
          uuid: "undertowWebServer.Port"
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer$Port"
      uuid: "arrayList"
    - sapientType: "BASIC"
      content: !<regular>
        value: ", "
      valueType: "java.lang.String"
      uuid: "uniqueUuid109"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Undertow started on port null"
      valueType: "java.lang.String"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 204
      expression: "!this.autoStart"
      range: "(204,8)-(204,22)"
      evaluatedAs: false
      internalMethodName: "getActualPorts"
    - lineNumber: 208
      expression: "for-each(extractChannels())"
      range: "(208,33)-(208,49)"
      evaluatedAs: true
      internalMethodName: "getActualPorts"
    - lineNumber: 228
      expression: "socketAddress instanceof InetSocketAddress inetSocketAddress"
      range: "(228,7)-(228,66)"
      evaluatedAs: true
      internalMethodName: "getPortFromChannel"
    - lineNumber: 230
      expression: "sslField != null"
      range: "(230,23)-(230,38)"
      evaluatedAs: false
      internalMethodName: "getPortFromChannel"
    - lineNumber: 188
      expression: "ports.size() != 1"
      range: "(188,7)-(188,23)"
      evaluatedAs: false
      internalMethodName: "getPortsDescription"
    - lineNumber: 192
      expression: "!ports.isEmpty()"
      range: "(192,7)-(192,22)"
      evaluatedAs: true
      internalMethodName: "getPortsDescription"
  - pathId: "path7"
    testPathName: "getStartLogMessageWhenCaughtExceptionAndPortsSizeEquals1AndPortsNotIsEmpty"
    constructorSignature: "<init>(io.undertow.Undertow$Builder,java.lang.Iterable<org.springframework.boot.web.embedded.undertow.HttpHandlerFactory>,boolean)\
      \ : void"
    modelFingerprint: "DCA2EFFA8C41D382CB25F4A0DC55DE0A"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "AA010FEB5B89C095B359C4DC7AF56C81"
      valueUuid: "target"
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "7E78E558E921797B233EB0656218E3E4"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "findField(clazz:uniqueUuid1,name:uniqueUuid2):field"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "B4394E886934FF175523896008CB1C09"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "makeAccessible(field:field):void"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "8EDF12BD8768BFDE1B926F9D133F6E4B"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "getField(field:field,target:fieldUndertow):object2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "channel"
      modelFingerprint: "229C40427C3B4923A4CAD5827AE1B9DA"
      valueUuid: "object3"
      methodExercised:
        expression: "getLocalAddress():socketAddress"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "243BEF753BB3BBC152DF43A872FD2C83"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
        parameters:
        - name: "builder"
          value:
            sapientType: "MOCK"
            valueType: "io.undertow.Undertow$Builder"
            uuid: "builder"
        - name: "httpHandlerFactories"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
            uuid: "httpHandlerFactories"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "autoStart"
      valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
      uuid: "target"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid7"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid8"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "CLASS"
      content: !<regular>
        value: "io.undertow.Undertow"
      valueType: "java.lang.Class"
      genericValueType: "io.undertow.Undertow"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "channels"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid7"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid8"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.xnio.channels.BoundChannel"
          uuid: "object3"
          collectionUuid: "object2"
          explicitCastNeeded: true
      valueType: "java.util.List"
      uuid: "object2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid7"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid8"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "NULL"
      valueType: "io.undertow.Undertow"
      uuid: "fieldUndertow"
    - sapientType: "MOCK"
      valueType: "org.xnio.channels.BoundChannel"
      uuid: "object3"
      collectionUuid: "object2"
      explicitCastNeeded: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.RuntimeException"
        parameters: []
      valueType: "java.lang.RuntimeException"
      uuid: "socketAddress"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Undertow started on ports unknown"
      valueType: "java.lang.String"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 204
      expression: "!this.autoStart"
      range: "(204,8)-(204,22)"
      evaluatedAs: false
      internalMethodName: "getActualPorts"
    - lineNumber: 208
      expression: "for-each(extractChannels())"
      range: "(208,33)-(208,49)"
      evaluatedAs: true
      internalMethodName: "getActualPorts"
    - lineNumber: 213
      expression: "catch-exception (Exception)"
      range: "(213,3)-(213,21)"
      evaluatedAs: true
      internalMethodName: "getActualPorts"
    - lineNumber: 188
      expression: "ports.size() != 1"
      range: "(188,7)-(188,23)"
      evaluatedAs: true
      internalMethodName: "getPortsDescription"
    - lineNumber: 192
      expression: "!ports.isEmpty()"
      range: "(192,7)-(192,22)"
      evaluatedAs: false
      internalMethodName: "getPortsDescription"
    catchBlockExercised:
      idExternalInstruction: 9
      id: 5
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path6"
    testPathName: "getStartLogMessageWhenSslFieldIsNotNullAndCaughtExceptionAndPortsSizeEquals1AndPortsNotIsEmpty"
    constructorSignature: "<init>(io.undertow.Undertow$Builder,java.lang.Iterable<org.springframework.boot.web.embedded.undertow.HttpHandlerFactory>,boolean)\
      \ : void"
    modelFingerprint: "4008FA6EBD89878BB9463903E58E695B"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "2CB5058B67C5DC4775A32555AD979590"
      valueUuid: "target"
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "7E78E558E921797B233EB0656218E3E4"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "findField(clazz:uniqueUuid119,name:uniqueUuid120):field"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class.real"
      modelFingerprint: "B4394E886934FF175523896008CB1C09"
      valueUuid: "ReflectionUtils.class.real"
      methodExercised:
        expression: "makeAccessible(field:field):void"
        staticAccess: true
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "8EDF12BD8768BFDE1B926F9D133F6E4B"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "getField(field:field,target:fieldUndertow):object2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "channel"
      modelFingerprint: "8E1231DAA6B0410BF1EAE3B68D7C9EF1"
      valueUuid: "object3"
      methodExercised:
        expression: "getLocalAddress():socketAddress"
    - type: "STATIC"
      name: "ReflectionUtils.class"
      modelFingerprint: "0DA648D3E65A60D8727130A74962991E"
      valueUuid: "ReflectionUtils.class"
      methodExercised:
        expression: "findField(clazz:class,name:uniqueUuid127):field2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "014136492887FCB31FF43B4FEAF12F25"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "collectionToDelimitedString(coll:arrayList,delim:uniqueUuid128):string2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C8F8E7B4ACB0F7F36332797DD7549467"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.net.InetSocketAddress.getPort() : int"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
        parameters:
        - name: "builder"
          value:
            sapientType: "MOCK"
            valueType: "io.undertow.Undertow$Builder"
            uuid: "builder"
        - name: "httpHandlerFactories"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.web.embedded.undertow.HttpHandlerFactory"
            uuid: "httpHandlerFactories"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "autoStart"
      valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer"
      uuid: "target"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid125"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid126"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "CLASS"
      content: !<regular>
        value: "io.undertow.Undertow"
      valueType: "java.lang.Class"
      genericValueType: "io.undertow.Undertow"
      uuid: "uniqueUuid119"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "channels"
      valueType: "java.lang.String"
      uuid: "uniqueUuid120"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid125"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid126"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.xnio.channels.BoundChannel"
          uuid: "object3"
          collectionUuid: "object2"
          explicitCastNeeded: true
      valueType: "java.util.List"
      uuid: "object2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ReflectionUtils"
        method: "findField"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "io.undertow.Undertow"
            valueType: "java.lang.Class"
            genericValueType: "io.undertow.Undertow"
            uuid: "uniqueUuid125"
            fixed: true
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "channels"
            valueType: "java.lang.String"
            uuid: "uniqueUuid126"
            fixed: true
      valueType: "java.lang.reflect.Field"
      uuid: "field"
    - sapientType: "NULL"
      valueType: "io.undertow.Undertow"
      uuid: "fieldUndertow"
    - sapientType: "MOCK"
      valueType: "org.xnio.channels.BoundChannel"
      uuid: "object3"
      collectionUuid: "object2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.net.InetSocketAddress"
        parameters:
        - name: "port"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "socketAddress-port"
      valueType: "java.net.InetSocketAddress"
      uuid: "socketAddress"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ReflectionUtils"
      uuid: "ReflectionUtils.class"
    - sapientType: "MOCK"
      valueType: "java.lang.reflect.Field"
      uuid: "field2"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.xnio.channels.BoundChannel"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ssl"
      valueType: "java.lang.String"
      uuid: "uniqueUuid127"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "null"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          valueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer$Port"
          uuid: "undertowWebServer.Port"
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.web.embedded.undertow.UndertowWebServer$Port"
      uuid: "arrayList"
    - sapientType: "BASIC"
      content: !<regular>
        value: ", "
      valueType: "java.lang.String"
      uuid: "uniqueUuid128"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Undertow started on port null"
      valueType: "java.lang.String"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 204
      expression: "!this.autoStart"
      range: "(204,8)-(204,22)"
      evaluatedAs: false
      internalMethodName: "getActualPorts"
    - lineNumber: 208
      expression: "for-each(extractChannels())"
      range: "(208,33)-(208,49)"
      evaluatedAs: true
      internalMethodName: "getActualPorts"
    - lineNumber: 228
      expression: "socketAddress instanceof InetSocketAddress inetSocketAddress"
      range: "(228,7)-(228,66)"
      evaluatedAs: true
      internalMethodName: "getPortFromChannel"
    - lineNumber: 230
      expression: "sslField != null"
      range: "(230,23)-(230,38)"
      evaluatedAs: true
      internalMethodName: "getPortFromChannel"
    - lineNumber: 213
      expression: "catch-exception (Exception)"
      range: "(213,3)-(213,21)"
      evaluatedAs: true
      internalMethodName: "getActualPorts"
    - lineNumber: 188
      expression: "ports.size() != 1"
      range: "(188,7)-(188,23)"
      evaluatedAs: false
      internalMethodName: "getPortsDescription"
    - lineNumber: 192
      expression: "!ports.isEmpty()"
      range: "(192,7)-(192,22)"
      evaluatedAs: true
      internalMethodName: "getPortsDescription"
    catchBlockExercised:
      idExternalInstruction: 9
      id: 5
      catchExceptions:
      - "java.lang.Exception"
