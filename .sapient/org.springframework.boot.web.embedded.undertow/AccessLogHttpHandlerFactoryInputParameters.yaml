---
modelFingerprint: "D15FCCB2FF0176AEC7EFC1B79A082576"
targetClass:
  fullClassName: "org.springframework.boot.web.embedded.undertow.AccessLogHttpHandlerFactory"
methods:
- method:
    name: "getHandler"
    sourceCodeSignature: "HttpHandler getHandler(HttpHandler next)"
    returnType: "io.undertow.server.HttpHandler"
    parameters:
    - name: "next"
      type: "io.undertow.server.HttpHandler"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
    instructionFingerprint: "A73B3F0218BD42780AEF1A1D2973A970"
  paths:
  - pathId: "path6"
    testPathName: "getHandlerWhenThisDirectoryNotIsDirectoryAndThisDirectoryNotMkdirsThrowsIllegalStateException"
    constructorSignature: "<init>(java.io.File,java.lang.String,java.lang.String,java.lang.String,boolean)\
      \ : void"
    modelFingerprint: "A0977384CE1F33B9175EB8AFA00AFEEA"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "AA49654F1A0BDE6971DD3C63D7D95B03"
      valueUuid: "target"
    - type: "INPUT"
      name: "next"
      modelFingerprint: "E47074E28A8499F1A1530E8A3280B37E"
      valueUuid: "next"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "97F79BB73E196BC44BB28AFE79CA35FF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid1,message:uniqueUuid2):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "E4BB5817884D87EE34A3CCAB49016D37"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.io.File.isDirectory() : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.AccessLogHttpHandlerFactory"
        parameters:
        - name: "directory"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.File"
              parameters:
              - name: "pathname"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "pathname1"
                  valueType: "java.lang.String"
                  uuid: "directory-pathname"
            valueType: "java.io.File"
            uuid: "directory"
            fixed: true
            nameForMock: "directory"
        - name: "pattern"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pattern1"
            valueType: "java.lang.String"
            uuid: "pattern"
        - name: "prefix"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "prefix1"
            valueType: "java.lang.String"
            uuid: "prefix"
        - name: "suffix"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "suffix1"
            valueType: "java.lang.String"
            uuid: "suffix"
        - name: "rotate"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "rotate"
      valueType: "org.springframework.boot.web.embedded.undertow.AccessLogHttpHandlerFactory"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "io.undertow.server.HttpHandler"
      uuid: "next"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Access log directory is not set"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Failed to create access log directory 'directory'"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 77
      expression: "this.directory != null"
      range: "(77,16)-(77,37)"
      evaluatedAs: false
      internalMethodName: "createAccessLogDirectoryIfNecessary"
    - lineNumber: 78
      expression: "!this.directory.isDirectory()"
      range: "(78,7)-(78,35)"
      evaluatedAs: true
      internalMethodName: "createAccessLogDirectoryIfNecessary"
    - lineNumber: 78
      expression: "!this.directory.mkdirs()"
      range: "(78,40)-(78,63)"
      evaluatedAs: true
      internalMethodName: "createAccessLogDirectoryIfNecessary"
  - pathId: "path2"
    testPathName: "getHandlerWhenThisPatternIsNotNull"
    constructorSignature: "<init>(java.io.File,java.lang.String,java.lang.String,java.lang.String,boolean)\
      \ : void"
    modelFingerprint: "29ED4690898EF622DFA813B14F51E242"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "6E3FBBE771ABC4B76ACC9ED720ED1ADE"
      valueUuid: "target"
    - type: "INPUT"
      name: "next"
      modelFingerprint: "E47074E28A8499F1A1530E8A3280B37E"
      valueUuid: "next"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "4FFB64CDBC7DAA8CD004D28A7A9D220D"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "state(expression:uniqueUuid3,message:uniqueUuid4):void"
        staticAccess: true
    - type: "STATIC"
      name: "Xnio.class"
      modelFingerprint: "1269B05F86E6D38CAB6644C04CF09E7A"
      valueUuid: "Xnio.class"
      methodExercised:
        expression: "getInstance(classLoader:classLoader):xnio"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "57CBCD2AD17929CE0DC69DAC19C4EC04"
      valueUuid: "optionMap.Builder"
      methodExercised:
        expression: "set(key:option,value:uniqueUuid6):optionMap.Builder2"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "03C8EA29BAA8E4B59F4FB93535E7B40B"
      valueUuid: "optionMap.Builder2"
      methodExercised:
        expression: "getMap():optionMap"
    - type: "LOCAL_VARIABLE"
      name: "xnio"
      modelFingerprint: "A4E040C3FBCFCA6E962001F76E681804"
      valueUuid: "xnio"
      methodExercised:
        expression: "createWorker(optionMap:optionMap):xnioWorker"
        throwsExceptions:
        - "java.io.IOException"
        - "java.lang.IllegalArgumentException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "BAC21880619A3EF3F36546F285D2C106"
      valueUuid: "accessLogHttpHandlerFactory.ClosableAccessLogHandlerNotNull"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.io.File.isDirectory() : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.AccessLogHttpHandlerFactory"
        parameters:
        - name: "directory"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.File"
              parameters:
              - name: "pathname"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "pathname1"
                  valueType: "java.lang.String"
                  uuid: "directory-pathname"
            valueType: "java.io.File"
            uuid: "directory"
        - name: "pattern"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pattern1"
            valueType: "java.lang.String"
            uuid: "pattern"
        - name: "prefix"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "prefix1"
            valueType: "java.lang.String"
            uuid: "prefix"
        - name: "suffix"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "suffix1"
            valueType: "java.lang.String"
            uuid: "suffix"
        - name: "rotate"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "rotate"
      valueType: "org.springframework.boot.web.embedded.undertow.AccessLogHttpHandlerFactory"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "io.undertow.server.HttpHandler"
      uuid: "next"
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Access log directory is not set"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.xnio.Xnio"
      uuid: "Xnio.class"
    - sapientType: "MOCK"
      valueType: "org.xnio.Xnio"
      uuid: "xnio"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "io.undertow.Undertow"
          valueType: "java.lang.Class"
          genericValueType: "io.undertow.Undertow"
          uuid: "uniqueUuid5"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.xnio.OptionMap$Builder"
      uuid: "optionMap.Builder"
    - sapientType: "MOCK"
      valueType: "org.xnio.OptionMap$Builder"
      uuid: "optionMap.Builder2"
    - sapientType: "OBJECT"
      content: !<static_field_return>
        target: "org.xnio.Options"
        fieldName: "THREAD_DAEMON"
      valueType: "org.xnio.Option"
      genericValueType: "java.lang.Boolean"
      uuid: "option"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.xnio.OptionMap$Builder"
      uuid: "optionMap.Builder2"
    - sapientType: "MOCK"
      valueType: "org.xnio.OptionMap"
      uuid: "optionMap"
    - sapientType: "MOCK"
      valueType: "org.xnio.Xnio"
      uuid: "xnio"
    - sapientType: "MOCK"
      valueType: "org.xnio.XnioWorker"
      uuid: "xnioWorker"
    - sapientType: "MOCK"
      valueType: "org.xnio.OptionMap"
      uuid: "optionMap"
    - sapientType: "NOT_NULL"
      valueType: "io.undertow.server.HttpHandler"
      uuid: "accessLogHttpHandlerFactory.ClosableAccessLogHandlerNotNull"
      fixed: true
    branches:
    - lineNumber: 77
      expression: "this.directory != null"
      range: "(77,16)-(77,37)"
      evaluatedAs: true
      internalMethodName: "createAccessLogDirectoryIfNecessary"
    - lineNumber: 78
      expression: "!this.directory.isDirectory()"
      range: "(78,7)-(78,35)"
      evaluatedAs: true
      internalMethodName: "createAccessLogDirectoryIfNecessary"
    - lineNumber: 78
      expression: "!this.directory.mkdirs()"
      range: "(78,40)-(78,63)"
      evaluatedAs: false
      internalMethodName: "createAccessLogDirectoryIfNecessary"
    - lineNumber: 65
      expression: "this.prefix != null"
      range: "(65,23)-(65,41)"
      evaluatedAs: true
    - lineNumber: 66
      expression: "this.pattern != null"
      range: "(66,27)-(66,46)"
      evaluatedAs: true
  - pathId: "path5"
    testPathName: "getHandlerWhenThisPrefixIsNullAndThisPatternIsNull"
    constructorSignature: "<init>(java.io.File,java.lang.String,java.lang.String,java.lang.String,boolean)\
      \ : void"
    modelFingerprint: "F5FB178049C85BE7F41F4432249B3FFF"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "FCA5EEEC8C358F06C09E6C4191746BCC"
      valueUuid: "target"
    - type: "INPUT"
      name: "next"
      modelFingerprint: "E47074E28A8499F1A1530E8A3280B37E"
      valueUuid: "next"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "4FFB64CDBC7DAA8CD004D28A7A9D220D"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "state(expression:uniqueUuid7,message:uniqueUuid8):void"
        staticAccess: true
    - type: "STATIC"
      name: "Xnio.class"
      modelFingerprint: "1269B05F86E6D38CAB6644C04CF09E7A"
      valueUuid: "Xnio.class"
      methodExercised:
        expression: "getInstance(classLoader:classLoader):xnio"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "57CBCD2AD17929CE0DC69DAC19C4EC04"
      valueUuid: "optionMap.Builder"
      methodExercised:
        expression: "set(key:option,value:uniqueUuid10):optionMap.Builder2"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "03C8EA29BAA8E4B59F4FB93535E7B40B"
      valueUuid: "optionMap.Builder2"
      methodExercised:
        expression: "getMap():optionMap"
    - type: "LOCAL_VARIABLE"
      name: "xnio"
      modelFingerprint: "A4E040C3FBCFCA6E962001F76E681804"
      valueUuid: "xnio"
      methodExercised:
        expression: "createWorker(optionMap:optionMap):xnioWorker"
        throwsExceptions:
        - "java.io.IOException"
        - "java.lang.IllegalArgumentException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "BAC21880619A3EF3F36546F285D2C106"
      valueUuid: "accessLogHttpHandlerFactory.ClosableAccessLogHandlerNotNull"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.io.File.isDirectory() : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.AccessLogHttpHandlerFactory"
        parameters:
        - name: "directory"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.File"
              parameters:
              - name: "pathname"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "pathname1"
                  valueType: "java.lang.String"
                  uuid: "directory-pathname"
            valueType: "java.io.File"
            uuid: "directory"
        - name: "pattern"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "pattern"
            fixed: true
        - name: "prefix"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "prefix"
            fixed: true
        - name: "suffix"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "suffix1"
            valueType: "java.lang.String"
            uuid: "suffix"
        - name: "rotate"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "rotate"
      valueType: "org.springframework.boot.web.embedded.undertow.AccessLogHttpHandlerFactory"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "io.undertow.server.HttpHandler"
      uuid: "next"
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Access log directory is not set"
      valueType: "java.lang.String"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.xnio.Xnio"
      uuid: "Xnio.class"
    - sapientType: "MOCK"
      valueType: "org.xnio.Xnio"
      uuid: "xnio"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "io.undertow.Undertow"
          valueType: "java.lang.Class"
          genericValueType: "io.undertow.Undertow"
          uuid: "uniqueUuid9"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.xnio.OptionMap$Builder"
      uuid: "optionMap.Builder"
    - sapientType: "MOCK"
      valueType: "org.xnio.OptionMap$Builder"
      uuid: "optionMap.Builder2"
    - sapientType: "OBJECT"
      content: !<static_field_return>
        target: "org.xnio.Options"
        fieldName: "THREAD_DAEMON"
      valueType: "org.xnio.Option"
      genericValueType: "java.lang.Boolean"
      uuid: "option"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.xnio.OptionMap$Builder"
      uuid: "optionMap.Builder2"
    - sapientType: "MOCK"
      valueType: "org.xnio.OptionMap"
      uuid: "optionMap"
    - sapientType: "MOCK"
      valueType: "org.xnio.Xnio"
      uuid: "xnio"
    - sapientType: "MOCK"
      valueType: "org.xnio.XnioWorker"
      uuid: "xnioWorker"
    - sapientType: "MOCK"
      valueType: "org.xnio.OptionMap"
      uuid: "optionMap"
    - sapientType: "NOT_NULL"
      valueType: "io.undertow.server.HttpHandler"
      uuid: "accessLogHttpHandlerFactory.ClosableAccessLogHandlerNotNull"
      fixed: true
    branches:
    - lineNumber: 77
      expression: "this.directory != null"
      range: "(77,16)-(77,37)"
      evaluatedAs: true
      internalMethodName: "createAccessLogDirectoryIfNecessary"
    - lineNumber: 78
      expression: "!this.directory.isDirectory()"
      range: "(78,7)-(78,35)"
      evaluatedAs: true
      internalMethodName: "createAccessLogDirectoryIfNecessary"
    - lineNumber: 78
      expression: "!this.directory.mkdirs()"
      range: "(78,40)-(78,63)"
      evaluatedAs: false
      internalMethodName: "createAccessLogDirectoryIfNecessary"
    - lineNumber: 65
      expression: "this.prefix != null"
      range: "(65,23)-(65,41)"
      evaluatedAs: false
    - lineNumber: 66
      expression: "this.pattern != null"
      range: "(66,27)-(66,46)"
      evaluatedAs: false
  - pathId: "path8"
    testPathName: "getHandlerWhenCaughtIOExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.io.File,java.lang.String,java.lang.String,java.lang.String,boolean)\
      \ : void"
    modelFingerprint: "257DFDC1123F14B0E548C08DCF199066"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "6E3FBBE771ABC4B76ACC9ED720ED1ADE"
      valueUuid: "target"
    - type: "INPUT"
      name: "next"
      modelFingerprint: "E47074E28A8499F1A1530E8A3280B37E"
      valueUuid: "next"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "4FFB64CDBC7DAA8CD004D28A7A9D220D"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "state(expression:uniqueUuid11,message:uniqueUuid12):void"
        staticAccess: true
    - type: "STATIC"
      name: "Xnio.class"
      modelFingerprint: "1269B05F86E6D38CAB6644C04CF09E7A"
      valueUuid: "Xnio.class"
      methodExercised:
        expression: "getInstance(classLoader:classLoader):xnio"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "57CBCD2AD17929CE0DC69DAC19C4EC04"
      valueUuid: "optionMap.Builder"
      methodExercised:
        expression: "set(key:option,value:uniqueUuid14):optionMap.Builder2"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "03C8EA29BAA8E4B59F4FB93535E7B40B"
      valueUuid: "optionMap.Builder2"
      methodExercised:
        expression: "getMap():optionMap"
    - type: "LOCAL_VARIABLE"
      name: "xnio"
      modelFingerprint: "A4E040C3FBCFCA6E962001F76E681804"
      valueUuid: "xnio"
      methodExercised:
        expression: "createWorker(optionMap:optionMap):xnioWorker"
        throwsExceptions:
        - "java.io.IOException"
        - "java.lang.IllegalArgumentException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "468BAAE99C19E3151D728A1233E3C880"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.io.File.isDirectory() : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.AccessLogHttpHandlerFactory"
        parameters:
        - name: "directory"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.File"
              parameters:
              - name: "pathname"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "pathname1"
                  valueType: "java.lang.String"
                  uuid: "directory-pathname"
            valueType: "java.io.File"
            uuid: "directory"
        - name: "pattern"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pattern1"
            valueType: "java.lang.String"
            uuid: "pattern"
        - name: "prefix"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "prefix1"
            valueType: "java.lang.String"
            uuid: "prefix"
        - name: "suffix"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "suffix1"
            valueType: "java.lang.String"
            uuid: "suffix"
        - name: "rotate"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "rotate"
      valueType: "org.springframework.boot.web.embedded.undertow.AccessLogHttpHandlerFactory"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "io.undertow.server.HttpHandler"
      uuid: "next"
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid11"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Access log directory is not set"
      valueType: "java.lang.String"
      uuid: "uniqueUuid12"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.xnio.Xnio"
      uuid: "Xnio.class"
    - sapientType: "MOCK"
      valueType: "org.xnio.Xnio"
      uuid: "xnio"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "io.undertow.Undertow"
          valueType: "java.lang.Class"
          genericValueType: "io.undertow.Undertow"
          uuid: "uniqueUuid13"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.xnio.OptionMap$Builder"
      uuid: "optionMap.Builder"
    - sapientType: "MOCK"
      valueType: "org.xnio.OptionMap$Builder"
      uuid: "optionMap.Builder2"
    - sapientType: "OBJECT"
      content: !<static_field_return>
        target: "org.xnio.Options"
        fieldName: "THREAD_DAEMON"
      valueType: "org.xnio.Option"
      genericValueType: "java.lang.Boolean"
      uuid: "option"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid14"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.xnio.OptionMap$Builder"
      uuid: "optionMap.Builder2"
    - sapientType: "MOCK"
      valueType: "org.xnio.OptionMap"
      uuid: "optionMap"
    - sapientType: "MOCK"
      valueType: "org.xnio.Xnio"
      uuid: "xnio"
    - sapientType: "MOCK"
      valueType: "org.xnio.XnioWorker"
      uuid: "xnioWorker"
    - sapientType: "MOCK"
      valueType: "org.xnio.OptionMap"
      uuid: "optionMap"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Failed to create AccessLogHandler"
            valueType: "java.lang.String"
            uuid: "uniqueUuid15"
            fixed: true
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.IOException"
              parameters: []
            valueType: "java.io.IOException"
            uuid: "iOException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 77
      expression: "this.directory != null"
      range: "(77,16)-(77,37)"
      evaluatedAs: true
      internalMethodName: "createAccessLogDirectoryIfNecessary"
    - lineNumber: 78
      expression: "!this.directory.isDirectory()"
      range: "(78,7)-(78,35)"
      evaluatedAs: true
      internalMethodName: "createAccessLogDirectoryIfNecessary"
    - lineNumber: 78
      expression: "!this.directory.mkdirs()"
      range: "(78,40)-(78,63)"
      evaluatedAs: false
      internalMethodName: "createAccessLogDirectoryIfNecessary"
    - lineNumber: 65
      expression: "this.prefix != null"
      range: "(65,23)-(65,41)"
      evaluatedAs: true
    - lineNumber: 66
      expression: "this.pattern != null"
      range: "(66,27)-(66,46)"
      evaluatedAs: true
    - lineNumber: 71
      expression: "catch-exception (IOException)"
      range: "(71,3)-(71,23)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
  - pathId: "path12"
    testPathName: "getHandlerWhenThisDirectoryMkdirsAndThisPrefixIsNullAndThisPatternIsNullAndCaughtIOExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.io.File,java.lang.String,java.lang.String,java.lang.String,boolean)\
      \ : void"
    modelFingerprint: "CD5E6678D39C3DADF9AFB8A6BFCA8ED9"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "1786A39F5DA1E864F7181C7794D85757"
      valueUuid: "target"
    - type: "INPUT"
      name: "next"
      modelFingerprint: "E47074E28A8499F1A1530E8A3280B37E"
      valueUuid: "next"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "97F79BB73E196BC44BB28AFE79CA35FF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid16,message:uniqueUuid17):void"
        staticAccess: true
    - type: "STATIC"
      name: "Xnio.class"
      modelFingerprint: "1269B05F86E6D38CAB6644C04CF09E7A"
      valueUuid: "Xnio.class"
      methodExercised:
        expression: "getInstance(classLoader:classLoader):xnio"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "57CBCD2AD17929CE0DC69DAC19C4EC04"
      valueUuid: "optionMap.Builder"
      methodExercised:
        expression: "set(key:option,value:uniqueUuid19):optionMap.Builder2"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "03C8EA29BAA8E4B59F4FB93535E7B40B"
      valueUuid: "optionMap.Builder2"
      methodExercised:
        expression: "getMap():optionMap"
    - type: "LOCAL_VARIABLE"
      name: "xnio"
      modelFingerprint: "A4E040C3FBCFCA6E962001F76E681804"
      valueUuid: "xnio"
      methodExercised:
        expression: "createWorker(optionMap:optionMap):xnioWorker"
        throwsExceptions:
        - "java.io.IOException"
        - "java.lang.IllegalArgumentException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "468BAAE99C19E3151D728A1233E3C880"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.io.File.isDirectory() : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.undertow.AccessLogHttpHandlerFactory"
        parameters:
        - name: "directory"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.File"
              parameters:
              - name: "pathname"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "pathname1"
                  valueType: "java.lang.String"
                  uuid: "directory-pathname"
            valueType: "java.io.File"
            uuid: "directory"
            fixed: true
        - name: "pattern"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "pattern"
            fixed: true
        - name: "prefix"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "prefix"
            fixed: true
        - name: "suffix"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "suffix1"
            valueType: "java.lang.String"
            uuid: "suffix"
        - name: "rotate"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "rotate"
      valueType: "org.springframework.boot.web.embedded.undertow.AccessLogHttpHandlerFactory"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "io.undertow.server.HttpHandler"
      uuid: "next"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid16"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Access log directory is not set"
      valueType: "java.lang.String"
      uuid: "uniqueUuid17"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.xnio.Xnio"
      uuid: "Xnio.class"
    - sapientType: "MOCK"
      valueType: "org.xnio.Xnio"
      uuid: "xnio"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "io.undertow.Undertow"
          valueType: "java.lang.Class"
          genericValueType: "io.undertow.Undertow"
          uuid: "uniqueUuid18"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.xnio.OptionMap$Builder"
      uuid: "optionMap.Builder"
    - sapientType: "MOCK"
      valueType: "org.xnio.OptionMap$Builder"
      uuid: "optionMap.Builder2"
    - sapientType: "OBJECT"
      content: !<static_field_return>
        target: "org.xnio.Options"
        fieldName: "THREAD_DAEMON"
      valueType: "org.xnio.Option"
      genericValueType: "java.lang.Boolean"
      uuid: "option"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid19"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.xnio.OptionMap$Builder"
      uuid: "optionMap.Builder2"
    - sapientType: "MOCK"
      valueType: "org.xnio.OptionMap"
      uuid: "optionMap"
    - sapientType: "MOCK"
      valueType: "org.xnio.Xnio"
      uuid: "xnio"
    - sapientType: "MOCK"
      valueType: "org.xnio.XnioWorker"
      uuid: "xnioWorker"
    - sapientType: "MOCK"
      valueType: "org.xnio.OptionMap"
      uuid: "optionMap"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Failed to create AccessLogHandler"
            valueType: "java.lang.String"
            uuid: "uniqueUuid20"
            fixed: true
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.IOException"
              parameters: []
            valueType: "java.io.IOException"
            uuid: "iOException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 77
      expression: "this.directory != null"
      range: "(77,16)-(77,37)"
      evaluatedAs: false
      internalMethodName: "createAccessLogDirectoryIfNecessary"
    - lineNumber: 78
      expression: "!this.directory.isDirectory()"
      range: "(78,7)-(78,35)"
      evaluatedAs: true
      internalMethodName: "createAccessLogDirectoryIfNecessary"
    - lineNumber: 78
      expression: "!this.directory.mkdirs()"
      range: "(78,40)-(78,63)"
      evaluatedAs: false
      internalMethodName: "createAccessLogDirectoryIfNecessary"
    - lineNumber: 65
      expression: "this.prefix != null"
      range: "(65,23)-(65,41)"
      evaluatedAs: false
    - lineNumber: 66
      expression: "this.pattern != null"
      range: "(66,27)-(66,46)"
      evaluatedAs: false
    - lineNumber: 71
      expression: "catch-exception (IOException)"
      range: "(71,3)-(71,23)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
