---
modelFingerprint: "E85986E0041D2424A1851C289C7F1CBA"
targetClass:
  fullClassName: "org.springframework.boot.info.BuildProperties"
methods:
- method:
    name: "getGroup"
    sourceCodeSignature: "String getGroup()"
    returnType: "java.lang.String"
    instructionFingerprint: "18EE5AD317DA246F6C3D4D98E368C61B"
  paths:
  - pathId: "path1"
    testPathName: "getGroupTest"
    constructorSignature: "<init>(java.util.Properties) : void"
    modelFingerprint: "835F493C23217253027D51CA9815CB68"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "BD7223882525F73FF76275D82DFD59DF"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "0704E33D519FA485F3B389132B9FB8CD"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:properties,message:uniqueUuid3):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D446A609419428DDEAA49A58091F3986"
      valueUuid: "string3"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: ".valueOf(DateTimeFormatter.ISO_INSTANT.parse(value, Instant::from).toEpochMilli());"
      lineNumber: 100
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: ISO_INSTANT - Method: parse"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.info.BuildProperties"
        parameters:
        - name: "entries"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values:
              - sapientType: "PAIR"
                content: !<pair>
                  key:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "time"
                    valueType: "java.lang.String"
                    fixed: true
                  value:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "entriesItem1Value1"
                    valueType: "java.lang.String"
                    uuid: "string"
                    collectionUuid: "entries"
                valueType: "java.util.Map$Entry"
            valueType: "java.util.Properties"
            uuid: "entries"
      valueType: "org.springframework.boot.info.BuildProperties"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PAIR"
          content: !<pair>
            key:
              sapientType: "BASIC"
              content: !<regular>
                value: "time"
              valueType: "java.lang.String"
              uuid: "uniqueUuid2"
              fixed: true
            value:
              sapientType: "BASIC"
              content: !<regular>
                value: "2"
              valueType: "java.lang.String"
              uuid: "string2"
          valueType: "java.util.Map$Entry"
          genericValueType: "java.lang.String,java.lang.String"
          uuid: "uniqueUuid1"
      valueType: "java.util.Properties"
      uuid: "properties"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Entries must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string3"
      collectionUuid: "properties2"
    calledSomeStaticInternalMethod: true
- method:
    name: "getArtifact"
    sourceCodeSignature: "String getArtifact()"
    returnType: "java.lang.String"
    instructionFingerprint: "31C9C1C25BD4FF6B02C36CB1AD1F5C5B"
  paths:
  - pathId: "path1"
    testPathName: "getArtifactTest"
    constructorSignature: "<init>(java.util.Properties) : void"
    modelFingerprint: "962CEF17CBE30895B72DBB89FD0406CA"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "BD7223882525F73FF76275D82DFD59DF"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "0704E33D519FA485F3B389132B9FB8CD"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:properties,message:uniqueUuid6):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D446A609419428DDEAA49A58091F3986"
      valueUuid: "string3"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: ".valueOf(DateTimeFormatter.ISO_INSTANT.parse(value, Instant::from).toEpochMilli());"
      lineNumber: 100
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: ISO_INSTANT - Method: parse"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.info.BuildProperties"
        parameters:
        - name: "entries"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values:
              - sapientType: "PAIR"
                content: !<pair>
                  key:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "time"
                    valueType: "java.lang.String"
                    fixed: true
                  value:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "entriesItem1Value1"
                    valueType: "java.lang.String"
                    uuid: "string"
                    collectionUuid: "entries"
                valueType: "java.util.Map$Entry"
            valueType: "java.util.Properties"
            uuid: "entries"
      valueType: "org.springframework.boot.info.BuildProperties"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PAIR"
          content: !<pair>
            key:
              sapientType: "BASIC"
              content: !<regular>
                value: "time"
              valueType: "java.lang.String"
              uuid: "uniqueUuid5"
              fixed: true
            value:
              sapientType: "BASIC"
              content: !<regular>
                value: "2"
              valueType: "java.lang.String"
              uuid: "string2"
          valueType: "java.util.Map$Entry"
          genericValueType: "java.lang.String,java.lang.String"
          uuid: "uniqueUuid4"
      valueType: "java.util.Properties"
      uuid: "properties"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Entries must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string3"
      collectionUuid: "properties2"
    calledSomeStaticInternalMethod: true
- method:
    name: "getName"
    sourceCodeSignature: "String getName()"
    returnType: "java.lang.String"
    instructionFingerprint: "52CEDA4B6B657FF3FB642693BE2E27F1"
  paths:
  - pathId: "path1"
    testPathName: "getNameTest"
    constructorSignature: "<init>(java.util.Properties) : void"
    modelFingerprint: "D89128419DE1CE26AA8BD2F4F108F7BB"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "BD7223882525F73FF76275D82DFD59DF"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "0704E33D519FA485F3B389132B9FB8CD"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:properties,message:uniqueUuid9):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D446A609419428DDEAA49A58091F3986"
      valueUuid: "string3"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: ".valueOf(DateTimeFormatter.ISO_INSTANT.parse(value, Instant::from).toEpochMilli());"
      lineNumber: 100
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: ISO_INSTANT - Method: parse"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.info.BuildProperties"
        parameters:
        - name: "entries"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values:
              - sapientType: "PAIR"
                content: !<pair>
                  key:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "time"
                    valueType: "java.lang.String"
                    fixed: true
                  value:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "entriesItem1Value1"
                    valueType: "java.lang.String"
                    uuid: "string"
                    collectionUuid: "entries"
                valueType: "java.util.Map$Entry"
            valueType: "java.util.Properties"
            uuid: "entries"
      valueType: "org.springframework.boot.info.BuildProperties"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PAIR"
          content: !<pair>
            key:
              sapientType: "BASIC"
              content: !<regular>
                value: "time"
              valueType: "java.lang.String"
              uuid: "uniqueUuid8"
              fixed: true
            value:
              sapientType: "BASIC"
              content: !<regular>
                value: "2"
              valueType: "java.lang.String"
              uuid: "string2"
          valueType: "java.util.Map$Entry"
          genericValueType: "java.lang.String,java.lang.String"
          uuid: "uniqueUuid7"
      valueType: "java.util.Properties"
      uuid: "properties"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Entries must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string3"
      collectionUuid: "properties2"
    calledSomeStaticInternalMethod: true
- method:
    name: "getVersion"
    sourceCodeSignature: "String getVersion()"
    returnType: "java.lang.String"
    instructionFingerprint: "CED27228A312C8395BF33535C49A4E7B"
  paths:
  - pathId: "path1"
    testPathName: "getVersionTest"
    constructorSignature: "<init>(java.util.Properties) : void"
    modelFingerprint: "CE32670D9320326305124332253FBB33"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "BD7223882525F73FF76275D82DFD59DF"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "0704E33D519FA485F3B389132B9FB8CD"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:properties,message:uniqueUuid12):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D446A609419428DDEAA49A58091F3986"
      valueUuid: "string3"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: ".valueOf(DateTimeFormatter.ISO_INSTANT.parse(value, Instant::from).toEpochMilli());"
      lineNumber: 100
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: ISO_INSTANT - Method: parse"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.info.BuildProperties"
        parameters:
        - name: "entries"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values:
              - sapientType: "PAIR"
                content: !<pair>
                  key:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "time"
                    valueType: "java.lang.String"
                    fixed: true
                  value:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "entriesItem1Value1"
                    valueType: "java.lang.String"
                    uuid: "string"
                    collectionUuid: "entries"
                valueType: "java.util.Map$Entry"
            valueType: "java.util.Properties"
            uuid: "entries"
      valueType: "org.springframework.boot.info.BuildProperties"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PAIR"
          content: !<pair>
            key:
              sapientType: "BASIC"
              content: !<regular>
                value: "time"
              valueType: "java.lang.String"
              uuid: "uniqueUuid11"
              fixed: true
            value:
              sapientType: "BASIC"
              content: !<regular>
                value: "2"
              valueType: "java.lang.String"
              uuid: "string2"
          valueType: "java.util.Map$Entry"
          genericValueType: "java.lang.String,java.lang.String"
          uuid: "uniqueUuid10"
      valueType: "java.util.Properties"
      uuid: "properties"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Entries must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid12"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string3"
      collectionUuid: "properties2"
    calledSomeStaticInternalMethod: true
- method:
    name: "getTime"
    sourceCodeSignature: "Instant getTime()"
    returnType: "java.time.Instant"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.NumberFormatException"
    instructionFingerprint: "63841C82A02C5C94349EB418756130EA"
  paths:
  - pathId: "path1"
    testPathName: "getTimeTest"
    constructorSignature: "<init>(java.util.Properties) : void"
    modelFingerprint: "5F01C0E3D96768D94184CDD75CFB046F"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "BD7223882525F73FF76275D82DFD59DF"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "0704E33D519FA485F3B389132B9FB8CD"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:properties,message:uniqueUuid15):void"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "5BD826D6FA44706FD97C1E9B743992A6"
      methodExercised:
        expression: "getInstant(key:uniqueUuid16):instant"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5B5DAAE14D1716B3B25C20BB47AA9C52"
      valueUuid: "instant"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: ".valueOf(DateTimeFormatter.ISO_INSTANT.parse(value, Instant::from).toEpochMilli());"
      lineNumber: 100
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: ISO_INSTANT - Method: parse"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.info.BuildProperties"
        parameters:
        - name: "entries"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values:
              - sapientType: "PAIR"
                content: !<pair>
                  key:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "time"
                    valueType: "java.lang.String"
                    fixed: true
                  value:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "entriesItem1Value1"
                    valueType: "java.lang.String"
                    uuid: "string"
                    collectionUuid: "entries"
                valueType: "java.util.Map$Entry"
            valueType: "java.util.Properties"
            uuid: "entries"
      valueType: "org.springframework.boot.info.BuildProperties"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PAIR"
          content: !<pair>
            key:
              sapientType: "BASIC"
              content: !<regular>
                value: "time"
              valueType: "java.lang.String"
              uuid: "uniqueUuid14"
              fixed: true
            value:
              sapientType: "BASIC"
              content: !<regular>
                value: "2"
              valueType: "java.lang.String"
              uuid: "string2"
          valueType: "java.util.Map$Entry"
          genericValueType: "java.lang.String,java.lang.String"
          uuid: "uniqueUuid13"
      valueType: "java.util.Properties"
      uuid: "properties"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Entries must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid15"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.time.Instant"
        method: "ofEpochSecond"
        methodParameters:
        - name: "epochSecond"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 1700000000
            valueType: "int"
            uuid: "uniqueUuid18"
            fixed: true
      valueType: "java.time.Instant"
      uuid: "instant"
    - sapientType: "BASIC"
      content: !<regular>
        value: "time"
      valueType: "java.lang.String"
      uuid: "uniqueUuid16"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.time.Instant"
        method: "ofEpochSecond"
        methodParameters:
        - name: "epochSecond"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 1700000000
            valueType: "int"
            uuid: "uniqueUuid18"
            fixed: true
      valueType: "java.time.Instant"
      uuid: "instant"
    calledSomeStaticInternalMethod: true
