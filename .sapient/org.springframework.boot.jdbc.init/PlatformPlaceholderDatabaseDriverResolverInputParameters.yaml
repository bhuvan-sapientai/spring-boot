---
modelFingerprint: "49020583CB4363E00FD8CC6C48AF6A5B"
targetClass:
  fullClassName: "org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver"
methods:
- method:
    name: "withDriverPlatform"
    sourceCodeSignature: "PlatformPlaceholderDatabaseDriverResolver withDriverPlatform(DatabaseDriver\
      \ driver, String platform)"
    returnType: "org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver"
    parameters:
    - name: "driver"
      type: "org.springframework.boot.jdbc.DatabaseDriver"
    - name: "platform"
      type: "java.lang.String"
    instructionFingerprint: "81B9BA93E2A30B5B6643175B325EFF6A"
  paths:
  - pathId: "path1"
    testPathName: "withDriverPlatformTest"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "5D39BBA13E7E13706CADCDC5E06535E0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4C8871AAD2CA9088D67AA27704BCB071"
      valueUuid: "target"
    - type: "INPUT"
      name: "driver"
      modelFingerprint: "06FC910AA3569F044FE459262B5827C3"
      valueUuid: "driver"
    - type: "INPUT"
      name: "platform"
      modelFingerprint: "D46637088ABFA60558A0BBD0D1F89E0A"
      valueUuid: "platform"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "EFF0DC839918EB8EFFA3B42F46FF8500"
      valueUuid: "platformPlaceholderDatabaseDriverResolver3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver"
        parameters:
        - name: "placeholder"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "placeholder1"
            valueType: "java.lang.String"
            uuid: "placeholder"
      valueType: "org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver"
      uuid: "target"
    - sapientType: "ENUM"
      content: !<regular>
        value: "UNKNOWN"
      valueType: "org.springframework.boot.jdbc.DatabaseDriver"
      uuid: "driver"
    - sapientType: "BASIC"
      content: !<regular>
        value: "platform1"
      valueType: "java.lang.String"
      uuid: "platform"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver"
        parameters:
        - name: "placeholder"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "placeholder1"
            valueType: "java.lang.String"
            uuid: "placeholder"
        - name: "driverMappings"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashMap"
              parameters:
              - name: "m"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.Map"
                  genericValueType: "org.springframework.boot.jdbc.DatabaseDriver,java.lang.String"
                  uuid: "map"
              values:
              - sapientType: "PAIR"
                content: !<pair>
                  key:
                    sapientType: "ENUM"
                    content: !<regular>
                      value: "UNKNOWN"
                    valueType: "org.springframework.boot.jdbc.DatabaseDriver"
                    uuid: "driver"
                  value:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "platform1"
                    valueType: "java.lang.String"
                    uuid: "platform"
                valueType: "java.util.Map$Entry"
                genericValueType: "org.springframework.boot.jdbc.DatabaseDriver,java.lang.String"
            valueType: "java.util.Map"
            genericValueType: "org.springframework.boot.jdbc.DatabaseDriver,java.lang.String"
            uuid: "linkedHashMap"
      valueType: "org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver"
      uuid: "platformPlaceholderDatabaseDriverResolver3"
      fixed: true
- method:
    name: "resolveAll"
    sourceCodeSignature: "List<String> resolveAll(DataSource dataSource, String...\
      \ values)"
    returnType: "java.util.List"
    genericReturnType: "java.lang.String"
    parameters:
    - name: "dataSource"
      type: "javax.sql.DataSource"
    - name: "values"
      type: "java.lang.String[]"
    instructionFingerprint: "CFD3F2CB8639C9BD0B13697151A57BBE"
  paths:
  - pathId: "path1"
    testPathName: "resolveAllWhenObjectUtilsIsEmptyValues"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "1F1BCB680B0DDF8B3B4DDE604E310501"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4C8871AAD2CA9088D67AA27704BCB071"
      valueUuid: "target"
    - type: "INPUT"
      name: "dataSource"
      modelFingerprint: "621BC0E02503DCEAB1242BF151BFC436"
      valueUuid: "dataSource"
    - type: "INPUT"
      name: "values"
      modelFingerprint: "939B5E8A30E7E392B049AC67C3A82DBE"
      valueUuid: "values"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D603B8F5F5BD670D482A8C7D8C746D0E"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:dataSource,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "ObjectUtils.class.real"
      modelFingerprint: "C21F59E60DC924904550484CF1486056"
      valueUuid: "ObjectUtils.class.real"
      methodExercised:
        expression: "isEmpty(array:values):boolean1"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A21C27D81F89EF2C62F31578D131A608"
      valueUuid: "list"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver"
        parameters:
        - name: "placeholder"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "placeholder1"
            valueType: "java.lang.String"
            uuid: "placeholder"
      valueType: "org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "dataSource"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "values"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "dataSource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "DataSource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ObjectUtils"
      uuid: "ObjectUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "values"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list"
    branches:
    - lineNumber: 114
      expression: "ObjectUtils.isEmpty(values)"
      range: "(114,7)-(114,33)"
      evaluatedAs: true
      internalMethodName: "resolveAll"
  - pathId: "path2"
    testPathName: "resolveAllWhenPlatformIsNull"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "6AE6AF1E1097B9048A6644FAE3CE7DF2"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4C8871AAD2CA9088D67AA27704BCB071"
      valueUuid: "target"
    - type: "INPUT"
      name: "dataSource"
      modelFingerprint: "621BC0E02503DCEAB1242BF151BFC436"
      valueUuid: "dataSource"
    - type: "INPUT"
      name: "values"
      modelFingerprint: "79489B2404ADB64E2D1AE019C5E5D4E6"
      valueUuid: "values"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D603B8F5F5BD670D482A8C7D8C746D0E"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:dataSource,message:uniqueUuid2):void"
        staticAccess: true
    - type: "STATIC"
      name: "ObjectUtils.class"
      modelFingerprint: "ABC6F42826E043AA5BA3225044D74679"
      valueUuid: "ObjectUtils.class"
      methodExercised:
        expression: "isEmpty(array:values):boolean1"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "D472C44A00843A81AFD0D831F31357FF"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:string):boolean2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "3F22D0CD9B510FDEAE023E909D6F1D15"
      valueUuid: "list"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "platform = (platform != null) ? platform : platformProvider.get();"
      lineNumber: 122
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: platformProvider - Method: get"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver"
        parameters:
        - name: "placeholder"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "placeholder"
      valueType: "org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "dataSource"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.String[]"
      uuid: "values"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "dataSource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "DataSource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ObjectUtils"
      uuid: "ObjectUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.String[]"
      uuid: "values"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 1
            valueType: "int"
            uuid: "int1"
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: ""
          valueType: "java.lang.String"
          uuid: "string2"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list"
    branches:
    - lineNumber: 114
      expression: "ObjectUtils.isEmpty(values)"
      range: "(114,7)-(114,33)"
      evaluatedAs: false
      internalMethodName: "resolveAll"
    - lineNumber: 119
      expression: "for-each(values)"
      range: "(119,23)-(119,28)"
      evaluatedAs: true
      internalMethodName: "resolveAll"
    - lineNumber: 120
      expression: "StringUtils.hasLength(value)"
      range: "(120,8)-(120,35)"
      evaluatedAs: true
      internalMethodName: "resolveAll"
    - lineNumber: 121
      expression: "value.contains(this.placeholder)"
      range: "(121,9)-(121,40)"
      evaluatedAs: true
      internalMethodName: "resolveAll"
    - lineNumber: 122
      expression: "platform != null"
      range: "(122,18)-(122,33)"
      evaluatedAs: false
      internalMethodName: "resolveAll"
- method:
    name: "resolveAll"
    sourceCodeSignature: "List<String> resolveAll(String platform, String... values)"
    returnType: "java.util.List"
    genericReturnType: "java.lang.String"
    parameters:
    - name: "platform"
      type: "java.lang.String"
    - name: "values"
      type: "java.lang.String[]"
    instructionFingerprint: "2DCF5B3AC5A17697B13792AC1747378D"
  paths:
  - pathId: "path1"
    testPathName: "resolveAll1WhenObjectUtilsIsEmptyValues"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "51326F9A57C63C596E98D3E6CED4D676"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4C8871AAD2CA9088D67AA27704BCB071"
      valueUuid: "target"
    - type: "INPUT"
      name: "platform"
      modelFingerprint: "263DD1EACE9997E3D0883D95CA62AB75"
      valueUuid: "platform"
    - type: "INPUT"
      name: "values"
      modelFingerprint: "939B5E8A30E7E392B049AC67C3A82DBE"
      valueUuid: "values"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "03494BB5C744FE265F4592F7671ACC19"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:platform,message:uniqueUuid3):void"
        staticAccess: true
    - type: "STATIC"
      name: "ObjectUtils.class.real"
      modelFingerprint: "C21F59E60DC924904550484CF1486056"
      valueUuid: "ObjectUtils.class.real"
      methodExercised:
        expression: "isEmpty(array:values):boolean1"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A21C27D81F89EF2C62F31578D131A608"
      valueUuid: "list"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver"
        parameters:
        - name: "placeholder"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "placeholder1"
            valueType: "java.lang.String"
            uuid: "placeholder"
      valueType: "org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "platform"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "values"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "platform"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Platform must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ObjectUtils"
      uuid: "ObjectUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "values"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list"
    branches:
    - lineNumber: 114
      expression: "ObjectUtils.isEmpty(values)"
      range: "(114,7)-(114,33)"
      evaluatedAs: true
      internalMethodName: "resolveAll"
  - pathId: "path2"
    testPathName: "resolveAll1WhenPlatformIsNull"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "9B14BB1CC8D997D83562BD17CA0D8562"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "CC6ACC15D465498308B2439FEC34BCA2"
      valueUuid: "target"
    - type: "INPUT"
      name: "platform"
      modelFingerprint: "9C0E2638EDC56619AA3C52D79D2F3446"
      valueUuid: "platform"
    - type: "INPUT"
      name: "values"
      modelFingerprint: "EE9B4E837454CE7074033F025BB92FAC"
      valueUuid: "values"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5C852556B9F26DEDC30D86DEB80BEDD"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:platform,message:uniqueUuid4):void"
        staticAccess: true
    - type: "STATIC"
      name: "ObjectUtils.class"
      modelFingerprint: "D6016858BB7287C6C0A3389004DA0BE6"
      valueUuid: "ObjectUtils.class"
      methodExercised:
        expression: "isEmpty(array:values):boolean1"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "7B623EE582A0C2E878E2D18F466E3DE6"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:string):boolean2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "799027E78160DC86144019561125A778"
      valueUuid: "list"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "platform = (platform != null) ? platform : platformProvider.get();"
      lineNumber: 122
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: platformProvider - Method: get"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver"
        parameters:
        - name: "placeholder"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "placeholder"
      valueType: "org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "platform"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.String[]"
      uuid: "values"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "platform"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Platform must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ObjectUtils"
      uuid: "ObjectUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.String[]"
      uuid: "values"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 1
            valueType: "int"
            uuid: "int1"
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "E"
          valueType: "java.lang.String"
          uuid: "string2"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list"
    branches:
    - lineNumber: 114
      expression: "ObjectUtils.isEmpty(values)"
      range: "(114,7)-(114,33)"
      evaluatedAs: false
      internalMethodName: "resolveAll"
    - lineNumber: 119
      expression: "for-each(values)"
      range: "(119,23)-(119,28)"
      evaluatedAs: true
      internalMethodName: "resolveAll"
    - lineNumber: 120
      expression: "StringUtils.hasLength(value)"
      range: "(120,8)-(120,35)"
      evaluatedAs: true
      internalMethodName: "resolveAll"
    - lineNumber: 121
      expression: "value.contains(this.placeholder)"
      range: "(121,9)-(121,40)"
      evaluatedAs: true
      internalMethodName: "resolveAll"
    - lineNumber: 122
      expression: "platform != null"
      range: "(122,18)-(122,33)"
      evaluatedAs: false
      internalMethodName: "resolveAll"
- method:
    name: "getDatabaseDriver"
    sourceCodeSignature: "DatabaseDriver getDatabaseDriver(DataSource dataSource)"
    returnType: "org.springframework.boot.jdbc.DatabaseDriver"
    parameters:
    - name: "dataSource"
      type: "javax.sql.DataSource"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "2D4D2B9DFE808942D612327886E163EE"
  paths:
  - pathId: "path1"
    testPathName: "getDatabaseDriverTest"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "E0F076FBF770868AA21EB554EFE39BBF"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4C8871AAD2CA9088D67AA27704BCB071"
      valueUuid: "target"
    - type: "INPUT"
      name: "dataSource"
      modelFingerprint: "621BC0E02503DCEAB1242BF151BFC436"
      valueUuid: "dataSource"
    - type: "STATIC"
      name: "JdbcUtils.class"
      modelFingerprint: "9149BD6FFC6BAB82C980CE822D515981"
      valueUuid: "JdbcUtils.class"
      methodExercised:
        expression: "extractDatabaseMetaData(dataSource:dataSource,action:uniqueUuid5):object"
        throwsExceptions:
        - "org.springframework.jdbc.support.MetaDataAccessException"
        staticAccess: true
    - type: "STATIC"
      name: "JdbcUtils.class.real"
      modelFingerprint: "ED83D19A4BDE2BB514C705A3A3AAD86E"
      valueUuid: "JdbcUtils.class.real"
      methodExercised:
        expression: "commonDatabaseName(source:object):string"
        staticAccess: true
    - type: "STATIC"
      name: "DatabaseDriver.class.real"
      modelFingerprint: "503D8A93A0EA6192616B7D4087119EA4"
      valueUuid: "DatabaseDriver.class.real"
      methodExercised:
        expression: "fromProductName(productName:string):databaseDriver"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "BDB580B56B1B91F2F46CFE235DF9B0EB"
      valueUuid: "databaseDriver"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver"
        parameters:
        - name: "placeholder"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "placeholder1"
            valueType: "java.lang.String"
            uuid: "placeholder"
      valueType: "org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "dataSource"
    - sapientType: "MOCK"
      valueType: "org.springframework.jdbc.support.JdbcUtils"
      uuid: "JdbcUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "dataSource"
    - sapientType: "ANY"
      valueType: "org.springframework.jdbc.support.DatabaseMetaDataCallback"
      uuid: "uniqueUuid5"
    - sapientType: "REAL"
      valueType: "org.springframework.jdbc.support.JdbcUtils"
      uuid: "JdbcUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "REAL"
      valueType: "org.springframework.boot.jdbc.DatabaseDriver"
      uuid: "DatabaseDriver.class.real"
    - sapientType: "ENUM"
      content: !<regular>
        value: "UNKNOWN"
      valueType: "org.springframework.boot.jdbc.DatabaseDriver"
      uuid: "databaseDriver"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "ENUM"
      content: !<regular>
        value: "UNKNOWN"
      valueType: "org.springframework.boot.jdbc.DatabaseDriver"
      uuid: "databaseDriver"
  - pathId: "path2"
    testPathName: "getDatabaseDriverWhenCaughtExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "C991E9BEF7658CD4D5B7DE72316F024E"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4C8871AAD2CA9088D67AA27704BCB071"
      valueUuid: "target"
    - type: "INPUT"
      name: "dataSource"
      modelFingerprint: "621BC0E02503DCEAB1242BF151BFC436"
      valueUuid: "dataSource"
    - type: "STATIC"
      name: "JdbcUtils.class"
      modelFingerprint: "9149BD6FFC6BAB82C980CE822D515981"
      valueUuid: "JdbcUtils.class"
      methodExercised:
        expression: "extractDatabaseMetaData(dataSource:dataSource,action:uniqueUuid1):object"
        throwsExceptions:
        - "org.springframework.jdbc.support.MetaDataAccessException"
        staticAccess: true
    - type: "STATIC"
      name: "JdbcUtils.class.real"
      modelFingerprint: "ED83D19A4BDE2BB514C705A3A3AAD86E"
      valueUuid: "JdbcUtils.class.real"
      methodExercised:
        expression: "commonDatabaseName(source:object):string"
        staticAccess: true
    - type: "STATIC"
      name: "DatabaseDriver.class"
      modelFingerprint: "B458155389D965B5547621930C924113"
      valueUuid: "DatabaseDriver.class"
      methodExercised:
        expression: "fromProductName(productName:string):databaseDriver"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "894378ADF0AEB4483AA6651EFC261F0C"
      valueUuid: "illegalStateException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver"
        parameters:
        - name: "placeholder"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "placeholder1"
            valueType: "java.lang.String"
            uuid: "placeholder"
      valueType: "org.springframework.boot.jdbc.init.PlatformPlaceholderDatabaseDriverResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "dataSource"
    - sapientType: "MOCK"
      valueType: "org.springframework.jdbc.support.JdbcUtils"
      uuid: "JdbcUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "dataSource"
    - sapientType: "ANY"
      valueType: "org.springframework.jdbc.support.DatabaseMetaDataCallback"
      uuid: "uniqueUuid1"
    - sapientType: "REAL"
      valueType: "org.springframework.jdbc.support.JdbcUtils"
      uuid: "JdbcUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.jdbc.DatabaseDriver"
      uuid: "DatabaseDriver.class"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.RuntimeException"
        parameters: []
      valueType: "java.lang.RuntimeException"
      uuid: "databaseDriver"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Failed to determine DatabaseDriver"
            valueType: "java.lang.String"
            uuid: "uniqueUuid2"
            fixed: true
        - name: "cause"
          value:
            sapientType: "EXCEPTION"
            content: !<new>
              target: "java.lang.RuntimeException"
              parameters: []
            valueType: "java.lang.RuntimeException"
            uuid: "databaseDriver"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 143
      expression: "catch-exception (Exception)"
      range: "(143,3)-(143,21)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
