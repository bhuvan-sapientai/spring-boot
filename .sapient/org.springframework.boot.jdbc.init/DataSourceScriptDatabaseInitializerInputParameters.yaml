---
modelFingerprint: "890159E476CEDDC9D298DFECC1F5D2E6"
targetClass:
  fullClassName: "org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer"
methods:
- method:
    name: "getDataSource"
    sourceCodeSignature: "DataSource getDataSource()"
    returnType: "javax.sql.DataSource"
    instructionFingerprint: "B972E9B02F56BB9651574580E74B419C"
  paths:
  - pathId: "path1"
    testPathName: "getDataSourceTest"
    constructorSignature: "<init>(javax.sql.DataSource,org.springframework.boot.sql.init.DatabaseInitializationSettings)\
      \ : void"
    modelFingerprint: "F600C3BF51373DF79F2655E8B8A9EB7A"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "isEmbeddedDatabase"
    sourceCodeSignature: "boolean isEmbeddedDatabase()"
    returnType: "boolean"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "F61C371C919CF950E6B4BC13BDBCA370"
  paths:
  - pathId: "path1"
    testPathName: "isEmbeddedDatabaseWhenEmbeddedDatabaseConnectionIsEmbeddedThisDataSource"
    constructorSignature: "<init>(javax.sql.DataSource,org.springframework.boot.sql.init.DatabaseInitializationSettings)\
      \ : void"
    modelFingerprint: "7153CE2D526E06ECC83D7AE02A839B35"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "504A0275B695A8A740A79223A16D9C6F"
      valueUuid: "target"
    - type: "STATIC"
      name: "EmbeddedDatabaseConnection.class"
      modelFingerprint: "EC941CF12610EBA727F3E4E1036F13F8"
      valueUuid: "EmbeddedDatabaseConnection.class"
      methodExercised:
        expression: "isEmbedded(dataSource:dataSource):boolean1"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer"
        parameters:
        - name: "dataSource"
          value:
            sapientType: "MOCK"
            valueType: "javax.sql.DataSource"
            uuid: "dataSource"
        - name: "settings"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.sql.init.DatabaseInitializationSettings"
            uuid: "settings"
      valueType: "org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.jdbc.EmbeddedDatabaseConnection"
      uuid: "EmbeddedDatabaseConnection.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "dataSource"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    branches:
    - lineNumber: 67
      expression: "EmbeddedDatabaseConnection.isEmbedded(this.dataSource)"
      range: "(67,11)-(67,64)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "isEmbeddedDatabaseWhenEmbeddedDatabaseConnectionNotIsEmbeddedThisDataSource"
    constructorSignature: "<init>(javax.sql.DataSource,org.springframework.boot.sql.init.DatabaseInitializationSettings)\
      \ : void"
    modelFingerprint: "A1E27A5C2FE2611B9A8DC9F2A2E70951"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "504A0275B695A8A740A79223A16D9C6F"
      valueUuid: "target"
    - type: "STATIC"
      name: "EmbeddedDatabaseConnection.class"
      modelFingerprint: "6A6FDCE97393F6F6292E98567024F103"
      valueUuid: "EmbeddedDatabaseConnection.class"
      methodExercised:
        expression: "isEmbedded(dataSource:dataSource):boolean1"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5633A2B0C967879105766C98D64A3959"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer"
        parameters:
        - name: "dataSource"
          value:
            sapientType: "MOCK"
            valueType: "javax.sql.DataSource"
            uuid: "dataSource"
        - name: "settings"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.sql.init.DatabaseInitializationSettings"
            uuid: "settings"
      valueType: "org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.jdbc.EmbeddedDatabaseConnection"
      uuid: "EmbeddedDatabaseConnection.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "dataSource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    branches:
    - lineNumber: 67
      expression: "EmbeddedDatabaseConnection.isEmbedded(this.dataSource)"
      range: "(67,11)-(67,64)"
      evaluatedAs: false
  - pathId: "path3"
    testPathName: "isEmbeddedDatabaseWhenCaughtException"
    constructorSignature: "<init>(javax.sql.DataSource,org.springframework.boot.sql.init.DatabaseInitializationSettings)\
      \ : void"
    modelFingerprint: "5197680322D3BDF4DFD377A33686F357"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "504A0275B695A8A740A79223A16D9C6F"
      valueUuid: "target"
    - type: "STATIC"
      name: "EmbeddedDatabaseConnection.class"
      modelFingerprint: "C563A49CC53123C4D360162567720C06"
      valueUuid: "EmbeddedDatabaseConnection.class"
      methodExercised:
        expression: "isEmbedded(dataSource:dataSource):boolean1"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5633A2B0C967879105766C98D64A3959"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer"
        parameters:
        - name: "dataSource"
          value:
            sapientType: "MOCK"
            valueType: "javax.sql.DataSource"
            uuid: "dataSource"
        - name: "settings"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.sql.init.DatabaseInitializationSettings"
            uuid: "settings"
      valueType: "org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.jdbc.EmbeddedDatabaseConnection"
      uuid: "EmbeddedDatabaseConnection.class"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.RuntimeException"
        parameters: []
      valueType: "java.lang.RuntimeException"
      uuid: "boolean1"
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "dataSource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 69
      expression: "catch-exception (Exception)"
      range: "(69,3)-(69,21)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
- method:
    name: "runScripts"
    sourceCodeSignature: "void runScripts(Scripts scripts)"
    returnType: "void"
    parameters:
    - name: "scripts"
      type: "org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer$Scripts"
    instructionFingerprint: "56F92021C52E7E957BECFB20C49835F1"
  paths:
  - pathId: "path1"
    testPathName: "runScripts1WhenScriptsIsNotEmpty"
    constructorSignature: "<init>(javax.sql.DataSource,org.springframework.boot.sql.init.DatabaseInitializationSettings)\
      \ : void"
    modelFingerprint: "2388F9DEE891AB97B2E9545DC89D9C20"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "504A0275B695A8A740A79223A16D9C6F"
      valueUuid: "target"
    - type: "INPUT"
      name: "scripts"
      modelFingerprint: "2B2749BC5848734BDE864F51EA19606A"
      valueUuid: "scripts"
    - type: "LOCAL_VARIABLE"
      name: "scripts"
      modelFingerprint: "AAC3D9C992D38BA0D21B4735FBE4E4AE"
      valueUuid: "scripts"
      methodExercised:
        expression: "isContinueOnError():continueOnError"
    - type: "LOCAL_VARIABLE"
      name: "scripts"
      modelFingerprint: "5A464711B4888E7A1BA1E2AB99239E7F"
      valueUuid: "scripts"
      methodExercised:
        expression: "getSeparator():separator"
    - type: "LOCAL_VARIABLE"
      name: "scripts"
      modelFingerprint: "296972D47957D54B31B3928206758071"
      valueUuid: "scripts"
      methodExercised:
        expression: "getEncoding():encoding"
    - type: "LOCAL_VARIABLE"
      name: "scripts"
      modelFingerprint: "296972D47957D54B31B3928206758071"
      valueUuid: "scripts"
      methodExercised:
        expression: "getEncoding():encoding"
    - type: "LOCAL_VARIABLE"
      name: "scripts"
      modelFingerprint: "D2673E92EDBCDCF22FF89B3B8383FDFF"
      valueUuid: "scripts"
      methodExercised:
        expression: "iterator():iterator"
    - type: "LOCAL_VARIABLE"
      name: "populator"
      modelFingerprint: "5AE493E716907B18F48B1243A3B35F02"
      valueUuid: "resourceDatabasePopulator"
      methodExercised:
        expression: "addScript(script:object):void4"
    - type: "STATIC"
      name: "DatabasePopulatorUtils.class"
      modelFingerprint: "EED22C6E0B6FCE59281C91F9B1961B0C"
      valueUuid: "DatabasePopulatorUtils.class"
      methodExercised:
        expression: "execute(populator:resourceDatabasePopulator,dataSource:dataSource):void5"
        throwsExceptions:
        - "org.springframework.dao.DataAccessException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.nio.charset.Charset.name() : java.lang.String"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer"
        parameters:
        - name: "dataSource"
          value:
            sapientType: "MOCK"
            valueType: "javax.sql.DataSource"
            uuid: "dataSource"
        - name: "settings"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.sql.init.DatabaseInitializationSettings"
            uuid: "settings"
      valueType: "org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer$Scripts"
      uuid: "scripts"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer$Scripts"
      uuid: "scripts"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "continueOnError"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer$Scripts"
      uuid: "scripts"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getSeparator1"
      valueType: "java.lang.String"
      uuid: "separator"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer$Scripts"
      uuid: "scripts"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.nio.charset.Charset"
        method: "defaultCharset"
        methodParameters: []
      valueType: "java.nio.charset.Charset"
      uuid: "encoding"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer$Scripts"
      uuid: "scripts"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.nio.charset.Charset"
        method: "defaultCharset"
        methodParameters: []
      valueType: "java.nio.charset.Charset"
      uuid: "encoding"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer$Scripts"
      uuid: "scripts"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            collectionClass: "java.util.ArrayList"
            parameters: []
            values:
            - sapientType: "MOCK"
              valueType: "org.springframework.core.io.Resource"
              uuid: "object"
              collectionUuid: "iterator-CollectionContent"
          valueType: "java.util.List"
          genericValueType: "org.springframework.core.io.Resource"
          uuid: "iterator-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "org.springframework.core.io.Resource"
      uuid: "iterator"
    - sapientType: "ANY"
      valueType: "org.springframework.jdbc.datasource.init.ResourceDatabasePopulator"
      uuid: "resourceDatabasePopulator"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "object"
      collectionUuid: "iterator-CollectionContent"
    - sapientType: "MOCK"
      valueType: "org.springframework.jdbc.datasource.init.DatabasePopulatorUtils"
      uuid: "DatabasePopulatorUtils.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void5"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.jdbc.datasource.init.ResourceDatabasePopulator"
      uuid: "resourceDatabasePopulator"
      fixed: true
    - sapientType: "MOCK"
      valueType: "javax.sql.DataSource"
      uuid: "dataSource"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 80
      expression: "scripts.getEncoding() != null"
      range: "(80,7)-(80,35)"
      evaluatedAs: true
    - lineNumber: 83
      expression: "for-each(scripts)"
      range: "(83,28)-(83,34)"
      evaluatedAs: true
- method:
    name: "customize"
    sourceCodeSignature: "void customize(ResourceDatabasePopulator populator)"
    returnType: "void"
    parameters:
    - name: "populator"
      type: "org.springframework.jdbc.datasource.init.ResourceDatabasePopulator"
    instructionFingerprint: "C79D30ACC88C182FB7FDA25BAD7CDCAB"
  paths:
  - pathId: "path1"
    testPathName: "customizeTest"
    constructorSignature: "<init>(javax.sql.DataSource,org.springframework.boot.sql.init.DatabaseInitializationSettings)\
      \ : void"
    modelFingerprint: "CD5F8C713A7CE23D0361A1ADD0B11C0D"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
