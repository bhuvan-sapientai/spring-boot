---
modelFingerprint: "0882A16E482A6C2911B288232D901AFB"
targetClass:
  fullClassName: "org.springframework.boot.logging.java.JavaLoggingSystem"
methods:
- method:
    name: "getStandardConfigLocations"
    sourceCodeSignature: "String[] getStandardConfigLocations()"
    returnType: "java.lang.String[]"
    instructionFingerprint: "0DC5493CF908CBF501BF2D2470B4C3F6"
  paths:
  - pathId: "path1"
    testPathName: "getStandardConfigLocationsTest"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "4FB61957C96B0B495909DDCFE14834A2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D7BC64911A618E3A7BFFB3921A392FE3"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.java.JavaLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.java.JavaLoggingSystem"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "logging.properties"
            valueType: "java.lang.String"
            uuid: "uniqueUuid1"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
- method:
    name: "beforeInitialize"
    sourceCodeSignature: "void beforeInitialize()"
    returnType: "void"
    instructionFingerprint: "1CFBCD81E36C249481BFCE570AF93B63"
  paths:
  - pathId: "path1"
    testPathName: "beforeInitializeTest"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "9B43923DB1137EFF64233905CC3A4C60"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.java.JavaLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.java.JavaLoggingSystem"
      uuid: "target"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "loadDefaults"
    sourceCodeSignature: "void loadDefaults(LoggingInitializationContext initializationContext,\
      \ LogFile logFile)"
    returnType: "void"
    parameters:
    - name: "initializationContext"
      type: "org.springframework.boot.logging.LoggingInitializationContext"
    - name: "logFile"
      type: "org.springframework.boot.logging.LogFile"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "7F8F2C110E686399D80B437712E61A59"
  paths:
  - pathId: "path1"
    testPathName: "loadDefaultsWhenLogFileIsNotNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "DD7596F14FAD5AED50FDB754C50E8A97"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "ClassUtils.class.real"
      modelFingerprint: "872836EA28623BE4831DCDD45DE9D93A"
      valueUuid: "ClassUtils.class.real"
      methodExercised:
        expression: "getPackageName(clazz:uniqueUuid2):string"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "A5063FB2F24B8016BD4844A2B3CC855E"
      methodExercised:
        expression: "loadConfiguration(location:string6,logFile:logFile):void8"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.java.JavaLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.java.JavaLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.java"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.logging.java.JavaLoggingSystem"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.logging.java.JavaLoggingSystem"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void8"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "classpath:org/springframework/boot/logging/java/logging-file.properties"
      valueType: "java.lang.String"
      uuid: "string6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 88
      expression: "logFile != null"
      range: "(88,7)-(88,21)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "loadDefaultsWhenLogFileIsNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "76EE278028410A33BB41831C30AE00FB"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "9B1BF83008E682F052DC52C99E63D7C5"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "ClassUtils.class.real"
      modelFingerprint: "872836EA28623BE4831DCDD45DE9D93A"
      valueUuid: "ClassUtils.class.real"
      methodExercised:
        expression: "getPackageName(clazz:uniqueUuid3):string"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "302604B242678DE532F85558EDF31C8B"
      methodExercised:
        expression: "loadConfiguration(location:string6,logFile:uniqueUuid4):void8"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.java.JavaLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.java.JavaLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.java"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.logging.java.JavaLoggingSystem"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.logging.java.JavaLoggingSystem"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void8"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "classpath:org/springframework/boot/logging/java/logging.properties"
      valueType: "java.lang.String"
      uuid: "string6"
      fixed: true
    - sapientType: "NULL"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "uniqueUuid4"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 88
      expression: "logFile != null"
      range: "(88,7)-(88,21)"
      evaluatedAs: false
- method:
    name: "loadConfiguration"
    sourceCodeSignature: "void loadConfiguration(LoggingInitializationContext initializationContext,\
      \ String location, LogFile logFile)"
    returnType: "void"
    parameters:
    - name: "initializationContext"
      type: "org.springframework.boot.logging.LoggingInitializationContext"
    - name: "location"
      type: "java.lang.String"
    - name: "logFile"
      type: "org.springframework.boot.logging.LogFile"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "9581CD3B168AEE297BC08D9347227815"
  paths:
  - pathId: "path1"
    testPathName: "loadConfigurationTest"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "4DC039B63C44AB0D4E98798690D979E1"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "3AFB819A3AF82CB03439BE094E5D74A5"
      valueUuid: "location"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "383CEEE28C50C335F50C2EFC5A54ED72"
      methodExercised:
        expression: "loadConfiguration(location:location,logFile:logFile):void8"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.java.JavaLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.java.JavaLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void8"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "loadConfiguration"
    sourceCodeSignature: "void loadConfiguration(String location, LogFile logFile)"
    returnType: "void"
    parameters:
    - name: "location"
      type: "java.lang.String"
    - name: "logFile"
      type: "org.springframework.boot.logging.LogFile"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "B42A64C6D00AF2EDA3697FED48D5BBE0"
  paths:
  - pathId: "path1"
    testPathName: "loadConfiguration1WhenLogFileIsNotNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "26C2B7EEF888FDFECED4B611AFB73793"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "B6387B9F3CEF19C379B39729ADDA5D1C"
      valueUuid: "location"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "FD63EDAC74D018570B13AF3BFB01E7BB"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "47CAEF5B9AA188F54F71893F62E67791"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:location,message:uniqueUuid5):void8"
        staticAccess: true
    - type: "STATIC"
      name: "ResourceUtils.class.real"
      modelFingerprint: "F099CBB9774888E0624FDCDB5F4A509A"
      valueUuid: "ResourceUtils.class.real"
      methodExercised:
        expression: "getURL(resourceLocation:location):uRL"
        throwsExceptions:
        - "java.io.FileNotFoundException"
        staticAccess: true
    - type: "STATIC"
      name: "FileCopyUtils.class"
      modelFingerprint: "070F6380BFC4948AECEC8175A5D36A3B"
      valueUuid: "FileCopyUtils.class"
      methodExercised:
        expression: "copyToString(in:inputStreamReader):string"
        throwsExceptions:
        - "java.io.IOException"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "EBD49EC2E983610949D4B8E9A01709EB"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "cleanPath(path:string2):string3"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "LogManager.getLogManager().readConfiguration(new ByteArrayInputStream(configuration.getBytes()));"
      lineNumber: 110
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type LogManager - Method: readConfiguration"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.java.JavaLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.java.JavaLoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
      nameForMock: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void8"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Location must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ResourceUtils"
        method: "getURL"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "location"
      valueType: "java.net.URL"
      uuid: "uRL"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.FileCopyUtils"
      uuid: "FileCopyUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "${LOG_FILE}"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "ANY"
      valueType: "java.io.InputStreamReader"
      uuid: "inputStreamReader"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "logFile"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "logFile"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 107
      expression: "logFile != null"
      range: "(107,8)-(107,22)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "loadConfiguration1WhenCaughtExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "FAD9AB2CD575A394893E47DD38A8895E"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "B6387B9F3CEF19C379B39729ADDA5D1C"
      valueUuid: "location"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "FD63EDAC74D018570B13AF3BFB01E7BB"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "47CAEF5B9AA188F54F71893F62E67791"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:location,message:uniqueUuid6):void8"
        staticAccess: true
    - type: "STATIC"
      name: "ResourceUtils.class"
      modelFingerprint: "F099CBB9774888E0624FDCDB5F4A509A"
      valueUuid: "ResourceUtils.class"
      methodExercised:
        expression: "getURL(resourceLocation:location):uRL"
        throwsExceptions:
        - "java.io.FileNotFoundException"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "3E44B8674A717515DBE482BEF912ABE6"
      valueUuid: "uRL"
      methodExercised:
        expression: "openStream():inputStream"
        throwsExceptions:
        - "java.io.IOException"
    - type: "STATIC"
      name: "FileCopyUtils.class"
      modelFingerprint: "070F6380BFC4948AECEC8175A5D36A3B"
      valueUuid: "FileCopyUtils.class"
      methodExercised:
        expression: "copyToString(in:inputStreamReader):string"
        throwsExceptions:
        - "java.io.IOException"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "EBD49EC2E983610949D4B8E9A01709EB"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "cleanPath(path:string2):string3"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "CFD3B86902BE81FB12184C998DCBA19B"
      valueUuid: "logManager"
      methodExercised:
        expression: "readConfiguration(ins:byteArrayInputStream):void9"
        throwsExceptions:
        - "java.io.IOException"
        - "java.lang.SecurityException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "3147B3414316288057DB2BBA9FFC22B8"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "LogManager.getLogManager().readConfiguration(new ByteArrayInputStream(configuration.getBytes()));"
      lineNumber: 110
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type LogManager - Method: readConfiguration"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.java.JavaLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.java.JavaLoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
      nameForMock: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void8"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Location must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ResourceUtils"
        method: "getURL"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "location"
      valueType: "java.net.URL"
      uuid: "uRL"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ResourceUtils"
        method: "getURL"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "location"
      valueType: "java.net.URL"
      uuid: "uRL"
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "inputStream"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.FileCopyUtils"
      uuid: "FileCopyUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "${LOG_FILE}"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "ANY"
      valueType: "java.io.InputStreamReader"
      uuid: "inputStreamReader"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "logFile"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "logFile"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.logging.LogManager"
        method: "getLogManager"
        methodParameters: []
      valueType: "java.util.logging.LogManager"
      uuid: "logManager"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        inputStreamClass: "java.io.ByteArrayInputStream"
        values: []
        parameters:
        - name: "buf"
          value:
            sapientType: "ARRAY"
            valueType: "byte[]"
            uuid: "byteArray"
      valueType: "java.io.ByteArrayInputStream"
      uuid: "byteArrayInputStream"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Could not initialize Java logging from A"
            valueType: "java.lang.String"
            uuid: "string5"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Exception"
              parameters: []
            valueType: "java.lang.Exception"
            uuid: "exception"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 107
      expression: "logFile != null"
      range: "(107,8)-(107,22)"
      evaluatedAs: true
    - lineNumber: 112
      expression: "catch-exception (Exception)"
      range: "(112,3)-(112,21)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
- method:
    name: "getSupportedLogLevels"
    sourceCodeSignature: "Set<LogLevel> getSupportedLogLevels()"
    returnType: "java.util.Set"
    genericReturnType: "org.springframework.boot.logging.LogLevel"
    instructionFingerprint: "C176876AEC8434087C1C2EE4249A0945"
  paths:
  - pathId: "path1"
    testPathName: "getSupportedLogLevelsTest"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "67D975028719EA5B22C53420F11721B5"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "7B1A8C3CABFA388370F8CD206235C897"
      valueUuid: "set2"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return LEVELS.getSupported();"
      lineNumber: 119
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: LEVELS - Method: getSupported"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.java.JavaLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.java.JavaLoggingSystem"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Set"
      genericValueType: "org.springframework.boot.logging.LogLevel"
      uuid: "set2"
- method:
    name: "setLogLevel"
    sourceCodeSignature: "void setLogLevel(String loggerName, LogLevel level)"
    returnType: "void"
    parameters:
    - name: "loggerName"
      type: "java.lang.String"
    - name: "level"
      type: "org.springframework.boot.logging.LogLevel"
    instructionFingerprint: "EEDCA0F64AC6D7D3BC05AFBDC2BDB236"
  paths:
  - pathId: "path1"
    testPathName: "setLogLevelWhenROOT_LOGGER_NAMEEqualsLoggerNameAndLoggerIsNotNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "6CAF6743F9F3CDA33C2725EB0C9FBBD8"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "92E6E94B493D274576D3BDC78C61F78B"
      valueUuid: "loggerName"
    - type: "INPUT"
      name: "level"
      modelFingerprint: "91A7FB959B8D13C83C0A55848E4C169E"
      valueUuid: "level"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.java.JavaLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.java.JavaLoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "ENUM"
      content: !<regular>
        value: "OFF"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "level"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 124
      expression: "loggerName == null"
      range: "(124,7)-(124,24)"
      evaluatedAs: false
    - lineNumber: 124
      expression: "ROOT_LOGGER_NAME.equals(loggerName)"
      range: "(124,29)-(124,63)"
      evaluatedAs: true
    - lineNumber: 128
      expression: "logger != null"
      range: "(128,7)-(128,20)"
      evaluatedAs: true
- method:
    name: "getLoggerConfigurations"
    sourceCodeSignature: "List<LoggerConfiguration> getLoggerConfigurations()"
    returnType: "java.util.List"
    genericReturnType: "org.springframework.boot.logging.LoggerConfiguration"
    instructionFingerprint: "FC6CF383CE8CB8854048E4334C556310"
  paths:
  - pathId: "path1"
    testPathName: "getLoggerConfigurationsWhenNamesHasMoreElements"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "3C4201E9CBE7ACA40AE69323D71371D0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "C763A3C7F01DE40CED39819C10C38B09"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object):loggerConfiguration"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "C688BFEAF7388A420A6C02BED1776001"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object2):loggerConfiguration2"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "C6E70950ABD58F193F3114B69111C7E1"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object3):loggerConfiguration3"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "85BEB784FF72A6D78251994D851534DA"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object4):loggerConfiguration4"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "222878C533D7BBC6C52CEDDB743FA6A1"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object5):loggerConfiguration5"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "19C3B4C590A6D02358C8EF192DFDA276"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object6):loggerConfiguration6"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "51F1CA2C3F4F9188C01D72A3CD27E23F"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object7):loggerConfiguration7"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "AF702D7701BBD5AA86E8CD368773D0B6"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object8):loggerConfiguration8"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "D7A62FAF561F64EAD260B2205A5A92A5"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object9):loggerConfiguration9"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "8F9174EA21437A8E4466F6CC48DF7D0F"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object10):loggerConfiguration10"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "B2DDE1D1033FA88D34EEF329F3192A1E"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object11):loggerConfiguration11"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "2C0559DE902B08FC0005B0101FAEAC2B"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object12):loggerConfiguration12"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "49751E89BCA5F426D2BCADBCC542F05B"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object13):loggerConfiguration13"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "A8F1A3B38AA66E23980533EB4B28D09E"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object14):loggerConfiguration14"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "556F58CAC84199ED03A1189D5CFD60C4"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object15):loggerConfiguration15"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "5CB4C06A193581C13CBA3F0B67512175"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object16):loggerConfiguration16"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "FC76C2F5E126FDA22DC52E347CDC47CC"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object17):loggerConfiguration17"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "B9083F5FE049BFB157AC459F2FF1E166"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object18):loggerConfiguration18"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "EC685240E6BBFD1BE2BB3242A5EC9BC6"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object19):loggerConfiguration19"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "DA2701D8FBE86AB14A6739F7E9B85E29"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object20):loggerConfiguration20"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "DEE551A75A68E762B74993D5BE1CC0C4"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object21):loggerConfiguration21"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "52185EC2D50897F8246F647C23ACE900"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object22):loggerConfiguration22"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "EA6F878575079A430A5DD109D598E991"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object23):loggerConfiguration23"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "0DC025E932E05163B3F23646CCFD0479"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object24):loggerConfiguration24"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "074F23ABF558D97C6DCA1AD1C3D34EE2"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object25):loggerConfiguration25"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "6E5611E2C4EDE9654D64AD3F6D3527B5"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object26):loggerConfiguration26"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "D69D2C0E50459E97DCD749CF68B8FC0C"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object27):loggerConfiguration27"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "F0B461ED73AD319D6FB7788714122666"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object28):loggerConfiguration28"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "D0A1BE9AE03D774E715AC67C3DA28E4B"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object29):loggerConfiguration29"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "ADA1F61FFE06889F39CD420575F1A7FC"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object30):loggerConfiguration30"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "7F8467408A019EBA2C48F28F6E290406"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object31):loggerConfiguration31"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "776A9B699BE8BA8FD820D5458294BDF3"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object32):loggerConfiguration32"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "C1D3644B439E11EB31FF473CFC8FD951"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object33):loggerConfiguration33"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "4DFB770E0989712AE0C96E8D09506877"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object34):loggerConfiguration34"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "274961F9C14B4BFA2E2EF65FC60488DE"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object35):loggerConfiguration35"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "8C44DDDE1C374CAA1887E566DC28FD09"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object36):loggerConfiguration36"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "6018968F6BAB819A3FAE09528023A89F"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object37):loggerConfiguration37"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "6F8DD5BA9AFF7F1FE42ED7BDDCC8337C"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object38):loggerConfiguration38"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "C2D0F96F35867B02CF7E3468B9CA0886"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object39):loggerConfiguration39"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "3587726AFD34ABC5F71B5147410FADA7"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object40):loggerConfiguration40"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "3B979AC56FED96887F7AAE7DD24A97BB"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object41):loggerConfiguration41"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "B11FFCC0D03282131B22B1131C1F8F75"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object42):loggerConfiguration42"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "0AC2503A10ECB81FB90C55732DC1F846"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object43):loggerConfiguration43"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "D422BD0C662045DEB39DADCE139C1FD4"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object44):loggerConfiguration44"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "2C192A1F6F1BA32717696BD06B704F9E"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object45):loggerConfiguration45"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "3787556731CCFAC46609445CA4F45B75"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object46):loggerConfiguration46"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "BFE78D9A7ABBF60F3436E7F3BA8F8C5B"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object47):loggerConfiguration47"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "8AD171D0815DCE4B7FF49A1770E9DFC2"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object48):loggerConfiguration48"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "AAF96A23BE8CD0FE8C36F1BA27147541"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object49):loggerConfiguration49"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "9D49147526EFADFDC831CED878D88AA5"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object50):loggerConfiguration50"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "BA9BB2BCAEF1E7BBBF513D7584A0C43B"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object51):loggerConfiguration51"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "C553AD32D2C5A3DE653788A7B7087072"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object52):loggerConfiguration52"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "C601B4EE74DFEE4DBDF6570EDB48A392"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object53):loggerConfiguration53"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "AB3B95A054FD2D77D84FCCE5D8772903"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object54):loggerConfiguration54"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "7A605074BE623FA97E4F7BDB082C5E06"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object55):loggerConfiguration55"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "19648152075267DB5EE2C64990CA23C6"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object56):loggerConfiguration56"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "C1530A2B3FBE357EE16259FDA412704A"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object57):loggerConfiguration57"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "6C6E979325BAD766C46495A507C3BA47"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object58):loggerConfiguration58"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "B3EE5839BCF978D423CA359C9184EA1D"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object59):loggerConfiguration59"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "F70411CD956BD32C784437F122A07F16"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object60):loggerConfiguration60"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "B46FA591A622ED31AC9187C673EF962C"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object61):loggerConfiguration61"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "D7C2F3029DC938BE48D110FD69084BE8"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object62):loggerConfiguration62"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "E0655E90466A6AFB0B37CF6DE1604836"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object63):loggerConfiguration63"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "E260C872E009591A1AEBC55D6E1035E1"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object64):loggerConfiguration64"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "BEEF28B92862268EB90424CDDFDC012B"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object65):loggerConfiguration65"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "972572360616CAFD79EF2F7C5DEFDF93"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object66):loggerConfiguration66"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "E3365D7AC237D74CA5BFCB94A2B5C8CC"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object67):loggerConfiguration67"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "4814156E301FC2517D90BCC2373BFEFE"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object68):loggerConfiguration68"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "2224746E104E7C4345CB2CCAA2E60D7D"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object69):loggerConfiguration69"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "5F539D8207246003737658EAE68A9A8E"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object70):loggerConfiguration70"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "6C5128E3B94C0E3EC8CF649C5ADCB3BE"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object71):loggerConfiguration71"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "66261ED98096CC70F4DD5CA65F8983D2"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object72):loggerConfiguration72"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "F94600D8D5DF409C47CFD414D186E0CB"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object73):loggerConfiguration73"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "A0768B40064B8B8E1E0599F856956356"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object74):loggerConfiguration74"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "9C61523C206FA35B2F4EDE38F5D2E209"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object75):loggerConfiguration75"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "A125547F5011B4FE319985B15D210180"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object76):loggerConfiguration76"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "2A68AA482F3A9ACEACD8BFAFFD1EECF6"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object77):loggerConfiguration77"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "AF27B40F1C1F6200EDDC5F5DC9745AEC"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object78):loggerConfiguration78"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "3DEF0155A9C08076CDD5EA8292652B49"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object79):loggerConfiguration79"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "DD7E98BF4E8444C5E851A5CE0354387E"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object80):loggerConfiguration80"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "559EEA6DB36403963AE4F3BD30E7CFE3"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object81):loggerConfiguration81"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "8C358D3165945077AA93A33CF561847C"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object82):loggerConfiguration82"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "20B58C72240E1D5089EA856353804DE7"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object83):loggerConfiguration83"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "AC484FB26C4F122E43C0888D238B4AD8"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object84):loggerConfiguration84"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "9BFCD2B919EE2CDD99C1D7C6E215D986"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object85):loggerConfiguration85"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "C652D2892A1483C3C1CFA7FBC542E999"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object86):loggerConfiguration86"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "EC091A1BF0ACB715FDF0FC4D6C41F1A3"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object87):loggerConfiguration87"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "9AE2D2050EEC465C6940DDA6003BE0F3"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object88):loggerConfiguration88"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "F86CA0E80F645EE37726B4E210B7CCBF"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object89):loggerConfiguration89"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "2476A03422BB1828394ABDEB219EB7CC"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object90):loggerConfiguration90"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "F7FD78771C61CC075FEB045AD661E0DD"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object91):loggerConfiguration91"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "940D92A7C1B88B7685D4E2186CA9D3E4"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object92):loggerConfiguration92"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "DD864495E3A64BAB4B3ADEE1795E4A3C"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object93):loggerConfiguration93"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "FB9B91C5DB95C8DE3837CD90D7AD433A"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object94):loggerConfiguration94"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "B7E88E18664B3F6AFEC8AB98D3D6E7C7"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object95):loggerConfiguration95"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "0277638304CEA1E1CF0FCCC5EDB21C5D"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object96):loggerConfiguration96"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "4E66B494ED6FCC06F656B277F94DE8A7"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object97):loggerConfiguration97"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "E96517EE24341E488E2F57D0D16B8881"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object98):loggerConfiguration98"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "970262417B1B7A326B53FC71EE758A5D"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object99):loggerConfiguration99"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "6FE20A5F07086EC53BE0EE56451BFC26"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object100):loggerConfiguration100"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "83D92DA84F47634DE4FDA390FD32D89C"
      methodExercised:
        expression: "getLoggerConfiguration(loggerName:object101):loggerConfiguration101"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "3AA183D8C78DD47BDD83CAB02ACE7D8D"
      valueUuid: "list"
    disabled: true
    failureReason:
      reason: "GET_STATIC_FINAL_FIELD_INSTRUCTION_FIELD_NOT_ACCESSIBLE"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.java.JavaLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.java.JavaLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "object"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.diff.util.DiffDrawUtil"
      valueType: "java.lang.String"
      uuid: "object2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.openapi.actionSystem.impl.segmentedActionBar.SegmentedActionToolbarComponent"
      valueType: "java.lang.String"
      uuid: "object3"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.util.indexing.contentQueue.IndexUpdateRunner"
      valueType: "java.lang.String"
      uuid: "object4"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration5"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#org.zmlx.hg4idea.util.HgUtil"
      valueType: "java.lang.String"
      uuid: "object5"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "com.intellij.ui.HyperlinkLabel"
      valueType: "java.lang.String"
      uuid: "object6"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration7"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.psi.impl.java.stubs.impl.PsiAnnotationStubImpl"
      valueType: "java.lang.String"
      uuid: "object7"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.codeInspection.i18n.I18nizeAction"
      valueType: "java.lang.String"
      uuid: "object8"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration9"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.psi.impl.source.tree.java.AnnotationParamListElement"
      valueType: "java.lang.String"
      uuid: "object9"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration10"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#git4idea.actions.GitPull"
      valueType: "java.lang.String"
      uuid: "object10"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration11"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.openapi.vcs.actions.AnnotateToggleAction"
      valueType: "java.lang.String"
      uuid: "object11"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration12"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.languagetool.rules.spelling.morfologik.MorfologikSpellerRule"
      valueType: "java.lang.String"
      uuid: "object12"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration13"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#git4idea.log.GitLogProvider"
      valueType: "java.lang.String"
      uuid: "object13"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration14"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.openapi.vfs.impl.local.WatchRootsManager"
      valueType: "java.lang.String"
      uuid: "object14"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration15"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.util.xml.impl.AttributeChildInvocationHandler"
      valueType: "java.lang.String"
      uuid: "object15"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration16"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#org.jetbrains.kotlin.psi.stubs.impl.KotlinStubBaseImpl"
      valueType: "java.lang.String"
      uuid: "object16"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration17"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.lang.ant.config.impl.AntReference"
      valueType: "java.lang.String"
      uuid: "object17"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration18"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.refactoring.extractInterface.ExtractInterfaceHandler"
      valueType: "java.lang.String"
      uuid: "object18"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration19"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.openapi.wm.impl.PainterHelper"
      valueType: "java.lang.String"
      uuid: "object19"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration20"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.codeInsight.editorActions.TypedHandler"
      valueType: "java.lang.String"
      uuid: "object20"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration21"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.execution.process.KillableProcessHandler"
      valueType: "java.lang.String"
      uuid: "object21"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration22"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.openapi.vcs.impl.PartialChangesUtil"
      valueType: "java.lang.String"
      uuid: "object22"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration23"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.execution.testDiscovery.TestDiscoveryIndex"
      valueType: "java.lang.String"
      uuid: "object23"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration24"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#org.jetbrains.plugins.terminal.ShellTerminalWidget"
      valueType: "java.lang.String"
      uuid: "object24"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration25"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.lang.properties.PropertiesUastReferenceContributor"
      valueType: "java.lang.String"
      uuid: "object25"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration26"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.debugger.ui.breakpoints.ExceptionBreakpoint"
      valueType: "java.lang.String"
      uuid: "object26"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration27"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#zielu.gittoolbox.blame"
      valueType: "java.lang.String"
      uuid: "object27"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration28"
    - sapientType: "BASIC"
      content: !<regular>
        value: "H"
      valueType: "java.lang.String"
      uuid: "object28"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration29"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.psi.impl.source.xml.XmlDoctypeImpl"
      valueType: "java.lang.String"
      uuid: "object29"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration30"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.psi.impl.source.tree.java.MethodReferenceResolver"
      valueType: "java.lang.String"
      uuid: "object30"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration31"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#org.jetbrains.idea.perforce.application.PerforceClientRootsChecker"
      valueType: "java.lang.String"
      uuid: "object31"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration32"
    - sapientType: "BASIC"
      content: !<regular>
        value: "jetbrains.exodus.gc.GarbageCollector"
      valueType: "java.lang.String"
      uuid: "object32"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration33"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.codeInsight.daemon.impl.quickfix.DefineParamsDefaultValueAction"
      valueType: "java.lang.String"
      uuid: "object33"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration34"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.util.xml.impl.DomRootInvocationHandler"
      valueType: "java.lang.String"
      uuid: "object34"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration35"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.openapi.util.LowMemoryWatcher"
      valueType: "java.lang.String"
      uuid: "object35"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration36"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.codeInspection.dataFlow.ConstantValueInspection"
      valueType: "java.lang.String"
      uuid: "object36"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration37"
    - sapientType: "BASIC"
      content: !<regular>
        value: "sun.lwawt.macosx.CPlatformView"
      valueType: "java.lang.String"
      uuid: "object37"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration38"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#org.zmlx.hg4idea.util.HgVersion"
      valueType: "java.lang.String"
      uuid: "object38"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration39"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.codeInsight.actions.VcsFacade"
      valueType: "java.lang.String"
      uuid: "object39"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration40"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.openapi.paths.PathReferenceProviderBase"
      valueType: "java.lang.String"
      uuid: "object40"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration41"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.codeInsight.daemon.impl.analysis.LambdaHighlightingUtil"
      valueType: "java.lang.String"
      uuid: "object41"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration42"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.toolWindow.ToolWindowPane"
      valueType: "java.lang.String"
      uuid: "object42"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration43"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.concurrency.JobLauncher"
      valueType: "java.lang.String"
      uuid: "object43"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration44"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.execution.testframework.sm.runner.ui.SMTestRunnerResultsForm"
      valueType: "java.lang.String"
      uuid: "object44"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration45"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.codeInspection.CommonProblemDescriptorImpl"
      valueType: "java.lang.String"
      uuid: "object45"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration46"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.openapi.editor.impl.SelectionModelImpl"
      valueType: "java.lang.String"
      uuid: "object46"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration47"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.execution.actions.BaseRunConfigurationAction"
      valueType: "java.lang.String"
      uuid: "object47"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration48"
    - sapientType: "BASIC"
      content: !<regular>
        value: "okhttp3.OkHttpClient"
      valueType: "java.lang.String"
      uuid: "object48"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration49"
    - sapientType: "BASIC"
      content: !<regular>
        value: "jdk.internal.httpclient.debug"
      valueType: "java.lang.String"
      uuid: "object49"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration50"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.codeInsight.daemon.impl.DaemonListeners"
      valueType: "java.lang.String"
      uuid: "object50"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration51"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.indexing.shared.util.zipFs.UncompressedZipFileSystem"
      valueType: "java.lang.String"
      uuid: "object51"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration52"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.openapi.editor.impl.IntervalTreeImpl"
      valueType: "java.lang.String"
      uuid: "object52"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration53"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#git4idea.index.GitStageTracker"
      valueType: "java.lang.String"
      uuid: "object53"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration54"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#org.intellij.plugins.xpathView.XPathEvalAction"
      valueType: "java.lang.String"
      uuid: "object54"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration55"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.psi.search.scope.packageSet.FilePatternPackageSet"
      valueType: "java.lang.String"
      uuid: "object55"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration56"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.codeInsight.folding.impl.UpdateFoldRegionsOperation"
      valueType: "java.lang.String"
      uuid: "object56"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration57"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.openapi.roots.impl.libraries.RenameLibraryHandler"
      valueType: "java.lang.String"
      uuid: "object57"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration58"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.openapi.editor.impl.softwrap.mapping.CachingSoftWrapDataMapper"
      valueType: "java.lang.String"
      uuid: "object58"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration59"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.psi.controlFlow.ControlFlowAnalyzer"
      valueType: "java.lang.String"
      uuid: "object59"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration60"
    - sapientType: "BASIC"
      content: !<regular>
        value: "com.sun.xml.bind.v2.runtime.reflect.Accessor$FieldReflection"
      valueType: "java.lang.String"
      uuid: "object60"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration61"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.externalProcessAuthHelper.ExternalProcessHandlerService"
      valueType: "java.lang.String"
      uuid: "object61"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration62"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.execution.RunManager"
      valueType: "java.lang.String"
      uuid: "object62"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration63"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.apache.commons.beanutils.converters.BooleanConverter"
      valueType: "java.lang.String"
      uuid: "object63"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration64"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.codeInspection.dataFlow.interpreter.StandardDataFlowInterpreter"
      valueType: "java.lang.String"
      uuid: "object64"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration65"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.compiler.server.impl.BuildProcessClasspathManager"
      valueType: "java.lang.String"
      uuid: "object65"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration66"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.openapi.wm.impl.ToolWindowManagerImpl"
      valueType: "java.lang.String"
      uuid: "object66"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration67"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.psi.GenericsUtil"
      valueType: "java.lang.String"
      uuid: "object67"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration68"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.openapi.vcs.changes.VcsIgnoreManagerImpl"
      valueType: "java.lang.String"
      uuid: "object68"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration69"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.psi.impl.migration.PsiMigrationManager"
      valueType: "java.lang.String"
      uuid: "object69"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration70"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.execution.testframework.sm.ServiceMessageUtil"
      valueType: "java.lang.String"
      uuid: "object70"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration71"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.util.indexing.UnindexedFilesScannerExecutor"
      valueType: "java.lang.String"
      uuid: "object71"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration72"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.gradle.tooling.GradleConnector"
      valueType: "java.lang.String"
      uuid: "object72"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration73"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.framework.detection.impl.DetectedFrameworksData"
      valueType: "java.lang.String"
      uuid: "object73"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration74"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.codeInspection.dataFlow.java.inst.MethodCallInstruction"
      valueType: "java.lang.String"
      uuid: "object74"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration75"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.theoryinpractice.testng.inspection.DuplicatedDataProviderNamesInspection"
      valueType: "java.lang.String"
      uuid: "object75"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration76"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.openapi.wm.impl.SideStack"
      valueType: "java.lang.String"
      uuid: "object76"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration77"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.jetbrains.rdserver.daemon.RdServerEditorTracker"
      valueType: "java.lang.String"
      uuid: "object77"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration78"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.codeInsight.daemon.impl.DefaultHighlightVisitor"
      valueType: "java.lang.String"
      uuid: "object78"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration79"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.psi.impl.source.tree.SharedImplUtil"
      valueType: "java.lang.String"
      uuid: "object79"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration80"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.util.indexing.diagnostic.IndexOperationFUS"
      valueType: "java.lang.String"
      uuid: "object80"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration81"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.psi.formatter.common.InjectedLanguageBlockBuilder"
      valueType: "java.lang.String"
      uuid: "object81"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration82"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.eclipse.aether.internal.impl.TrackingFileManager"
      valueType: "java.lang.String"
      uuid: "object82"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration83"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.platform.templates.SaveProjectAsTemplateAction"
      valueType: "java.lang.String"
      uuid: "object83"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration84"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.util.indexing.ProjectChangedFilesScanner"
      valueType: "java.lang.String"
      uuid: "object84"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration85"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.psi.impl.source.resolve.ClassResolverProcessor"
      valueType: "java.lang.String"
      uuid: "object85"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration86"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#git4idea.rebase.GitSimpleEditorHandler"
      valueType: "java.lang.String"
      uuid: "object86"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration87"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#zielu.gittoolbox.ui"
      valueType: "java.lang.String"
      uuid: "object87"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration88"
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.awt.event.InputEvent"
      valueType: "java.lang.String"
      uuid: "object88"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration89"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.lang.documentation.psi"
      valueType: "java.lang.String"
      uuid: "object89"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration90"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.util.containers.Enumerator"
      valueType: "java.lang.String"
      uuid: "object90"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration91"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.execution.target.TargetEnvironmentUtil"
      valueType: "java.lang.String"
      uuid: "object91"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration92"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.vcs.log.impl.VcsLogCachesInvalidator"
      valueType: "java.lang.String"
      uuid: "object92"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration93"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.util.MethodInvocator"
      valueType: "java.lang.String"
      uuid: "object93"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration94"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#org.jetbrains.kotlin.idea.script.ScriptTemplatesFromDependenciesProvider"
      valueType: "java.lang.String"
      uuid: "object94"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration95"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.uiDesigner.binding.FormClassAnnotator"
      valueType: "java.lang.String"
      uuid: "object95"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration96"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.android.tools.idea.run.ui.BaseAction"
      valueType: "java.lang.String"
      uuid: "object96"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration97"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.ide.impl.DataValidators"
      valueType: "java.lang.String"
      uuid: "object97"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration98"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.vcs.log.data.index.VcsLogUserIndex"
      valueType: "java.lang.String"
      uuid: "object98"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration99"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#org.jetbrains.android.AndroidDocumentationProvider"
      valueType: "java.lang.String"
      uuid: "object99"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration100"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.openapi.projectRoots.impl.UnknownSdkCollector"
      valueType: "java.lang.String"
      uuid: "object100"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration101"
    - sapientType: "BASIC"
      content: !<regular>
        value: "#com.intellij.openapi.vcs.changes.committed.CommittedChangesCache"
      valueType: "java.lang.String"
      uuid: "object101"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration2"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration3"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration4"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration5"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration6"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration7"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration8"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration9"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration10"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration11"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration12"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration13"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration14"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration15"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration16"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration17"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration18"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration19"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration20"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration21"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration22"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration23"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration24"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration25"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration26"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration27"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration28"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration29"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration30"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration31"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration32"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration33"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration34"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration35"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration36"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration37"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration38"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration39"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration40"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration41"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration42"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration43"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration44"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration45"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration46"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration47"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration48"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration49"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration50"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration51"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration52"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration53"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration54"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration55"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration56"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration57"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration58"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration59"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration60"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration61"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration62"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration63"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration64"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration65"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration66"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration67"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration68"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration69"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration70"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration71"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration72"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration73"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration74"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration75"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration76"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration77"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration78"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration79"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration80"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration81"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration82"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration83"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration84"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration85"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration86"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration87"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration88"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration89"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration90"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration91"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration92"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration93"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration94"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration95"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration96"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration97"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration98"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration99"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration100"
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration101"
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "list"
    branches:
    - lineNumber: 138
      expression: "names.hasMoreElements()"
      range: "(138,10)-(138,32)"
      evaluatedAs: true
- method:
    name: "getLoggerConfiguration"
    sourceCodeSignature: "LoggerConfiguration getLoggerConfiguration(String loggerName)"
    returnType: "org.springframework.boot.logging.LoggerConfiguration"
    parameters:
    - name: "loggerName"
      type: "java.lang.String"
    instructionFingerprint: "95FCC1F3EDB5D724E3FECAFB51B6B96C"
  paths:
  - pathId: "path1"
    testPathName: "getLoggerConfigurationWhenLoggerIsNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "9F6DBA04800F42EB20BD5EF94D6846A4"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "A2E11966147629F7EB0BA8706EE80B6B"
      valueUuid: "loggerName"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "3A5A60D2947E5A7C6022611FE6C7947B"
      valueUuid: "loggerConfiguration"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.java.JavaLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.java.JavaLoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration"
      fixed: true
    branches:
    - lineNumber: 148
      expression: "logger == null"
      range: "(148,7)-(148,20)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "getLoggerConfigurationWhenStringUtilsHasLengthLoggerGetName"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "C6EF6F9333769C07234595D66CF9993A"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "A2E11966147629F7EB0BA8706EE80B6B"
      valueUuid: "loggerName"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "7134351239132D3AEBB7FA91063DD3AC"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:string):boolean1"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "2DEC83C475ABD737C12DD3BC38669081"
      valueUuid: "loggerConfiguration"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "LogLevel level = LEVELS.convertNativeToSystem(logger.getLevel());"
      lineNumber: 151
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: LEVELS - Method: convertNativeToSystem"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.java.JavaLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.java.JavaLoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.LoggerConfiguration"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "name1"
            valueType: "java.lang.String"
            uuid: "string2"
        - name: "configuredLevel"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "TRACE"
            valueType: "org.springframework.boot.logging.LogLevel"
            uuid: "logLevel"
        - name: "effectiveLevel"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "TRACE"
            valueType: "org.springframework.boot.logging.LogLevel"
            uuid: "logLevel2"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration"
      fixed: true
    branches:
    - lineNumber: 148
      expression: "logger == null"
      range: "(148,7)-(148,20)"
      evaluatedAs: false
    - lineNumber: 159
      expression: "logger.getLevel() == null"
      range: "(159,10)-(159,34)"
      evaluatedAs: true
      internalMethodName: "getEffectiveLevel"
    - lineNumber: 153
      expression: "StringUtils.hasLength(logger.getName())"
      range: "(153,18)-(153,56)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "getLoggerConfigurationWhenStringUtilsNotHasLengthLoggerGetName"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "5D3705E5E7B9E6A866A87AD36DCF17C6"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "A2E11966147629F7EB0BA8706EE80B6B"
      valueUuid: "loggerName"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "C2604A03CA03BFAB37C0AD4EFDCC34F5"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:string):boolean1"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C1EF2C485ADD0C6F25FDE63FB93577A5"
      valueUuid: "loggerConfiguration"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "LogLevel level = LEVELS.convertNativeToSystem(logger.getLevel());"
      lineNumber: 151
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: LEVELS - Method: convertNativeToSystem"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.java.JavaLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.java.JavaLoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.LoggerConfiguration"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "ROOT"
            valueType: "java.lang.String"
            uuid: "string2"
            fixed: true
        - name: "configuredLevel"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "TRACE"
            valueType: "org.springframework.boot.logging.LogLevel"
            uuid: "logLevel"
        - name: "effectiveLevel"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "TRACE"
            valueType: "org.springframework.boot.logging.LogLevel"
            uuid: "logLevel2"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration"
      fixed: true
    branches:
    - lineNumber: 148
      expression: "logger == null"
      range: "(148,7)-(148,20)"
      evaluatedAs: false
    - lineNumber: 159
      expression: "logger.getLevel() == null"
      range: "(159,10)-(159,34)"
      evaluatedAs: true
      internalMethodName: "getEffectiveLevel"
    - lineNumber: 153
      expression: "StringUtils.hasLength(logger.getName())"
      range: "(153,18)-(153,56)"
      evaluatedAs: false
- method:
    name: "getShutdownHandler"
    sourceCodeSignature: "Runnable getShutdownHandler()"
    returnType: "java.lang.Runnable"
    instructionFingerprint: "7E792F186E242AE71F91FD09A9D73056"
  paths:
  - pathId: "path1"
    testPathName: "getShutdownHandlerTest"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "D47464FDF87C5F59E40DE7F61FA7270A"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "992B3E5D2952F893CF69794C32319CB3"
      valueUuid: "runnableNotNull"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.java.JavaLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.java.JavaLoggingSystem"
      uuid: "target"
    - sapientType: "NOT_NULL"
      valueType: "java.lang.Runnable"
      uuid: "runnableNotNull"
      fixed: true
- method:
    name: "cleanUp"
    sourceCodeSignature: "void cleanUp()"
    returnType: "void"
    instructionFingerprint: "B8D58820D5D860C976B738905A905D94"
  paths:
  - pathId: "path1"
    testPathName: "cleanUpTest"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "F5771E070ECE2AB2A4123430075A1B47"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.java.JavaLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.java.JavaLoggingSystem"
      uuid: "target"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
