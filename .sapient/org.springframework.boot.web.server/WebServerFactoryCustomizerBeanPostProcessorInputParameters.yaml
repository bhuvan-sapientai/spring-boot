---
modelFingerprint: "F3B510F17CB4E8BF1FEA3D2E3AF31DCB"
targetClass:
  fullClassName: "org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessor"
methods:
- method:
    name: "setBeanFactory"
    sourceCodeSignature: "void setBeanFactory(BeanFactory beanFactory)"
    returnType: "void"
    parameters:
    - name: "beanFactory"
      type: "org.springframework.beans.factory.BeanFactory"
    instructionFingerprint: "28AC2EE3068A2D1DEE0F2787ED395F8B"
  paths:
  - pathId: "path1"
    testPathName: "setBeanFactoryTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "27BC84BBAC37223B3BABF747C1C8BFBA"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "beanFactory"
      modelFingerprint: "F797548EA20F4364AB16C30931B3BF75"
      valueUuid: "beanFactory"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FCEFF719239099289FEFDA02A56A3AE6"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid1,obj:beanFactory,message:uniqueUuid2):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessor"
        parameters: []
      valueType: "org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessor"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.ListableBeanFactory"
      uuid: "beanFactory"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.beans.factory.ListableBeanFactory"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.beans.factory.ListableBeanFactory"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.ListableBeanFactory"
      uuid: "beanFactory"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "WebServerCustomizerBeanPostProcessor can only be used with a ListableBeanFactory"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "postProcessBeforeInitialization"
    sourceCodeSignature: "Object postProcessBeforeInitialization(Object bean, String\
      \ beanName)"
    returnType: "java.lang.Object"
    throwsExceptions:
    - "org.springframework.beans.BeansException"
    parameters:
    - name: "bean"
      type: "java.lang.Object"
    - name: "beanName"
      type: "java.lang.String"
    instructionFingerprint: "C705539544A00D77BD024A0877FE53AF"
  paths:
  - pathId: "path1"
    testPathName: "postProcessBeforeInitializationWhenThisCustomizersIsNull"
    constructorSignature: "<init>() : void"
    modelFingerprint: "697EDC4C702BD0030C564474E0492D65"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "bean"
      modelFingerprint: "FC9B26057488744BC7149D641E0F8ED3"
      valueUuid: "bean"
    - type: "INPUT"
      name: "beanName"
      modelFingerprint: "CF78E67EF6D4AB290170629993228478"
      valueUuid: "beanName"
    - type: "FIELD"
      name: "beanFactory"
      modelFingerprint: "FD7DF1F341F97465489B3E8CB9502390"
      valueUuid: "fieldListableBeanFactory"
      methodExercised:
        expression: "getBeansOfType(type:uniqueUuid3,includeNonSingletons:uniqueUuid4,allowEagerInit:uniqueUuid5):map"
        throwsExceptions:
        - "org.springframework.beans.BeansException"
    - type: "STATIC"
      name: "LambdaSafe.class"
      modelFingerprint: "61D2F4507318D3E1A31006DA1A492FC7"
      valueUuid: "LambdaSafe.class"
      methodExercised:
        expression: "callbacks(callbackType:uniqueUuid6,callbackInstances:list,argument:bean,additionalArguments:objectArray):lambdaSafe.Callbacks"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "76176F6969B005B5D12379229A351A25"
      valueUuid: "lambdaSafe.Callbacks"
      methodExercised:
        expression: "withLogger(loggerSource:uniqueUuid7):lambdaSafe.LambdaSafeCallback"
    - type: "LOCAL_VARIABLE"
      name: "customizer"
      modelFingerprint: "1F43463C2643CD987A8A876FE83C045E"
      valueUuid: "webServerFactoryCustomizer"
      methodExercised:
        expression: "customize(factory:bean):void3"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "2A91A70DB731F35C14F1E8654020F8AC"
      valueUuid: "lambdaSafe.LambdaSafeCallback"
      methodExercised:
        expression: "invoke(invoker:uniqueUuid8):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "45A892928A775842E24C73744A95BF23"
      valueUuid: "bean"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.List.sort(org.springframework.core.annotation.AnnotationAwareOrderComparator)\
        \ : void"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessor"
        parameters: []
        propertiesMap:
          beanFactory:
            sapientType: "MOCK"
            valueType: "org.springframework.beans.factory.ListableBeanFactory"
            uuid: "fieldListableBeanFactory"
      valueType: "org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessor"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.server.WebServerFactory"
      uuid: "bean"
      explicitCastForOverloadedMethods: "java.lang.Object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "beanName1"
      valueType: "java.lang.String"
      uuid: "beanName"
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.ListableBeanFactory"
      uuid: "fieldListableBeanFactory"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,java.lang.Object"
      uuid: "map"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.web.server.WebServerFactoryCustomizer"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.web.server.WebServerFactoryCustomizer"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.util.LambdaSafe"
      uuid: "LambdaSafe.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.util.LambdaSafe$Callbacks"
      uuid: "lambdaSafe.Callbacks"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.web.server.WebServerFactoryCustomizer"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.web.server.WebServerFactoryCustomizer"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters:
        - name: "c"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Collection"
            genericValueType: "org.springframework.boot.web.server.WebServerFactoryCustomizer<?>"
            uuid: "collection"
            collectionUuid: "map"
        values: []
      valueType: "java.util.Collection"
      genericValueType: "org.springframework.boot.web.server.WebServerFactoryCustomizer<?>"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.server.WebServerFactory"
      uuid: "bean"
      explicitCastForOverloadedMethods: "java.lang.Object"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Object[]"
      uuid: "objectArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.util.LambdaSafe$Callbacks"
      uuid: "lambdaSafe.Callbacks"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.util.LambdaSafe$Callbacks"
      uuid: "lambdaSafe.LambdaSafeCallback"
      explicitCastNeeded: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessor"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessor"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.server.WebServerFactoryCustomizer"
      uuid: "webServerFactoryCustomizer"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.server.WebServerFactory"
      uuid: "bean"
      explicitCastForOverloadedMethods: "java.lang.Object"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.util.LambdaSafe$Callbacks"
      uuid: "lambdaSafe.LambdaSafeCallback"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Consumer"
      uuid: "uniqueUuid8"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.server.WebServerFactory"
      uuid: "bean"
      explicitCastForOverloadedMethods: "java.lang.Object"
    branches:
    - lineNumber: 57
      expression: "bean instanceof WebServerFactory webServerFactory"
      range: "(57,7)-(57,55)"
      evaluatedAs: true
    - lineNumber: 76
      expression: "this.customizers == null"
      range: "(76,7)-(76,30)"
      evaluatedAs: true
      internalMethodName: "getCustomizers"
- method:
    name: "postProcessAfterInitialization"
    sourceCodeSignature: "Object postProcessAfterInitialization(Object bean, String\
      \ beanName)"
    returnType: "java.lang.Object"
    throwsExceptions:
    - "org.springframework.beans.BeansException"
    parameters:
    - name: "bean"
      type: "java.lang.Object"
    - name: "beanName"
      type: "java.lang.String"
    instructionFingerprint: "975327102A4E80B5DB9BAA2826FC528F"
  paths:
  - pathId: "path1"
    testPathName: "postProcessAfterInitializationTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "34DF81F4F04AC5D1B9F860FD1D29BF10"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "bean"
      modelFingerprint: "44CA456F7AEC99F4177F94DB9787F20F"
      valueUuid: "bean"
    - type: "INPUT"
      name: "beanName"
      modelFingerprint: "CF78E67EF6D4AB290170629993228478"
      valueUuid: "beanName"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "7D8E87CB1B63A9579EC7584A697ED33D"
      valueUuid: "bean"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessor"
        parameters: []
      valueType: "org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessor"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "bean"
    - sapientType: "BASIC"
      content: !<regular>
        value: "beanName1"
      valueType: "java.lang.String"
      uuid: "beanName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "bean"
