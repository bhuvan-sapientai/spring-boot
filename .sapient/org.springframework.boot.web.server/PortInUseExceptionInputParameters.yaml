---
modelFingerprint: "0392E5ED105085276285D7959855E092"
targetClass:
  fullClassName: "org.springframework.boot.web.server.PortInUseException"
methods:
- method:
    name: "getPort"
    sourceCodeSignature: "int getPort()"
    returnType: "int"
    instructionFingerprint: "AD032F36D9721078169D2BE72E4B37AD"
  paths:
  - pathId: "path1"
    testPathName: "getPortTest"
    constructorSignature: "<init>(int,java.lang.Throwable) : void"
    modelFingerprint: "E1516F18CA9FA6BC78B7B06F83226242"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "throwIfPortBindingException"
    sourceCodeSignature: "void throwIfPortBindingException(Exception ex, IntSupplier\
      \ port)"
    returnType: "void"
    parameters:
    - name: "ex"
      type: "java.lang.Exception"
    - name: "port"
      type: "java.util.function.IntSupplier"
    instructionFingerprint: "6BE19F84492507410B94C419A98393FB"
  paths:
  - pathId: "path1"
    testPathName: "throwIfPortBindingExceptionTest"
    modelFingerprint: "701C1CB79038899CFCE7B19460682E09"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "ex"
      modelFingerprint: "CC3FD17FCCADFBFE133C4F438CC5A73A"
      valueUuid: "ex"
    - type: "INPUT"
      name: "port"
      modelFingerprint: "0619CD34578992DB157398343BBFC8C2"
      valueUuid: "port"
    - type: "STATIC"
      name: "PortInUseException.class"
      modelFingerprint: "D5F5DC4CB96E7094DCF7AAC5E93529F6"
      valueUuid: "PortInUseException.class"
      methodExercised:
        expression: "ifPortBindingException(ex:ex,action:uniqueUuid1):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Exception"
        parameters: []
      valueType: "java.lang.Exception"
      uuid: "ex"
    - sapientType: "MOCK"
      valueType: "java.util.function.IntSupplier"
      uuid: "port"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.server.PortInUseException"
      uuid: "PortInUseException.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Exception"
        parameters: []
      valueType: "java.lang.Exception"
      uuid: "ex"
    - sapientType: "ANY"
      valueType: "java.util.function.Consumer"
      uuid: "uniqueUuid1"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "ifPortBindingException"
    sourceCodeSignature: "void ifPortBindingException(Exception ex, Consumer<BindException>\
      \ action)"
    returnType: "void"
    parameters:
    - name: "ex"
      type: "java.lang.Exception"
    - name: "action"
      type: "java.util.function.Consumer"
    instructionFingerprint: "D0CAA1D81EECC054F934D0BDF1834471"
  paths:
  - pathId: "path1"
    testPathName: "ifPortBindingExceptionTest"
    modelFingerprint: "41F24E173C3A4C11C44F693A8605CD61"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "ex"
      modelFingerprint: "CC3FD17FCCADFBFE133C4F438CC5A73A"
      valueUuid: "ex"
    - type: "INPUT"
      name: "action"
      modelFingerprint: "814EE96771DE67F063090D96E7AC873C"
      valueUuid: "action"
    - type: "STATIC"
      name: "PortInUseException.class"
      modelFingerprint: "C77F16C5DD465A295245E5DEC6E7CD4F"
      valueUuid: "PortInUseException.class"
      methodExercised:
        expression: "ifCausedBy(ex:ex,causedBy:uniqueUuid2,action:uniqueUuid3):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Exception"
        parameters: []
      valueType: "java.lang.Exception"
      uuid: "ex"
    - sapientType: "MOCK"
      valueType: "java.util.function.Consumer"
      uuid: "action"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.server.PortInUseException"
      uuid: "PortInUseException.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Exception"
        parameters: []
      valueType: "java.lang.Exception"
      uuid: "ex"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.net.BindException"
      valueType: "java.lang.Class"
      genericValueType: "java.net.BindException"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Consumer"
      uuid: "uniqueUuid3"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "ifCausedBy"
    sourceCodeSignature: "<E extends Exception> void ifCausedBy(Exception ex, Class<E>\
      \ causedBy, Consumer<E> action)"
    returnType: "void"
    parameters:
    - name: "ex"
      type: "java.lang.Exception"
    - name: "causedBy"
      type: "java.lang.Class"
    - name: "action"
      type: "java.util.function.Consumer"
    instructionFingerprint: "92953B0AA7AA9AEFE1676E89975837F9"
  paths:
  - pathId: "path2"
    testPathName: "ifCausedByWhenCandidateIsNull"
    modelFingerprint: "656A0696F87D3AD1FF1D1EBC13D22544"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "ex"
      modelFingerprint: "B1E6E48A712067706A1F33C235D06153"
      valueUuid: "ex"
    - type: "INPUT"
      name: "causedBy"
      modelFingerprint: "E1227900D98FFDD17B9FCED22AF0592E"
      valueUuid: "causedBy"
    - type: "INPUT"
      name: "action"
      modelFingerprint: "FF30219407F1238155E6DAF987B4F398"
      valueUuid: "action"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.Exception"
      uuid: "ex"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Exception"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Exception"
      uuid: "causedBy"
    - sapientType: "MOCK"
      valueType: "java.util.function.Consumer"
      uuid: "action"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 101
      expression: "candidate != null"
      range: "(101,10)-(101,26)"
      evaluatedAs: false
  - pathId: "path1"
    testPathName: "ifCausedByWhenCausedByIsInstanceCandidate"
    modelFingerprint: "8B8294ACBCAB5217969FE2A9989EACFA"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "ex"
      modelFingerprint: "CC3FD17FCCADFBFE133C4F438CC5A73A"
      valueUuid: "ex"
    - type: "INPUT"
      name: "causedBy"
      modelFingerprint: "E1227900D98FFDD17B9FCED22AF0592E"
      valueUuid: "causedBy"
    - type: "INPUT"
      name: "action"
      modelFingerprint: "FF30219407F1238155E6DAF987B4F398"
      valueUuid: "action"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isInstance(java.lang.Exception)\
        \ : boolean"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Exception"
        parameters: []
      valueType: "java.lang.Exception"
      uuid: "ex"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Exception"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Exception"
      uuid: "causedBy"
    - sapientType: "MOCK"
      valueType: "java.util.function.Consumer"
      uuid: "action"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 101
      expression: "candidate != null"
      range: "(101,10)-(101,26)"
      evaluatedAs: true
    - lineNumber: 102
      expression: "causedBy.isInstance(candidate)"
      range: "(102,8)-(102,37)"
      evaluatedAs: true
