---
modelFingerprint: "122F6A7C4AEF46980D499EC0FED232A9"
targetClass:
  fullClassName: "org.springframework.boot.origin.OriginTrackedResource"
methods:
- method:
    name: "getInputStream"
    sourceCodeSignature: "InputStream getInputStream()"
    returnType: "java.io.InputStream"
    throwsExceptions:
    - "java.io.IOException"
    instructionFingerprint: "708A0AB6B74529EB747881521AFF388B"
  paths:
  - pathId: "path1"
    testPathName: "getInputStreamTest"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "84BDDC4334641AE1CD3D11D24976A89A"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "90ED99D5A798314DFF8CD176E9353BA7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid1):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1AAF300B12B6122F32D01FC74A21DB71"
      valueUuid: "resource"
      methodExercised:
        expression: "getInputStream():inputStream"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D7F024D15E145D083AA1214DFA0BBADD"
      valueUuid: "inputStream"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.OriginTrackedResource"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "origin"
      valueType: "org.springframework.boot.origin.OriginTrackedResource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "inputStream"
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "inputStream"
- method:
    name: "exists"
    sourceCodeSignature: "boolean exists()"
    returnType: "boolean"
    instructionFingerprint: "44D08C132708C77D0C045C5C6D6E70F8"
  paths:
  - pathId: "path1"
    testPathName: "existsWhenGetResourceExists"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "B2417BBBCFE40C4598F4541A8EE70662"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "90ED99D5A798314DFF8CD176E9353BA7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid2):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "A216B1584F6C550E5B2111437D632E76"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean1"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.OriginTrackedResource"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "origin"
      valueType: "org.springframework.boot.origin.OriginTrackedResource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    branches:
    - lineNumber: 66
      expression: "getResource().exists()"
      range: "(66,10)-(66,31)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "existsWhenGetResourceNotExists"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "873E07379CF059BF2A1B258067F0DA1F"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "90ED99D5A798314DFF8CD176E9353BA7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid3):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1EECA250B2BCB276A4628A2F264F7DA4"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean1"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5633A2B0C967879105766C98D64A3959"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.OriginTrackedResource"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "origin"
      valueType: "org.springframework.boot.origin.OriginTrackedResource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    branches:
    - lineNumber: 66
      expression: "getResource().exists()"
      range: "(66,10)-(66,31)"
      evaluatedAs: false
- method:
    name: "isReadable"
    sourceCodeSignature: "boolean isReadable()"
    returnType: "boolean"
    instructionFingerprint: "821C52B2C865986F88B15056ECABBF8C"
  paths:
  - pathId: "path1"
    testPathName: "isReadableWhenGetResourceIsReadable"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "0EBDF67B130A24F5D420D00BF9A953A5"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "90ED99D5A798314DFF8CD176E9353BA7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid4):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "E2F3B97F21944154E30370ECAF84740A"
      valueUuid: "resource"
      methodExercised:
        expression: "isReadable():boolean1"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.OriginTrackedResource"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "origin"
      valueType: "org.springframework.boot.origin.OriginTrackedResource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    branches:
    - lineNumber: 71
      expression: "getResource().isReadable()"
      range: "(71,10)-(71,35)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "isReadableWhenGetResourceNotIsReadable"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "6D3C718FA0C8D93763937EC2227CBFC0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "90ED99D5A798314DFF8CD176E9353BA7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid5):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "8F58BB0A70D6E72B3B5C924BD1913B30"
      valueUuid: "resource"
      methodExercised:
        expression: "isReadable():boolean1"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5633A2B0C967879105766C98D64A3959"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.OriginTrackedResource"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "origin"
      valueType: "org.springframework.boot.origin.OriginTrackedResource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    branches:
    - lineNumber: 71
      expression: "getResource().isReadable()"
      range: "(71,10)-(71,35)"
      evaluatedAs: false
- method:
    name: "isOpen"
    sourceCodeSignature: "boolean isOpen()"
    returnType: "boolean"
    instructionFingerprint: "63171B62AF16A64DA04BF93535D33E60"
  paths:
  - pathId: "path1"
    testPathName: "isOpenWhenGetResourceIsOpen"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "36F55C0EDCDBA5C638AF6AC9D968E244"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "90ED99D5A798314DFF8CD176E9353BA7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid6):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "444CD366D33429B5AB63A5A09B1FB515"
      valueUuid: "resource"
      methodExercised:
        expression: "isOpen():boolean1"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.OriginTrackedResource"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "origin"
      valueType: "org.springframework.boot.origin.OriginTrackedResource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    branches:
    - lineNumber: 76
      expression: "getResource().isOpen()"
      range: "(76,10)-(76,31)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "isOpenWhenGetResourceNotIsOpen"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "53D57CEA923CDD00D4CCEEFE0C589E9C"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "90ED99D5A798314DFF8CD176E9353BA7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid7):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "122A1FBB0BAA1D424D6AB588EA4DF60E"
      valueUuid: "resource"
      methodExercised:
        expression: "isOpen():boolean1"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5633A2B0C967879105766C98D64A3959"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.OriginTrackedResource"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "origin"
      valueType: "org.springframework.boot.origin.OriginTrackedResource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    branches:
    - lineNumber: 76
      expression: "getResource().isOpen()"
      range: "(76,10)-(76,31)"
      evaluatedAs: false
- method:
    name: "isFile"
    sourceCodeSignature: "boolean isFile()"
    returnType: "boolean"
    instructionFingerprint: "E5B9DE9B2A089948289C2A5550686B6F"
  paths:
  - pathId: "path1"
    testPathName: "isFileWhenGetResourceIsFile"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "DC1B068968D240785993B1D30F06C668"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "90ED99D5A798314DFF8CD176E9353BA7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid8):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1749BEE92FEF6C70F376E8E6283BA91E"
      valueUuid: "resource"
      methodExercised:
        expression: "isFile():boolean1"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.OriginTrackedResource"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "origin"
      valueType: "org.springframework.boot.origin.OriginTrackedResource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    branches:
    - lineNumber: 81
      expression: "getResource().isFile()"
      range: "(81,10)-(81,31)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "isFileWhenGetResourceNotIsFile"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "A6EFD8D45D8B9E4DE4C7E4150DA7EB32"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "90ED99D5A798314DFF8CD176E9353BA7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid9):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "6BC65EE61ADB8AE7508F8D32DA5387F8"
      valueUuid: "resource"
      methodExercised:
        expression: "isFile():boolean1"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5633A2B0C967879105766C98D64A3959"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.OriginTrackedResource"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "origin"
      valueType: "org.springframework.boot.origin.OriginTrackedResource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    branches:
    - lineNumber: 81
      expression: "getResource().isFile()"
      range: "(81,10)-(81,31)"
      evaluatedAs: false
- method:
    name: "getURL"
    sourceCodeSignature: "URL getURL()"
    returnType: "java.net.URL"
    throwsExceptions:
    - "java.io.IOException"
    instructionFingerprint: "A662C9C2618B0D4A79C9BCA648F58E69"
  paths:
  - pathId: "path1"
    testPathName: "getURLTest"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "26A02BAFCB4B04E4FB21D55BF008DDC5"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "90ED99D5A798314DFF8CD176E9353BA7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid10):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "2755D3C381336DE8B6A1F55AEE3E50D0"
      valueUuid: "resource"
      methodExercised:
        expression: "getURL():uRL"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "7A26E18DF4073E1C01F5510D6405BF6B"
      valueUuid: "uRL"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.OriginTrackedResource"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "origin"
      valueType: "org.springframework.boot.origin.OriginTrackedResource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "MOCK"
      valueType: "java.net.URL"
      uuid: "uRL"
    - sapientType: "MOCK"
      valueType: "java.net.URL"
      uuid: "uRL"
- method:
    name: "getURI"
    sourceCodeSignature: "URI getURI()"
    returnType: "java.net.URI"
    throwsExceptions:
    - "java.io.IOException"
    instructionFingerprint: "F2D0F37700C830D8E6754602A275601D"
  paths:
  - pathId: "path1"
    testPathName: "getURITest"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "229F8D2A485B26872BBD3F579D9EF584"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "90ED99D5A798314DFF8CD176E9353BA7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid11):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "5E3553E89AC9423B1D4AB3D4EA918EF3"
      valueUuid: "resource"
      methodExercised:
        expression: "getURI():uRI"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "2CD6DD10ABC23574AE8BE634F7BF6B18"
      valueUuid: "uRI"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.OriginTrackedResource"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "origin"
      valueType: "org.springframework.boot.origin.OriginTrackedResource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.net.URI"
        method: "create"
        methodParameters:
        - name: "str"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "str1"
            valueType: "java.lang.String"
            uuid: "uRI-str"
      valueType: "java.net.URI"
      uuid: "uRI"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.net.URI"
        method: "create"
        methodParameters:
        - name: "str"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "str1"
            valueType: "java.lang.String"
            uuid: "uRI-str"
      valueType: "java.net.URI"
      uuid: "uRI"
- method:
    name: "getFile"
    sourceCodeSignature: "File getFile()"
    returnType: "java.io.File"
    throwsExceptions:
    - "java.io.IOException"
    instructionFingerprint: "C0E2EBF2785DE7625C463C0CFC49AB1E"
  paths:
  - pathId: "path1"
    testPathName: "getFileTest"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "202B364E33D1A9308F0E5BD3ED2610AC"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "90ED99D5A798314DFF8CD176E9353BA7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid12):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "9D3F3B29790FFB50F4BF8F6E97AF777A"
      valueUuid: "resource"
      methodExercised:
        expression: "getFile():file"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "F10E0885B7AAA7871F2562FC3D0D2216"
      valueUuid: "file"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.OriginTrackedResource"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "origin"
      valueType: "org.springframework.boot.origin.OriginTrackedResource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid12"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
- method:
    name: "readableChannel"
    sourceCodeSignature: "ReadableByteChannel readableChannel()"
    returnType: "java.nio.channels.ReadableByteChannel"
    throwsExceptions:
    - "java.io.IOException"
    instructionFingerprint: "49DA99D3349C8069B699E657B0FFA376"
  paths:
  - pathId: "path1"
    testPathName: "readableChannelTest"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "EE03422E31FD496314B36BD24C03F5A4"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "90ED99D5A798314DFF8CD176E9353BA7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid13):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "2BEB800A4EECD1AD660ABB612C59A9E5"
      valueUuid: "resource"
      methodExercised:
        expression: "readableChannel():readableByteChannel"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "E09EB302252AC6AA3A38FDC1692C9F15"
      valueUuid: "readableByteChannel"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.OriginTrackedResource"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "origin"
      valueType: "org.springframework.boot.origin.OriginTrackedResource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid13"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "MOCK"
      valueType: "java.nio.channels.ReadableByteChannel"
      uuid: "readableByteChannel"
    - sapientType: "MOCK"
      valueType: "java.nio.channels.ReadableByteChannel"
      uuid: "readableByteChannel"
- method:
    name: "contentLength"
    sourceCodeSignature: "long contentLength()"
    returnType: "long"
    throwsExceptions:
    - "java.io.IOException"
    instructionFingerprint: "FFE0B6955AE0EBBBF22DB2B0AFB6B359"
  paths:
  - pathId: "path1"
    testPathName: "contentLengthTest"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "30370742087EADCAF9FF196484894B97"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "90ED99D5A798314DFF8CD176E9353BA7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid14):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "F45F585C2CF24452AA6ED888CBFE35FB"
      valueUuid: "resource"
      methodExercised:
        expression: "contentLength():long1"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "F37C3999515368B97FB086A27AB32D5A"
      valueUuid: "long1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.OriginTrackedResource"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "origin"
      valueType: "org.springframework.boot.origin.OriginTrackedResource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid14"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long1"
- method:
    name: "lastModified"
    sourceCodeSignature: "long lastModified()"
    returnType: "long"
    throwsExceptions:
    - "java.io.IOException"
    instructionFingerprint: "AF13F6B23F4BA8B8C0EB7C7E9A06AF33"
  paths:
  - pathId: "path1"
    testPathName: "lastModifiedTest"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "2EAE7FFCB9E8914CFF7C21135FBEE3CF"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "90ED99D5A798314DFF8CD176E9353BA7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid15):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "4E80FCE19E34202F656A13369274EC2C"
      valueUuid: "resource"
      methodExercised:
        expression: "lastModified():long1"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "F37C3999515368B97FB086A27AB32D5A"
      valueUuid: "long1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.OriginTrackedResource"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "origin"
      valueType: "org.springframework.boot.origin.OriginTrackedResource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid15"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long1"
- method:
    name: "createRelative"
    sourceCodeSignature: "Resource createRelative(String relativePath)"
    returnType: "org.springframework.core.io.Resource"
    throwsExceptions:
    - "java.io.IOException"
    parameters:
    - name: "relativePath"
      type: "java.lang.String"
    instructionFingerprint: "9EC7C914726C509369D34CCD9407D7EF"
  paths:
  - pathId: "path1"
    testPathName: "createRelativeTest"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "5F45F746A8F0F6D7CD46197FEA73B743"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "90ED99D5A798314DFF8CD176E9353BA7"
      valueUuid: "target"
    - type: "INPUT"
      name: "relativePath"
      modelFingerprint: "76E7BAAA44C40005FCFE5A19C924A695"
      valueUuid: "relativePath"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid16):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "9D3BA669D0061D6DF2E11E81456F5B91"
      valueUuid: "resource"
      methodExercised:
        expression: "createRelative(relativePath:relativePath):resource2"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "F38DC2F7404D21EDA2934AE5DD2E126A"
      valueUuid: "resource2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.OriginTrackedResource"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "origin"
      valueType: "org.springframework.boot.origin.OriginTrackedResource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "relativePath1"
      valueType: "java.lang.String"
      uuid: "relativePath"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid16"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "relativePath1"
      valueType: "java.lang.String"
      uuid: "relativePath"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource2"
- method:
    name: "getFilename"
    sourceCodeSignature: "String getFilename()"
    returnType: "java.lang.String"
    instructionFingerprint: "F732FC5DA24E1BA358B9B9B11C73D89B"
  paths:
  - pathId: "path1"
    testPathName: "getFilenameTest"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "D1512E3AC760086C9F48CE4E3A46B432"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "90ED99D5A798314DFF8CD176E9353BA7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid17):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "2C3D12344D0329456619D49E1CBA430E"
      valueUuid: "resource"
      methodExercised:
        expression: "getFilename():string"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D446A609419428DDEAA49A58091F3986"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.OriginTrackedResource"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "origin"
      valueType: "org.springframework.boot.origin.OriginTrackedResource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid17"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getFilename1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getFilename1"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "getDescription"
    sourceCodeSignature: "String getDescription()"
    returnType: "java.lang.String"
    instructionFingerprint: "C19A8BB48C2669EE7A98C4EEE3C24E92"
  paths:
  - pathId: "path1"
    testPathName: "getDescriptionTest"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "2BE5DDCD1D99E615C34671F5A51D0328"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "90ED99D5A798314DFF8CD176E9353BA7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid18):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "41C963C499E5D3F0AEF3E1F89A8B8EF4"
      valueUuid: "resource"
      methodExercised:
        expression: "getDescription():string"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D446A609419428DDEAA49A58091F3986"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.OriginTrackedResource"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "origin"
      valueType: "org.springframework.boot.origin.OriginTrackedResource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid18"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDescription1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDescription1"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "getResource"
    sourceCodeSignature: "Resource getResource()"
    returnType: "org.springframework.core.io.Resource"
    instructionFingerprint: "3278742F4F102B31C4A4A31646655DA4"
  paths:
  - pathId: "path1"
    testPathName: "getResourceTest"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "195E927630E94D9038292DAE3F997FFE"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "getOrigin"
    sourceCodeSignature: "Origin getOrigin()"
    returnType: "org.springframework.boot.origin.Origin"
    instructionFingerprint: "F4DCD75CCFE1C9F17DBCC0F175DAAF8B"
  paths:
  - pathId: "path1"
    testPathName: "getOriginTest"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "552120CED764B72F46927D7991988679"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "equals"
    sourceCodeSignature: "boolean equals(Object obj)"
    returnType: "boolean"
    parameters:
    - name: "obj"
      type: "java.lang.Object"
    instructionFingerprint: "70B71A8747FDD8D878350D28FB017AAF"
  paths:
  - pathId: "path1"
    testPathName: "equalsWhenThisEqualsObj"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "7CB8A12A070FCF763704B1924DBA0822"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
    branches:
    - lineNumber: 140
      expression: "this == obj"
      range: "(140,7)-(140,17)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "equalsWhenGetClassNotEqualsObjGetClass"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "38E44BA50E6C9464527470319271C967"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
    branches:
    - lineNumber: 140
      expression: "this == obj"
      range: "(140,7)-(140,17)"
      evaluatedAs: false
    - lineNumber: 143
      expression: "obj == null"
      range: "(143,7)-(143,17)"
      evaluatedAs: false
    - lineNumber: 143
      expression: "getClass() != obj.getClass()"
      range: "(143,22)-(143,49)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "equalsWhenObjectUtilsNullSafeEqualsThisOriginOtherOrigin"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "493B51501228BAAA23F25BAC826C67CD"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
    branches:
    - lineNumber: 140
      expression: "this == obj"
      range: "(140,7)-(140,17)"
      evaluatedAs: false
    - lineNumber: 143
      expression: "obj == null"
      range: "(143,7)-(143,17)"
      evaluatedAs: false
    - lineNumber: 143
      expression: "getClass() != obj.getClass()"
      range: "(143,22)-(143,49)"
      evaluatedAs: false
    - lineNumber: 147
      expression: "this.resource.equals(other)"
      range: "(147,10)-(147,36)"
      evaluatedAs: true
    - lineNumber: 147
      expression: "ObjectUtils.nullSafeEquals(this.origin, other.origin)"
      range: "(147,41)-(147,93)"
      evaluatedAs: true
  - pathId: "path4"
    testPathName: "equalsWhenObjectUtilsNotNullSafeEqualsThisOriginOtherOrigin"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "0A5043239D667F5602DEB216597330AD"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
    branches:
    - lineNumber: 140
      expression: "this == obj"
      range: "(140,7)-(140,17)"
      evaluatedAs: false
    - lineNumber: 143
      expression: "obj == null"
      range: "(143,7)-(143,17)"
      evaluatedAs: false
    - lineNumber: 143
      expression: "getClass() != obj.getClass()"
      range: "(143,22)-(143,49)"
      evaluatedAs: false
    - lineNumber: 147
      expression: "this.resource.equals(other)"
      range: "(147,10)-(147,36)"
      evaluatedAs: true
    - lineNumber: 147
      expression: "ObjectUtils.nullSafeEquals(this.origin, other.origin)"
      range: "(147,41)-(147,93)"
      evaluatedAs: false
- method:
    name: "toString"
    sourceCodeSignature: "String toString()"
    returnType: "java.lang.String"
    instructionFingerprint: "A35A6323ADD45DF9C88B4A16E315B606"
  paths:
  - pathId: "path1"
    testPathName: "toStringTest"
    constructorSignature: "<init>(org.springframework.core.io.Resource,org.springframework.boot.origin.Origin)\
      \ : void"
    modelFingerprint: "AA1EDAE75709B0289245B7B913548BF9"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "90ED99D5A798314DFF8CD176E9353BA7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid25):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "24F7A06863C3CD28237E711D2F85DE16"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.OriginTrackedResource"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
            nameForMock: "resource"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "origin"
      valueType: "org.springframework.boot.origin.OriginTrackedResource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
      nameForMock: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid25"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "of"
    sourceCodeSignature: "OriginTrackedWritableResource of(WritableResource resource,\
      \ Origin origin)"
    returnType: "org.springframework.boot.origin.OriginTrackedResource$OriginTrackedWritableResource"
    parameters:
    - name: "resource"
      type: "org.springframework.core.io.WritableResource"
    - name: "origin"
      type: "org.springframework.boot.origin.Origin"
    instructionFingerprint: "EC00531531B48F4A67A851667B54E848"
  paths:
  - pathId: "path1"
    testPathName: "ofTest"
    modelFingerprint: "E7F513F5A78E5DA79937BDE22FCED476"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "resource"
      modelFingerprint: "1F018064BD83960C5E4AF8B8F69CFC68"
      valueUuid: "resource"
    - type: "INPUT"
      name: "origin"
      modelFingerprint: "4175C201C6B5D2B45C2780FB3372E738"
      valueUuid: "origin"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "DEF4E8D363F1C2739E1CF9CA6A370A33"
      valueUuid: "originTrackedResource"
    disabled: false
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_INTERNAL_METHOD_RECURSIVE_CALL"
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.WritableResource"
      uuid: "resource"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "origin"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.OriginTrackedResource$OriginTrackedWritableResource"
      uuid: "originTrackedResource"
      explicitCastNeeded: true
- method:
    name: "of"
    sourceCodeSignature: "OriginTrackedResource of(Resource resource, Origin origin)"
    returnType: "org.springframework.boot.origin.OriginTrackedResource"
    parameters:
    - name: "resource"
      type: "org.springframework.core.io.Resource"
    - name: "origin"
      type: "org.springframework.boot.origin.Origin"
    instructionFingerprint: "8DF5C39CB1765F7FFC85E28983359D26"
  paths:
  - pathId: "path1"
    testPathName: "of1WhenResourceInstanceOfWritableResource"
    modelFingerprint: "32B15572077E49C64E2062D81375E85A"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "resource"
      modelFingerprint: "1F018064BD83960C5E4AF8B8F69CFC68"
      valueUuid: "resource"
    - type: "INPUT"
      name: "origin"
      modelFingerprint: "4175C201C6B5D2B45C2780FB3372E738"
      valueUuid: "origin"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B6DA5B1E6B62DA02B00DD6936C9C3CFF"
      valueUuid: "originTrackedResource.OriginTrackedWritableResource"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.WritableResource"
      uuid: "resource"
      explicitCastForOverloadedMethods: "org.springframework.core.io.Resource"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "origin"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.OriginTrackedResource$OriginTrackedWritableResource"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.WritableResource"
            uuid: "resource"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "origin"
      valueType: "org.springframework.boot.origin.OriginTrackedResource$OriginTrackedWritableResource"
      uuid: "originTrackedResource.OriginTrackedWritableResource"
      fixed: true
    branches:
    - lineNumber: 182
      expression: "resource instanceof WritableResource writableResource"
      range: "(182,7)-(182,59)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "of1WhenResourceNotInstanceOfWritableResource"
    modelFingerprint: "EDC7B8D72C147E7C2C05465EF0F99FDD"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "resource"
      modelFingerprint: "BA86CE2795FE636A14F7AA167E17D618"
      valueUuid: "resource"
    - type: "INPUT"
      name: "origin"
      modelFingerprint: "4175C201C6B5D2B45C2780FB3372E738"
      valueUuid: "origin"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "EE3EFEC8F90FF7867AB63B918B44AF57"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid26):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "DE6B05A8B7E1D125DD18D328C5083CA7"
      valueUuid: "originTrackedResource"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "origin"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid26"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.OriginTrackedResource"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "origin"
      valueType: "org.springframework.boot.origin.OriginTrackedResource"
      uuid: "originTrackedResource"
      fixed: true
    branches:
    - lineNumber: 182
      expression: "resource instanceof WritableResource writableResource"
      range: "(182,7)-(182,59)"
      evaluatedAs: false
