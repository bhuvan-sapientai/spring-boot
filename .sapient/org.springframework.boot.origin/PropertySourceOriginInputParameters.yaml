---
modelFingerprint: "82780DFAC8B2B80106AB72613CF1DD2B"
targetClass:
  fullClassName: "org.springframework.boot.origin.PropertySourceOrigin"
methods:
- method:
    name: "getPropertySource"
    sourceCodeSignature: "PropertySource<?> getPropertySource()"
    returnType: "org.springframework.core.env.PropertySource"
    genericReturnType: "?"
    instructionFingerprint: "9E6A8E7932441A7E42D67805690DEC77"
  paths:
  - pathId: "path1"
    testPathName: "getPropertySourceTest"
    constructorSignature: "<init>(org.springframework.core.env.PropertySource<?>,java.lang.String)\
      \ : void"
    modelFingerprint: "820BFB4C435D95A4BE16B3E05C8E7A53"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "getPropertyName"
    sourceCodeSignature: "String getPropertyName()"
    returnType: "java.lang.String"
    instructionFingerprint: "D701E1CEA13030F9A7190D4A8CE47FAE"
  paths:
  - pathId: "path1"
    testPathName: "getPropertyNameTest"
    constructorSignature: "<init>(org.springframework.core.env.PropertySource<?>,java.lang.String)\
      \ : void"
    modelFingerprint: "299F6221D74589DA0C5A11576BC3865D"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "toString"
    sourceCodeSignature: "String toString()"
    returnType: "java.lang.String"
    instructionFingerprint: "1F8635CAD8F36EE0D4FC363E989934CB"
  paths:
  - pathId: "path1"
    testPathName: "toStringTest"
    constructorSignature: "<init>(org.springframework.core.env.PropertySource<?>,java.lang.String)\
      \ : void"
    modelFingerprint: "A6A6FF29E6D1B2D84582865E6B9E6066"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "1E437A90A28BE6C5163D1962BD9AB8E7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "9B4B8C88525BAE5CD7EAF6990E9AB625"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:propertySource,message:uniqueUuid5):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "6A1DE9A5CC7F29B528CE49CB74392E12"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasLength(text:propertyName,message:uniqueUuid6):void2"
        staticAccess: true
    - type: "FIELD"
      name: "propertySource"
      modelFingerprint: "DB908E6E5ED451F054953AA45D6DA77C"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getName():name"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "6F98283E9639F5B083EE990D31293D87"
      valueUuid: "string2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.PropertySourceOrigin"
        parameters:
        - name: "propertySource"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "org.springframework.core.env.PropertySource"
              method: "named"
              methodParameters:
              - name: "name"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "B"
                  valueType: "java.lang.String"
                  uuid: "name"
            valueType: "org.springframework.core.env.PropertySource"
            uuid: "propertySource"
        - name: "propertyName"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "propertyName"
      valueType: "org.springframework.boot.origin.PropertySourceOrigin"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.env.PropertySource"
        method: "named"
        methodParameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "B"
            valueType: "java.lang.String"
            uuid: "name"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "PropertySource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "propertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "PropertyName must not be empty"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.env.PropertySource"
        method: "named"
        methodParameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "B"
            valueType: "java.lang.String"
            uuid: "name"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: "\\\"A\\\" from property source \\\"B\\\""
      valueType: "java.lang.String"
      uuid: "string2"
- method:
    name: "get"
    sourceCodeSignature: "Origin get(PropertySource<?> propertySource, String name)"
    returnType: "org.springframework.boot.origin.Origin"
    parameters:
    - name: "propertySource"
      type: "org.springframework.core.env.PropertySource"
    - name: "name"
      type: "java.lang.String"
    instructionFingerprint: "AC600150EE18C35BA14AFE38F1C9FCEE"
  paths:
  - pathId: "path1"
    testPathName: "getWhenOriginIsNotNull"
    modelFingerprint: "C37662A149A15F0B6878ECB1496DE4D8"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "propertySource"
      modelFingerprint: "8D41EB31E94DAD6D526360152B35D702"
      valueUuid: "propertySource"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "63F0AEB18588FDD50129913BF544F767"
      valueUuid: "name"
    - type: "STATIC"
      name: "OriginLookup.class"
      modelFingerprint: "9B5D8996B61E4D8638AEBE31E7EC3922"
      valueUuid: "OriginLookup.class"
      methodExercised:
        expression: "getOrigin(source:propertySource,key:name):origin"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5692B041B63EBC5E48D608049DCE404F"
      valueUuid: "origin"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.OriginLookup"
      uuid: "OriginLookup.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "origin"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "origin"
    branches:
    - lineNumber: 78
      expression: "origin != null"
      range: "(78,11)-(78,24)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "getWhenOriginIsNull"
    modelFingerprint: "62CCEB71C2F84EF60B944EA3CF489ABD"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "propertySource"
      modelFingerprint: "8D41EB31E94DAD6D526360152B35D702"
      valueUuid: "propertySource"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "5EC9153806E3BAD5D8C7DECC2BA5EC60"
      valueUuid: "name"
    - type: "STATIC"
      name: "OriginLookup.class"
      modelFingerprint: "3218A4B8D9572E0FED53C7FC468A1F9E"
      valueUuid: "OriginLookup.class"
      methodExercised:
        expression: "getOrigin(source:propertySource,key:name):origin"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4C7337E5E2A61EA17BDDCA521BDD0B7B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:propertySource,message:uniqueUuid7):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "6A1DE9A5CC7F29B528CE49CB74392E12"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasLength(text:name,message:uniqueUuid8):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A034F8A484EA6E0B22C23A095F0F529F"
      valueUuid: "propertySourceOrigin"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.OriginLookup"
      uuid: "OriginLookup.class"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "origin"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "PropertySource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: "PropertyName must not be empty"
      valueType: "java.lang.String"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.origin.PropertySourceOrigin"
        parameters:
        - name: "propertySource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.PropertySource"
            genericValueType: "?"
            uuid: "propertySource"
        - name: "propertyName"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name"
      valueType: "org.springframework.boot.origin.PropertySourceOrigin"
      uuid: "propertySourceOrigin"
      fixed: true
    branches:
    - lineNumber: 78
      expression: "origin != null"
      range: "(78,11)-(78,24)"
      evaluatedAs: false
