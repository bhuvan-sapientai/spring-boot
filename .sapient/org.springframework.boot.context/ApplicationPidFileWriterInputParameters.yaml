---
modelFingerprint: "1326FD54F593B72707E5451D2B9FF935"
targetClass:
  fullClassName: "org.springframework.boot.context.ApplicationPidFileWriter"
methods:
- method:
    name: "setTriggerEventType"
    sourceCodeSignature: "void setTriggerEventType(Class<? extends SpringApplicationEvent>\
      \ triggerEventType)"
    returnType: "void"
    parameters:
    - name: "triggerEventType"
      type: "java.lang.Class"
    instructionFingerprint: "3B53E441C14286A53F5419BD067DB860"
  paths:
  - pathId: "path1"
    testPathName: "setTriggerEventTypeTest"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "38CB5055E91A365D38F2BAAD6D45CD96"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "B5A9AED8450B42E982260C687F64E4C2"
      valueUuid: "target"
    - type: "INPUT"
      name: "triggerEventType"
      modelFingerprint: "44909E66EA5454FC6455A7F26D7187EE"
      valueUuid: "triggerEventType"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B4CC5E54332CBB249FB272072ACE8D3B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:file,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FF8A4851114A3428983F8C4D74E1A5FE"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:triggerEventType,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.ApplicationPidFileWriter"
        parameters:
        - name: "filename"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "filename1"
            valueType: "java.lang.String"
            uuid: "filename"
      valueType: "org.springframework.boot.context.ApplicationPidFileWriter"
      uuid: "target"
    - sapientType: "CLASS"
      content: !<regular>
        value: "? extends org.springframework.boot.context.event.SpringApplicationEvent"
      valueType: "java.lang.Class"
      genericValueType: "? extends org.springframework.boot.context.event.SpringApplicationEvent"
      uuid: "triggerEventType"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.io.File"
      uuid: "file"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "File must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "? extends org.springframework.boot.context.event.SpringApplicationEvent"
      valueType: "java.lang.Class"
      genericValueType: "? extends org.springframework.boot.context.event.SpringApplicationEvent"
      uuid: "triggerEventType"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Trigger event type must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "onApplicationEvent"
    sourceCodeSignature: "void onApplicationEvent(SpringApplicationEvent event)"
    returnType: "void"
    parameters:
    - name: "event"
      type: "org.springframework.boot.context.event.SpringApplicationEvent"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "C05B2C1772DDCAB25D6DDE3B60F5D755"
  paths:
  - pathId: "path1"
    testPathName: "onApplicationEventWhenOverrideIsNotNull"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "6B1AAC0261C384956BBDA9E6753BEB77"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "B5A9AED8450B42E982260C687F64E4C2"
      valueUuid: "target"
    - type: "INPUT"
      name: "event"
      modelFingerprint: "D80994B1DC55483332E5C41AC9C8962D"
      valueUuid: "event"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B4CC5E54332CBB249FB272072ACE8D3B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:file,message:uniqueUuid3):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "40F89F5A4D226DE0A75E0F7612E22060"
      valueUuid: "applicationPid"
      methodExercised:
        expression: "write(file:file2):void2"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isInstance(org.springframework.boot.context.event.SpringApplicationEvent)\
        \ : boolean"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.ApplicationPidFileWriter"
        parameters:
        - name: "filename"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "filename1"
            valueType: "java.lang.String"
            uuid: "filename"
      valueType: "org.springframework.boot.context.ApplicationPidFileWriter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.event.SpringApplicationEvent"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.io.File"
      uuid: "file"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "File must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationPid"
        parameters: []
      valueType: "org.springframework.boot.system.ApplicationPid"
      uuid: "applicationPid"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.io.File"
      uuid: "file2"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 137
      expression: "this.triggerEventType.isInstance(event)"
      range: "(137,7)-(137,45)"
      evaluatedAs: true
    - lineNumber: 137
      expression: "created.compareAndSet(false, true)"
      range: "(137,50)-(137,83)"
      evaluatedAs: true
    - lineNumber: 167
      expression: "for-each(candidates)"
      range: "(167,29)-(167,38)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    - lineNumber: 169
      expression: "value != null"
      range: "(169,8)-(169,20)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    - lineNumber: 154
      expression: "override != null"
      range: "(154,7)-(154,22)"
      evaluatedAs: true
      internalMethodName: "writePidFile"
  - pathId: "path2"
    testPathName: "onApplicationEventWhenOverrideIsNull"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "D9DAA80D37830689D3E9E9DB759E859D"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "B5A9AED8450B42E982260C687F64E4C2"
      valueUuid: "target"
    - type: "INPUT"
      name: "event"
      modelFingerprint: "D80994B1DC55483332E5C41AC9C8962D"
      valueUuid: "event"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B4CC5E54332CBB249FB272072ACE8D3B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:file,message:uniqueUuid4):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "A0D34333C8FBCB07F523BAE323E168F0"
      valueUuid: "applicationPid"
      methodExercised:
        expression: "write(file:file):void2"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isInstance(org.springframework.boot.context.event.SpringApplicationEvent)\
        \ : boolean"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.ApplicationPidFileWriter"
        parameters:
        - name: "filename"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "filename1"
            valueType: "java.lang.String"
            uuid: "filename"
      valueType: "org.springframework.boot.context.ApplicationPidFileWriter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.event.SpringApplicationEvent"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.io.File"
      uuid: "file"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "File must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationPid"
        parameters: []
      valueType: "org.springframework.boot.system.ApplicationPid"
      uuid: "applicationPid"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.io.File"
      uuid: "file"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 137
      expression: "this.triggerEventType.isInstance(event)"
      range: "(137,7)-(137,45)"
      evaluatedAs: true
    - lineNumber: 137
      expression: "created.compareAndSet(false, true)"
      range: "(137,50)-(137,83)"
      evaluatedAs: true
    - lineNumber: 167
      expression: "for-each(candidates)"
      range: "(167,29)-(167,38)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    - lineNumber: 169
      expression: "value != null"
      range: "(169,8)-(169,20)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 154
      expression: "override != null"
      range: "(154,7)-(154,22)"
      evaluatedAs: false
      internalMethodName: "writePidFile"
  - pathId: "path4"
    testPathName: "onApplicationEventWhenFailOnWriteErrorEventThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "B5AE366433BBE37D145736295DB5DC97"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "B5A9AED8450B42E982260C687F64E4C2"
      valueUuid: "target"
    - type: "INPUT"
      name: "event"
      modelFingerprint: "D80994B1DC55483332E5C41AC9C8962D"
      valueUuid: "event"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B4CC5E54332CBB249FB272072ACE8D3B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:file,message:uniqueUuid5):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "A0D34333C8FBCB07F523BAE323E168F0"
      valueUuid: "applicationPid"
      methodExercised:
        expression: "write(file:file):void2"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "6A624C31AC15C93C21FEF06ADE270942"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isInstance(org.springframework.boot.context.event.SpringApplicationEvent)\
        \ : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.ApplicationPidFileWriter"
        parameters:
        - name: "filename"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "filename1"
            valueType: "java.lang.String"
            uuid: "filename"
      valueType: "org.springframework.boot.context.ApplicationPidFileWriter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.event.SpringApplicationEvent"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.io.File"
      uuid: "file"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "File must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationPid"
        parameters: []
      valueType: "org.springframework.boot.system.ApplicationPid"
      uuid: "applicationPid"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.io.File"
      uuid: "file"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "message1"
            valueType: "java.lang.String"
            uuid: "string5"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Exception"
              parameters: []
            valueType: "java.lang.Exception"
            uuid: "exception"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 137
      expression: "this.triggerEventType.isInstance(event)"
      range: "(137,7)-(137,45)"
      evaluatedAs: true
    - lineNumber: 137
      expression: "created.compareAndSet(false, true)"
      range: "(137,50)-(137,83)"
      evaluatedAs: true
    - lineNumber: 167
      expression: "for-each(candidates)"
      range: "(167,29)-(167,38)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    - lineNumber: 169
      expression: "value != null"
      range: "(169,8)-(169,20)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 154
      expression: "override != null"
      range: "(154,7)-(154,22)"
      evaluatedAs: false
      internalMethodName: "writePidFile"
    - lineNumber: 141
      expression: "catch-exception (Exception)"
      range: "(141,4)-(141,22)"
      evaluatedAs: true
    - lineNumber: 163
      expression: "Boolean.parseBoolean(value)"
      range: "(163,10)-(163,36)"
      evaluatedAs: true
      internalMethodName: "failOnWriteError"
    - lineNumber: 143
      expression: "failOnWriteError(event)"
      range: "(143,9)-(143,31)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path5"
    testPathName: "onApplicationEventWhenFailOnWriteErrorNotEvent"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "AFFED4EC3EE606F792D248C93FAB4EC0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "B5A9AED8450B42E982260C687F64E4C2"
      valueUuid: "target"
    - type: "INPUT"
      name: "event"
      modelFingerprint: "D80994B1DC55483332E5C41AC9C8962D"
      valueUuid: "event"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B4CC5E54332CBB249FB272072ACE8D3B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:file,message:uniqueUuid6):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "A0D34333C8FBCB07F523BAE323E168F0"
      valueUuid: "applicationPid"
      methodExercised:
        expression: "write(file:file):void2"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isInstance(org.springframework.boot.context.event.SpringApplicationEvent)\
        \ : boolean"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.ApplicationPidFileWriter"
        parameters:
        - name: "filename"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "filename1"
            valueType: "java.lang.String"
            uuid: "filename"
      valueType: "org.springframework.boot.context.ApplicationPidFileWriter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.event.SpringApplicationEvent"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.io.File"
      uuid: "file"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "File must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationPid"
        parameters: []
      valueType: "org.springframework.boot.system.ApplicationPid"
      uuid: "applicationPid"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.io.File"
      uuid: "file"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 137
      expression: "this.triggerEventType.isInstance(event)"
      range: "(137,7)-(137,45)"
      evaluatedAs: true
    - lineNumber: 137
      expression: "created.compareAndSet(false, true)"
      range: "(137,50)-(137,83)"
      evaluatedAs: true
    - lineNumber: 167
      expression: "for-each(candidates)"
      range: "(167,29)-(167,38)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    - lineNumber: 169
      expression: "value != null"
      range: "(169,8)-(169,20)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 154
      expression: "override != null"
      range: "(154,7)-(154,22)"
      evaluatedAs: false
      internalMethodName: "writePidFile"
    - lineNumber: 141
      expression: "catch-exception (Exception)"
      range: "(141,4)-(141,22)"
      evaluatedAs: true
    - lineNumber: 163
      expression: "Boolean.parseBoolean(value)"
      range: "(163,10)-(163,36)"
      evaluatedAs: false
      internalMethodName: "failOnWriteError"
    - lineNumber: 143
      expression: "failOnWriteError(event)"
      range: "(143,9)-(143,31)"
      evaluatedAs: false
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
- method:
    name: "setOrder"
    sourceCodeSignature: "void setOrder(int order)"
    returnType: "void"
    parameters:
    - name: "order"
      type: "int"
    instructionFingerprint: "F88C98C2D7593841680C2CA0FECB4028"
  paths:
  - pathId: "path1"
    testPathName: "setOrderTest"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "7E62A7FE5B3822E16C48B5759EB8D71B"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "getOrder"
    sourceCodeSignature: "int getOrder()"
    returnType: "int"
    instructionFingerprint: "342D4E4F854A43E567A525BCBCDEA20C"
  paths:
  - pathId: "path1"
    testPathName: "getOrderTest"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "BB9D019490E0535E8645FE019AC18518"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "reset"
    sourceCodeSignature: "void reset()"
    returnType: "void"
    instructionFingerprint: "B057D5A8C1A065B14DAD0FF0C91A7954"
  paths:
  - pathId: "path1"
    testPathName: "resetTest"
    modelFingerprint: "0A1F9D2307F891B79A39BE18CAA3B45A"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
