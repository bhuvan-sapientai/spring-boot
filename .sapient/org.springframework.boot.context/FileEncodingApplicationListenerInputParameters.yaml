---
modelFingerprint: "B4408D9F97667D477251BB7B751FACF4"
targetClass:
  fullClassName: "org.springframework.boot.context.FileEncodingApplicationListener"
methods:
- method:
    name: "getOrder"
    sourceCodeSignature: "int getOrder()"
    returnType: "int"
    instructionFingerprint: "B3FE1F447F1436B3B1DD16C4601C95C8"
  paths:
  - pathId: "path1"
    testPathName: "getOrderTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "408D0DD0148C1F235863C7884C307A16"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "onApplicationEvent"
    sourceCodeSignature: "void onApplicationEvent(ApplicationEnvironmentPreparedEvent\
      \ event)"
    returnType: "void"
    parameters:
    - name: "event"
      type: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
    instructionFingerprint: "B617C84AB0A2B92D1B2598F6055AF987"
  paths:
  - pathId: "path1"
    testPathName: "onApplicationEventWhenDesiredIsNull"
    constructorSignature: "<init>() : void"
    modelFingerprint: "86A71B4F32ECAFB40E91DA4A11E79392"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "event"
      modelFingerprint: "F2DF357A1BE2AA3010912B31D7133C88"
      valueUuid: "event"
    - type: "LOCAL_VARIABLE"
      name: "event"
      modelFingerprint: "78076DE4E95D179B34C105C3BEFFCDB6"
      valueUuid: "event"
      methodExercised:
        expression: "getEnvironment():environment"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "EF36C0C1291729F8436192C703409892"
      valueUuid: "environment"
      methodExercised:
        expression: "getProperty(key:uniqueUuid1):string"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.FileEncodingApplicationListener"
        parameters: []
      valueType: "org.springframework.boot.context.FileEncodingApplicationListener"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
        parameters:
        - name: "bootstrapContext"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ConfigurableBootstrapContext"
            uuid: "event-bootstrapContext"
        - name: "application"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.SpringApplication"
            uuid: "event-application"
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "event-args"
        - name: "environment"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.ConfigurableEnvironment"
            uuid: "environment"
      valueType: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
      uuid: "event"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
        parameters:
        - name: "bootstrapContext"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ConfigurableBootstrapContext"
            uuid: "event-bootstrapContext"
        - name: "application"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.SpringApplication"
            uuid: "event-application"
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "event-args"
        - name: "environment"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.ConfigurableEnvironment"
            uuid: "environment"
      valueType: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.mandatory-file-encoding"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 62
      expression: "desired == null"
      range: "(62,7)-(62,21)"
      evaluatedAs: true
  - pathId: "path4"
    testPathName: "onApplicationEventWhenDesiredEqualsIgnoreCaseEncoding"
    constructorSignature: "<init>() : void"
    modelFingerprint: "3D52E6AFA1DFA896A6882C98E8DCC107"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "event"
      modelFingerprint: "F2DF357A1BE2AA3010912B31D7133C88"
      valueUuid: "event"
    - type: "LOCAL_VARIABLE"
      name: "event"
      modelFingerprint: "78076DE4E95D179B34C105C3BEFFCDB6"
      valueUuid: "event"
      methodExercised:
        expression: "getEnvironment():environment"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "3168E1822AFABA8615428323B4B7A323"
      valueUuid: "environment"
      methodExercised:
        expression: "getProperty(key:uniqueUuid2):string"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_UNSOLVABLE"
      source: "String encoding = System.getProperty(\\\"file.encoding\\\");"
      lineNumber: 65
      details: "Method java.lang.System::getProperty has a unrepeatable behavior"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.FileEncodingApplicationListener"
        parameters: []
      valueType: "org.springframework.boot.context.FileEncodingApplicationListener"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
        parameters:
        - name: "bootstrapContext"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ConfigurableBootstrapContext"
            uuid: "event-bootstrapContext"
        - name: "application"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.SpringApplication"
            uuid: "event-application"
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "event-args"
        - name: "environment"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.ConfigurableEnvironment"
            uuid: "environment"
      valueType: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
      uuid: "event"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
        parameters:
        - name: "bootstrapContext"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ConfigurableBootstrapContext"
            uuid: "event-bootstrapContext"
        - name: "application"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.SpringApplication"
            uuid: "event-application"
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "event-args"
        - name: "environment"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.ConfigurableEnvironment"
            uuid: "environment"
      valueType: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.mandatory-file-encoding"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 62
      expression: "desired == null"
      range: "(62,7)-(62,21)"
      evaluatedAs: false
    - lineNumber: 66
      expression: "encoding != null"
      range: "(66,7)-(66,22)"
      evaluatedAs: true
    - lineNumber: 66
      expression: "!desired.equalsIgnoreCase(encoding)"
      range: "(66,27)-(66,61)"
      evaluatedAs: false
  - pathId: "path2"
    testPathName: "onApplicationEventWhenLoggerIsErrorEnabledThrowsIllegalStateException"
    constructorSignature: "<init>() : void"
    modelFingerprint: "69BA780700DE3DACC1FC1A6B37F57115"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "event"
      modelFingerprint: "F2DF357A1BE2AA3010912B31D7133C88"
      valueUuid: "event"
    - type: "LOCAL_VARIABLE"
      name: "event"
      modelFingerprint: "78076DE4E95D179B34C105C3BEFFCDB6"
      valueUuid: "event"
      methodExercised:
        expression: "getEnvironment():environment"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "69845316D788821A2C6CA9B57015DC72"
      valueUuid: "environment"
      methodExercised:
        expression: "getProperty(key:uniqueUuid3):string"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "2506BA32B60348959EE52DAAC6854AEA"
      valueUuid: "illegalStateException"
    disabled: false
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_UNSOLVABLE"
      source: "String encoding = System.getProperty(\\\"file.encoding\\\");"
      lineNumber: 65
      details: "Method java.lang.System::getProperty has a unrepeatable behavior"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.FileEncodingApplicationListener"
        parameters: []
      valueType: "org.springframework.boot.context.FileEncodingApplicationListener"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
        parameters:
        - name: "bootstrapContext"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ConfigurableBootstrapContext"
            uuid: "event-bootstrapContext"
        - name: "application"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.SpringApplication"
            uuid: "event-application"
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "event-args"
        - name: "environment"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.ConfigurableEnvironment"
            uuid: "environment"
      valueType: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
      uuid: "event"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
        parameters:
        - name: "bootstrapContext"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ConfigurableBootstrapContext"
            uuid: "event-bootstrapContext"
        - name: "application"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.SpringApplication"
            uuid: "event-application"
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "event-args"
        - name: "environment"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.ConfigurableEnvironment"
            uuid: "environment"
      valueType: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "BASIC"
      content: !<regular>
        value: "D"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.mandatory-file-encoding"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "The Java Virtual Machine has not been configured to use the\
                \ desired default character encoding (D)."
            valueType: "java.lang.String"
            uuid: "string8"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 62
      expression: "desired == null"
      range: "(62,7)-(62,21)"
      evaluatedAs: false
    - lineNumber: 66
      expression: "encoding != null"
      range: "(66,7)-(66,22)"
      evaluatedAs: true
    - lineNumber: 66
      expression: "!desired.equalsIgnoreCase(encoding)"
      range: "(66,27)-(66,61)"
      evaluatedAs: true
    - lineNumber: 67
      expression: "logger.isErrorEnabled()"
      range: "(67,8)-(67,30)"
      evaluatedAs: true
