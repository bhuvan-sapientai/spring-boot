---
modelFingerprint: "C3D22005D4A596CFB15F3A557D1CCB3E"
targetClass:
  fullClassName: "org.springframework.boot.jackson.JsonMixinModuleEntries"
methods:
- method:
    name: "create"
    sourceCodeSignature: "JsonMixinModuleEntries create(Consumer<Builder> mixins)"
    returnType: "org.springframework.boot.jackson.JsonMixinModuleEntries"
    parameters:
    - name: "mixins"
      type: "java.util.function.Consumer"
    instructionFingerprint: "E244749A1229BCF258E23438AA44EB3E"
  paths:
  - pathId: "path1"
    testPathName: "createTest"
    modelFingerprint: "B7868F5E4DD62E4E57F1C9D253775ECA"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "mixins"
      modelFingerprint: "CE1767EC82519EAC41792D56C0DCCB60"
      valueUuid: "mixins"
    - type: "LOCAL_VARIABLE"
      name: "builder"
      modelFingerprint: "46C16368597CA0E5B40467A60B004230"
      valueUuid: "jsonMixinModuleEntries.Builder"
      methodExercised:
        expression: "build():jsonMixinModuleEntries"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "F0CAF2130E5598EE3BE9A0D14C7F73A6"
      valueUuid: "jsonMixinModuleEntries"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.function.Consumer.accept(org.springframework.boot.jackson.JsonMixinModuleEntries$Builder)\
        \ : void"
    allValues:
    - sapientType: "MOCK"
      valueType: "java.util.function.Consumer"
      uuid: "mixins"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.jackson.JsonMixinModuleEntries$Builder"
        parameters: []
      valueType: "org.springframework.boot.jackson.JsonMixinModuleEntries$Builder"
      uuid: "jsonMixinModuleEntries.Builder"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.boot.jackson.JsonMixinModuleEntries"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.jackson.JsonMixinModuleEntries$Builder"
            parameters: []
          valueType: "org.springframework.boot.jackson.JsonMixinModuleEntries$Builder"
          uuid: "jsonMixinModuleEntries.Builder"
          fixed: true
        methodParameters: []
        methodName: "build"
      valueType: "org.springframework.boot.jackson.JsonMixinModuleEntries"
      uuid: "jsonMixinModuleEntries"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.boot.jackson.JsonMixinModuleEntries"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.jackson.JsonMixinModuleEntries$Builder"
            parameters: []
          valueType: "org.springframework.boot.jackson.JsonMixinModuleEntries$Builder"
          uuid: "jsonMixinModuleEntries.Builder"
          fixed: true
        methodParameters: []
        methodName: "build"
      valueType: "org.springframework.boot.jackson.JsonMixinModuleEntries"
      uuid: "jsonMixinModuleEntries"
- method:
    name: "scan"
    sourceCodeSignature: "JsonMixinModuleEntries scan(ApplicationContext context,\
      \ Collection<String> basePackages)"
    returnType: "org.springframework.boot.jackson.JsonMixinModuleEntries"
    parameters:
    - name: "context"
      type: "org.springframework.context.ApplicationContext"
    - name: "basePackages"
      type: "java.util.Collection"
    instructionFingerprint: "87404BD861698544F1AF75385BAB0240"
  paths:
  - pathId: "path1"
    testPathName: "scanTest"
    modelFingerprint: "8756A192FA385CD882469261D8B46B9A"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "context"
      modelFingerprint: "6596023CDCF1B2D399C9B8A5AE1D7BBD"
      valueUuid: "context"
    - type: "INPUT"
      name: "basePackages"
      modelFingerprint: "6BD58DBA24DCD0B9C5233CEA31744D1D"
      valueUuid: "basePackages"
    - type: "STATIC"
      name: "JsonMixinModuleEntries.class"
      modelFingerprint: "973ED33B3631E39CD6A49F88C87D0321"
      valueUuid: "JsonMixinModuleEntries.class"
      methodExercised:
        expression: "create(mixins:uniqueUuid1):jsonMixinModuleEntries"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "892DA6D73B47586869ABB84789E40144"
      valueUuid: "jsonMixinModuleEntries"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "context"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "java.lang.String"
      uuid: "basePackages"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.jackson.JsonMixinModuleEntries"
      uuid: "JsonMixinModuleEntries.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.jackson.JsonMixinModuleEntries"
      uuid: "jsonMixinModuleEntries"
    - sapientType: "ANY"
      valueType: "java.util.function.Consumer"
      uuid: "uniqueUuid1"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.jackson.JsonMixinModuleEntries"
      uuid: "jsonMixinModuleEntries"
- method:
    name: "doWithEntry"
    sourceCodeSignature: "void doWithEntry(ClassLoader classLoader, BiConsumer<Class<?>,\
      \ Class<?>> action)"
    returnType: "void"
    parameters:
    - name: "classLoader"
      type: "java.lang.ClassLoader"
    - name: "action"
      type: "java.util.function.BiConsumer"
    instructionFingerprint: "7A5E083794443B7BE3CE8FCF3C10F9CC"
  paths:
  - pathId: "path1"
    testPathName: "doWithEntryWhenTypeInstanceOfClass_"
    constructorSignature: "scan(org.springframework.context.ApplicationContext,java.util.Collection<java.lang.String>)\
      \ : org.springframework.boot.jackson.JsonMixinModuleEntries"
    modelFingerprint: "8D5474BAF99452FBF461937EB7672377"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "STATIC_FACTORY_METHOD"
      modelFingerprint: "A6D267CF01AEF8B5E1035805469434CD"
      valueUuid: "target"
    - type: "INPUT"
      name: "classLoader"
      modelFingerprint: "C286DE215DE7563ED1CD0033A63BD833"
      valueUuid: "classLoader"
    - type: "INPUT"
      name: "action"
      modelFingerprint: "C4E3A8977DC9269FF97D7F6233DF9868"
      valueUuid: "action"
    - type: "STATIC"
      name: "JsonMixinModuleEntries.class"
      modelFingerprint: "973ED33B3631E39CD6A49F88C87D0321"
      valueUuid: "JsonMixinModuleEntries.class"
      methodExercised:
        expression: "create(mixins:uniqueUuid2):jsonMixinModuleEntries"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.function.BiConsumer.accept(java.lang.Class,java.lang.Class)\
        \ : void"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.jackson.JsonMixinModuleEntries"
        method: "scan"
        methodParameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.context.ApplicationContext"
            uuid: "context"
        - name: "basePackages"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Collection"
            genericValueType: "java.lang.String"
            uuid: "basePackages"
      valueType: "org.springframework.boot.jackson.JsonMixinModuleEntries"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "java.util.function.BiConsumer"
      uuid: "action"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.jackson.JsonMixinModuleEntries"
      uuid: "JsonMixinModuleEntries.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.jackson.JsonMixinModuleEntries"
      uuid: "jsonMixinModuleEntries"
    - sapientType: "ANY"
      valueType: "java.util.function.Consumer"
      uuid: "uniqueUuid2"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 110
      expression: "type instanceof Class<?> clazz"
      range: "(110,11)-(110,40)"
      evaluatedAs: true
      internalMethodName: "resolveClassNameIfNecessary"
  - pathId: "path3"
    testPathName: "doWithEntryWhenTypeNotInstanceOfClass_"
    constructorSignature: "scan(org.springframework.context.ApplicationContext,java.util.Collection<java.lang.String>)\
      \ : org.springframework.boot.jackson.JsonMixinModuleEntries"
    modelFingerprint: "31EDAE92E6A756B24F7E30AA58F36462"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "STATIC_FACTORY_METHOD"
      modelFingerprint: "A6D267CF01AEF8B5E1035805469434CD"
      valueUuid: "target"
    - type: "INPUT"
      name: "classLoader"
      modelFingerprint: "C286DE215DE7563ED1CD0033A63BD833"
      valueUuid: "classLoader"
    - type: "INPUT"
      name: "action"
      modelFingerprint: "C4E3A8977DC9269FF97D7F6233DF9868"
      valueUuid: "action"
    - type: "STATIC"
      name: "JsonMixinModuleEntries.class"
      modelFingerprint: "973ED33B3631E39CD6A49F88C87D0321"
      valueUuid: "JsonMixinModuleEntries.class"
      methodExercised:
        expression: "create(mixins:uniqueUuid3):jsonMixinModuleEntries"
        staticAccess: true
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "ECE1644F834A410D3ED16FEDEF27B933"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "resolveClassName(className:object,classLoader:classLoader):class"
        throwsExceptions:
        - "java.lang.IllegalArgumentException"
        staticAccess: true
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "ECE1644F834A410D3ED16FEDEF27B933"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "resolveClassName(className:object2,classLoader:classLoader):class2"
        throwsExceptions:
        - "java.lang.IllegalArgumentException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.function.BiConsumer.accept(java.lang.Class<?>,java.lang.Class<?>)\
        \ : void"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.jackson.JsonMixinModuleEntries"
        method: "scan"
        methodParameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.context.ApplicationContext"
            uuid: "context"
        - name: "basePackages"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Collection"
            genericValueType: "java.lang.String"
            uuid: "basePackages"
      valueType: "org.springframework.boot.jackson.JsonMixinModuleEntries"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "java.util.function.BiConsumer"
      uuid: "action"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.jackson.JsonMixinModuleEntries"
      uuid: "JsonMixinModuleEntries.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.jackson.JsonMixinModuleEntries"
      uuid: "jsonMixinModuleEntries"
    - sapientType: "ANY"
      valueType: "java.util.function.Consumer"
      uuid: "uniqueUuid3"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.String"
      uuid: "object"
      collectionUuid: "fieldMap"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.String"
      uuid: "object2"
      collectionUuid: "fieldMap"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 110
      expression: "type instanceof Class<?> clazz"
      range: "(110,11)-(110,40)"
      evaluatedAs: false
      internalMethodName: "resolveClassNameIfNecessary"
