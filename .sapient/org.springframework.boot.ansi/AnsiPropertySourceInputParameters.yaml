---
modelFingerprint: "BDB782EAD928586E10275029D9B6A92F"
targetClass:
  fullClassName: "org.springframework.boot.ansi.AnsiPropertySource"
methods:
- method:
    name: "getProperty"
    sourceCodeSignature: "Object getProperty(String name)"
    returnType: "java.lang.Object"
    parameters:
    - name: "name"
      type: "java.lang.String"
    instructionFingerprint: "D4FF80AD2A76FEE678CC883E3E55F9FF"
  paths:
  - pathId: "path13"
    testPathName: "getPropertyWhenElementIsNull"
    constructorSignature: "<init>(java.lang.String,boolean) : void"
    modelFingerprint: "DAB02613C7E3A5CBE1962A1C581CC2F7"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "801D96D06EA176B1F0AAFD4C8FEACC66"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "8216B97185D2C956841D97343FD87968"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B1EC4CCCE6999270E340F19D9682E6C8"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "E8A1523D80D1161D65478BD7F18ABBC5"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:object,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "9AC8585F2BA3BE310DEB8525B89CE68F"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:name):boolean9"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B5832848421B6892B8D06BE61ADCD847"
      valueUuid: "object8"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "String prefix = mapping.getPrefix();"
      lineNumber: 79
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: mapping - Method: getPrefix"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ansi.AnsiPropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "C"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "encode"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "encode"
      valueType: "org.springframework.boot.ansi.AnsiPropertySource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "BA"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.lang.Object"
      uuid: "object"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean9"
    - sapientType: "BASIC"
      content: !<regular>
        value: "BA"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object8"
      fixed: true
    branches:
    - lineNumber: 77
      expression: "StringUtils.hasLength(name)"
      range: "(77,7)-(77,33)"
      evaluatedAs: true
    - lineNumber: 78
      expression: "for-each(MAPPINGS)"
      range: "(78,27)-(78,34)"
      evaluatedAs: true
    - lineNumber: 80
      expression: "name.startsWith(prefix)"
      range: "(80,9)-(80,31)"
      evaluatedAs: true
    - lineNumber: 83
      expression: "element != null"
      range: "(83,10)-(83,24)"
      evaluatedAs: false
  - pathId: "path2"
    testPathName: "getPropertyWhenThisNotEncode"
    constructorSignature: "<init>(java.lang.String,boolean) : void"
    modelFingerprint: "2C9007316A53663A4F7D808B3CF73F66"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "9C376DCEDBD238AA69C4C2C20BF8AD6B"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "8216B97185D2C956841D97343FD87968"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B71DD8A64D8481D85C7253081F4DE6AC"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid3):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "E8A1523D80D1161D65478BD7F18ABBC5"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:object,message:uniqueUuid4):void2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "9AC8585F2BA3BE310DEB8525B89CE68F"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:name):boolean9"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "BE146C2BD4B8BAD046E59F92260AF867"
      valueUuid: "ansiElement"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "String prefix = mapping.getPrefix();"
      lineNumber: 79
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: mapping - Method: getPrefix"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ansi.AnsiPropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "CE"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "encode"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "encode"
      valueType: "org.springframework.boot.ansi.AnsiPropertySource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "BA"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "CE"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.lang.Object"
      uuid: "object"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean9"
    - sapientType: "BASIC"
      content: !<regular>
        value: "BA"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ansi.AnsiElement"
      uuid: "ansiElement"
    branches:
    - lineNumber: 77
      expression: "StringUtils.hasLength(name)"
      range: "(77,7)-(77,33)"
      evaluatedAs: true
    - lineNumber: 78
      expression: "for-each(MAPPINGS)"
      range: "(78,27)-(78,34)"
      evaluatedAs: true
    - lineNumber: 80
      expression: "name.startsWith(prefix)"
      range: "(80,9)-(80,31)"
      evaluatedAs: true
    - lineNumber: 83
      expression: "element != null"
      range: "(83,10)-(83,24)"
      evaluatedAs: true
    - lineNumber: 84
      expression: "this.encode"
      range: "(84,15)-(84,25)"
      evaluatedAs: false
  - pathId: "path3"
    testPathName: "getPropertyWhenElementIsNullAndThisEncode"
    constructorSignature: "<init>(java.lang.String,boolean) : void"
    modelFingerprint: "A7C853FD92D0DC7725EA1014B089CAF7"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "FC66E5BDC6EF970DEF3F99025EDB088E"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "338E21018F2D56D5FC77AAEDDA7725BE"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B1EC4CCCE6999270E340F19D9682E6C8"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid5):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "E8A1523D80D1161D65478BD7F18ABBC5"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:object,message:uniqueUuid6):void2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "25CA674C247772938F2C578C492633A3"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:name):boolean9"
        staticAccess: true
    - type: "STATIC"
      name: "AnsiOutput.class"
      modelFingerprint: "4D1F82F2DA375A02C2F753DA2CDC4A4A"
      valueUuid: "AnsiOutput.class"
      methodExercised:
        expression: "encode(element:ansiElement2):string5"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D446A609419428DDEAA49A58091F3986"
      valueUuid: "string5"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "String prefix = mapping.getPrefix();"
      lineNumber: 79
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: mapping - Method: getPrefix"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ansi.AnsiPropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "C"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "encode"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "encode"
      valueType: "org.springframework.boot.ansi.AnsiPropertySource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "DB"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.lang.Object"
      uuid: "object"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean9"
    - sapientType: "BASIC"
      content: !<regular>
        value: "DB"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ansi.AnsiOutput"
      uuid: "AnsiOutput.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_encode1"
      valueType: "java.lang.String"
      uuid: "string5"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ansi.AnsiElement"
      uuid: "ansiElement2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_encode1"
      valueType: "java.lang.String"
      uuid: "string5"
    branches:
    - lineNumber: 77
      expression: "StringUtils.hasLength(name)"
      range: "(77,7)-(77,33)"
      evaluatedAs: true
    - lineNumber: 78
      expression: "for-each(MAPPINGS)"
      range: "(78,27)-(78,34)"
      evaluatedAs: true
    - lineNumber: 80
      expression: "name.startsWith(prefix)"
      range: "(80,9)-(80,31)"
      evaluatedAs: true
    - lineNumber: 83
      expression: "element != null"
      range: "(83,10)-(83,24)"
      evaluatedAs: false
    - lineNumber: 84
      expression: "this.encode"
      range: "(84,15)-(84,25)"
      evaluatedAs: true
