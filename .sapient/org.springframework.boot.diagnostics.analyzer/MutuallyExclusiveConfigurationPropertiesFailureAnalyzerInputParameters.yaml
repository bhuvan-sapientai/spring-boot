---
modelFingerprint: "777836B19A6851E23FA617B5E27FE12B"
targetClass:
  fullClassName: "org.springframework.boot.diagnostics.analyzer.MutuallyExclusiveConfigurationPropertiesFailureAnalyzer"
methods:
- method:
    name: "analyze"
    sourceCodeSignature: "FailureAnalysis analyze(Throwable rootFailure, MutuallyExclusiveConfigurationPropertiesException\
      \ cause)"
    returnType: "org.springframework.boot.diagnostics.FailureAnalysis"
    parameters:
    - name: "rootFailure"
      type: "java.lang.Throwable"
    - name: "cause"
      type: "org.springframework.boot.context.properties.source.MutuallyExclusiveConfigurationPropertiesException"
    instructionFingerprint: "3348861348B9ED245D92C020B6B0D019"
  paths:
  - pathId: "path3"
    testPathName: "analyze2WhenInputIsNotEmpty"
    constructorSignature: "<init>(org.springframework.core.env.Environment) : void"
    modelFingerprint: "ED57D3207A0FDBB3EA6BB585E7BE91EA"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "789E8CE76359B3FB9AD72C1B06B22FE0"
      valueUuid: "target"
    - type: "INPUT"
      name: "rootFailure"
      modelFingerprint: "342BEFE484C53ADA99B8405F2B8802F3"
      valueUuid: "rootFailure"
    - type: "INPUT"
      name: "cause"
      modelFingerprint: "3BDF2A5893973E8F37025373C885C156"
      valueUuid: "cause"
    - type: "LOCAL_VARIABLE"
      name: "cause"
      modelFingerprint: "9DF1D9FC2B5CA0C3214180DB5ECC4108"
      valueUuid: "cause"
      methodExercised:
        expression: "getConfiguredNames():configuredNames"
    - type: "LOCAL_VARIABLE"
      name: "cause"
      modelFingerprint: "DB75DD572FEEF3908D15BCDFDE1914E0"
      valueUuid: "cause"
      methodExercised:
        expression: "getMutuallyExclusiveNames():mutuallyExclusiveNames"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C75D50C056ACD99A7A655323B7F90E7C"
      valueUuid: "failureAnalysis"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Comparator.comparing(java.util.function.Function)\
        \ : java.util.Comparator"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.diagnostics.analyzer.MutuallyExclusiveConfigurationPropertiesFailureAnalyzer"
        parameters:
        - name: "environment"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.ConfigurableEnvironment"
            uuid: "environment"
            explicitCastNeeded: true
      valueType: "org.springframework.boot.diagnostics.analyzer.MutuallyExclusiveConfigurationPropertiesFailureAnalyzer"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "rootFailure"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.MutuallyExclusiveConfigurationPropertiesException"
      uuid: "cause"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.MutuallyExclusiveConfigurationPropertiesException"
      uuid: "cause"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Set"
      genericValueType: "java.lang.String"
      uuid: "configuredNames"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.MutuallyExclusiveConfigurationPropertiesException"
      uuid: "cause"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashSet"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "A"
          valueType: "java.lang.String"
          uuid: "object"
          collectionUuid: "mutuallyExclusiveNames"
      valueType: "java.util.Set"
      genericValueType: "java.lang.String"
      uuid: "mutuallyExclusiveNames"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.diagnostics.FailureAnalysis"
        parameters:
        - name: "description"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "The following configuration properties are mutually exclusive:\\\
                n\\n\\tA\\n\\nHowever, more than one of those properties has been\
                \ configured at the same time:\\n\\n"
            valueType: "java.lang.String"
            uuid: "string6"
        - name: "action"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Update your configuration so that only one of the mutually exclusive\
                \ properties is configured."
            valueType: "java.lang.String"
            uuid: "uniqueUuid1"
            fixed: true
        - name: "cause"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.MutuallyExclusiveConfigurationPropertiesException"
            uuid: "cause"
      valueType: "org.springframework.boot.diagnostics.FailureAnalysis"
      uuid: "failureAnalysis"
      fixed: true
    branches:
    - lineNumber: 58
      expression: "for-each(cause.getConfiguredNames())"
      range: "(58,22)-(58,47)"
      evaluatedAs: false
    - lineNumber: 108
      expression: "for-each(input)"
      range: "(108,17)-(108,21)"
      evaluatedAs: true
      internalMethodName: "sortedStrings"
  - pathId: "path1"
    testPathName: "analyze2WhenDescriptorsForNameIsEmpty"
    constructorSignature: "<init>(org.springframework.core.env.Environment) : void"
    modelFingerprint: "8E3BC898C69FF5D7FB52461D207681F9"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "9B36F71C094E1051ACD363C80957ED1E"
      valueUuid: "target"
    - type: "INPUT"
      name: "rootFailure"
      modelFingerprint: "342BEFE484C53ADA99B8405F2B8802F3"
      valueUuid: "rootFailure"
    - type: "INPUT"
      name: "cause"
      modelFingerprint: "3BDF2A5893973E8F37025373C885C156"
      valueUuid: "cause"
    - type: "LOCAL_VARIABLE"
      name: "cause"
      modelFingerprint: "653D94ADBF9FC30DAFBD49CAE47BB348"
      valueUuid: "cause"
      methodExercised:
        expression: "getConfiguredNames():configuredNames"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "CFD668B73CDA4578861F95E56AEEBB6D"
      valueUuid: "failureAnalysis"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.diagnostics.analyzer.MutuallyExclusiveConfigurationPropertiesFailureAnalyzer"
        parameters:
        - name: "environment"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.core.env.ConfigurableEnvironment"
            uuid: "environment"
            fixed: true
            explicitCastNeeded: true
      valueType: "org.springframework.boot.diagnostics.analyzer.MutuallyExclusiveConfigurationPropertiesFailureAnalyzer"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "rootFailure"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.MutuallyExclusiveConfigurationPropertiesException"
      uuid: "cause"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.MutuallyExclusiveConfigurationPropertiesException"
      uuid: "cause"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashSet"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "return_of_getConfiguredNamesItem1"
          valueType: "java.lang.String"
          uuid: "object"
          collectionUuid: "configuredNames"
      valueType: "java.util.Set"
      genericValueType: "java.lang.String"
      uuid: "configuredNames"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.diagnostics.FailureAnalysis"
      uuid: "failureAnalysis"
      fixed: true
    branches:
    - lineNumber: 58
      expression: "for-each(cause.getConfiguredNames())"
      range: "(58,22)-(58,47)"
      evaluatedAs: true
    - lineNumber: 79
      expression: "this.environment == null"
      range: "(79,7)-(79,30)"
      evaluatedAs: true
      internalMethodName: "getPropertySources"
    - lineNumber: 60
      expression: "descriptorsForName.isEmpty()"
      range: "(60,8)-(60,35)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "analyze2WhenThisEnvironmentIsNotNullAndDescriptorsForNameIsEmpty"
    constructorSignature: "<init>(org.springframework.core.env.Environment) : void"
    modelFingerprint: "ACC3D898BF519FB163398B66F7B88074"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "6E25B354624A7E27B7D47978D775C2DA"
      valueUuid: "target"
    - type: "INPUT"
      name: "rootFailure"
      modelFingerprint: "342BEFE484C53ADA99B8405F2B8802F3"
      valueUuid: "rootFailure"
    - type: "INPUT"
      name: "cause"
      modelFingerprint: "3BDF2A5893973E8F37025373C885C156"
      valueUuid: "cause"
    - type: "LOCAL_VARIABLE"
      name: "cause"
      modelFingerprint: "653D94ADBF9FC30DAFBD49CAE47BB348"
      valueUuid: "cause"
      methodExercised:
        expression: "getConfiguredNames():configuredNames"
    - type: "FIELD"
      name: "environment"
      modelFingerprint: "9B4EF364D99169E3F4E20B025C6E9832"
      valueUuid: "environment"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "8D777FEC2275B7A42CD1B771458221A7"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "stream():stream"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "CFD668B73CDA4578861F95E56AEEBB6D"
      valueUuid: "failureAnalysis"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.stream.Stream.filter(java.util.function.Predicate)\
        \ : java.util.stream.Stream<org.springframework.core.env.PropertySource<?>>"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.diagnostics.analyzer.MutuallyExclusiveConfigurationPropertiesFailureAnalyzer"
        parameters:
        - name: "environment"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.ConfigurableEnvironment"
            uuid: "environment"
            explicitCastNeeded: true
      valueType: "org.springframework.boot.diagnostics.analyzer.MutuallyExclusiveConfigurationPropertiesFailureAnalyzer"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "rootFailure"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.MutuallyExclusiveConfigurationPropertiesException"
      uuid: "cause"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.MutuallyExclusiveConfigurationPropertiesException"
      uuid: "cause"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashSet"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "return_of_getConfiguredNamesItem1"
          valueType: "java.lang.String"
          uuid: "object"
          collectionUuid: "configuredNames"
      valueType: "java.util.Set"
      genericValueType: "java.lang.String"
      uuid: "configuredNames"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.stream.Stream"
        method: "empty"
        methodParameters: []
      valueType: "java.util.stream.Stream"
      uuid: "stream"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.diagnostics.FailureAnalysis"
      uuid: "failureAnalysis"
      fixed: true
    branches:
    - lineNumber: 58
      expression: "for-each(cause.getConfiguredNames())"
      range: "(58,22)-(58,47)"
      evaluatedAs: true
    - lineNumber: 79
      expression: "this.environment == null"
      range: "(79,7)-(79,30)"
      evaluatedAs: false
      internalMethodName: "getPropertySources"
    - lineNumber: 60
      expression: "descriptorsForName.isEmpty()"
      range: "(60,8)-(60,35)"
      evaluatedAs: true
