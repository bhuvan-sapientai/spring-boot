---
modelFingerprint: "652ED3399891610D3EE27B270B0F534D"
targetClass:
  fullClassName: "org.springframework.boot.web.servlet.view.MustacheView"
methods:
- method:
    name: "setCompiler"
    sourceCodeSignature: "void setCompiler(Compiler compiler)"
    returnType: "void"
    parameters:
    - name: "compiler"
      type: "com.samskivert.mustache.Mustache$Compiler"
    instructionFingerprint: "F35E98DFB5F25D9B058B344670717EBC"
  paths:
  - pathId: "path1"
    testPathName: "setCompilerTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "1C104EAC254BDE86B552F04920675C89"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "setCharset"
    sourceCodeSignature: "void setCharset(String charset)"
    returnType: "void"
    parameters:
    - name: "charset"
      type: "java.lang.String"
    instructionFingerprint: "7CE64AE350F1AB4E4BF9343F967573FA"
  paths:
  - pathId: "path1"
    testPathName: "setCharsetTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "E470C9B710820C022997C4DD5B4D2100"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "checkResource"
    sourceCodeSignature: "boolean checkResource(Locale locale)"
    returnType: "boolean"
    throwsExceptions:
    - "java.lang.Exception"
    parameters:
    - name: "locale"
      type: "java.util.Locale"
    instructionFingerprint: "96D491ADC213BFCA067805A696EC0A10"
  paths:
  - pathId: "path1"
    testPathName: "checkResourceWhenResourceExists"
    constructorSignature: "<init>() : void"
    modelFingerprint: "C6D391C702B7C8CA3AD1B341FB3426DA"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "locale"
      modelFingerprint: "5A54D85CEB69D87DB67C2DBD628A7B22"
      valueUuid: "locale"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "378A9CF2AB5E8A080ADF6DDA5525233D"
      methodExercised:
        expression: "getApplicationContext():applicationContext"
        throwsExceptions:
        - "java.lang.IllegalStateException"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "30FFD5382FB7FC4BC90EEEF8773578C3"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "getResource(location:string2):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "9C4E8CD9E94FF629496E2491E24168ED"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean1"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.view.MustacheView"
        parameters: []
        propertiesMap:
          url:
            sapientType: "BASIC"
            content: !<regular>
              value: "url1"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "org.springframework.boot.web.servlet.view.MustacheView"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Locale"
        parameters:
        - name: "language"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "language1"
            valueType: "java.lang.String"
            uuid: "locale-language"
      valueType: "java.util.Locale"
      uuid: "locale"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "url1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 71
      expression: "resource != null"
      range: "(71,11)-(71,26)"
      evaluatedAs: true
    - lineNumber: 71
      expression: "resource.exists()"
      range: "(71,31)-(71,47)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "checkResourceWhenResourceNotExists"
    constructorSignature: "<init>() : void"
    modelFingerprint: "53ADDAD633AD18C8F596EE9B38E1D620"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "locale"
      modelFingerprint: "5A54D85CEB69D87DB67C2DBD628A7B22"
      valueUuid: "locale"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "378A9CF2AB5E8A080ADF6DDA5525233D"
      methodExercised:
        expression: "getApplicationContext():applicationContext"
        throwsExceptions:
        - "java.lang.IllegalStateException"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "30FFD5382FB7FC4BC90EEEF8773578C3"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "getResource(location:string2):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "A6D3B599F5C19366D28CA5E4F2301D7D"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean1"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5633A2B0C967879105766C98D64A3959"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.view.MustacheView"
        parameters: []
        propertiesMap:
          url:
            sapientType: "BASIC"
            content: !<regular>
              value: "url1"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "org.springframework.boot.web.servlet.view.MustacheView"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Locale"
        parameters:
        - name: "language"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "language1"
            valueType: "java.lang.String"
            uuid: "locale-language"
      valueType: "java.util.Locale"
      uuid: "locale"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "url1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 71
      expression: "resource != null"
      range: "(71,11)-(71,26)"
      evaluatedAs: true
    - lineNumber: 71
      expression: "resource.exists()"
      range: "(71,31)-(71,47)"
      evaluatedAs: false
- method:
    name: "renderMergedTemplateModel"
    sourceCodeSignature: "void renderMergedTemplateModel(Map<String, Object> model,\
      \ HttpServletRequest request, HttpServletResponse response)"
    returnType: "void"
    throwsExceptions:
    - "java.lang.Exception"
    parameters:
    - name: "model"
      type: "java.util.Map"
    - name: "request"
      type: "jakarta.servlet.http.HttpServletRequest"
    - name: "response"
      type: "jakarta.servlet.http.HttpServletResponse"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Throwable"
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Throwable"
    instructionFingerprint: "44AFC4C91514BF3044B0121B3F0714A2"
  paths:
  - pathId: "path4"
    testPathName: "renderMergedTemplateModelWhenDefaultBranchThrowsThrowable"
    constructorSignature: "<init>() : void"
    modelFingerprint: "7A69AC480851D7EE4F0BB354842E5A58"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "model"
      modelFingerprint: "C35D3C219B8E99DA34A0749F96873518"
      valueUuid: "model"
    - type: "INPUT"
      name: "request"
      modelFingerprint: "98FA91B3AE33596239589E5BFFEF53F1"
      valueUuid: "request"
    - type: "INPUT"
      name: "response"
      modelFingerprint: "8258F2C0C8DB93C3353BC562467A949D"
      valueUuid: "response"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "378A9CF2AB5E8A080ADF6DDA5525233D"
      methodExercised:
        expression: "getApplicationContext():applicationContext"
        throwsExceptions:
        - "java.lang.IllegalStateException"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "30FFD5382FB7FC4BC90EEEF8773578C3"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "getResource(location:string2):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "5B5C35D79B6C52369B57922472DE393E"
      valueUuid: "resource"
      methodExercised:
        expression: "getInputStream():inputStream"
        throwsExceptions:
        - "java.io.IOException"
    - type: "FIELD"
      name: "compiler"
      modelFingerprint: "70DCCDAF47C104E2AABDE287A348ED15"
      valueUuid: "fieldMustache.Compiler"
      methodExercised:
        expression: "compile(source:inputStreamReader):template"
    - type: "LOCAL_VARIABLE"
      name: "reader"
      modelFingerprint: "EDAEEF7596902AAD2CF449F81C058172"
      valueUuid: "inputStreamReader"
      methodExercised:
        expression: "close():void"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "49E493EB56B47EDEB5C173968793BABC"
      valueUuid: "throwable"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_FAILURE"
      source: "return new InputStreamReader(resource.getInputStream(), this.charset);"
      lineNumber: 91
      details: "No constructor found to create an object without any exception for\
        \ class java.io.InputStreamReader"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.view.MustacheView"
        parameters: []
        propertiesMap:
          charset:
            sapientType: "BASIC"
            content: !<regular>
              value: "charset1"
            valueType: "java.lang.String"
            uuid: "fieldString5"
          compiler:
            sapientType: "MOCK"
            valueType: "com.samskivert.mustache.Mustache$Compiler"
            uuid: "fieldMustache.Compiler"
          url:
            sapientType: "BASIC"
            content: !<regular>
              value: "url1"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "org.springframework.boot.web.servlet.view.MustacheView"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,java.lang.Object"
      uuid: "model"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletResponse"
      uuid: "response"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "url1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "inputStream"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Mustache$Compiler"
      uuid: "fieldMustache.Compiler"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Template"
      uuid: "template"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.InputStreamReader"
        parameters:
        - name: "in"
          value:
            sapientType: "INPUT_STREAM"
            content: !<inputStream>
              values: []
            valueType: "java.io.InputStream"
            uuid: "inputStream"
        - name: "charsetName"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "charset1"
            valueType: "java.lang.String"
            uuid: "fieldString5"
      valueType: "java.io.InputStreamReader"
      uuid: "inputStreamReader"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.InputStreamReader"
        parameters:
        - name: "in"
          value:
            sapientType: "INPUT_STREAM"
            content: !<inputStream>
              values: []
            valueType: "java.io.InputStream"
            uuid: "inputStream"
        - name: "charsetName"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "charset1"
            valueType: "java.lang.String"
            uuid: "fieldString5"
      valueType: "java.io.InputStreamReader"
      uuid: "inputStreamReader"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "throwable"
    branches:
    - lineNumber: 90
      expression: "this.charset != null"
      range: "(90,7)-(90,26)"
      evaluatedAs: true
      internalMethodName: "getReader"
    - lineNumber: 84
      expression: "branch expression (line 84)"
      range: "(84,1)-(84,200)"
      evaluatedAs: true
      internalMethodName: "createTemplate"
    catchBlockExercised:
      idExternalInstruction: 8
      id: 1
      catchExceptions:
      - "java.lang.Throwable"
  - pathId: "path5"
    testPathName: "renderMergedTemplateModelWhenThisCharsetIsNullAndDefaultBranchThrowsThrowable"
    constructorSignature: "<init>() : void"
    modelFingerprint: "68892E54FCCFB1DEAC515CCF0B47ACD4"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "model"
      modelFingerprint: "C35D3C219B8E99DA34A0749F96873518"
      valueUuid: "model"
    - type: "INPUT"
      name: "request"
      modelFingerprint: "98FA91B3AE33596239589E5BFFEF53F1"
      valueUuid: "request"
    - type: "INPUT"
      name: "response"
      modelFingerprint: "8258F2C0C8DB93C3353BC562467A949D"
      valueUuid: "response"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "378A9CF2AB5E8A080ADF6DDA5525233D"
      methodExercised:
        expression: "getApplicationContext():applicationContext"
        throwsExceptions:
        - "java.lang.IllegalStateException"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "30FFD5382FB7FC4BC90EEEF8773578C3"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "getResource(location:string2):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "5B5C35D79B6C52369B57922472DE393E"
      valueUuid: "resource"
      methodExercised:
        expression: "getInputStream():inputStream"
        throwsExceptions:
        - "java.io.IOException"
    - type: "FIELD"
      name: "compiler"
      modelFingerprint: "691F7E20BC8B9BBE1509534755BF4248"
      valueUuid: "fieldMustache.Compiler"
      methodExercised:
        expression: "compile(source:inputStreamReader):template"
    - type: "LOCAL_VARIABLE"
      name: "reader"
      modelFingerprint: "F2132282430D4629EB65E43C8D5370AD"
      valueUuid: "inputStreamReader"
      methodExercised:
        expression: "close():void"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "49E493EB56B47EDEB5C173968793BABC"
      valueUuid: "throwable"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "try (Reader reader = getReader(resource)) {"
      lineNumber: 84
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: reader - Method: close"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.view.MustacheView"
        parameters: []
        propertiesMap:
          charset:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "fieldString5"
            fixed: true
          compiler:
            sapientType: "MOCK"
            valueType: "com.samskivert.mustache.Mustache$Compiler"
            uuid: "fieldMustache.Compiler"
          url:
            sapientType: "BASIC"
            content: !<regular>
              value: "url1"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "org.springframework.boot.web.servlet.view.MustacheView"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,java.lang.Object"
      uuid: "model"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletResponse"
      uuid: "response"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "url1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "inputStream"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Mustache$Compiler"
      uuid: "fieldMustache.Compiler"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Template"
      uuid: "template"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.InputStreamReader"
        parameters:
        - name: "in"
          value:
            sapientType: "INPUT_STREAM"
            content: !<inputStream>
              values: []
            valueType: "java.io.InputStream"
            uuid: "inputStream"
      valueType: "java.io.InputStreamReader"
      uuid: "inputStreamReader"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.InputStreamReader"
        parameters:
        - name: "in"
          value:
            sapientType: "INPUT_STREAM"
            content: !<inputStream>
              values: []
            valueType: "java.io.InputStream"
            uuid: "inputStream"
      valueType: "java.io.InputStreamReader"
      uuid: "inputStreamReader"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "throwable"
    branches:
    - lineNumber: 90
      expression: "this.charset != null"
      range: "(90,7)-(90,26)"
      evaluatedAs: false
      internalMethodName: "getReader"
    - lineNumber: 84
      expression: "branch expression (line 84)"
      range: "(84,1)-(84,200)"
      evaluatedAs: true
      internalMethodName: "createTemplate"
    catchBlockExercised:
      idExternalInstruction: 8
      id: 1
      catchExceptions:
      - "java.lang.Throwable"
  - pathId: "path1"
    testPathName: "renderMergedTemplateModelWhenTemplateIsNotNull"
    constructorSignature: "<init>() : void"
    modelFingerprint: "D3BECECF0C9364AB9D6B6B72E17AF385"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "model"
      modelFingerprint: "C35D3C219B8E99DA34A0749F96873518"
      valueUuid: "model"
    - type: "INPUT"
      name: "request"
      modelFingerprint: "98FA91B3AE33596239589E5BFFEF53F1"
      valueUuid: "request"
    - type: "INPUT"
      name: "response"
      modelFingerprint: "ABEDAC03B9FFE697A36E1AD6D35FF4E0"
      valueUuid: "response"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "378A9CF2AB5E8A080ADF6DDA5525233D"
      methodExercised:
        expression: "getApplicationContext():applicationContext"
        throwsExceptions:
        - "java.lang.IllegalStateException"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "30FFD5382FB7FC4BC90EEEF8773578C3"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "getResource(location:string2):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "5B5C35D79B6C52369B57922472DE393E"
      valueUuid: "resource"
      methodExercised:
        expression: "getInputStream():inputStream"
        throwsExceptions:
        - "java.io.IOException"
    - type: "FIELD"
      name: "compiler"
      modelFingerprint: "9F1FB8C464E5A5040300D4D486C99EB1"
      valueUuid: "fieldMustache.Compiler"
      methodExercised:
        expression: "compile(source:inputStreamReader):template"
    - type: "LOCAL_VARIABLE"
      name: "response"
      modelFingerprint: "4A87F965F74404AAB83F4D38E0D18E7D"
      valueUuid: "response"
      methodExercised:
        expression: "getWriter():printWriter"
        throwsExceptions:
        - "java.io.IOException"
    - type: "LOCAL_VARIABLE"
      name: "template"
      modelFingerprint: "75A03B7B285E3B76050D136B9293F29D"
      valueUuid: "template"
      methodExercised:
        expression: "execute(context:model,out:printWriter):void2"
        throwsExceptions:
        - "com.samskivert.mustache.MustacheException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_FAILURE"
      source: "return new InputStreamReader(resource.getInputStream(), this.charset);"
      lineNumber: 91
      details: "No constructor found to create an object without any exception for\
        \ class java.io.InputStreamReader"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.view.MustacheView"
        parameters: []
        propertiesMap:
          charset:
            sapientType: "BASIC"
            content: !<regular>
              value: "charset1"
            valueType: "java.lang.String"
            uuid: "fieldString5"
          compiler:
            sapientType: "MOCK"
            valueType: "com.samskivert.mustache.Mustache$Compiler"
            uuid: "fieldMustache.Compiler"
          url:
            sapientType: "BASIC"
            content: !<regular>
              value: "url1"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "org.springframework.boot.web.servlet.view.MustacheView"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,java.lang.Object"
      uuid: "model"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletResponse"
      uuid: "response"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "url1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "inputStream"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Mustache$Compiler"
      uuid: "fieldMustache.Compiler"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Template"
      uuid: "template"
    - sapientType: "ANY"
      valueType: "java.io.InputStreamReader"
      uuid: "inputStreamReader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletResponse"
      uuid: "response"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.PrintWriter"
        parameters:
        - name: "out"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.io.Writer"
              method: "nullWriter"
              methodParameters: []
            valueType: "java.io.Writer"
            uuid: "printWriter-out"
      valueType: "java.io.PrintWriter"
      uuid: "printWriter"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Template"
      uuid: "template"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,java.lang.Object"
      uuid: "model"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.PrintWriter"
        parameters:
        - name: "out"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.io.Writer"
              method: "nullWriter"
              methodParameters: []
            valueType: "java.io.Writer"
            uuid: "printWriter-out"
      valueType: "java.io.PrintWriter"
      uuid: "printWriter"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 90
      expression: "this.charset != null"
      range: "(90,7)-(90,26)"
      evaluatedAs: true
      internalMethodName: "getReader"
    - lineNumber: 86
      expression: "branch expression (line 86)"
      range: "(86,1)-(86,200)"
      evaluatedAs: false
      internalMethodName: "createTemplate"
    - lineNumber: 78
      expression: "template != null"
      range: "(78,7)-(78,22)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "renderMergedTemplateModelWhenDefaultBranchAndTemplateIsNull"
    constructorSignature: "<init>() : void"
    modelFingerprint: "20F31B4D74E8C8B04AD9F3323DE81A6C"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "model"
      modelFingerprint: "C35D3C219B8E99DA34A0749F96873518"
      valueUuid: "model"
    - type: "INPUT"
      name: "request"
      modelFingerprint: "98FA91B3AE33596239589E5BFFEF53F1"
      valueUuid: "request"
    - type: "INPUT"
      name: "response"
      modelFingerprint: "8258F2C0C8DB93C3353BC562467A949D"
      valueUuid: "response"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "378A9CF2AB5E8A080ADF6DDA5525233D"
      methodExercised:
        expression: "getApplicationContext():applicationContext"
        throwsExceptions:
        - "java.lang.IllegalStateException"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "30FFD5382FB7FC4BC90EEEF8773578C3"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "getResource(location:string2):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "5B5C35D79B6C52369B57922472DE393E"
      valueUuid: "resource"
      methodExercised:
        expression: "getInputStream():inputStream"
        throwsExceptions:
        - "java.io.IOException"
    - type: "FIELD"
      name: "compiler"
      modelFingerprint: "4FB1A4CC9CF0AC01922CDDF78FF60976"
      valueUuid: "fieldMustache.Compiler"
      methodExercised:
        expression: "compile(source:inputStreamReader):template"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "}"
      lineNumber: 86
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: reader - Method: close"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.view.MustacheView"
        parameters: []
        propertiesMap:
          charset:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "fieldString5"
            fixed: true
          compiler:
            sapientType: "MOCK"
            valueType: "com.samskivert.mustache.Mustache$Compiler"
            uuid: "fieldMustache.Compiler"
          url:
            sapientType: "BASIC"
            content: !<regular>
              value: "url1"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "org.springframework.boot.web.servlet.view.MustacheView"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,java.lang.Object"
      uuid: "model"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletResponse"
      uuid: "response"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "url1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "inputStream"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Mustache$Compiler"
      uuid: "fieldMustache.Compiler"
    - sapientType: "NULL"
      valueType: "com.samskivert.mustache.Template"
      uuid: "template"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.io.InputStreamReader"
      uuid: "inputStreamReader"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 90
      expression: "this.charset != null"
      range: "(90,7)-(90,26)"
      evaluatedAs: false
      internalMethodName: "getReader"
    - lineNumber: 86
      expression: "branch expression (line 86)"
      range: "(86,1)-(86,200)"
      evaluatedAs: false
      internalMethodName: "createTemplate"
    - lineNumber: 78
      expression: "template != null"
      range: "(78,7)-(78,22)"
      evaluatedAs: false
