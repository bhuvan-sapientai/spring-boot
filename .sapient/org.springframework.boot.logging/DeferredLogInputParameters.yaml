---
modelFingerprint: "2CE7894A56CB4432485C593A34853A21"
targetClass:
  fullClassName: "org.springframework.boot.logging.DeferredLog"
methods:
- method:
    name: "isTraceEnabled"
    sourceCodeSignature: "boolean isTraceEnabled()"
    returnType: "boolean"
    instructionFingerprint: "26AD68DB24DB119C8CB1CD331CA06E08"
  paths:
  - pathId: "path1"
    testPathName: "isTraceEnabledWhenThisDestinationIsNull"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "D8577445EF78917227511AE91C105633"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "739B8D6D4F461573E37B157BAEC82BAC"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination,message:uniqueUuid1):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 67
      expression: "this.destination == null"
      range: "(67,12)-(67,35)"
      evaluatedAs: true
- method:
    name: "isDebugEnabled"
    sourceCodeSignature: "boolean isDebugEnabled()"
    returnType: "boolean"
    instructionFingerprint: "4F8DD146AA25B4C3130E1D028C8AA8C3"
  paths:
  - pathId: "path1"
    testPathName: "isDebugEnabledWhenThisDestinationIsNull"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "D8577445EF78917227511AE91C105633"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "739B8D6D4F461573E37B157BAEC82BAC"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination,message:uniqueUuid2):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 74
      expression: "this.destination == null"
      range: "(74,12)-(74,35)"
      evaluatedAs: true
- method:
    name: "isInfoEnabled"
    sourceCodeSignature: "boolean isInfoEnabled()"
    returnType: "boolean"
    instructionFingerprint: "4FCCF72A73C38936B1FFA1549BD63B4B"
  paths:
  - pathId: "path1"
    testPathName: "isInfoEnabledWhenThisDestinationIsNull"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "D8577445EF78917227511AE91C105633"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "739B8D6D4F461573E37B157BAEC82BAC"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination,message:uniqueUuid3):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 81
      expression: "this.destination == null"
      range: "(81,12)-(81,35)"
      evaluatedAs: true
- method:
    name: "isWarnEnabled"
    sourceCodeSignature: "boolean isWarnEnabled()"
    returnType: "boolean"
    instructionFingerprint: "57F283CCAD64033DC01E52904C83310D"
  paths:
  - pathId: "path1"
    testPathName: "isWarnEnabledWhenThisDestinationIsNull"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "D8577445EF78917227511AE91C105633"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "739B8D6D4F461573E37B157BAEC82BAC"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination,message:uniqueUuid4):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 88
      expression: "this.destination == null"
      range: "(88,12)-(88,35)"
      evaluatedAs: true
- method:
    name: "isErrorEnabled"
    sourceCodeSignature: "boolean isErrorEnabled()"
    returnType: "boolean"
    instructionFingerprint: "14B0FCA1EADCEF0A2D2807B7FAEB0CD4"
  paths:
  - pathId: "path1"
    testPathName: "isErrorEnabledWhenThisDestinationIsNull"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "D8577445EF78917227511AE91C105633"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "739B8D6D4F461573E37B157BAEC82BAC"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination,message:uniqueUuid5):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 95
      expression: "this.destination == null"
      range: "(95,12)-(95,35)"
      evaluatedAs: true
- method:
    name: "isFatalEnabled"
    sourceCodeSignature: "boolean isFatalEnabled()"
    returnType: "boolean"
    instructionFingerprint: "13A6EC7392F454737C92969E1E17E249"
  paths:
  - pathId: "path1"
    testPathName: "isFatalEnabledWhenThisDestinationIsNull"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "D8577445EF78917227511AE91C105633"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "739B8D6D4F461573E37B157BAEC82BAC"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination,message:uniqueUuid6):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 102
      expression: "this.destination == null"
      range: "(102,12)-(102,35)"
      evaluatedAs: true
- method:
    name: "trace"
    sourceCodeSignature: "void trace(Object message)"
    returnType: "void"
    parameters:
    - name: "message"
      type: "java.lang.Object"
    instructionFingerprint: "1A36858B8945B371259B6808B2220B0A"
  paths:
  - pathId: "path1"
    testPathName: "traceWhenThisDestinationIsNull"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "F012331BD9A48A5A5610A7F9560134CA"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "D3B0BAE8B414609DC7B55EA8E8F2A4B8"
      valueUuid: "target"
    - type: "INPUT"
      name: "message"
      modelFingerprint: "7226CF7AC5EED3AE3BD072543309177E"
      valueUuid: "message"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination,message:uniqueUuid7):void"
        staticAccess: true
    - type: "FIELD"
      name: "lines"
      modelFingerprint: "D5E919BEA595B3429DCF9AA16B627102"
      valueUuid: "lines"
      methodExercised:
        expression: "add(destinationSupplier:destination,level:Enum-org.springframework.boot.logging.LogLevel-TRACE,message:message,throwable:uniqueUuid8):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLog$Lines"
      uuid: "lines"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "ENUM"
      content: !<regular>
        value: "TRACE"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "Enum-org.springframework.boot.logging.LogLevel-TRACE"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "NULL"
      valueType: "java.lang.Throwable"
      uuid: "uniqueUuid8"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 168
      expression: "this.destination != null"
      range: "(168,8)-(168,31)"
      evaluatedAs: false
      internalMethodName: "log"
- method:
    name: "trace"
    sourceCodeSignature: "void trace(Object message, Throwable t)"
    returnType: "void"
    parameters:
    - name: "message"
      type: "java.lang.Object"
    - name: "t"
      type: "java.lang.Throwable"
    instructionFingerprint: "A6F9D2CF2D445B7EAE7A010D1E860576"
  paths:
  - pathId: "path1"
    testPathName: "trace1WhenThisDestinationIsNull"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "4BF2B90D3DC607187FC005C9F52B761B"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "D3B0BAE8B414609DC7B55EA8E8F2A4B8"
      valueUuid: "target"
    - type: "INPUT"
      name: "message"
      modelFingerprint: "7226CF7AC5EED3AE3BD072543309177E"
      valueUuid: "message"
    - type: "INPUT"
      name: "t"
      modelFingerprint: "72A46FFD4CF846548BBE95B52CD79B6F"
      valueUuid: "t"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination,message:uniqueUuid9):void"
        staticAccess: true
    - type: "FIELD"
      name: "lines"
      modelFingerprint: "2595A6D8C1B8A382933B62EDCD8ED86C"
      valueUuid: "lines"
      methodExercised:
        expression: "add(destinationSupplier:destination,level:Enum-org.springframework.boot.logging.LogLevel-TRACE,message:message,throwable:t):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "t"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLog$Lines"
      uuid: "lines"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "ENUM"
      content: !<regular>
        value: "TRACE"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "Enum-org.springframework.boot.logging.LogLevel-TRACE"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "t"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 168
      expression: "this.destination != null"
      range: "(168,8)-(168,31)"
      evaluatedAs: false
      internalMethodName: "log"
- method:
    name: "debug"
    sourceCodeSignature: "void debug(Object message)"
    returnType: "void"
    parameters:
    - name: "message"
      type: "java.lang.Object"
    instructionFingerprint: "7D2E3C5C409734420704C89C1FC2A23C"
  paths:
  - pathId: "path1"
    testPathName: "debugWhenThisDestinationIsNull"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "9C9CB0B75C8DC700EA250ACED4A5AB94"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "D3B0BAE8B414609DC7B55EA8E8F2A4B8"
      valueUuid: "target"
    - type: "INPUT"
      name: "message"
      modelFingerprint: "7226CF7AC5EED3AE3BD072543309177E"
      valueUuid: "message"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination,message:uniqueUuid10):void"
        staticAccess: true
    - type: "FIELD"
      name: "lines"
      modelFingerprint: "D530D34FD69CB8284B9681C2D48E7F59"
      valueUuid: "lines"
      methodExercised:
        expression: "add(destinationSupplier:destination,level:Enum-org.springframework.boot.logging.LogLevel-DEBUG,message:message,throwable:uniqueUuid11):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLog$Lines"
      uuid: "lines"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "ENUM"
      content: !<regular>
        value: "DEBUG"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "Enum-org.springframework.boot.logging.LogLevel-DEBUG"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "NULL"
      valueType: "java.lang.Throwable"
      uuid: "uniqueUuid11"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 168
      expression: "this.destination != null"
      range: "(168,8)-(168,31)"
      evaluatedAs: false
      internalMethodName: "log"
- method:
    name: "debug"
    sourceCodeSignature: "void debug(Object message, Throwable t)"
    returnType: "void"
    parameters:
    - name: "message"
      type: "java.lang.Object"
    - name: "t"
      type: "java.lang.Throwable"
    instructionFingerprint: "C48F83C18404AEE63CA8DD72261EA5A7"
  paths:
  - pathId: "path1"
    testPathName: "debug1WhenThisDestinationIsNull"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "0CEBBC9280187523D57B08040DA4DEE8"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "D3B0BAE8B414609DC7B55EA8E8F2A4B8"
      valueUuid: "target"
    - type: "INPUT"
      name: "message"
      modelFingerprint: "7226CF7AC5EED3AE3BD072543309177E"
      valueUuid: "message"
    - type: "INPUT"
      name: "t"
      modelFingerprint: "72A46FFD4CF846548BBE95B52CD79B6F"
      valueUuid: "t"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination,message:uniqueUuid12):void"
        staticAccess: true
    - type: "FIELD"
      name: "lines"
      modelFingerprint: "99AB18D369019BB3FDEEB63C1EF0FF72"
      valueUuid: "lines"
      methodExercised:
        expression: "add(destinationSupplier:destination,level:Enum-org.springframework.boot.logging.LogLevel-DEBUG,message:message,throwable:t):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "t"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid12"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLog$Lines"
      uuid: "lines"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "ENUM"
      content: !<regular>
        value: "DEBUG"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "Enum-org.springframework.boot.logging.LogLevel-DEBUG"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "t"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 168
      expression: "this.destination != null"
      range: "(168,8)-(168,31)"
      evaluatedAs: false
      internalMethodName: "log"
- method:
    name: "info"
    sourceCodeSignature: "void info(Object message)"
    returnType: "void"
    parameters:
    - name: "message"
      type: "java.lang.Object"
    instructionFingerprint: "E21E315771F2FD36741D485C18916DEA"
  paths:
  - pathId: "path1"
    testPathName: "infoWhenThisDestinationIsNull"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "A99C143F40BCB0DFC6034848632F54BA"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "D3B0BAE8B414609DC7B55EA8E8F2A4B8"
      valueUuid: "target"
    - type: "INPUT"
      name: "message"
      modelFingerprint: "7226CF7AC5EED3AE3BD072543309177E"
      valueUuid: "message"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination,message:uniqueUuid13):void"
        staticAccess: true
    - type: "FIELD"
      name: "lines"
      modelFingerprint: "AB312B722B968C52C4B53668F6189666"
      valueUuid: "lines"
      methodExercised:
        expression: "add(destinationSupplier:destination,level:Enum-org.springframework.boot.logging.LogLevel-INFO,message:message,throwable:uniqueUuid14):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid13"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLog$Lines"
      uuid: "lines"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "ENUM"
      content: !<regular>
        value: "INFO"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "Enum-org.springframework.boot.logging.LogLevel-INFO"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "NULL"
      valueType: "java.lang.Throwable"
      uuid: "uniqueUuid14"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 168
      expression: "this.destination != null"
      range: "(168,8)-(168,31)"
      evaluatedAs: false
      internalMethodName: "log"
- method:
    name: "info"
    sourceCodeSignature: "void info(Object message, Throwable t)"
    returnType: "void"
    parameters:
    - name: "message"
      type: "java.lang.Object"
    - name: "t"
      type: "java.lang.Throwable"
    instructionFingerprint: "527C407D6DE8103B781D6B8FB18CBF48"
  paths:
  - pathId: "path1"
    testPathName: "info1WhenThisDestinationIsNull"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "0E0B5EE7BE7C25F6F54052032E597767"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "D3B0BAE8B414609DC7B55EA8E8F2A4B8"
      valueUuid: "target"
    - type: "INPUT"
      name: "message"
      modelFingerprint: "7226CF7AC5EED3AE3BD072543309177E"
      valueUuid: "message"
    - type: "INPUT"
      name: "t"
      modelFingerprint: "72A46FFD4CF846548BBE95B52CD79B6F"
      valueUuid: "t"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination,message:uniqueUuid15):void"
        staticAccess: true
    - type: "FIELD"
      name: "lines"
      modelFingerprint: "8B3DA1C634FAE8396377B800E6A543E9"
      valueUuid: "lines"
      methodExercised:
        expression: "add(destinationSupplier:destination,level:Enum-org.springframework.boot.logging.LogLevel-INFO,message:message,throwable:t):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "t"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid15"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLog$Lines"
      uuid: "lines"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "ENUM"
      content: !<regular>
        value: "INFO"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "Enum-org.springframework.boot.logging.LogLevel-INFO"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "t"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 168
      expression: "this.destination != null"
      range: "(168,8)-(168,31)"
      evaluatedAs: false
      internalMethodName: "log"
- method:
    name: "warn"
    sourceCodeSignature: "void warn(Object message)"
    returnType: "void"
    parameters:
    - name: "message"
      type: "java.lang.Object"
    instructionFingerprint: "5B4DBF5A011DECB5AEFB99097D217A2E"
  paths:
  - pathId: "path1"
    testPathName: "warnWhenThisDestinationIsNull"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "3E1ECD848A8189C1C8A42ECC8F82D32B"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "D3B0BAE8B414609DC7B55EA8E8F2A4B8"
      valueUuid: "target"
    - type: "INPUT"
      name: "message"
      modelFingerprint: "7226CF7AC5EED3AE3BD072543309177E"
      valueUuid: "message"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination,message:uniqueUuid16):void"
        staticAccess: true
    - type: "FIELD"
      name: "lines"
      modelFingerprint: "02781D84FD1B47298CD88D7A53524AD3"
      valueUuid: "lines"
      methodExercised:
        expression: "add(destinationSupplier:destination,level:Enum-org.springframework.boot.logging.LogLevel-WARN,message:message,throwable:uniqueUuid17):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid16"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLog$Lines"
      uuid: "lines"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "ENUM"
      content: !<regular>
        value: "WARN"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "Enum-org.springframework.boot.logging.LogLevel-WARN"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "NULL"
      valueType: "java.lang.Throwable"
      uuid: "uniqueUuid17"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 168
      expression: "this.destination != null"
      range: "(168,8)-(168,31)"
      evaluatedAs: false
      internalMethodName: "log"
- method:
    name: "warn"
    sourceCodeSignature: "void warn(Object message, Throwable t)"
    returnType: "void"
    parameters:
    - name: "message"
      type: "java.lang.Object"
    - name: "t"
      type: "java.lang.Throwable"
    instructionFingerprint: "D0A73CEC32881788F9949FD3831A58FC"
  paths:
  - pathId: "path1"
    testPathName: "warn1WhenThisDestinationIsNull"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "C677E30F7CB4FFF1D4D8EDBA09F6F2C3"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "D3B0BAE8B414609DC7B55EA8E8F2A4B8"
      valueUuid: "target"
    - type: "INPUT"
      name: "message"
      modelFingerprint: "7226CF7AC5EED3AE3BD072543309177E"
      valueUuid: "message"
    - type: "INPUT"
      name: "t"
      modelFingerprint: "72A46FFD4CF846548BBE95B52CD79B6F"
      valueUuid: "t"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination,message:uniqueUuid18):void"
        staticAccess: true
    - type: "FIELD"
      name: "lines"
      modelFingerprint: "D2D9CFA4078894798D80F1C463A8F6E4"
      valueUuid: "lines"
      methodExercised:
        expression: "add(destinationSupplier:destination,level:Enum-org.springframework.boot.logging.LogLevel-WARN,message:message,throwable:t):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "t"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid18"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLog$Lines"
      uuid: "lines"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "ENUM"
      content: !<regular>
        value: "WARN"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "Enum-org.springframework.boot.logging.LogLevel-WARN"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "t"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 168
      expression: "this.destination != null"
      range: "(168,8)-(168,31)"
      evaluatedAs: false
      internalMethodName: "log"
- method:
    name: "error"
    sourceCodeSignature: "void error(Object message)"
    returnType: "void"
    parameters:
    - name: "message"
      type: "java.lang.Object"
    instructionFingerprint: "C02672A415FFFB99BC11713E3B133ABA"
  paths:
  - pathId: "path1"
    testPathName: "errorWhenThisDestinationIsNull"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "6106858578C17FACE258864276E9DAA3"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "D3B0BAE8B414609DC7B55EA8E8F2A4B8"
      valueUuid: "target"
    - type: "INPUT"
      name: "message"
      modelFingerprint: "7226CF7AC5EED3AE3BD072543309177E"
      valueUuid: "message"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination,message:uniqueUuid19):void"
        staticAccess: true
    - type: "FIELD"
      name: "lines"
      modelFingerprint: "A937A3EB55FE00AD3BFB5F0932FE9E93"
      valueUuid: "lines"
      methodExercised:
        expression: "add(destinationSupplier:destination,level:Enum-org.springframework.boot.logging.LogLevel-ERROR,message:message,throwable:uniqueUuid20):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid19"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLog$Lines"
      uuid: "lines"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "ENUM"
      content: !<regular>
        value: "ERROR"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "Enum-org.springframework.boot.logging.LogLevel-ERROR"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "NULL"
      valueType: "java.lang.Throwable"
      uuid: "uniqueUuid20"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 168
      expression: "this.destination != null"
      range: "(168,8)-(168,31)"
      evaluatedAs: false
      internalMethodName: "log"
- method:
    name: "error"
    sourceCodeSignature: "void error(Object message, Throwable t)"
    returnType: "void"
    parameters:
    - name: "message"
      type: "java.lang.Object"
    - name: "t"
      type: "java.lang.Throwable"
    instructionFingerprint: "AB18CC559A7C9CE1972EB0F3577CE3C6"
  paths:
  - pathId: "path1"
    testPathName: "error1WhenThisDestinationIsNull"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "5B615286F222C149C70AFA2EA07E6357"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "D3B0BAE8B414609DC7B55EA8E8F2A4B8"
      valueUuid: "target"
    - type: "INPUT"
      name: "message"
      modelFingerprint: "7226CF7AC5EED3AE3BD072543309177E"
      valueUuid: "message"
    - type: "INPUT"
      name: "t"
      modelFingerprint: "72A46FFD4CF846548BBE95B52CD79B6F"
      valueUuid: "t"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination,message:uniqueUuid21):void"
        staticAccess: true
    - type: "FIELD"
      name: "lines"
      modelFingerprint: "51E333AA39EF84E880736E6DE1896BE7"
      valueUuid: "lines"
      methodExercised:
        expression: "add(destinationSupplier:destination,level:Enum-org.springframework.boot.logging.LogLevel-ERROR,message:message,throwable:t):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "t"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid21"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLog$Lines"
      uuid: "lines"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "ENUM"
      content: !<regular>
        value: "ERROR"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "Enum-org.springframework.boot.logging.LogLevel-ERROR"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "t"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 168
      expression: "this.destination != null"
      range: "(168,8)-(168,31)"
      evaluatedAs: false
      internalMethodName: "log"
- method:
    name: "fatal"
    sourceCodeSignature: "void fatal(Object message)"
    returnType: "void"
    parameters:
    - name: "message"
      type: "java.lang.Object"
    instructionFingerprint: "43621A1A501DB5C7C9E26A91A0DE709D"
  paths:
  - pathId: "path1"
    testPathName: "fatalWhenThisDestinationIsNull"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "C193F4FC3382C1F11D450782206278EF"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "D3B0BAE8B414609DC7B55EA8E8F2A4B8"
      valueUuid: "target"
    - type: "INPUT"
      name: "message"
      modelFingerprint: "7226CF7AC5EED3AE3BD072543309177E"
      valueUuid: "message"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination,message:uniqueUuid22):void"
        staticAccess: true
    - type: "FIELD"
      name: "lines"
      modelFingerprint: "98BEDF31362F8535B5B4489CA74C573E"
      valueUuid: "lines"
      methodExercised:
        expression: "add(destinationSupplier:destination,level:Enum-org.springframework.boot.logging.LogLevel-FATAL,message:message,throwable:uniqueUuid23):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid22"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLog$Lines"
      uuid: "lines"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "ENUM"
      content: !<regular>
        value: "FATAL"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "Enum-org.springframework.boot.logging.LogLevel-FATAL"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "NULL"
      valueType: "java.lang.Throwable"
      uuid: "uniqueUuid23"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 168
      expression: "this.destination != null"
      range: "(168,8)-(168,31)"
      evaluatedAs: false
      internalMethodName: "log"
- method:
    name: "fatal"
    sourceCodeSignature: "void fatal(Object message, Throwable t)"
    returnType: "void"
    parameters:
    - name: "message"
      type: "java.lang.Object"
    - name: "t"
      type: "java.lang.Throwable"
    instructionFingerprint: "153A49FE7A1D7FE3040C08C3012D82F6"
  paths:
  - pathId: "path1"
    testPathName: "fatal1WhenThisDestinationIsNull"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "9C052998E1E99A5576D2D9DB29BC2FB0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "D3B0BAE8B414609DC7B55EA8E8F2A4B8"
      valueUuid: "target"
    - type: "INPUT"
      name: "message"
      modelFingerprint: "7226CF7AC5EED3AE3BD072543309177E"
      valueUuid: "message"
    - type: "INPUT"
      name: "t"
      modelFingerprint: "72A46FFD4CF846548BBE95B52CD79B6F"
      valueUuid: "t"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination,message:uniqueUuid24):void"
        staticAccess: true
    - type: "FIELD"
      name: "lines"
      modelFingerprint: "B8072A5D30DA31706F118B5D99537599"
      valueUuid: "lines"
      methodExercised:
        expression: "add(destinationSupplier:destination,level:Enum-org.springframework.boot.logging.LogLevel-FATAL,message:message,throwable:t):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "t"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid24"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLog$Lines"
      uuid: "lines"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "ENUM"
      content: !<regular>
        value: "FATAL"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "Enum-org.springframework.boot.logging.LogLevel-FATAL"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "t"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 168
      expression: "this.destination != null"
      range: "(168,8)-(168,31)"
      evaluatedAs: false
      internalMethodName: "log"
- method:
    name: "switchOver"
    sourceCodeSignature: "void switchOver()"
    returnType: "void"
    instructionFingerprint: "57CBB45AA8F2C1653BEB85BAF4970C98"
  paths:
  - pathId: "path1"
    testPathName: "switchOverTest"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "92031B35296EE9535968C4DA9A6156D2"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "739B8D6D4F461573E37B157BAEC82BAC"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination,message:uniqueUuid25):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.function.Supplier.get() : java.lang.Object"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid25"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "switchTo"
    sourceCodeSignature: "void switchTo(Class<?> destination)"
    returnType: "void"
    parameters:
    - name: "destination"
      type: "java.lang.Class"
    instructionFingerprint: "DCD5B4F07F087A5C380752C8F27EBAD1"
  paths:
  - pathId: "path1"
    testPathName: "switchToTest"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "E3875946DE82B2398568613FCD6ED64E"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "739B8D6D4F461573E37B157BAEC82BAC"
      valueUuid: "target"
    - type: "INPUT"
      name: "destination"
      modelFingerprint: "C67500531C7B0D4439262A41FEEF75F7"
      valueUuid: "destination"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination2,message:uniqueUuid1):void"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "42A17BEF734590B29CABF942AA0A682D"
      methodExercised:
        expression: "switchTo(destination:log):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination2"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "destination"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.logging.LogFactory"
        method: "getLog"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "destination"
      valueType: "org.apache.commons.logging.Log"
      uuid: "log"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "switchTo"
    sourceCodeSignature: "void switchTo(Log destination)"
    returnType: "void"
    parameters:
    - name: "destination"
      type: "org.apache.commons.logging.Log"
    instructionFingerprint: "9098838FBAADE5B9C4021E454BA108E5"
  paths:
  - pathId: "path1"
    testPathName: "switchTo1Test"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "3CBEE7F362E400D9229F13491219E8C9"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "739B8D6D4F461573E37B157BAEC82BAC"
      valueUuid: "target"
    - type: "INPUT"
      name: "destination"
      modelFingerprint: "81DC09865D18182A3592ABAF19EB8401"
      valueUuid: "destination"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination2,message:uniqueUuid27):void"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "CE88948B48951A6E89551C47730FDABF"
      methodExercised:
        expression: "replayTo(destination:destination):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination2"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "destination"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid27"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "destination"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "replayTo"
    sourceCodeSignature: "void replayTo(Class<?> destination)"
    returnType: "void"
    parameters:
    - name: "destination"
      type: "java.lang.Class"
    instructionFingerprint: "109E123DBC8C78FCF12AE8D04EDA53E1"
  paths:
  - pathId: "path1"
    testPathName: "replayToTest"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "B4B4B2E1B873443BB3E4B93B474ECF9C"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "739B8D6D4F461573E37B157BAEC82BAC"
      valueUuid: "target"
    - type: "INPUT"
      name: "destination"
      modelFingerprint: "C67500531C7B0D4439262A41FEEF75F7"
      valueUuid: "destination"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination2,message:uniqueUuid1):void"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "FA320AFAA2ECA0FDD3C8D72D375B70D0"
      methodExercised:
        expression: "replayTo(destination:log):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination2"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "destination"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.logging.LogFactory"
        method: "getLog"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "destination"
      valueType: "org.apache.commons.logging.Log"
      uuid: "log"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "replayTo"
    sourceCodeSignature: "void replayTo(Log destination)"
    returnType: "void"
    parameters:
    - name: "destination"
      type: "org.apache.commons.logging.Log"
    instructionFingerprint: "7C527DFB30E1B7EC406145320D498A5B"
  paths:
  - pathId: "path1"
    testPathName: "replayTo1WhenThisLinesIsNotEmpty"
    constructorSignature: "<init>(java.util.function.Supplier<org.apache.commons.logging.Log>,org.springframework.boot.logging.DeferredLog$Lines)\
      \ : void"
    modelFingerprint: "5531ACD89A4A267E5F61EBFC8F3FE659"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "5D56F598B4CBF797CABFFB4C148E2961"
      valueUuid: "target"
    - type: "INPUT"
      name: "destination"
      modelFingerprint: "E1ABA6A632D15108C829A440144DFB32"
      valueUuid: "destination"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5739BBFD77F01E37B1C1074ADD71E33"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:destination2,message:uniqueUuid1):void"
        staticAccess: true
    - type: "FIELD"
      name: "lines"
      modelFingerprint: "8E02E803101A1032DE9EF6FBE82C69BD"
      valueUuid: "lines"
      methodExercised:
        expression: "iterator():iterator"
    - type: "LOCAL_VARIABLE"
      name: "line"
      modelFingerprint: "F1761F8E91E20E2D1E15B0D01FF0155D"
      valueUuid: "object"
      methodExercised:
        expression: "getLevel():logLevel"
    - type: "LOCAL_VARIABLE"
      name: "line"
      modelFingerprint: "117D000BB3C6241C78D37E61FDD2ED13"
      valueUuid: "object"
      methodExercised:
        expression: "getMessage():object2"
    - type: "LOCAL_VARIABLE"
      name: "line"
      modelFingerprint: "594C5BDCDE4375BD56DE564537D4845B"
      valueUuid: "object"
      methodExercised:
        expression: "getThrowable():throwable"
    - type: "STATIC"
      name: "DeferredLog.class"
      modelFingerprint: "1ABCD331012DF0C11E55E52416237BB0"
      valueUuid: "DeferredLog.class"
      methodExercised:
        expression: "logTo(log:destination,level:logLevel,message:object2,throwable:throwable):void2"
        staticAccess: true
    - type: "FIELD"
      name: "lines"
      modelFingerprint: "28B9F65E3511662968668E384DB7056B"
      valueUuid: "lines"
      methodExercised:
        expression: "clear():void3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.DeferredLog"
        parameters:
        - name: "destination"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Supplier"
            uuid: "destination2"
        - name: "lines"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLog$Lines"
            uuid: "lines"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "destination"
      explicitCastForOverloadedMethods: "org.apache.commons.logging.Log"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "destination2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Destination must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLog$Lines"
      uuid: "lines"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            collectionClass: "java.util.ArrayList"
            parameters: []
            values:
            - sapientType: "MOCK"
              valueType: "org.springframework.boot.logging.DeferredLog$Line"
              uuid: "object"
              collectionUuid: "iterator-CollectionContent"
          valueType: "java.util.List"
          genericValueType: "org.springframework.boot.logging.DeferredLog$Line"
          uuid: "iterator-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "org.springframework.boot.logging.DeferredLog$Line"
      uuid: "iterator"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLog$Line"
      uuid: "object"
      collectionUuid: "iterator-CollectionContent"
    - sapientType: "ENUM"
      content: !<regular>
        value: "TRACE"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "logLevel"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLog$Line"
      uuid: "object"
      collectionUuid: "iterator-CollectionContent"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLog$Line"
      uuid: "object"
      collectionUuid: "iterator-CollectionContent"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "throwable"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "DeferredLog.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "destination"
      explicitCastForOverloadedMethods: "org.apache.commons.logging.Log"
    - sapientType: "ENUM"
      content: !<regular>
        value: "TRACE"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "logLevel"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "throwable"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLog$Lines"
      uuid: "lines"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 218
      expression: "for-each(this.lines)"
      range: "(218,21)-(218,30)"
      evaluatedAs: true
- method:
    name: "replay"
    sourceCodeSignature: "Log replay(Log source, Class<?> destination)"
    returnType: "org.apache.commons.logging.Log"
    parameters:
    - name: "source"
      type: "org.apache.commons.logging.Log"
    - name: "destination"
      type: "java.lang.Class"
    instructionFingerprint: "96248176C02C6EE6D28E0146877C0E50"
  paths:
  - pathId: "path1"
    testPathName: "replayTest"
    modelFingerprint: "351DBA9DA56246CB06DCED8B2162D68D"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "source"
      modelFingerprint: "8F1A36791D7CA3B4B667D67774CE80A4"
      valueUuid: "source"
    - type: "INPUT"
      name: "destination"
      modelFingerprint: "C67500531C7B0D4439262A41FEEF75F7"
      valueUuid: "destination"
    - type: "STATIC"
      name: "DeferredLog.class"
      modelFingerprint: "E5DF844947A3C1F0D2030AA2A0F55EE0"
      valueUuid: "DeferredLog.class"
      methodExercised:
        expression: "replay(source:source,destination:log):log2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B6702A90479907A71DD3A69BECE2A34B"
      valueUuid: "log2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "source"
      explicitCastForOverloadedMethods: "org.apache.commons.logging.Log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "destination"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "DeferredLog.class"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "source"
      explicitCastForOverloadedMethods: "org.apache.commons.logging.Log"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.logging.LogFactory"
        method: "getLog"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "destination"
      valueType: "org.apache.commons.logging.Log"
      uuid: "log"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log2"
- method:
    name: "replay"
    sourceCodeSignature: "Log replay(Log source, Log destination)"
    returnType: "org.apache.commons.logging.Log"
    parameters:
    - name: "source"
      type: "org.apache.commons.logging.Log"
    - name: "destination"
      type: "org.apache.commons.logging.Log"
    instructionFingerprint: "D81C86D1651729F8583E4F9673D0B0ED"
  paths:
  - pathId: "path1"
    testPathName: "replay1WhenSourceInstanceOfDeferredLog"
    modelFingerprint: "D338D28E7AFAD47246F76BC038A43792"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "source"
      modelFingerprint: "9FAFB33EB58DA8E3E4CFD34A7EF12194"
      valueUuid: "source"
    - type: "INPUT"
      name: "destination"
      modelFingerprint: "81DC09865D18182A3592ABAF19EB8401"
      valueUuid: "destination"
    - type: "LOCAL_VARIABLE"
      name: "deferredLog"
      modelFingerprint: "02F4D24A3EBF1A5333C275DA592D2D67"
      valueUuid: "source"
      methodExercised:
        expression: "replayTo(destination:destination):void"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "936162DE5B8AC4650D2C5B4452A054E9"
      valueUuid: "destination"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "source"
      explicitCastForOverloadedMethods: "org.apache.commons.logging.Log"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "destination"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLog"
      uuid: "source"
      explicitCastForOverloadedMethods: "org.apache.commons.logging.Log"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "destination"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "destination"
    branches:
    - lineNumber: 242
      expression: "source instanceof DeferredLog deferredLog"
      range: "(242,7)-(242,47)"
      evaluatedAs: true
- method:
    name: "logTo"
    sourceCodeSignature: "void logTo(Log log, LogLevel level, Object message, Throwable\
      \ throwable)"
    returnType: "void"
    parameters:
    - name: "log"
      type: "org.apache.commons.logging.Log"
    - name: "level"
      type: "org.springframework.boot.logging.LogLevel"
    - name: "message"
      type: "java.lang.Object"
    - name: "throwable"
      type: "java.lang.Throwable"
    instructionFingerprint: "13E64BC64F4A7269B9B0022C316D2F01"
  paths:
  - pathId: "path2"
    testPathName: "logToWhenSwitchLevelCaseDEBUG"
    modelFingerprint: "58E773143C99B251781D8EA2587255E4"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "log"
      modelFingerprint: "EF483F3B6044AEBC355C2224D70FFE66"
      valueUuid: "log"
    - type: "INPUT"
      name: "level"
      modelFingerprint: "012090420938027182A0F6BA3AAFFA5B"
      valueUuid: "level"
    - type: "INPUT"
      name: "message"
      modelFingerprint: "7226CF7AC5EED3AE3BD072543309177E"
      valueUuid: "message"
    - type: "INPUT"
      name: "throwable"
      modelFingerprint: "06CBD97BA6124D523492B5810F9DF29C"
      valueUuid: "throwable"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "ENUM"
      content: !<regular>
        value: "DEBUG"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "level"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "throwable"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 249
      expression: "switch(level) = DEBUG"
      range: "(251,9)-(251,13)"
      evaluatedAs: true
  - pathId: "path5"
    testPathName: "logToWhenSwitchLevelCaseERROR"
    modelFingerprint: "4D0A426769250B923B8B5706A9E8BDC3"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "log"
      modelFingerprint: "EF483F3B6044AEBC355C2224D70FFE66"
      valueUuid: "log"
    - type: "INPUT"
      name: "level"
      modelFingerprint: "E688B37FD17087BA24498B198D47FB58"
      valueUuid: "level"
    - type: "INPUT"
      name: "message"
      modelFingerprint: "7226CF7AC5EED3AE3BD072543309177E"
      valueUuid: "message"
    - type: "INPUT"
      name: "throwable"
      modelFingerprint: "06CBD97BA6124D523492B5810F9DF29C"
      valueUuid: "throwable"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "ENUM"
      content: !<regular>
        value: "ERROR"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "level"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "throwable"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 249
      expression: "switch(level) = ERROR"
      range: "(254,9)-(254,13)"
      evaluatedAs: true
  - pathId: "path6"
    testPathName: "logToWhenSwitchLevelCaseFATAL"
    modelFingerprint: "A3AC8E631759EA4928269FF194520D1A"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "log"
      modelFingerprint: "EF483F3B6044AEBC355C2224D70FFE66"
      valueUuid: "log"
    - type: "INPUT"
      name: "level"
      modelFingerprint: "94E55EC6A9BF7F744B20ABA43E19090E"
      valueUuid: "level"
    - type: "INPUT"
      name: "message"
      modelFingerprint: "7226CF7AC5EED3AE3BD072543309177E"
      valueUuid: "message"
    - type: "INPUT"
      name: "throwable"
      modelFingerprint: "06CBD97BA6124D523492B5810F9DF29C"
      valueUuid: "throwable"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "ENUM"
      content: !<regular>
        value: "FATAL"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "level"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "throwable"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 249
      expression: "switch(level) = FATAL"
      range: "(255,9)-(255,13)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "logToWhenSwitchLevelCaseINFO"
    modelFingerprint: "153B655B34A146183E5E4C55C4BA17DA"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "log"
      modelFingerprint: "EF483F3B6044AEBC355C2224D70FFE66"
      valueUuid: "log"
    - type: "INPUT"
      name: "level"
      modelFingerprint: "2423763AC91984D62EC559C4D88FC97D"
      valueUuid: "level"
    - type: "INPUT"
      name: "message"
      modelFingerprint: "7226CF7AC5EED3AE3BD072543309177E"
      valueUuid: "message"
    - type: "INPUT"
      name: "throwable"
      modelFingerprint: "06CBD97BA6124D523492B5810F9DF29C"
      valueUuid: "throwable"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "ENUM"
      content: !<regular>
        value: "INFO"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "level"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "throwable"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 249
      expression: "switch(level) = INFO"
      range: "(252,9)-(252,12)"
      evaluatedAs: true
  - pathId: "path1"
    testPathName: "logToWhenSwitchLevelCaseTRACE"
    modelFingerprint: "82E4C448B238B47F4A2BBB0B5EE72BB3"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "log"
      modelFingerprint: "EF483F3B6044AEBC355C2224D70FFE66"
      valueUuid: "log"
    - type: "INPUT"
      name: "level"
      modelFingerprint: "7EC79EF9627A4CABB53161C1FD9E26E6"
      valueUuid: "level"
    - type: "INPUT"
      name: "message"
      modelFingerprint: "7226CF7AC5EED3AE3BD072543309177E"
      valueUuid: "message"
    - type: "INPUT"
      name: "throwable"
      modelFingerprint: "06CBD97BA6124D523492B5810F9DF29C"
      valueUuid: "throwable"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "ENUM"
      content: !<regular>
        value: "TRACE"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "level"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "throwable"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 249
      expression: "switch(level) = TRACE"
      range: "(250,9)-(250,13)"
      evaluatedAs: true
  - pathId: "path4"
    testPathName: "logToWhenSwitchLevelCaseWARN"
    modelFingerprint: "A2B7EB0908555D78346606D190E37790"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "log"
      modelFingerprint: "EF483F3B6044AEBC355C2224D70FFE66"
      valueUuid: "log"
    - type: "INPUT"
      name: "level"
      modelFingerprint: "7F275BDB7A19D1CB9962F81251E121AD"
      valueUuid: "level"
    - type: "INPUT"
      name: "message"
      modelFingerprint: "7226CF7AC5EED3AE3BD072543309177E"
      valueUuid: "message"
    - type: "INPUT"
      name: "throwable"
      modelFingerprint: "06CBD97BA6124D523492B5810F9DF29C"
      valueUuid: "throwable"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "ENUM"
      content: !<regular>
        value: "WARN"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "level"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "message"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "throwable"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 249
      expression: "switch(level) = WARN"
      range: "(253,9)-(253,12)"
      evaluatedAs: true
