---
modelFingerprint: "850F27B8390B5B120747783375BE576D"
targetClass:
  fullClassName: "org.springframework.boot.context.properties.source.PrefixedConfigurationPropertySource"
methods:
- method:
    name: "getPrefix"
    sourceCodeSignature: "ConfigurationPropertyName getPrefix()"
    returnType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
    instructionFingerprint: "3D7954336F4F5A7D73BE589189AADBBC"
  paths:
  - pathId: "path1"
    testPathName: "getPrefixTest"
    constructorSignature: "<init>(org.springframework.boot.context.properties.source.ConfigurationPropertySource,java.lang.String)\
      \ : void"
    modelFingerprint: "2A199E8C629D00BE0D4A42B7C7CF250F"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "getConfigurationProperty"
    sourceCodeSignature: "ConfigurationProperty getConfigurationProperty(ConfigurationPropertyName\
      \ name)"
    returnType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
    parameters:
    - name: "name"
      type: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
    instructionFingerprint: "4E4B6E66B5F8FD1B79B693FA606B0525"
  paths:
  - pathId: "path1"
    testPathName: "getConfigurationPropertyWhenConfigurationPropertyIsNull"
    constructorSignature: "<init>(org.springframework.boot.context.properties.source.ConfigurationPropertySource,java.lang.String)\
      \ : void"
    modelFingerprint: "8AEC9588E80FAB126997892E294B516D"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "F9BA6E206A7A27F62B64CCED082F7DFB"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "79AA751E8DEF85DAAC2666FA9A7E6307"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "5AE5893CC912FE7B951786AB437C7324"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid3):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "003F91A7301D496434638BE2602D21AE"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:prefix,message:uniqueUuid4):void2"
        staticAccess: true
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "48C6198CFBE59CEE58B0D34395EF1D3A"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:prefix):configurationPropertyName"
        staticAccess: true
    - type: "FIELD"
      name: "prefix"
      modelFingerprint: "DA7D1371570C5FB1EC4E8B5635708E24"
      valueUuid: "configurationPropertyName"
      methodExercised:
        expression: "append(suffix:name):configurationPropertyName2"
    - type: "FIELD"
      name: "source"
      modelFingerprint: "205709BCB3EB71B3C759E7EFE6D9B541"
      valueUuid: "source"
      methodExercised:
        expression: "getConfigurationProperty(name:configurationPropertyName2):configurationProperty"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "AF7DE2B64986230ACFA5A65E259E5AB7"
      valueUuid: "configurationProperty2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.PrefixedConfigurationPropertySource"
        parameters:
        - name: "source"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
            uuid: "source"
        - name: "prefix"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "prefix"
      valueType: "org.springframework.boot.context.properties.source.PrefixedConfigurationPropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "prefix"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Prefix must not be empty"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "prefix"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName2"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty2"
      fixed: true
    branches:
    - lineNumber: 46
      expression: "configurationProperty == null"
      range: "(46,7)-(46,35)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "getConfigurationPropertyWhenConfigurationPropertyIsNotNull"
    constructorSignature: "<init>(org.springframework.boot.context.properties.source.ConfigurationPropertySource,java.lang.String)\
      \ : void"
    modelFingerprint: "4CB69709CB5692D8BCB68E86176206D3"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "F9BA6E206A7A27F62B64CCED082F7DFB"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "79AA751E8DEF85DAAC2666FA9A7E6307"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "5AE5893CC912FE7B951786AB437C7324"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid5):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "003F91A7301D496434638BE2602D21AE"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:prefix,message:uniqueUuid6):void2"
        staticAccess: true
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "48C6198CFBE59CEE58B0D34395EF1D3A"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:prefix):configurationPropertyName"
        staticAccess: true
    - type: "FIELD"
      name: "prefix"
      modelFingerprint: "DA7D1371570C5FB1EC4E8B5635708E24"
      valueUuid: "configurationPropertyName"
      methodExercised:
        expression: "append(suffix:name):configurationPropertyName2"
    - type: "FIELD"
      name: "source"
      modelFingerprint: "33EF77EEA481CBA104EF59683E9A5B4E"
      valueUuid: "source"
      methodExercised:
        expression: "getConfigurationProperty(name:configurationPropertyName2):configurationProperty"
    - type: "LOCAL_VARIABLE"
      name: "configurationProperty"
      modelFingerprint: "083855623ECA48D0DC087DFF7BA364C6"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getSource():source2"
    - type: "LOCAL_VARIABLE"
      name: "configurationProperty"
      modelFingerprint: "73B0D70B998C8067681FFEBA6CF2F38C"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getValue():value"
    - type: "LOCAL_VARIABLE"
      name: "configurationProperty"
      modelFingerprint: "AC5FB3F69AC5E5515D66ED81FB302EEF"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getOrigin():origin"
    - type: "STATIC"
      name: "ConfigurationProperty.class"
      modelFingerprint: "7913CE5E34FF8425B3DF15F29A008486"
      valueUuid: "ConfigurationProperty.class"
      methodExercised:
        expression: "of(source:source2,name:name,value:value,origin:origin):configurationProperty2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "88BB7180F05BA5E7BFB6995FFC0A819F"
      valueUuid: "configurationProperty2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.PrefixedConfigurationPropertySource"
        parameters:
        - name: "source"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
            uuid: "source"
        - name: "prefix"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "prefix"
      valueType: "org.springframework.boot.context.properties.source.PrefixedConfigurationPropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "prefix"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Prefix must not be empty"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "prefix"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "value"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "origin"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "ConfigurationProperty.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "value"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "origin"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty2"
    branches:
    - lineNumber: 46
      expression: "configurationProperty == null"
      range: "(46,7)-(46,35)"
      evaluatedAs: false
- method:
    name: "containsDescendantOf"
    sourceCodeSignature: "ConfigurationPropertyState containsDescendantOf(ConfigurationPropertyName\
      \ name)"
    returnType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
    parameters:
    - name: "name"
      type: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
    instructionFingerprint: "243E553EA54B31AD1E6312630D122D03"
  paths:
  - pathId: "path1"
    testPathName: "containsDescendantOfTest"
    constructorSignature: "<init>(org.springframework.boot.context.properties.source.ConfigurationPropertySource,java.lang.String)\
      \ : void"
    modelFingerprint: "31BA73C1A4EFC2B83A741FDA1DCBEBA8"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "F9BA6E206A7A27F62B64CCED082F7DFB"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "79AA751E8DEF85DAAC2666FA9A7E6307"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "5AE5893CC912FE7B951786AB437C7324"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid7):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "003F91A7301D496434638BE2602D21AE"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:prefix,message:uniqueUuid8):void2"
        staticAccess: true
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "48C6198CFBE59CEE58B0D34395EF1D3A"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:prefix):configurationPropertyName"
        staticAccess: true
    - type: "FIELD"
      name: "prefix"
      modelFingerprint: "DA7D1371570C5FB1EC4E8B5635708E24"
      valueUuid: "configurationPropertyName"
      methodExercised:
        expression: "append(suffix:name):configurationPropertyName2"
    - type: "FIELD"
      name: "source"
      modelFingerprint: "5B00A96F76038C383B4E2DBAF3F088CB"
      valueUuid: "source"
      methodExercised:
        expression: "containsDescendantOf(name:configurationPropertyName2):configurationPropertyState"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0DED34E20CAAA8BB167861240C930D80"
      valueUuid: "configurationPropertyState"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.PrefixedConfigurationPropertySource"
        parameters:
        - name: "source"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
            uuid: "source"
        - name: "prefix"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "prefix"
      valueType: "org.springframework.boot.context.properties.source.PrefixedConfigurationPropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "prefix"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Prefix must not be empty"
      valueType: "java.lang.String"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "prefix"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "ENUM"
      content: !<regular>
        value: "PRESENT"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "configurationPropertyState"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName2"
    - sapientType: "ENUM"
      content: !<regular>
        value: "PRESENT"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "configurationPropertyState"
- method:
    name: "getUnderlyingSource"
    sourceCodeSignature: "Object getUnderlyingSource()"
    returnType: "java.lang.Object"
    instructionFingerprint: "C1E7DDA27522F50AD0997C5CE910715D"
  paths:
  - pathId: "path1"
    testPathName: "getUnderlyingSourceTest"
    constructorSignature: "<init>(org.springframework.boot.context.properties.source.ConfigurationPropertySource,java.lang.String)\
      \ : void"
    modelFingerprint: "7515BB1438E43A325711ED463CED9E62"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "F9BA6E206A7A27F62B64CCED082F7DFB"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "5AE5893CC912FE7B951786AB437C7324"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid9):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "003F91A7301D496434638BE2602D21AE"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:prefix,message:uniqueUuid10):void2"
        staticAccess: true
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "50CB1B84008D5C104084FABD0375153B"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:prefix):configurationPropertyName"
        staticAccess: true
    - type: "FIELD"
      name: "source"
      modelFingerprint: "BA1CA356FB4750DD11E32A4551A200F6"
      valueUuid: "source"
      methodExercised:
        expression: "getUnderlyingSource():object"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A5457F8C44AF90FDF3ACB1B2051E1175"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.PrefixedConfigurationPropertySource"
        parameters:
        - name: "source"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
            uuid: "source"
        - name: "prefix"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "prefix"
      valueType: "org.springframework.boot.context.properties.source.PrefixedConfigurationPropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "prefix"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Prefix must not be empty"
      valueType: "java.lang.String"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "prefix"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
- method:
    name: "getSource"
    sourceCodeSignature: "ConfigurationPropertySource getSource()"
    returnType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
    instructionFingerprint: "BBD0D76BCFECC43F8CB7E2F1F1E60E66"
  paths:
  - pathId: "path1"
    testPathName: "getSourceTest"
    constructorSignature: "<init>(org.springframework.boot.context.properties.source.ConfigurationPropertySource,java.lang.String)\
      \ : void"
    modelFingerprint: "A392DE1FF72FD504B52033AF297F25A4"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
