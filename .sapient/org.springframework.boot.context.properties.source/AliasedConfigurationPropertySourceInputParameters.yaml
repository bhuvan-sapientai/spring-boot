---
modelFingerprint: "8F4D162AD9FAE4388099C4D6FF6B8C2C"
targetClass:
  fullClassName: "org.springframework.boot.context.properties.source.AliasedConfigurationPropertySource"
methods:
- method:
    name: "getConfigurationProperty"
    sourceCodeSignature: "ConfigurationProperty getConfigurationProperty(ConfigurationPropertyName\
      \ name)"
    returnType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
    parameters:
    - name: "name"
      type: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
    instructionFingerprint: "D58B122DCABBC4095A8053F5FC0F4EF8"
  paths:
  - pathId: "path1"
    testPathName: "getConfigurationPropertyWhenResultIsNull"
    constructorSignature: "<init>(org.springframework.boot.context.properties.source.ConfigurationPropertySource,org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases)\
      \ : void"
    modelFingerprint: "D590D16D2D0F2F52CAEBC287A33BD21B"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "8456916B892EC5E951F8972D7EB0D84A"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "79AA751E8DEF85DAAC2666FA9A7E6307"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "5AE5893CC912FE7B951786AB437C7324"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "EE307CF96F66A3E6B860C179D5DAEAAF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:aliases,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "6B3E2F800EF54F12F4F1664D3F634B2E"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:name,message:uniqueUuid3):void3"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "BCEDFE3FCC76D27AF2F7C3AFDF5731BA"
      valueUuid: "source"
      methodExercised:
        expression: "getConfigurationProperty(name:name):configurationProperty"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "68469C528A06EA3755DDC4A77CF23FA4"
      valueUuid: "aliases"
      methodExercised:
        expression: "getNameForAlias(alias:name):configurationPropertyName"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "512F861B780BB16C7978E6535C2D6E7B"
      valueUuid: "source"
      methodExercised:
        expression: "getConfigurationProperty(name:configurationPropertyName):configurationProperty2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "88BB7180F05BA5E7BFB6995FFC0A819F"
      valueUuid: "configurationProperty2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.AliasedConfigurationPropertySource"
        parameters:
        - name: "source"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
            uuid: "source"
        - name: "aliases"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases"
            uuid: "aliases"
      valueType: "org.springframework.boot.context.properties.source.AliasedConfigurationPropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases"
      uuid: "aliases"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Aliases must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Name must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases"
      uuid: "aliases"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty2"
    branches:
    - lineNumber: 44
      expression: "result == null"
      range: "(44,7)-(44,20)"
      evaluatedAs: true
- method:
    name: "containsDescendantOf"
    sourceCodeSignature: "ConfigurationPropertyState containsDescendantOf(ConfigurationPropertyName\
      \ name)"
    returnType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
    parameters:
    - name: "name"
      type: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
    instructionFingerprint: "ADC4006017E662EA9FE50A7F89418058"
  paths:
  - pathId: "path1"
    testPathName: "containsDescendantOfWhenResultNotEqualsConfigurationPropertyStateABSENT"
    constructorSignature: "<init>(org.springframework.boot.context.properties.source.ConfigurationPropertySource,org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases)\
      \ : void"
    modelFingerprint: "B452616B708BC4417F7EA50D5E7B557F"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "07FB3C62070790DF9F0A5A328A15A9A3"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "79AA751E8DEF85DAAC2666FA9A7E6307"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "5AE5893CC912FE7B951786AB437C7324"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid4):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1BC41BD3200B33C9872975C1A6862A2E"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:aliases,message:uniqueUuid5):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "6B3E2F800EF54F12F4F1664D3F634B2E"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:name,message:uniqueUuid6):void3"
        staticAccess: true
    - type: "FIELD"
      name: "source"
      modelFingerprint: "678FC9213A0A03656F20A4A7FE28C825"
      valueUuid: "source"
      methodExercised:
        expression: "containsDescendantOf(name:name):configurationPropertyState"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "6DAB849321889538B3D9167275593EAD"
      valueUuid: "configurationPropertyState"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.AliasedConfigurationPropertySource"
        parameters:
        - name: "source"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
            uuid: "source"
        - name: "aliases"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases"
            uuid: "aliases"
      valueType: "org.springframework.boot.context.properties.source.AliasedConfigurationPropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases"
      uuid: "aliases"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Aliases must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Name must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "ENUM"
      content: !<regular>
        value: "PRESENT"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "configurationPropertyState"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "ENUM"
      content: !<regular>
        value: "PRESENT"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "configurationPropertyState"
    branches:
    - lineNumber: 55
      expression: "result != ConfigurationPropertyState.ABSENT"
      range: "(55,7)-(55,49)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "containsDescendantOfWhenAliasResultNotEqualsConfigurationPropertyStateABSENT"
    constructorSignature: "<init>(org.springframework.boot.context.properties.source.ConfigurationPropertySource,org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases)\
      \ : void"
    modelFingerprint: "301693AAA06F42EB6F05ADD7D221D52C"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "8456916B892EC5E951F8972D7EB0D84A"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "79AA751E8DEF85DAAC2666FA9A7E6307"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "5AE5893CC912FE7B951786AB437C7324"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid7):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "EE307CF96F66A3E6B860C179D5DAEAAF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:aliases,message:uniqueUuid8):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "6B3E2F800EF54F12F4F1664D3F634B2E"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:name,message:uniqueUuid9):void3"
        staticAccess: true
    - type: "FIELD"
      name: "source"
      modelFingerprint: "21D550AE218D76073B6E4EE943010902"
      valueUuid: "source"
      methodExercised:
        expression: "containsDescendantOf(name:name):configurationPropertyState"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "256CD974A7477158DE1668CA7D893A3C"
      valueUuid: "aliases"
      methodExercised:
        expression: "getAliases(name:name):list"
    - type: "FIELD"
      name: "source"
      modelFingerprint: "4C48137B7624C3AB2F0DB6D86DD828C1"
      valueUuid: "source"
      methodExercised:
        expression: "containsDescendantOf(name:object):configurationPropertyState2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "878C4166CEC4C4047929E531D0D113DD"
      valueUuid: "configurationPropertyState2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.AliasedConfigurationPropertySource"
        parameters:
        - name: "source"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
            uuid: "source"
        - name: "aliases"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases"
            uuid: "aliases"
      valueType: "org.springframework.boot.context.properties.source.AliasedConfigurationPropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases"
      uuid: "aliases"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Aliases must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Name must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "ENUM"
      content: !<regular>
        value: "ABSENT"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "configurationPropertyState"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases"
      uuid: "aliases"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
          uuid: "object"
          collectionUuid: "list"
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "ENUM"
      content: !<regular>
        value: "UNKNOWN"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "configurationPropertyState2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "object"
      collectionUuid: "list"
    - sapientType: "ENUM"
      content: !<regular>
        value: "UNKNOWN"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "configurationPropertyState2"
    branches:
    - lineNumber: 55
      expression: "result != ConfigurationPropertyState.ABSENT"
      range: "(55,7)-(55,49)"
      evaluatedAs: false
    - lineNumber: 58
      expression: "for-each(getAliases().getAliases(name))"
      range: "(58,42)-(58,70)"
      evaluatedAs: true
    - lineNumber: 60
      expression: "aliasResult != ConfigurationPropertyState.ABSENT"
      range: "(60,8)-(60,55)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "containsDescendantOfWhenNameIsAncestorOfAliasAndThisSourceGetConfigurationPropertyFromIsNotNull"
    constructorSignature: "<init>(org.springframework.boot.context.properties.source.ConfigurationPropertySource,org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases)\
      \ : void"
    modelFingerprint: "02DFB46185CB6F90FF1EACB6ECA5E1A9"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0818154AA10B9A45BADB60F8167C7D78"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "74708EC0FE4A843F6A9E0D8C1442E0B2"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "9953B538F435D37F4CCCA89B2004FB50"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "EE307CF96F66A3E6B860C179D5DAEAAF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:aliases,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "F400797EED7914A2CF42637724C47F90"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:name,message:uniqueUuid3):void3"
        staticAccess: true
    - type: "FIELD"
      name: "source"
      modelFingerprint: "D1D57C146B58643E71BEBC1B8B98A35B"
      valueUuid: "source"
      methodExercised:
        expression: "containsDescendantOf(name:name):configurationPropertyState"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "D454B9081B402302115BEAB1FF89EEC2"
      valueUuid: "aliases"
      methodExercised:
        expression: "getAliases(name:name):list"
    - type: "FIELD"
      name: "source"
      modelFingerprint: "F1E895BC2497A129BD4674A9CA3FF17E"
      valueUuid: "source"
      methodExercised:
        expression: "containsDescendantOf(name:object):configurationPropertyState2"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "B30505FAA071A09E4B79125EE56FB1A5"
      valueUuid: "aliases"
      methodExercised:
        expression: "iterator():iterator2"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "430B22D29485ECE3011F50CCEBFA04DB"
      valueUuid: "aliases"
      methodExercised:
        expression: "getAliases(name:object2):list2"
    - type: "LOCAL_VARIABLE"
      name: "name"
      modelFingerprint: "9EDCF3B38C862848C7F60986A1CE88FD"
      valueUuid: "name"
      methodExercised:
        expression: "isAncestorOf(name:object3):boolean5"
    - type: "FIELD"
      name: "source"
      modelFingerprint: "19CC75FFF614F4C94F608184B077D7F0"
      valueUuid: "source"
      methodExercised:
        expression: "getConfigurationProperty(name:object2):configurationProperty"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "F70B23A88E73F652E8EDDA5F974C1AB9"
      valueUuid: "Enum-org.springframework.boot.context.properties.source.ConfigurationPropertyState-PRESENT"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.AliasedConfigurationPropertySource"
        parameters:
        - name: "source"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
            uuid: "source"
        - name: "aliases"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases"
            uuid: "aliases"
      valueType: "org.springframework.boot.context.properties.source.AliasedConfigurationPropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases"
      uuid: "aliases"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Aliases must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Name must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "ENUM"
      content: !<regular>
        value: "ABSENT"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "configurationPropertyState"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases"
      uuid: "aliases"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
          uuid: "object"
          collectionUuid: "list"
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "ENUM"
      content: !<regular>
        value: "ABSENT"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "configurationPropertyState2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "object"
      collectionUuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases"
      uuid: "aliases"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            collectionClass: "java.util.ArrayList"
            parameters: []
            values:
            - sapientType: "MOCK"
              valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
              uuid: "object2"
              collectionUuid: "iterator2-CollectionContent"
          valueType: "java.util.List"
          genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
          uuid: "iterator2-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "iterator2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases"
      uuid: "aliases"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
          uuid: "object3"
          collectionUuid: "list2"
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "list2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "object2"
      collectionUuid: "iterator2-CollectionContent"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "object3"
      collectionUuid: "list2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "object2"
      collectionUuid: "iterator2-CollectionContent"
    - sapientType: "ENUM"
      content: !<regular>
        value: "PRESENT"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "Enum-org.springframework.boot.context.properties.source.ConfigurationPropertyState-PRESENT"
      fixed: true
    branches:
    - lineNumber: 55
      expression: "result != ConfigurationPropertyState.ABSENT"
      range: "(55,7)-(55,49)"
      evaluatedAs: false
    - lineNumber: 58
      expression: "for-each(getAliases().getAliases(name))"
      range: "(58,42)-(58,70)"
      evaluatedAs: true
    - lineNumber: 60
      expression: "aliasResult != ConfigurationPropertyState.ABSENT"
      range: "(60,8)-(60,55)"
      evaluatedAs: false
    - lineNumber: 64
      expression: "for-each(getAliases())"
      range: "(64,41)-(64,52)"
      evaluatedAs: true
    - lineNumber: 65
      expression: "for-each(getAliases().getAliases(from))"
      range: "(65,43)-(65,71)"
      evaluatedAs: true
    - lineNumber: 66
      expression: "name.isAncestorOf(alias)"
      range: "(66,9)-(66,32)"
      evaluatedAs: true
    - lineNumber: 67
      expression: "this.source.getConfigurationProperty(from) != null"
      range: "(67,10)-(67,59)"
      evaluatedAs: true
  - pathId: "path4"
    testPathName: "containsDescendantOfWhenNameIsAncestorOfAliasAndThisSourceGetConfigurationPropertyFromIsNull"
    constructorSignature: "<init>(org.springframework.boot.context.properties.source.ConfigurationPropertySource,org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases)\
      \ : void"
    modelFingerprint: "6E44E207EBB4DF2BC79320A436195FF8"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0818154AA10B9A45BADB60F8167C7D78"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "74708EC0FE4A843F6A9E0D8C1442E0B2"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "9953B538F435D37F4CCCA89B2004FB50"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "EE307CF96F66A3E6B860C179D5DAEAAF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:aliases,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "F400797EED7914A2CF42637724C47F90"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:name,message:uniqueUuid3):void3"
        staticAccess: true
    - type: "FIELD"
      name: "source"
      modelFingerprint: "D1D57C146B58643E71BEBC1B8B98A35B"
      valueUuid: "source"
      methodExercised:
        expression: "containsDescendantOf(name:name):configurationPropertyState"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "D454B9081B402302115BEAB1FF89EEC2"
      valueUuid: "aliases"
      methodExercised:
        expression: "getAliases(name:name):list"
    - type: "FIELD"
      name: "source"
      modelFingerprint: "F1E895BC2497A129BD4674A9CA3FF17E"
      valueUuid: "source"
      methodExercised:
        expression: "containsDescendantOf(name:object):configurationPropertyState2"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "B30505FAA071A09E4B79125EE56FB1A5"
      valueUuid: "aliases"
      methodExercised:
        expression: "iterator():iterator2"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "430B22D29485ECE3011F50CCEBFA04DB"
      valueUuid: "aliases"
      methodExercised:
        expression: "getAliases(name:object2):list2"
    - type: "LOCAL_VARIABLE"
      name: "name"
      modelFingerprint: "9EDCF3B38C862848C7F60986A1CE88FD"
      valueUuid: "name"
      methodExercised:
        expression: "isAncestorOf(name:object3):boolean5"
    - type: "FIELD"
      name: "source"
      modelFingerprint: "629BA76406F5B67166F2EC87757478C5"
      valueUuid: "source"
      methodExercised:
        expression: "getConfigurationProperty(name:object2):configurationProperty"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A08CD4C85BE33FA7AC835E3B5C40D3AA"
      valueUuid: "Enum-org.springframework.boot.context.properties.source.ConfigurationPropertyState-ABSENT"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.AliasedConfigurationPropertySource"
        parameters:
        - name: "source"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
            uuid: "source"
        - name: "aliases"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases"
            uuid: "aliases"
      valueType: "org.springframework.boot.context.properties.source.AliasedConfigurationPropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases"
      uuid: "aliases"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Aliases must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Name must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "ENUM"
      content: !<regular>
        value: "ABSENT"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "configurationPropertyState"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases"
      uuid: "aliases"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
          uuid: "object"
          collectionUuid: "list"
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "ENUM"
      content: !<regular>
        value: "ABSENT"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "configurationPropertyState2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "object"
      collectionUuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases"
      uuid: "aliases"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            collectionClass: "java.util.ArrayList"
            parameters: []
            values:
            - sapientType: "MOCK"
              valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
              uuid: "object2"
              collectionUuid: "iterator2-CollectionContent"
          valueType: "java.util.List"
          genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
          uuid: "iterator2-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "iterator2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases"
      uuid: "aliases"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
          uuid: "object3"
          collectionUuid: "list2"
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "list2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "object2"
      collectionUuid: "iterator2-CollectionContent"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "object3"
      collectionUuid: "list2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "object2"
      collectionUuid: "iterator2-CollectionContent"
    - sapientType: "ENUM"
      content: !<regular>
        value: "ABSENT"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "Enum-org.springframework.boot.context.properties.source.ConfigurationPropertyState-ABSENT"
      fixed: true
    branches:
    - lineNumber: 55
      expression: "result != ConfigurationPropertyState.ABSENT"
      range: "(55,7)-(55,49)"
      evaluatedAs: false
    - lineNumber: 58
      expression: "for-each(getAliases().getAliases(name))"
      range: "(58,42)-(58,70)"
      evaluatedAs: true
    - lineNumber: 60
      expression: "aliasResult != ConfigurationPropertyState.ABSENT"
      range: "(60,8)-(60,55)"
      evaluatedAs: false
    - lineNumber: 64
      expression: "for-each(getAliases())"
      range: "(64,41)-(64,52)"
      evaluatedAs: true
    - lineNumber: 65
      expression: "for-each(getAliases().getAliases(from))"
      range: "(65,43)-(65,71)"
      evaluatedAs: true
    - lineNumber: 66
      expression: "name.isAncestorOf(alias)"
      range: "(66,9)-(66,32)"
      evaluatedAs: true
    - lineNumber: 67
      expression: "this.source.getConfigurationProperty(from) != null"
      range: "(67,10)-(67,59)"
      evaluatedAs: false
- method:
    name: "getUnderlyingSource"
    sourceCodeSignature: "Object getUnderlyingSource()"
    returnType: "java.lang.Object"
    instructionFingerprint: "C1E7DDA27522F50AD0997C5CE910715D"
  paths:
  - pathId: "path1"
    testPathName: "getUnderlyingSourceTest"
    constructorSignature: "<init>(org.springframework.boot.context.properties.source.ConfigurationPropertySource,org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases)\
      \ : void"
    modelFingerprint: "562F2F24638A2EB1FE209388DE81F421"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "07FB3C62070790DF9F0A5A328A15A9A3"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "5AE5893CC912FE7B951786AB437C7324"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid16):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1BC41BD3200B33C9872975C1A6862A2E"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:aliases,message:uniqueUuid17):void2"
        staticAccess: true
    - type: "FIELD"
      name: "source"
      modelFingerprint: "BA1CA356FB4750DD11E32A4551A200F6"
      valueUuid: "source"
      methodExercised:
        expression: "getUnderlyingSource():object"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A5457F8C44AF90FDF3ACB1B2051E1175"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.AliasedConfigurationPropertySource"
        parameters:
        - name: "source"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
            uuid: "source"
        - name: "aliases"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases"
            uuid: "aliases"
      valueType: "org.springframework.boot.context.properties.source.AliasedConfigurationPropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid16"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases"
      uuid: "aliases"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Aliases must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid17"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
- method:
    name: "getSource"
    sourceCodeSignature: "ConfigurationPropertySource getSource()"
    returnType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
    instructionFingerprint: "BBD0D76BCFECC43F8CB7E2F1F1E60E66"
  paths:
  - pathId: "path1"
    testPathName: "getSourceTest"
    constructorSignature: "<init>(org.springframework.boot.context.properties.source.ConfigurationPropertySource,org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases)\
      \ : void"
    modelFingerprint: "A2A539C6777BA0676F420BF2B5004939"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "getAliases"
    sourceCodeSignature: "ConfigurationPropertyNameAliases getAliases()"
    returnType: "org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases"
    instructionFingerprint: "5E3B229619514F58DE84677B87FF4D95"
  paths:
  - pathId: "path1"
    testPathName: "getAliasesTest"
    constructorSignature: "<init>(org.springframework.boot.context.properties.source.ConfigurationPropertySource,org.springframework.boot.context.properties.source.ConfigurationPropertyNameAliases)\
      \ : void"
    modelFingerprint: "1868D76E681816E56DDE98D0FFC56897"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
