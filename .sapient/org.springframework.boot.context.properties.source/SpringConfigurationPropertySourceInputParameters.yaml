---
modelFingerprint: "B316001840B9478716141D7A01FCCD49"
targetClass:
  fullClassName: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
methods:
- method:
    name: "getConfigurationProperty"
    sourceCodeSignature: "ConfigurationProperty getConfigurationProperty(ConfigurationPropertyName\
      \ name)"
    returnType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
    parameters:
    - name: "name"
      type: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "07454FEC458EC468070FE1108E6EF736"
  paths:
  - pathId: "path1"
    testPathName: "getConfigurationPropertyWhenNameIsNull"
    constructorSignature: "<init>(org.springframework.core.env.PropertySource<?>,org.springframework.boot.context.properties.source.PropertyMapper[])\
      \ : void"
    modelFingerprint: "44EA5310FE06C52AA67C253BA6A59CA4"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "9C06926B64DB8D5F0F125C9DF9B48E7C"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "B4BBCA6358391A4D4ED455D707A0B704"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4C7337E5E2A61EA17BDDCA521BDD0B7B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:propertySource,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "22341A279BA87BBAE48FD72643F2E113"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "isTrue(expression:uniqueUuid2,message:uniqueUuid3):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "AF7DE2B64986230ACFA5A65E259E5AB7"
      valueUuid: "configurationProperty"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
        parameters:
        - name: "propertySource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.PropertySource"
            genericValueType: "?"
            uuid: "propertySource"
        - name: "mappers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "MOCK"
                  valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
                  uuid: "mappersItem0"
            valueType: "org.springframework.boot.context.properties.source.PropertyMapper[]"
            uuid: "mappers"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "PropertySource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Mappers must contain at least one item"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
      fixed: true
    branches:
    - lineNumber: 78
      expression: "name == null"
      range: "(78,7)-(78,18)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "getConfigurationPropertyWhenValueIsNotNull"
    constructorSignature: "<init>(org.springframework.core.env.PropertySource<?>,org.springframework.boot.context.properties.source.PropertyMapper[])\
      \ : void"
    modelFingerprint: "414BF6331FB13F04837BF730D1144A23"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "A0E479404C67087C29E9D3ECA085413E"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "79AA751E8DEF85DAAC2666FA9A7E6307"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "09350E182D64B1356273E7616CF52BD6"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:propertySource,message:uniqueUuid4):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "22341A279BA87BBAE48FD72643F2E113"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "isTrue(expression:uniqueUuid5,message:uniqueUuid6):void2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "mapper"
      modelFingerprint: "69610772C07A32DA3A4EF36DFA716B63"
      valueUuid: "propertyMapper3"
      methodExercised:
        expression: "map(configurationPropertyName:name):list"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "75F106C6FB56E34404EE9BFE120F34BF"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getProperty(name:object):object2"
    - type: "STATIC"
      name: "PropertySourceOrigin.class"
      modelFingerprint: "B0B9390CD09E583B5BFA4705F9B8C6E8"
      valueUuid: "PropertySourceOrigin.class"
      methodExercised:
        expression: "get(propertySource:propertySource,name:object):origin"
        staticAccess: true
    - type: "STATIC"
      name: "ConfigurationProperty.class"
      modelFingerprint: "06322F2D6689D9C0783A6EFCC78B3E78"
      valueUuid: "ConfigurationProperty.class"
      methodExercised:
        expression: "of(source:targetClassObject,name:name,value:object2,origin:origin):configurationProperty"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "88BB7180F05BA5E7BFB6995FFC0A819F"
      valueUuid: "configurationProperty"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
        parameters:
        - name: "propertySource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.PropertySource"
            genericValueType: "?"
            uuid: "propertySource"
        - name: "mappers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "MOCK"
                  valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
                  uuid: "propertyMapper3"
            valueType: "org.springframework.boot.context.properties.source.PropertyMapper[]"
            uuid: "mappers"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "PropertySource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Mappers must contain at least one item"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
      uuid: "propertyMapper3"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "return_of_mapItem1"
          valueType: "java.lang.String"
          uuid: "object"
          collectionUuid: "list"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_mapItem1"
      valueType: "java.lang.String"
      uuid: "object"
      collectionUuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.PropertySourceOrigin"
      uuid: "PropertySourceOrigin.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "origin"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_mapItem1"
      valueType: "java.lang.String"
      uuid: "object"
      collectionUuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "ConfigurationProperty.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "THIS"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
      uuid: "targetClassObject"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "origin"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    branches:
    - lineNumber: 78
      expression: "name == null"
      range: "(78,7)-(78,18)"
      evaluatedAs: false
    - lineNumber: 81
      expression: "for-each(this.mappers)"
      range: "(81,32)-(81,43)"
      evaluatedAs: true
    - lineNumber: 83
      expression: "for-each(mapper.map(name))"
      range: "(83,29)-(83,44)"
      evaluatedAs: true
    - lineNumber: 85
      expression: "value != null"
      range: "(85,10)-(85,22)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "getConfigurationPropertyWhenValueIsNull"
    constructorSignature: "<init>(org.springframework.core.env.PropertySource<?>,org.springframework.boot.context.properties.source.PropertyMapper[])\
      \ : void"
    modelFingerprint: "123B19B8959D200916BF7053BEC25882"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "A0E479404C67087C29E9D3ECA085413E"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "79AA751E8DEF85DAAC2666FA9A7E6307"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "09350E182D64B1356273E7616CF52BD6"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:propertySource,message:uniqueUuid7):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "22341A279BA87BBAE48FD72643F2E113"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "isTrue(expression:uniqueUuid8,message:uniqueUuid9):void2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "mapper"
      modelFingerprint: "69610772C07A32DA3A4EF36DFA716B63"
      valueUuid: "propertyMapper3"
      methodExercised:
        expression: "map(configurationPropertyName:name):list"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "BBDA2CD82CE1C1EBD9DA59ED42CE50FC"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getProperty(name:object):object2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "AF7DE2B64986230ACFA5A65E259E5AB7"
      valueUuid: "configurationProperty"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
        parameters:
        - name: "propertySource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.PropertySource"
            genericValueType: "?"
            uuid: "propertySource"
        - name: "mappers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "MOCK"
                  valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
                  uuid: "propertyMapper3"
            valueType: "org.springframework.boot.context.properties.source.PropertyMapper[]"
            uuid: "mappers"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "PropertySource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Mappers must contain at least one item"
      valueType: "java.lang.String"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
      uuid: "propertyMapper3"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "return_of_mapItem1"
          valueType: "java.lang.String"
          uuid: "object"
          collectionUuid: "list"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_mapItem1"
      valueType: "java.lang.String"
      uuid: "object"
      collectionUuid: "list"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
      fixed: true
    branches:
    - lineNumber: 78
      expression: "name == null"
      range: "(78,7)-(78,18)"
      evaluatedAs: false
    - lineNumber: 81
      expression: "for-each(this.mappers)"
      range: "(81,32)-(81,43)"
      evaluatedAs: true
    - lineNumber: 83
      expression: "for-each(mapper.map(name))"
      range: "(83,29)-(83,44)"
      evaluatedAs: true
    - lineNumber: 85
      expression: "value != null"
      range: "(85,10)-(85,22)"
      evaluatedAs: false
  - pathId: "path6"
    testPathName: "getConfigurationPropertyWhenValueIsNotNullAndCaughtException"
    constructorSignature: "<init>(org.springframework.core.env.PropertySource<?>,org.springframework.boot.context.properties.source.PropertyMapper[])\
      \ : void"
    modelFingerprint: "33128B0670811852F73C169012CD0009"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "EA1473B1198357054D8E92D1288FB2C2"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "79AA751E8DEF85DAAC2666FA9A7E6307"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "09350E182D64B1356273E7616CF52BD6"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:propertySource,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "22341A279BA87BBAE48FD72643F2E113"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "isTrue(expression:uniqueUuid2,message:uniqueUuid3):void2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "mapper"
      modelFingerprint: "69610772C07A32DA3A4EF36DFA716B63"
      valueUuid: "propertyMapper3"
      methodExercised:
        expression: "map(configurationPropertyName:name):list"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "75F106C6FB56E34404EE9BFE120F34BF"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getProperty(name:object):object2"
    - type: "STATIC"
      name: "PropertySourceOrigin.class"
      modelFingerprint: "B0B9390CD09E583B5BFA4705F9B8C6E8"
      valueUuid: "PropertySourceOrigin.class"
      methodExercised:
        expression: "get(propertySource:propertySource,name:object):origin"
        staticAccess: true
    - type: "STATIC"
      name: "ConfigurationProperty.class"
      modelFingerprint: "EAB375010CE8500799C903393609A08E"
      valueUuid: "ConfigurationProperty.class"
      methodExercised:
        expression: "of(source:targetClassObject,name:name,value:object2,origin:origin):configurationProperty"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "AF7DE2B64986230ACFA5A65E259E5AB7"
      valueUuid: "configurationProperty2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
        parameters:
        - name: "propertySource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.PropertySource"
            genericValueType: "?"
            uuid: "propertySource"
        - name: "mappers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "MOCK"
                  valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
                  uuid: "propertyMapper3"
            valueType: "org.springframework.boot.context.properties.source.PropertyMapper[]"
            uuid: "mappers"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "PropertySource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Mappers must contain at least one item"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
      uuid: "propertyMapper3"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "return_of_mapItem1"
          valueType: "java.lang.String"
          uuid: "object"
          collectionUuid: "list"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_mapItem1"
      valueType: "java.lang.String"
      uuid: "object"
      collectionUuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.PropertySourceOrigin"
      uuid: "PropertySourceOrigin.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "origin"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_mapItem1"
      valueType: "java.lang.String"
      uuid: "object"
      collectionUuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "ConfigurationProperty.class"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.RuntimeException"
        parameters: []
      valueType: "java.lang.RuntimeException"
      uuid: "configurationProperty"
    - sapientType: "THIS"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
      uuid: "targetClassObject"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "origin"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty2"
      fixed: true
    branches:
    - lineNumber: 78
      expression: "name == null"
      range: "(78,7)-(78,18)"
      evaluatedAs: false
    - lineNumber: 81
      expression: "for-each(this.mappers)"
      range: "(81,32)-(81,43)"
      evaluatedAs: true
    - lineNumber: 83
      expression: "for-each(mapper.map(name))"
      range: "(83,29)-(83,44)"
      evaluatedAs: true
    - lineNumber: 85
      expression: "value != null"
      range: "(85,10)-(85,22)"
      evaluatedAs: true
    - lineNumber: 91
      expression: "catch-exception (Exception)"
      range: "(91,4)-(91,22)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
- method:
    name: "containsDescendantOf"
    sourceCodeSignature: "ConfigurationPropertyState containsDescendantOf(ConfigurationPropertyName\
      \ name)"
    returnType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
    parameters:
    - name: "name"
      type: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
    instructionFingerprint: "FACA3AA964F8A904E0C5AFA3805EC6F2"
  paths:
  - pathId: "path1"
    testPathName: "containsDescendantOfWhenNameGetElement0FormDASHEDEqualsPrefix"
    constructorSignature: "<init>(org.springframework.core.env.PropertySource<?>,org.springframework.boot.context.properties.source.PropertyMapper[])\
      \ : void"
    modelFingerprint: "D24B96C1D12C69EE2C572CF12A286579"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4FFFF121A68A078BE2D57F0F12A43463"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "74708EC0FE4A843F6A9E0D8C1442E0B2"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "09350E182D64B1356273E7616CF52BD6"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:propertySource,message:uniqueUuid13):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "22341A279BA87BBAE48FD72643F2E113"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "isTrue(expression:uniqueUuid14,message:uniqueUuid15):void2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "D6653A0B8DB474D24BBC2219498563C0"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "name"
      modelFingerprint: "21B81FAA8059565076C6B9943C4CCD6B"
      valueUuid: "name"
      methodExercised:
        expression: "getNumberOfElements():int2"
    - type: "LOCAL_VARIABLE"
      name: "name"
      modelFingerprint: "8935079CCE80B02D209AF89B813AD5B7"
      valueUuid: "name"
      methodExercised:
        expression: "getElement(elementIndex:uniqueUuid16,form:Enum-org.springframework.boot.context.properties.source.ConfigurationPropertyName$Form-DASHED):string"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "F70B23A88E73F652E8EDDA5F974C1AB9"
      valueUuid: "Enum-org.springframework.boot.context.properties.source.ConfigurationPropertyState-PRESENT"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
        parameters:
        - name: "propertySource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.PropertySource"
            genericValueType: "?"
            uuid: "propertySource"
        - name: "mappers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "MOCK"
                  valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
                  uuid: "mappersItem0"
            valueType: "org.springframework.boot.context.properties.source.PropertyMapper[]"
            uuid: "mappers"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "PropertySource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid13"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid14"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Mappers must contain at least one item"
      valueType: "java.lang.String"
      uuid: "uniqueUuid15"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Random"
        parameters: []
      valueType: "java.util.Random"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "int2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: "random"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "uniqueUuid16"
      fixed: true
    - sapientType: "ENUM"
      content: !<regular>
        value: "DASHED"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName$Form"
      uuid: "Enum-org.springframework.boot.context.properties.source.ConfigurationPropertyName$Form-DASHED"
      fixed: true
    - sapientType: "ENUM"
      content: !<regular>
        value: "PRESENT"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "Enum-org.springframework.boot.context.properties.source.ConfigurationPropertyState-PRESENT"
      fixed: true
    branches:
    - lineNumber: 101
      expression: "underlyingSource instanceof Random"
      range: "(101,7)-(101,40)"
      evaluatedAs: true
    - lineNumber: 114
      expression: "name.getNumberOfElements() > 1"
      range: "(114,7)-(114,36)"
      evaluatedAs: true
      internalMethodName: "containsDescendantOfForRandom"
    - lineNumber: 114
      expression: "name.getElement(0, Form.DASHED).equals(prefix)"
      range: "(114,41)-(114,86)"
      evaluatedAs: true
      internalMethodName: "containsDescendantOfForRandom"
    calledSomeStaticInternalMethod: true
  - pathId: "path2"
    testPathName: "containsDescendantOfWhenNameGetElement0FormDASHEDNotEqualsPrefix"
    constructorSignature: "<init>(org.springframework.core.env.PropertySource<?>,org.springframework.boot.context.properties.source.PropertyMapper[])\
      \ : void"
    modelFingerprint: "E1E8202E71F405A95C0E75E016E83B43"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4FFFF121A68A078BE2D57F0F12A43463"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "74708EC0FE4A843F6A9E0D8C1442E0B2"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "09350E182D64B1356273E7616CF52BD6"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:propertySource,message:uniqueUuid17):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "22341A279BA87BBAE48FD72643F2E113"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "isTrue(expression:uniqueUuid18,message:uniqueUuid19):void2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "D6653A0B8DB474D24BBC2219498563C0"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "name"
      modelFingerprint: "21B81FAA8059565076C6B9943C4CCD6B"
      valueUuid: "name"
      methodExercised:
        expression: "getNumberOfElements():int2"
    - type: "LOCAL_VARIABLE"
      name: "name"
      modelFingerprint: "9F3D35D279DA697E50860906BC0F9A00"
      valueUuid: "name"
      methodExercised:
        expression: "getElement(elementIndex:uniqueUuid20,form:Enum-org.springframework.boot.context.properties.source.ConfigurationPropertyName$Form-DASHED):string"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A08CD4C85BE33FA7AC835E3B5C40D3AA"
      valueUuid: "Enum-org.springframework.boot.context.properties.source.ConfigurationPropertyState-ABSENT"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
        parameters:
        - name: "propertySource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.PropertySource"
            genericValueType: "?"
            uuid: "propertySource"
        - name: "mappers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "MOCK"
                  valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
                  uuid: "mappersItem0"
            valueType: "org.springframework.boot.context.properties.source.PropertyMapper[]"
            uuid: "mappers"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "PropertySource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid17"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid18"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Mappers must contain at least one item"
      valueType: "java.lang.String"
      uuid: "uniqueUuid19"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Random"
        parameters: []
      valueType: "java.util.Random"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "int2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "uniqueUuid20"
      fixed: true
    - sapientType: "ENUM"
      content: !<regular>
        value: "DASHED"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName$Form"
      uuid: "Enum-org.springframework.boot.context.properties.source.ConfigurationPropertyName$Form-DASHED"
      fixed: true
    - sapientType: "ENUM"
      content: !<regular>
        value: "ABSENT"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "Enum-org.springframework.boot.context.properties.source.ConfigurationPropertyState-ABSENT"
      fixed: true
    branches:
    - lineNumber: 101
      expression: "underlyingSource instanceof Random"
      range: "(101,7)-(101,40)"
      evaluatedAs: true
    - lineNumber: 114
      expression: "name.getNumberOfElements() > 1"
      range: "(114,7)-(114,36)"
      evaluatedAs: true
      internalMethodName: "containsDescendantOfForRandom"
    - lineNumber: 114
      expression: "name.getElement(0, Form.DASHED).equals(prefix)"
      range: "(114,41)-(114,86)"
      evaluatedAs: false
      internalMethodName: "containsDescendantOfForRandom"
    calledSomeStaticInternalMethod: true
  - pathId: "path7"
    testPathName: "containsDescendantOfWhenUnderlyingPropertySourceGetSourceNotInstanceOfRandom"
    constructorSignature: "<init>(org.springframework.core.env.PropertySource<?>,org.springframework.boot.context.properties.source.PropertyMapper[])\
      \ : void"
    modelFingerprint: "AC94CE129AE6D6E22502A4A08C67314D"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4FFFF121A68A078BE2D57F0F12A43463"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "79AA751E8DEF85DAAC2666FA9A7E6307"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "09350E182D64B1356273E7616CF52BD6"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:propertySource,message:uniqueUuid21):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "22341A279BA87BBAE48FD72643F2E113"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "isTrue(expression:uniqueUuid22,message:uniqueUuid23):void2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "CA4F1032C2E14BD905008F9ADB2C3983"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "underlyingPropertySource"
      modelFingerprint: "1EB2884C3391A4DCB1ACC713E3E94D32"
      valueUuid: "source"
      methodExercised:
        expression: "getSource():source2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "6270D220691968B9A5CD90600C5C417A"
      valueUuid: "Enum-org.springframework.boot.context.properties.source.ConfigurationPropertyState-UNKNOWN"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
        parameters:
        - name: "propertySource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.PropertySource"
            genericValueType: "?"
            uuid: "propertySource"
        - name: "mappers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "MOCK"
                  valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
                  uuid: "mappersItem0"
            valueType: "org.springframework.boot.context.properties.source.PropertyMapper[]"
            uuid: "mappers"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "PropertySource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid21"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid22"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Mappers must contain at least one item"
      valueType: "java.lang.String"
      uuid: "uniqueUuid23"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "source"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "source2"
    - sapientType: "ENUM"
      content: !<regular>
        value: "UNKNOWN"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "Enum-org.springframework.boot.context.properties.source.ConfigurationPropertyState-UNKNOWN"
      fixed: true
    branches:
    - lineNumber: 101
      expression: "underlyingSource instanceof Random"
      range: "(101,7)-(101,40)"
      evaluatedAs: false
    - lineNumber: 104
      expression: "underlyingSource instanceof PropertySource<?> underlyingPropertySource"
      range: "(104,7)-(104,76)"
      evaluatedAs: true
    - lineNumber: 105
      expression: "underlyingPropertySource.getSource() instanceof Random"
      range: "(105,8)-(105,61)"
      evaluatedAs: false
  - pathId: "path4"
    testPathName: "containsDescendantOfWhenNameGetNumberOfElementsGreaterThan1AndNameGetElement0FormDASHEDEqualsPrefix"
    constructorSignature: "<init>(org.springframework.core.env.PropertySource<?>,org.springframework.boot.context.properties.source.PropertyMapper[])\
      \ : void"
    modelFingerprint: "F57B7CBC9414EDDF6902571C9D8185E4"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4FFFF121A68A078BE2D57F0F12A43463"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "74708EC0FE4A843F6A9E0D8C1442E0B2"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "09350E182D64B1356273E7616CF52BD6"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:propertySource,message:uniqueUuid24):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "22341A279BA87BBAE48FD72643F2E113"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "isTrue(expression:uniqueUuid25,message:uniqueUuid26):void2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "CA4F1032C2E14BD905008F9ADB2C3983"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "underlyingPropertySource"
      modelFingerprint: "55A487AD9D14B659DBB589B2A2CCBDA5"
      valueUuid: "source"
      methodExercised:
        expression: "getSource():source2"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "07E62DAF59D3FDFE9447767B3EED2F3A"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getName():name2"
    - type: "LOCAL_VARIABLE"
      name: "name"
      modelFingerprint: "21B81FAA8059565076C6B9943C4CCD6B"
      valueUuid: "name"
      methodExercised:
        expression: "getNumberOfElements():int2"
    - type: "LOCAL_VARIABLE"
      name: "name"
      modelFingerprint: "9F3D35D279DA697E50860906BC0F9A00"
      valueUuid: "name"
      methodExercised:
        expression: "getElement(elementIndex:uniqueUuid27,form:Enum-org.springframework.boot.context.properties.source.ConfigurationPropertyName$Form-DASHED):string2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "F70B23A88E73F652E8EDDA5F974C1AB9"
      valueUuid: "Enum-org.springframework.boot.context.properties.source.ConfigurationPropertyState-PRESENT"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
        parameters:
        - name: "propertySource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.PropertySource"
            genericValueType: "?"
            uuid: "propertySource"
        - name: "mappers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "MOCK"
                  valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
                  uuid: "mappersItem0"
            valueType: "org.springframework.boot.context.properties.source.PropertyMapper[]"
            uuid: "mappers"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "PropertySource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid24"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid25"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Mappers must contain at least one item"
      valueType: "java.lang.String"
      uuid: "uniqueUuid26"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "source"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Random"
        parameters: []
      valueType: "java.util.Random"
      uuid: "source2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "int2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "uniqueUuid27"
      fixed: true
    - sapientType: "ENUM"
      content: !<regular>
        value: "DASHED"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName$Form"
      uuid: "Enum-org.springframework.boot.context.properties.source.ConfigurationPropertyName$Form-DASHED"
      fixed: true
    - sapientType: "ENUM"
      content: !<regular>
        value: "PRESENT"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "Enum-org.springframework.boot.context.properties.source.ConfigurationPropertyState-PRESENT"
      fixed: true
    branches:
    - lineNumber: 101
      expression: "underlyingSource instanceof Random"
      range: "(101,7)-(101,40)"
      evaluatedAs: false
    - lineNumber: 104
      expression: "underlyingSource instanceof PropertySource<?> underlyingPropertySource"
      range: "(104,7)-(104,76)"
      evaluatedAs: true
    - lineNumber: 105
      expression: "underlyingPropertySource.getSource() instanceof Random"
      range: "(105,8)-(105,61)"
      evaluatedAs: true
    - lineNumber: 114
      expression: "name.getNumberOfElements() > 1"
      range: "(114,7)-(114,36)"
      evaluatedAs: true
      internalMethodName: "containsDescendantOfForRandom"
    - lineNumber: 114
      expression: "name.getElement(0, Form.DASHED).equals(prefix)"
      range: "(114,41)-(114,86)"
      evaluatedAs: true
      internalMethodName: "containsDescendantOfForRandom"
    calledSomeStaticInternalMethod: true
  - pathId: "path5"
    testPathName: "containsDescendantOfWhenNameGetNumberOfElementsGreaterThan1AndNameGetElement0FormDASHEDNotEqualsPrefix"
    constructorSignature: "<init>(org.springframework.core.env.PropertySource<?>,org.springframework.boot.context.properties.source.PropertyMapper[])\
      \ : void"
    modelFingerprint: "E26E9EA9BEAD7B5A33B6CC08995402D0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4FFFF121A68A078BE2D57F0F12A43463"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "74708EC0FE4A843F6A9E0D8C1442E0B2"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "09350E182D64B1356273E7616CF52BD6"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:propertySource,message:uniqueUuid28):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "22341A279BA87BBAE48FD72643F2E113"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "isTrue(expression:uniqueUuid29,message:uniqueUuid30):void2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "CA4F1032C2E14BD905008F9ADB2C3983"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "underlyingPropertySource"
      modelFingerprint: "55A487AD9D14B659DBB589B2A2CCBDA5"
      valueUuid: "source"
      methodExercised:
        expression: "getSource():source2"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "3A2BE0AB7CDD9B20520AF1974F0824AE"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getName():name2"
    - type: "LOCAL_VARIABLE"
      name: "name"
      modelFingerprint: "21B81FAA8059565076C6B9943C4CCD6B"
      valueUuid: "name"
      methodExercised:
        expression: "getNumberOfElements():int2"
    - type: "LOCAL_VARIABLE"
      name: "name"
      modelFingerprint: "9F3D35D279DA697E50860906BC0F9A00"
      valueUuid: "name"
      methodExercised:
        expression: "getElement(elementIndex:uniqueUuid31,form:Enum-org.springframework.boot.context.properties.source.ConfigurationPropertyName$Form-DASHED):string2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A08CD4C85BE33FA7AC835E3B5C40D3AA"
      valueUuid: "Enum-org.springframework.boot.context.properties.source.ConfigurationPropertyState-ABSENT"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
        parameters:
        - name: "propertySource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.PropertySource"
            genericValueType: "?"
            uuid: "propertySource"
        - name: "mappers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "MOCK"
                  valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
                  uuid: "mappersItem0"
            valueType: "org.springframework.boot.context.properties.source.PropertyMapper[]"
            uuid: "mappers"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "PropertySource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid28"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid29"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Mappers must contain at least one item"
      valueType: "java.lang.String"
      uuid: "uniqueUuid30"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "source"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Random"
        parameters: []
      valueType: "java.util.Random"
      uuid: "source2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "int2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "uniqueUuid31"
      fixed: true
    - sapientType: "ENUM"
      content: !<regular>
        value: "DASHED"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName$Form"
      uuid: "Enum-org.springframework.boot.context.properties.source.ConfigurationPropertyName$Form-DASHED"
      fixed: true
    - sapientType: "ENUM"
      content: !<regular>
        value: "ABSENT"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "Enum-org.springframework.boot.context.properties.source.ConfigurationPropertyState-ABSENT"
      fixed: true
    branches:
    - lineNumber: 101
      expression: "underlyingSource instanceof Random"
      range: "(101,7)-(101,40)"
      evaluatedAs: false
    - lineNumber: 104
      expression: "underlyingSource instanceof PropertySource<?> underlyingPropertySource"
      range: "(104,7)-(104,76)"
      evaluatedAs: true
    - lineNumber: 105
      expression: "underlyingPropertySource.getSource() instanceof Random"
      range: "(105,8)-(105,61)"
      evaluatedAs: true
    - lineNumber: 114
      expression: "name.getNumberOfElements() > 1"
      range: "(114,7)-(114,36)"
      evaluatedAs: true
      internalMethodName: "containsDescendantOfForRandom"
    - lineNumber: 114
      expression: "name.getElement(0, Form.DASHED).equals(prefix)"
      range: "(114,41)-(114,86)"
      evaluatedAs: false
      internalMethodName: "containsDescendantOfForRandom"
    calledSomeStaticInternalMethod: true
- method:
    name: "getUnderlyingSource"
    sourceCodeSignature: "Object getUnderlyingSource()"
    returnType: "java.lang.Object"
    instructionFingerprint: "0D62300509AB4D0D147F73C936639C4B"
  paths:
  - pathId: "path1"
    testPathName: "getUnderlyingSourceTest"
    constructorSignature: "<init>(org.springframework.core.env.PropertySource<?>,org.springframework.boot.context.properties.source.PropertyMapper[])\
      \ : void"
    modelFingerprint: "E02B1A30AB6B470798A67D9114A5F0F9"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "9C06926B64DB8D5F0F125C9DF9B48E7C"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4C7337E5E2A61EA17BDDCA521BDD0B7B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:propertySource,message:uniqueUuid32):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "22341A279BA87BBAE48FD72643F2E113"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "isTrue(expression:uniqueUuid33,message:uniqueUuid34):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4ADC0296A15F8F8AD48EAAE384F58E9B"
      valueUuid: "propertySource"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
        parameters:
        - name: "propertySource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.PropertySource"
            genericValueType: "?"
            uuid: "propertySource"
        - name: "mappers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "MOCK"
                  valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
                  uuid: "mappersItem0"
            valueType: "org.springframework.boot.context.properties.source.PropertyMapper[]"
            uuid: "mappers"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "PropertySource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid32"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid33"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Mappers must contain at least one item"
      valueType: "java.lang.String"
      uuid: "uniqueUuid34"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
- method:
    name: "getPropertySource"
    sourceCodeSignature: "PropertySource<?> getPropertySource()"
    returnType: "org.springframework.core.env.PropertySource"
    genericReturnType: "?"
    instructionFingerprint: "9E6A8E7932441A7E42D67805690DEC77"
  paths:
  - pathId: "path1"
    testPathName: "getPropertySourceTest"
    constructorSignature: "<init>(org.springframework.core.env.PropertySource<?>,org.springframework.boot.context.properties.source.PropertyMapper[])\
      \ : void"
    modelFingerprint: "E02B1A30AB6B470798A67D9114A5F0F9"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "getMappers"
    sourceCodeSignature: "PropertyMapper[] getMappers()"
    returnType: "org.springframework.boot.context.properties.source.PropertyMapper[]"
    instructionFingerprint: "FAC885BB4C17AB6FF6CF5AA53DC493C3"
  paths:
  - pathId: "path1"
    testPathName: "getMappersTest"
    constructorSignature: "<init>(org.springframework.core.env.PropertySource<?>,org.springframework.boot.context.properties.source.PropertyMapper[])\
      \ : void"
    modelFingerprint: "6C9487CB46988C8413CAD092F7073B3A"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "toString"
    sourceCodeSignature: "String toString()"
    returnType: "java.lang.String"
    instructionFingerprint: "33CE627CB5D93C51E465A1F07EE6AD4D"
  paths:
  - pathId: "path1"
    testPathName: "toStringTest"
    constructorSignature: "<init>(org.springframework.core.env.PropertySource<?>,org.springframework.boot.context.properties.source.PropertyMapper[])\
      \ : void"
    modelFingerprint: "1BCB552816CECF88A6D25D27EA93B410"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4FFFF121A68A078BE2D57F0F12A43463"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "09350E182D64B1356273E7616CF52BD6"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:propertySource,message:uniqueUuid41):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "22341A279BA87BBAE48FD72643F2E113"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "isTrue(expression:uniqueUuid42,message:uniqueUuid43):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "73F0101E9B184B8746AB1E44F774FA29"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
        parameters:
        - name: "propertySource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.PropertySource"
            genericValueType: "?"
            uuid: "propertySource"
            nameForMock: "propertySource"
        - name: "mappers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "MOCK"
                  valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
                  uuid: "mappersItem0"
            valueType: "org.springframework.boot.context.properties.source.PropertyMapper[]"
            uuid: "mappers"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
      nameForMock: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "PropertySource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid41"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid42"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Mappers must contain at least one item"
      valueType: "java.lang.String"
      uuid: "uniqueUuid43"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "propertySource"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "from"
    sourceCodeSignature: "SpringConfigurationPropertySource from(PropertySource<?>\
      \ source)"
    returnType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
    parameters:
    - name: "source"
      type: "org.springframework.core.env.PropertySource"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 3
      catchExceptions:
      - "java.lang.UnsupportedOperationException"
    instructionFingerprint: "3B115BC5CB77FEC61B197E9250F36399"
  paths:
  - pathId: "path7"
    testPathName: "fromWhenDefaultBranch"
    modelFingerprint: "C665E87218DB507D0C075CD5936672A1"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "source"
      modelFingerprint: "680C9201F048971FFA0620649BD29384"
      valueUuid: "source"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B8A3A738A6CF3EEEA57265216FF7C523"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid44):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "B8B862737455AC6C5C254969951FCEDB"
      valueUuid: "source"
      methodExercised:
        expression: "getSource():source2"
    - type: "LOCAL_VARIABLE"
      name: "rootSource"
      modelFingerprint: "BC97BB9D7E609B2E5917496CDAA64724"
      valueUuid: "source"
      methodExercised:
        expression: "getSource():source2"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "09350E182D64B1356273E7616CF52BD6"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid45):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "22341A279BA87BBAE48FD72643F2E113"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "isTrue(expression:uniqueUuid46,message:uniqueUuid47):void3"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "15E37EFDCA8AAED6ECDD2710B51F74E9"
      valueUuid: "springConfigurationPropertySource"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid44"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "source"
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "source2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "source"
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "source2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "PropertySource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid45"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid46"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Mappers must contain at least one item"
      valueType: "java.lang.String"
      uuid: "uniqueUuid47"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
        parameters:
        - name: "propertySource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.PropertySource"
            genericValueType: "?"
            uuid: "source"
        - name: "mappers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "OBJECT"
                  content: !<static_field_return>
                    target: "org.springframework.boot.context.properties.source.DefaultPropertyMapper"
                    fieldName: "INSTANCE"
                  valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
                  uuid: "propertyMapper"
            valueType: "org.springframework.boot.context.properties.source.PropertyMapper[]"
            uuid: "propertyMapperArray"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
      uuid: "springConfigurationPropertySource"
      fixed: true
    branches:
    - lineNumber: 155
      expression: "source instanceof SystemEnvironmentPropertySource"
      range: "(155,7)-(155,55)"
      evaluatedAs: false
      internalMethodName: "getPropertyMappers"
    - lineNumber: 182
      expression: "source.getSource() != null"
      range: "(182,10)-(182,35)"
      evaluatedAs: false
      internalMethodName: "getRootSource"
    - lineNumber: 169
      expression: "rootSource.getSource() instanceof Map"
      range: "(169,7)-(169,43)"
      evaluatedAs: false
      internalMethodName: "isFullEnumerable"
    - lineNumber: 148
      expression: "isFullEnumerable(source)"
      range: "(148,7)-(148,30)"
      evaluatedAs: false
    - lineNumber: 71
      expression: "branch expression (line 71)"
      range: "(71,1)-(71,200)"
      evaluatedAs: false
      internalMethodName: "<init>"
    calledSomeStaticInternalMethod: true
  - pathId: "path5"
    testPathName: "fromWhenSourceGetSourceIsNullAndRootSourceGetSourceNotInstanceOfMapAndIsFullEnumerableSource"
    modelFingerprint: "66B9F1688C77FFB6EF0313949065487C"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "source"
      modelFingerprint: "4EEC89FD0810FEAC175C5864B8A5018E"
      valueUuid: "source"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B907147BC5F114492BEA10D8629275A9"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid48):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "80E2232F6BF14D48ACEC5078C52BD4A1"
      valueUuid: "source"
      methodExercised:
        expression: "getName():name"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "BD04EE1C1F1019304208CE165ADF8AE7"
      valueUuid: "source"
      methodExercised:
        expression: "getSource():source2"
    - type: "LOCAL_VARIABLE"
      name: "rootSource"
      modelFingerprint: "674950A2AD8D9B00706C7BDEB1346D6C"
      valueUuid: "source"
      methodExercised:
        expression: "getSource():source2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4D4A6CC9848622A455B9BC41CAC3A595"
      valueUuid: "springIterableConfigurationPropertySource"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_FAILURE"
      source: "return new SpringIterableConfigurationPropertySource((EnumerablePropertySource<?>)\
        \ source, mappers);"
      lineNumber: 149
      details: "No constructor found to create an object without any exception for\
        \ class org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid48"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ABCDFGHIJKLMNOPQRS"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "source2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "source2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource"
        parameters:
        - name: "propertySource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
            uuid: "source"
        - name: "mappers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "OBJECT"
                  content: !<static_field_return>
                    target: "org.springframework.boot.context.properties.source.DefaultPropertyMapper"
                    fieldName: "INSTANCE"
                  valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
                  uuid: "propertyMapper"
            valueType: "org.springframework.boot.context.properties.source.PropertyMapper[]"
            uuid: "propertyMapperArray"
      valueType: "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource"
      uuid: "springIterableConfigurationPropertySource"
      fixed: true
    branches:
    - lineNumber: 155
      expression: "source instanceof SystemEnvironmentPropertySource"
      range: "(155,7)-(155,55)"
      evaluatedAs: true
      internalMethodName: "getPropertyMappers"
    - lineNumber: 163
      expression: "StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME.equals(name)"
      range: "(163,10)-(163,81)"
      evaluatedAs: false
      internalMethodName: "hasSystemEnvironmentName"
    - lineNumber: 164
      expression: "name.endsWith(\\\"-\\\" + StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME)"
      range: "(164,8)-(164,87)"
      evaluatedAs: false
      internalMethodName: "hasSystemEnvironmentName"
    - lineNumber: 155
      expression: "hasSystemEnvironmentName(source)"
      range: "(155,60)-(155,91)"
      evaluatedAs: false
      internalMethodName: "getPropertyMappers"
    - lineNumber: 182
      expression: "source.getSource() != null"
      range: "(182,10)-(182,35)"
      evaluatedAs: false
      internalMethodName: "getRootSource"
    - lineNumber: 169
      expression: "rootSource.getSource() instanceof Map"
      range: "(169,7)-(169,43)"
      evaluatedAs: false
      internalMethodName: "isFullEnumerable"
    - lineNumber: 148
      expression: "isFullEnumerable(source)"
      range: "(148,7)-(148,30)"
      evaluatedAs: true
    calledSomeStaticInternalMethod: true
  - pathId: "path8"
    testPathName: "fromWhenCaughtUnsupportedOperationExceptionAndIsFullEnumerableSource"
    modelFingerprint: "6230C532BF37CBFB3FD6D93D3F7E780D"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "source"
      modelFingerprint: "4EEC89FD0810FEAC175C5864B8A5018E"
      valueUuid: "source"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B907147BC5F114492BEA10D8629275A9"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid49):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "34E6984FDE64098C256FAE5F915CE812"
      valueUuid: "source"
      methodExercised:
        expression: "getName():name"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "7ADCE8130AAB65B194F44962CEAF006A"
      valueUuid: "source"
      methodExercised:
        expression: "getSource():source2"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "7ADCE8130AAB65B194F44962CEAF006A"
      valueUuid: "source"
      methodExercised:
        expression: "getSource():source2"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "7ADCE8130AAB65B194F44962CEAF006A"
      valueUuid: "source"
      methodExercised:
        expression: "getSource():source2"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "21D660657C53AE3FE5D05ED2500083D9"
      valueUuid: "source2"
      methodExercised:
        expression: "getSource():source3"
    - type: "LOCAL_VARIABLE"
      name: "rootSource"
      modelFingerprint: "8E3607F4A952217B8C957F281B804C67"
      valueUuid: "source2"
      methodExercised:
        expression: "getSource():source3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B52C9A89C3C70C5AF47BE39415E18A2B"
      valueUuid: "springIterableConfigurationPropertySource"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_FAILURE"
      source: "return new SpringIterableConfigurationPropertySource((EnumerablePropertySource<?>)\
        \ source, mappers);"
      lineNumber: 149
      details: "No constructor found to create an object without any exception for\
        \ class org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid49"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "systemEnvironment"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "source2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "source2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "source2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "source2"
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "source3"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "source2"
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "source3"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource"
        parameters:
        - name: "propertySource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
            uuid: "source"
        - name: "mappers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "OBJECT"
                  content: !<static_field_return>
                    target: "org.springframework.boot.context.properties.source.SystemEnvironmentPropertyMapper"
                    fieldName: "INSTANCE"
                  valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
                  uuid: "propertyMapper2"
                1:
                  sapientType: "OBJECT"
                  content: !<static_field_return>
                    target: "org.springframework.boot.context.properties.source.DefaultPropertyMapper"
                    fieldName: "INSTANCE"
                  valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
                  uuid: "propertyMapper"
            valueType: "org.springframework.boot.context.properties.source.PropertyMapper[]"
            uuid: "propertyMapperArray2"
      valueType: "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource"
      uuid: "springIterableConfigurationPropertySource"
      fixed: true
    branches:
    - lineNumber: 155
      expression: "source instanceof SystemEnvironmentPropertySource"
      range: "(155,7)-(155,55)"
      evaluatedAs: true
      internalMethodName: "getPropertyMappers"
    - lineNumber: 163
      expression: "StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME.equals(name)"
      range: "(163,10)-(163,81)"
      evaluatedAs: true
      internalMethodName: "hasSystemEnvironmentName"
    - lineNumber: 155
      expression: "hasSystemEnvironmentName(source)"
      range: "(155,60)-(155,91)"
      evaluatedAs: true
      internalMethodName: "getPropertyMappers"
    - lineNumber: 182
      expression: "source.getSource() != null"
      range: "(182,10)-(182,35)"
      evaluatedAs: true
      internalMethodName: "getRootSource"
    - lineNumber: 182
      expression: "source.getSource() instanceof PropertySource"
      range: "(182,40)-(182,83)"
      evaluatedAs: true
      internalMethodName: "getRootSource"
    - lineNumber: 169
      expression: "rootSource.getSource() instanceof Map"
      range: "(169,7)-(169,43)"
      evaluatedAs: false
      internalMethodName: "isFullEnumerable"
    - lineNumber: 174
      expression: "catch-exception (UnsupportedOperationException)"
      range: "(174,4)-(174,42)"
      evaluatedAs: true
      internalMethodName: "isFullEnumerable"
    - lineNumber: 148
      expression: "isFullEnumerable(source)"
      range: "(148,7)-(148,30)"
      evaluatedAs: true
    calledSomeStaticInternalMethod: true
    catchBlockExercised:
      idExternalInstruction: 13
      id: 3
      catchExceptions:
      - "java.lang.UnsupportedOperationException"
  - pathId: "path1"
    testPathName: "fromWhenSourceGetSourceInstanceOfPropertySourceAndRootSourceGetSourceNotInstanceOfMapAndIsFullEnumerableSource"
    modelFingerprint: "E66D9B2A5ACEE9E7169ADE65B882DD57"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "source"
      modelFingerprint: "4EEC89FD0810FEAC175C5864B8A5018E"
      valueUuid: "source"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B907147BC5F114492BEA10D8629275A9"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid50):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "8EF731D423EAB33C8CD19076F787C978"
      valueUuid: "source"
      methodExercised:
        expression: "getName():name"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "7ADCE8130AAB65B194F44962CEAF006A"
      valueUuid: "source"
      methodExercised:
        expression: "getSource():source2"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "7ADCE8130AAB65B194F44962CEAF006A"
      valueUuid: "source"
      methodExercised:
        expression: "getSource():source2"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "7ADCE8130AAB65B194F44962CEAF006A"
      valueUuid: "source"
      methodExercised:
        expression: "getSource():source2"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "21D660657C53AE3FE5D05ED2500083D9"
      valueUuid: "source2"
      methodExercised:
        expression: "getSource():source3"
    - type: "LOCAL_VARIABLE"
      name: "rootSource"
      modelFingerprint: "8E3607F4A952217B8C957F281B804C67"
      valueUuid: "source2"
      methodExercised:
        expression: "getSource():source3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B52C9A89C3C70C5AF47BE39415E18A2B"
      valueUuid: "springIterableConfigurationPropertySource"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_FAILURE"
      source: "return new SpringIterableConfigurationPropertySource((EnumerablePropertySource<?>)\
        \ source, mappers);"
      lineNumber: 149
      details: "No constructor found to create an object without any exception for\
        \ class org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid50"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "-systemEnvironment"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "source2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "source2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "source2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "source2"
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "source3"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "source2"
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "source3"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource"
        parameters:
        - name: "propertySource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
            uuid: "source"
        - name: "mappers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "OBJECT"
                  content: !<static_field_return>
                    target: "org.springframework.boot.context.properties.source.SystemEnvironmentPropertyMapper"
                    fieldName: "INSTANCE"
                  valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
                  uuid: "propertyMapper2"
                1:
                  sapientType: "OBJECT"
                  content: !<static_field_return>
                    target: "org.springframework.boot.context.properties.source.DefaultPropertyMapper"
                    fieldName: "INSTANCE"
                  valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
                  uuid: "propertyMapper"
            valueType: "org.springframework.boot.context.properties.source.PropertyMapper[]"
            uuid: "propertyMapperArray2"
      valueType: "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource"
      uuid: "springIterableConfigurationPropertySource"
      fixed: true
    branches:
    - lineNumber: 155
      expression: "source instanceof SystemEnvironmentPropertySource"
      range: "(155,7)-(155,55)"
      evaluatedAs: true
      internalMethodName: "getPropertyMappers"
    - lineNumber: 163
      expression: "StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME.equals(name)"
      range: "(163,10)-(163,81)"
      evaluatedAs: false
      internalMethodName: "hasSystemEnvironmentName"
    - lineNumber: 164
      expression: "name.endsWith(\\\"-\\\" + StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME)"
      range: "(164,8)-(164,87)"
      evaluatedAs: true
      internalMethodName: "hasSystemEnvironmentName"
    - lineNumber: 155
      expression: "hasSystemEnvironmentName(source)"
      range: "(155,60)-(155,91)"
      evaluatedAs: true
      internalMethodName: "getPropertyMappers"
    - lineNumber: 182
      expression: "source.getSource() != null"
      range: "(182,10)-(182,35)"
      evaluatedAs: true
      internalMethodName: "getRootSource"
    - lineNumber: 182
      expression: "source.getSource() instanceof PropertySource"
      range: "(182,40)-(182,83)"
      evaluatedAs: true
      internalMethodName: "getRootSource"
    - lineNumber: 169
      expression: "rootSource.getSource() instanceof Map"
      range: "(169,7)-(169,43)"
      evaluatedAs: false
      internalMethodName: "isFullEnumerable"
    - lineNumber: 148
      expression: "isFullEnumerable(source)"
      range: "(148,7)-(148,30)"
      evaluatedAs: true
    calledSomeStaticInternalMethod: true
  - pathId: "path2"
    testPathName: "fromWhenRootSourceGetSourceInstanceOfMapAndIsFullEnumerableSource"
    modelFingerprint: "A6F8C1298DF4FD9761AB6E8FD30C2CFB"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "source"
      modelFingerprint: "4EEC89FD0810FEAC175C5864B8A5018E"
      valueUuid: "source"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B907147BC5F114492BEA10D8629275A9"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid51):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "8EF731D423EAB33C8CD19076F787C978"
      valueUuid: "source"
      methodExercised:
        expression: "getName():name"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "8AC29AB4167FF6553911FFF27F07B9E1"
      valueUuid: "source"
      methodExercised:
        expression: "getSource():source2"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "8AC29AB4167FF6553911FFF27F07B9E1"
      valueUuid: "source"
      methodExercised:
        expression: "getSource():source2"
    - type: "LOCAL_VARIABLE"
      name: "rootSource"
      modelFingerprint: "8AC29AB4167FF6553911FFF27F07B9E1"
      valueUuid: "source"
      methodExercised:
        expression: "getSource():source2"
    - type: "LOCAL_VARIABLE"
      name: "rootSource"
      modelFingerprint: "8AC29AB4167FF6553911FFF27F07B9E1"
      valueUuid: "source"
      methodExercised:
        expression: "getSource():source2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B52C9A89C3C70C5AF47BE39415E18A2B"
      valueUuid: "springIterableConfigurationPropertySource"
    disabled: false
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_FAILURE"
      source: "return new SpringIterableConfigurationPropertySource((EnumerablePropertySource<?>)\
        \ source, mappers);"
      lineNumber: 149
      details: "No constructor found to create an object without any exception for\
        \ class org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource"
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid51"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "-systemEnvironment"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      uuid: "source2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      uuid: "source2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      uuid: "source2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      uuid: "source2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource"
        parameters:
        - name: "propertySource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
            uuid: "source"
        - name: "mappers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "OBJECT"
                  content: !<static_field_return>
                    target: "org.springframework.boot.context.properties.source.SystemEnvironmentPropertyMapper"
                    fieldName: "INSTANCE"
                  valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
                  uuid: "propertyMapper2"
                1:
                  sapientType: "OBJECT"
                  content: !<static_field_return>
                    target: "org.springframework.boot.context.properties.source.DefaultPropertyMapper"
                    fieldName: "INSTANCE"
                  valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
                  uuid: "propertyMapper"
            valueType: "org.springframework.boot.context.properties.source.PropertyMapper[]"
            uuid: "propertyMapperArray2"
      valueType: "org.springframework.boot.context.properties.source.SpringIterableConfigurationPropertySource"
      uuid: "springIterableConfigurationPropertySource"
      fixed: true
    branches:
    - lineNumber: 155
      expression: "source instanceof SystemEnvironmentPropertySource"
      range: "(155,7)-(155,55)"
      evaluatedAs: true
      internalMethodName: "getPropertyMappers"
    - lineNumber: 163
      expression: "StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME.equals(name)"
      range: "(163,10)-(163,81)"
      evaluatedAs: false
      internalMethodName: "hasSystemEnvironmentName"
    - lineNumber: 164
      expression: "name.endsWith(\\\"-\\\" + StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME)"
      range: "(164,8)-(164,87)"
      evaluatedAs: true
      internalMethodName: "hasSystemEnvironmentName"
    - lineNumber: 155
      expression: "hasSystemEnvironmentName(source)"
      range: "(155,60)-(155,91)"
      evaluatedAs: true
      internalMethodName: "getPropertyMappers"
    - lineNumber: 182
      expression: "source.getSource() != null"
      range: "(182,10)-(182,35)"
      evaluatedAs: true
      internalMethodName: "getRootSource"
    - lineNumber: 182
      expression: "source.getSource() instanceof PropertySource"
      range: "(182,40)-(182,83)"
      evaluatedAs: false
      internalMethodName: "getRootSource"
    - lineNumber: 169
      expression: "rootSource.getSource() instanceof Map"
      range: "(169,7)-(169,43)"
      evaluatedAs: true
      internalMethodName: "isFullEnumerable"
    - lineNumber: 148
      expression: "isFullEnumerable(source)"
      range: "(148,7)-(148,30)"
      evaluatedAs: true
    calledSomeStaticInternalMethod: true
  - pathId: "path9"
    testPathName: "fromWhenIsFullEnumerableNotSourceAndDefaultBranch"
    modelFingerprint: "4E5B52476E432566697F4548F6CE5220"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "source"
      modelFingerprint: "4EEC89FD0810FEAC175C5864B8A5018E"
      valueUuid: "source"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B907147BC5F114492BEA10D8629275A9"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid52):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "34E6984FDE64098C256FAE5F915CE812"
      valueUuid: "source"
      methodExercised:
        expression: "getName():name"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "8AC29AB4167FF6553911FFF27F07B9E1"
      valueUuid: "source"
      methodExercised:
        expression: "getSource():source2"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "8AC29AB4167FF6553911FFF27F07B9E1"
      valueUuid: "source"
      methodExercised:
        expression: "getSource():source2"
    - type: "LOCAL_VARIABLE"
      name: "rootSource"
      modelFingerprint: "8AC29AB4167FF6553911FFF27F07B9E1"
      valueUuid: "source"
      methodExercised:
        expression: "getSource():source2"
    - type: "LOCAL_VARIABLE"
      name: "rootSource"
      modelFingerprint: "8AC29AB4167FF6553911FFF27F07B9E1"
      valueUuid: "source"
      methodExercised:
        expression: "getSource():source2"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "8784815DD84E4EC4E2C1B6D842C588E6"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid53):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "22341A279BA87BBAE48FD72643F2E113"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "isTrue(expression:uniqueUuid54,message:uniqueUuid55):void3"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A3708820504CE8B97F9646F3CFC18E76"
      valueUuid: "springConfigurationPropertySource"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid52"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "systemEnvironment"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "EXCEPTION"
      valueType: "java.lang.UnsupportedOperationException"
      uuid: "source2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "EXCEPTION"
      valueType: "java.lang.UnsupportedOperationException"
      uuid: "source2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "EXCEPTION"
      valueType: "java.lang.UnsupportedOperationException"
      uuid: "source2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "EXCEPTION"
      valueType: "java.lang.UnsupportedOperationException"
      uuid: "source2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "PropertySource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid53"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid54"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Mappers must contain at least one item"
      valueType: "java.lang.String"
      uuid: "uniqueUuid55"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
        parameters:
        - name: "propertySource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.SystemEnvironmentPropertySource"
            uuid: "source"
        - name: "mappers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "OBJECT"
                  content: !<static_field_return>
                    target: "org.springframework.boot.context.properties.source.SystemEnvironmentPropertyMapper"
                    fieldName: "INSTANCE"
                  valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
                  uuid: "propertyMapper2"
                1:
                  sapientType: "OBJECT"
                  content: !<static_field_return>
                    target: "org.springframework.boot.context.properties.source.DefaultPropertyMapper"
                    fieldName: "INSTANCE"
                  valueType: "org.springframework.boot.context.properties.source.PropertyMapper"
                  uuid: "propertyMapper"
            valueType: "org.springframework.boot.context.properties.source.PropertyMapper[]"
            uuid: "propertyMapperArray2"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySource"
      uuid: "springConfigurationPropertySource"
      fixed: true
    branches:
    - lineNumber: 155
      expression: "source instanceof SystemEnvironmentPropertySource"
      range: "(155,7)-(155,55)"
      evaluatedAs: true
      internalMethodName: "getPropertyMappers"
    - lineNumber: 163
      expression: "StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME.equals(name)"
      range: "(163,10)-(163,81)"
      evaluatedAs: true
      internalMethodName: "hasSystemEnvironmentName"
    - lineNumber: 155
      expression: "hasSystemEnvironmentName(source)"
      range: "(155,60)-(155,91)"
      evaluatedAs: true
      internalMethodName: "getPropertyMappers"
    - lineNumber: 182
      expression: "source.getSource() != null"
      range: "(182,10)-(182,35)"
      evaluatedAs: true
      internalMethodName: "getRootSource"
    - lineNumber: 182
      expression: "source.getSource() instanceof PropertySource"
      range: "(182,40)-(182,83)"
      evaluatedAs: false
      internalMethodName: "getRootSource"
    - lineNumber: 169
      expression: "rootSource.getSource() instanceof Map"
      range: "(169,7)-(169,43)"
      evaluatedAs: true
      internalMethodName: "isFullEnumerable"
    - lineNumber: 174
      expression: "catch-exception (UnsupportedOperationException)"
      range: "(174,4)-(174,42)"
      evaluatedAs: true
      internalMethodName: "isFullEnumerable"
    - lineNumber: 148
      expression: "isFullEnumerable(source)"
      range: "(148,7)-(148,30)"
      evaluatedAs: false
    - lineNumber: 71
      expression: "branch expression (line 71)"
      range: "(71,1)-(71,200)"
      evaluatedAs: false
      internalMethodName: "<init>"
    calledSomeStaticInternalMethod: true
    catchBlockExercised:
      idExternalInstruction: 13
      id: 3
      catchExceptions:
      - "java.lang.UnsupportedOperationException"
