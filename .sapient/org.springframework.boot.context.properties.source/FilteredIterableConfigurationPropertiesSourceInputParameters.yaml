---
modelFingerprint: "B439A71C629051FBDF5024A2E2B6E956"
targetClass:
  fullClassName: "org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSource"
methods:
- method:
    name: "stream"
    sourceCodeSignature: "Stream<ConfigurationPropertyName> stream()"
    returnType: "java.util.stream.Stream"
    genericReturnType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
    instructionFingerprint: "E0824FFDB439F0DBA881FCF58381BD98"
  paths:
  - pathId: "path1"
    testPathName: "streamTest"
    constructorSignature: "<init>(org.springframework.boot.context.properties.source.IterableConfigurationPropertySource,java.util.function.Predicate<org.springframework.boot.context.properties.source.ConfigurationPropertyName>)\
      \ : void"
    modelFingerprint: "C706BD5CFD54461790C458D8DF38EF53"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "DB4E4F60E53619548B50A2BE3ACF42BD"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "3CFD9DF697674DB699F51FEF46E0D6E5"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "DF859A74E0E2293BF1B53ED0BE363C8C"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:filter,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "73E6093B75BC00507D410B0D1E2A78C7"
      methodExercised:
        expression: "getSource():iterableConfigurationPropertySource"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "5B4C2C628307A1C10229BB5BDB1F7C5E"
      valueUuid: "iterableConfigurationPropertySource"
      methodExercised:
        expression: "stream():stream"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B55B1820CF1A5590EBC1A63BF03E1217"
      valueUuid: "stream2"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.stream.Stream.filter(java.util.function.Predicate<org.springframework.boot.context.properties.source.ConfigurationPropertyName>)\
        \ : java.util.stream.Stream<org.springframework.boot.context.properties.source.ConfigurationPropertyName>"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSource"
        parameters:
        - name: "source"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.IterableConfigurationPropertySource"
            uuid: "source"
        - name: "filter"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Predicate"
            uuid: "filter"
      valueType: "org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.IterableConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Predicate"
      uuid: "filter"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Filter must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.IterableConfigurationPropertySource"
      uuid: "iterableConfigurationPropertySource"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.IterableConfigurationPropertySource"
      uuid: "iterableConfigurationPropertySource"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.stream.Stream"
        method: "empty"
        methodParameters: []
      valueType: "java.util.stream.Stream"
      uuid: "stream"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.stream.Stream"
        method: "empty"
        methodParameters: []
      valueType: "java.util.stream.Stream"
      uuid: "stream2"
- method:
    name: "getSource"
    sourceCodeSignature: "IterableConfigurationPropertySource getSource()"
    returnType: "org.springframework.boot.context.properties.source.IterableConfigurationPropertySource"
    instructionFingerprint: "1B6B071F09DBC479D44A3A0043FB6CF1"
  paths:
  - pathId: "path1"
    testPathName: "getSource1Test"
    constructorSignature: "<init>(org.springframework.boot.context.properties.source.IterableConfigurationPropertySource,java.util.function.Predicate<org.springframework.boot.context.properties.source.ConfigurationPropertyName>)\
      \ : void"
    modelFingerprint: "7AB475AE295CEE911A9231EBBA991EB2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "DB4E4F60E53619548B50A2BE3ACF42BD"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "3CFD9DF697674DB699F51FEF46E0D6E5"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid3):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "DF859A74E0E2293BF1B53ED0BE363C8C"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:filter,message:uniqueUuid4):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "1E9862F51E12F3DCF416FA740B143D04"
      valueUuid: "source"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSource"
        parameters:
        - name: "source"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.IterableConfigurationPropertySource"
            uuid: "source"
        - name: "filter"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Predicate"
            uuid: "filter"
      valueType: "org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.IterableConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Predicate"
      uuid: "filter"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Filter must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.IterableConfigurationPropertySource"
      uuid: "source"
- method:
    name: "containsDescendantOf"
    sourceCodeSignature: "ConfigurationPropertyState containsDescendantOf(ConfigurationPropertyName\
      \ name)"
    returnType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
    parameters:
    - name: "name"
      type: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
    instructionFingerprint: "9562879F28A279D78AC20C7151252C30"
  paths:
  - pathId: "path1"
    testPathName: "containsDescendantOfTest"
    constructorSignature: "<init>(org.springframework.boot.context.properties.source.IterableConfigurationPropertySource,java.util.function.Predicate<org.springframework.boot.context.properties.source.ConfigurationPropertyName>)\
      \ : void"
    modelFingerprint: "EE30059CAB6A22D87D575BA8E824E95A"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "DB4E4F60E53619548B50A2BE3ACF42BD"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "79AA751E8DEF85DAAC2666FA9A7E6307"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "3CFD9DF697674DB699F51FEF46E0D6E5"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid5):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "DF859A74E0E2293BF1B53ED0BE363C8C"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:filter,message:uniqueUuid6):void2"
        staticAccess: true
    - type: "STATIC"
      name: "ConfigurationPropertyState.class"
      modelFingerprint: "8D5B8A32E2C6C645AAF6831098E7E09E"
      valueUuid: "ConfigurationPropertyState.class"
      methodExercised:
        expression: "search(source:targetClassObject,predicate:uniqueUuid7):configurationPropertyState"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0DED34E20CAAA8BB167861240C930D80"
      valueUuid: "configurationPropertyState"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSource"
        parameters:
        - name: "source"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.IterableConfigurationPropertySource"
            uuid: "source"
        - name: "filter"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Predicate"
            uuid: "filter"
      valueType: "org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.IterableConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Predicate"
      uuid: "filter"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Filter must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "ConfigurationPropertyState.class"
    - sapientType: "ENUM"
      content: !<regular>
        value: "PRESENT"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "configurationPropertyState"
    - sapientType: "THIS"
      valueType: "org.springframework.boot.context.properties.source.FilteredIterableConfigurationPropertiesSource"
      uuid: "targetClassObject"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Predicate"
      uuid: "uniqueUuid7"
    - sapientType: "ENUM"
      content: !<regular>
        value: "PRESENT"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "configurationPropertyState"
