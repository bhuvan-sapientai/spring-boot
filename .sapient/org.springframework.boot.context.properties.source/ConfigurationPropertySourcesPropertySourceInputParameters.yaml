---
modelFingerprint: "1F50CB9276AB3BFA6759079F7EA7EBBE"
targetClass:
  fullClassName: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
methods:
- method:
    name: "containsProperty"
    sourceCodeSignature: "boolean containsProperty(String name)"
    returnType: "boolean"
    parameters:
    - name: "name"
      type: "java.lang.String"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "58C0E1BA4F2FF4E69D97F7BA25BC1D17"
  paths:
  - pathId: "path1"
    testPathName: "containsPropertyWhenFindConfigurationPropertyNameIsNotNull"
    constructorSignature: "<init>(java.lang.String,java.lang.Iterable<org.springframework.boot.context.properties.source.ConfigurationPropertySource>)\
      \ : void"
    modelFingerprint: "C97D02A2C292870EAB0C97F0B0B6F051"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "8554FC68BB8B4B5C7FA6A5246BE6E3E6"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "63F0AEB18588FDD50129913BF544F767"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4A0BE7D0089781EFFA3F43FDBBE8F682"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "11FB6EE58D3B7301E02EDA7BB742CA52"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:name,returnNullIfInvalid:uniqueUuid3):configurationPropertyName"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "6259E9DA5B683C1C678903F9B69C3BF0"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "source"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
            uuid: "source"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 42
      expression: "findConfigurationProperty(name) != null"
      range: "(42,10)-(42,48)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "containsPropertyWhenFindConfigurationPropertyNameIsNull"
    constructorSignature: "<init>(java.lang.String,java.lang.Iterable<org.springframework.boot.context.properties.source.ConfigurationPropertySource>)\
      \ : void"
    modelFingerprint: "0F93287796DEAE10BE0DE018349A6B02"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "8554FC68BB8B4B5C7FA6A5246BE6E3E6"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "63F0AEB18588FDD50129913BF544F767"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4A0BE7D0089781EFFA3F43FDBBE8F682"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid4):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "11FB6EE58D3B7301E02EDA7BB742CA52"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid5):void2"
        staticAccess: true
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:name,returnNullIfInvalid:uniqueUuid6):configurationPropertyName"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "D8777AC25554E8EA506895A26FBCDF69"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5633A2B0C967879105766C98D64A3959"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "source"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
            uuid: "source"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 42
      expression: "findConfigurationProperty(name) != null"
      range: "(42,10)-(42,48)"
      evaluatedAs: false
  - pathId: "path3"
    testPathName: "containsPropertyWhenCaughtExceptionAndFindConfigurationPropertyNameIsNull"
    constructorSignature: "<init>(java.lang.String,java.lang.Iterable<org.springframework.boot.context.properties.source.ConfigurationPropertySource>)\
      \ : void"
    modelFingerprint: "69096D97C83FF7773E967D533303749B"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "8554FC68BB8B4B5C7FA6A5246BE6E3E6"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "63F0AEB18588FDD50129913BF544F767"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4A0BE7D0089781EFFA3F43FDBBE8F682"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "11FB6EE58D3B7301E02EDA7BB742CA52"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:name,returnNullIfInvalid:uniqueUuid3):configurationPropertyName"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "FAE9C8D9AC7305711663FE06AE17B197"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5633A2B0C967879105766C98D64A3959"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "source"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
            uuid: "source"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.RuntimeException"
        parameters: []
      valueType: "java.lang.RuntimeException"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 60
      expression: "catch-exception (Exception)"
      range: "(60,3)-(60,21)"
      evaluatedAs: true
      internalMethodName: "findConfigurationProperty"
    - lineNumber: 42
      expression: "findConfigurationProperty(name) != null"
      range: "(42,10)-(42,48)"
      evaluatedAs: false
    catchBlockExercised:
      idExternalInstruction: 4
      id: 1
      catchExceptions:
      - "java.lang.Exception"
- method:
    name: "getProperty"
    sourceCodeSignature: "Object getProperty(String name)"
    returnType: "java.lang.Object"
    parameters:
    - name: "name"
      type: "java.lang.String"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "D17F59DB5BB8B2F3398AE07D928409F2"
  paths:
  - pathId: "path1"
    testPathName: "getPropertyWhenConfigurationPropertyIsNotNull"
    constructorSignature: "<init>(java.lang.String,java.lang.Iterable<org.springframework.boot.context.properties.source.ConfigurationPropertySource>)\
      \ : void"
    modelFingerprint: "3834DF089A94BF4B18020E35C1424507"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "8554FC68BB8B4B5C7FA6A5246BE6E3E6"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "63F0AEB18588FDD50129913BF544F767"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4A0BE7D0089781EFFA3F43FDBBE8F682"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid10):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "11FB6EE58D3B7301E02EDA7BB742CA52"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid11):void2"
        staticAccess: true
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:name,returnNullIfInvalid:uniqueUuid12):configurationPropertyName"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "3115BC01DF19D540C1E5F933B9F56B97"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "LOCAL_VARIABLE"
      name: "configurationProperty"
      modelFingerprint: "18E47D2825E09CEDCD872E509293E354"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getValue():value"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A5457F8C44AF90FDF3ACB1B2051E1175"
      valueUuid: "value"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "source"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
            uuid: "source"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid12"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "value"
    branches:
    - lineNumber: 48
      expression: "configurationProperty != null"
      range: "(48,11)-(48,39)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "getPropertyWhenConfigurationPropertyIsNull"
    constructorSignature: "<init>(java.lang.String,java.lang.Iterable<org.springframework.boot.context.properties.source.ConfigurationPropertySource>)\
      \ : void"
    modelFingerprint: "C6CD3C04F50DAC5D794E24B6111078FA"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "8554FC68BB8B4B5C7FA6A5246BE6E3E6"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "63F0AEB18588FDD50129913BF544F767"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4A0BE7D0089781EFFA3F43FDBBE8F682"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid13):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "11FB6EE58D3B7301E02EDA7BB742CA52"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid14):void2"
        staticAccess: true
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:name,returnNullIfInvalid:uniqueUuid15):configurationPropertyName"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "D8777AC25554E8EA506895A26FBCDF69"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B5832848421B6892B8D06BE61ADCD847"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "source"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
            uuid: "source"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid13"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid14"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid15"
      fixed: true
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
      fixed: true
    branches:
    - lineNumber: 48
      expression: "configurationProperty != null"
      range: "(48,11)-(48,39)"
      evaluatedAs: false
  - pathId: "path3"
    testPathName: "getPropertyWhenCaughtExceptionAndConfigurationPropertyIsNull"
    constructorSignature: "<init>(java.lang.String,java.lang.Iterable<org.springframework.boot.context.properties.source.ConfigurationPropertySource>)\
      \ : void"
    modelFingerprint: "CFF84B0D9526D07282559B99321061B4"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "8554FC68BB8B4B5C7FA6A5246BE6E3E6"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "63F0AEB18588FDD50129913BF544F767"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4A0BE7D0089781EFFA3F43FDBBE8F682"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "11FB6EE58D3B7301E02EDA7BB742CA52"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:name,returnNullIfInvalid:uniqueUuid3):configurationPropertyName"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "FAE9C8D9AC7305711663FE06AE17B197"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B5832848421B6892B8D06BE61ADCD847"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "source"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
            uuid: "source"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.RuntimeException"
        parameters: []
      valueType: "java.lang.RuntimeException"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
      fixed: true
    branches:
    - lineNumber: 60
      expression: "catch-exception (Exception)"
      range: "(60,3)-(60,21)"
      evaluatedAs: true
      internalMethodName: "findConfigurationProperty"
    - lineNumber: 48
      expression: "configurationProperty != null"
      range: "(48,11)-(48,39)"
      evaluatedAs: false
    catchBlockExercised:
      idExternalInstruction: 4
      id: 1
      catchExceptions:
      - "java.lang.Exception"
- method:
    name: "getOrigin"
    sourceCodeSignature: "Origin getOrigin(String name)"
    returnType: "org.springframework.boot.origin.Origin"
    parameters:
    - name: "name"
      type: "java.lang.String"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "AA57095A9C7AF778E439B214898E7497"
  paths:
  - pathId: "path1"
    testPathName: "getOriginTest"
    constructorSignature: "<init>(java.lang.String,java.lang.Iterable<org.springframework.boot.context.properties.source.ConfigurationPropertySource>)\
      \ : void"
    modelFingerprint: "AF3AA4DF21FDEA4587A4BA254B99EB05"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "8554FC68BB8B4B5C7FA6A5246BE6E3E6"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "63F0AEB18588FDD50129913BF544F767"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4A0BE7D0089781EFFA3F43FDBBE8F682"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid19):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "11FB6EE58D3B7301E02EDA7BB742CA52"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid20):void2"
        staticAccess: true
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:name,returnNullIfInvalid:uniqueUuid21):configurationPropertyName"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "6259E9DA5B683C1C678903F9B69C3BF0"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "STATIC"
      name: "Origin.class"
      modelFingerprint: "D6597577F88757A1C6DAAEED4F001521"
      valueUuid: "Origin.class"
      methodExercised:
        expression: "from(source:configurationProperty):origin"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5692B041B63EBC5E48D608049DCE404F"
      valueUuid: "origin"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "source"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
            uuid: "source"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid19"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid20"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid21"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "Origin.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "origin"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "origin"
  - pathId: "path2"
    testPathName: "getOriginWhenCaughtException"
    constructorSignature: "<init>(java.lang.String,java.lang.Iterable<org.springframework.boot.context.properties.source.ConfigurationPropertySource>)\
      \ : void"
    modelFingerprint: "CE12BAA1E7D3B3EBD1A587EA574B223A"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "8554FC68BB8B4B5C7FA6A5246BE6E3E6"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "63F0AEB18588FDD50129913BF544F767"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4A0BE7D0089781EFFA3F43FDBBE8F682"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "11FB6EE58D3B7301E02EDA7BB742CA52"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:name,returnNullIfInvalid:uniqueUuid3):configurationPropertyName"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "FAE9C8D9AC7305711663FE06AE17B197"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "STATIC"
      name: "Origin.class"
      modelFingerprint: "03FC2C5058F294F29DEE7AC28898FDFB"
      valueUuid: "Origin.class"
      methodExercised:
        expression: "from(source:configurationProperty2):origin"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5692B041B63EBC5E48D608049DCE404F"
      valueUuid: "origin"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "source"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
            uuid: "source"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.RuntimeException"
        parameters: []
      valueType: "java.lang.RuntimeException"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "Origin.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "origin"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "origin"
    branches:
    - lineNumber: 60
      expression: "catch-exception (Exception)"
      range: "(60,3)-(60,21)"
      evaluatedAs: true
      internalMethodName: "findConfigurationProperty"
    catchBlockExercised:
      idExternalInstruction: 4
      id: 1
      catchExceptions:
      - "java.lang.Exception"
- method:
    name: "findConfigurationProperty"
    sourceCodeSignature: "ConfigurationProperty findConfigurationProperty(ConfigurationPropertyName\
      \ name)"
    returnType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
    parameters:
    - name: "name"
      type: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
    instructionFingerprint: "F24A4A0ECCD653666DAD6F4934DCE2B2"
  paths:
  - pathId: "path1"
    testPathName: "findConfigurationProperty1WhenNameIsNull"
    constructorSignature: "<init>(java.lang.String,java.lang.Iterable<org.springframework.boot.context.properties.source.ConfigurationPropertySource>)\
      \ : void"
    modelFingerprint: "D10790DD1DA023BA996AEC7389CE35B1"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "8554FC68BB8B4B5C7FA6A5246BE6E3E6"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "B4BBCA6358391A4D4ED455D707A0B704"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4A0BE7D0089781EFFA3F43FDBBE8F682"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid25):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "11FB6EE58D3B7301E02EDA7BB742CA52"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid26):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "AF7DE2B64986230ACFA5A65E259E5AB7"
      valueUuid: "configurationProperty"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "source"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
            uuid: "source"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid25"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid26"
      fixed: true
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
      fixed: true
    branches:
    - lineNumber: 66
      expression: "name == null"
      range: "(66,7)-(66,18)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "findConfigurationProperty1WhenConfigurationPropertyIsNotNull"
    constructorSignature: "<init>(java.lang.String,java.lang.Iterable<org.springframework.boot.context.properties.source.ConfigurationPropertySource>)\
      \ : void"
    modelFingerprint: "22A66335087454E5627172D32B399EA5"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "73631FDBAC1DAD3D544D140A78FAB96D"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "79AA751E8DEF85DAAC2666FA9A7E6307"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4A0BE7D0089781EFFA3F43FDBBE8F682"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid27):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "522020383896C69FE7F4FB1D1A21411A"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid28):void2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "configurationPropertySource"
      modelFingerprint: "0FE6D21107DC264D5EA76518FBDA307E"
      valueUuid: "object"
      methodExercised:
        expression: "getConfigurationProperty(name:name):configurationProperty"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "88BB7180F05BA5E7BFB6995FFC0A819F"
      valueUuid: "configurationProperty"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "source"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.ArrayList"
              parameters: []
              values:
              - sapientType: "MOCK"
                valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
                uuid: "object"
                collectionUuid: "source"
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
            uuid: "source"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid27"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
          uuid: "object"
          collectionUuid: "source"
      valueType: "java.lang.Iterable"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid28"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "object"
      collectionUuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    branches:
    - lineNumber: 66
      expression: "name == null"
      range: "(66,7)-(66,18)"
      evaluatedAs: false
    - lineNumber: 69
      expression: "for-each(getSource())"
      range: "(69,66)-(69,76)"
      evaluatedAs: true
    - lineNumber: 71
      expression: "configurationProperty != null"
      range: "(71,8)-(71,36)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "findConfigurationProperty1WhenConfigurationPropertyIsNull"
    constructorSignature: "<init>(java.lang.String,java.lang.Iterable<org.springframework.boot.context.properties.source.ConfigurationPropertySource>)\
      \ : void"
    modelFingerprint: "C039437565CBE425F334F3EE781FD904"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "73631FDBAC1DAD3D544D140A78FAB96D"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "79AA751E8DEF85DAAC2666FA9A7E6307"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4A0BE7D0089781EFFA3F43FDBBE8F682"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid29):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "522020383896C69FE7F4FB1D1A21411A"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:source,message:uniqueUuid30):void2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "configurationPropertySource"
      modelFingerprint: "1FF3F861559073B9BD9F1F711304B328"
      valueUuid: "object"
      methodExercised:
        expression: "getConfigurationProperty(name:name):configurationProperty"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "AF7DE2B64986230ACFA5A65E259E5AB7"
      valueUuid: "configurationProperty2"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "source"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.ArrayList"
              parameters: []
              values:
              - sapientType: "MOCK"
                valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
                uuid: "object"
                collectionUuid: "source"
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
            uuid: "source"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid29"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
          uuid: "object"
          collectionUuid: "source"
      valueType: "java.lang.Iterable"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid30"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "object"
      collectionUuid: "source"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty2"
      fixed: true
    branches:
    - lineNumber: 66
      expression: "name == null"
      range: "(66,7)-(66,18)"
      evaluatedAs: false
    - lineNumber: 69
      expression: "for-each(getSource())"
      range: "(69,66)-(69,76)"
      evaluatedAs: true
    - lineNumber: 71
      expression: "configurationProperty != null"
      range: "(71,8)-(71,36)"
      evaluatedAs: false
