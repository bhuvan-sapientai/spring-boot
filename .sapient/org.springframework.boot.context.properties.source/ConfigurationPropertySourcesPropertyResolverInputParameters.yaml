---
modelFingerprint: "883C01444E7540EBA5DFD92A387AA85F"
targetClass:
  fullClassName: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
methods:
- method:
    name: "containsProperty"
    sourceCodeSignature: "boolean containsProperty(String key)"
    returnType: "boolean"
    parameters:
    - name: "key"
      type: "java.lang.String"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "055DAD302633BB00B51938497990868D"
  paths:
  - pathId: "path7"
    testPathName: "containsPropertyWhenAttachedIsNullAndThisDefaultResolverNotContainsPropertyKey"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "48BDAD74260B08B99125288DD96BA802"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "0C134D160E282AFD9B7598682316FF52"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "FIELD"
      name: "defaultResolver"
      modelFingerprint: "13C649DEAC9902C51591E1585BFEA2EB"
      valueUuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      methodExercised:
        expression: "containsProperty(key:key):boolean2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5633A2B0C967879105766C98D64A3959"
      valueUuid: "boolean2"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.defaultResolver.containsProperty(key);"
      lineNumber: 55
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: defaultResolver - Method: containsProperty"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      fixed: true
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
      uuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
      fixed: true
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: false
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: false
      internalMethodName: "getAttached"
    - lineNumber: 45
      expression: "attached != null"
      range: "(45,7)-(45,22)"
      evaluatedAs: false
    - lineNumber: 55
      expression: "this.defaultResolver.containsProperty(key)"
      range: "(55,10)-(55,51)"
      evaluatedAs: false
  - pathId: "path1"
    testPathName: "containsPropertyWhenAttachedFindConfigurationPropertyNameIsNotNull"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "F73CCEF546163A2407420F288327B122"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid1):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "3D4CFC8C30A15D60DF6703A4C2EF9FA8"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 45
      expression: "attached != null"
      range: "(45,7)-(45,22)"
      evaluatedAs: true
    - lineNumber: 47
      expression: "name != null"
      range: "(47,8)-(47,19)"
      evaluatedAs: true
    - lineNumber: 49
      expression: "attached.findConfigurationProperty(name) != null"
      range: "(49,13)-(49,60)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "containsPropertyWhenAttachedFindConfigurationPropertyNameIsNull"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "EBB2194D26D8FD54BD27F016E1F72A2B"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid2):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "D31FB1FC45652E8280E434734C8A9380"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5633A2B0C967879105766C98D64A3959"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 45
      expression: "attached != null"
      range: "(45,7)-(45,22)"
      evaluatedAs: true
    - lineNumber: 47
      expression: "name != null"
      range: "(47,8)-(47,19)"
      evaluatedAs: true
    - lineNumber: 49
      expression: "attached.findConfigurationProperty(name) != null"
      range: "(49,13)-(49,60)"
      evaluatedAs: false
  - pathId: "path3"
    testPathName: "containsPropertyWhenThisDefaultResolverContainsPropertyKey"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "9B79CCC4E1415DDAC2EA54D73018AA52"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "B735E1C00D7817950481336AB30FA7B8"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid3):configurationPropertyName"
        staticAccess: true
    - type: "FIELD"
      name: "defaultResolver"
      modelFingerprint: "1A6CEF566B90A250EC62A0613C6063A3"
      valueUuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      methodExercised:
        expression: "containsProperty(key:key):boolean3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "boolean3"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.defaultResolver.containsProperty(key);"
      lineNumber: 55
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: defaultResolver - Method: containsProperty"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
      uuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 45
      expression: "attached != null"
      range: "(45,7)-(45,22)"
      evaluatedAs: true
    - lineNumber: 47
      expression: "name != null"
      range: "(47,8)-(47,19)"
      evaluatedAs: false
    - lineNumber: 55
      expression: "this.defaultResolver.containsProperty(key)"
      range: "(55,10)-(55,51)"
      evaluatedAs: true
  - pathId: "path8"
    testPathName: "containsPropertyWhenCaughtExceptionAndThisDefaultResolverContainsPropertyKey"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "71B35974647DC3C0C5992AEE82177B86"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid4):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "3D4CFC8C30A15D60DF6703A4C2EF9FA8"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "FIELD"
      name: "defaultResolver"
      modelFingerprint: "1A6CEF566B90A250EC62A0613C6063A3"
      valueUuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      methodExercised:
        expression: "containsProperty(key:key):boolean3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "boolean3"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.defaultResolver.containsProperty(key);"
      lineNumber: 55
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: defaultResolver - Method: containsProperty"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
      uuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 45
      expression: "attached != null"
      range: "(45,7)-(45,22)"
      evaluatedAs: true
    - lineNumber: 47
      expression: "name != null"
      range: "(47,8)-(47,19)"
      evaluatedAs: true
    - lineNumber: 49
      expression: "attached.findConfigurationProperty(name) != null"
      range: "(49,13)-(49,60)"
      evaluatedAs: true
    - lineNumber: 51
      expression: "catch-exception (Exception)"
      range: "(51,5)-(51,23)"
      evaluatedAs: true
    - lineNumber: 55
      expression: "this.defaultResolver.containsProperty(key)"
      range: "(55,10)-(55,51)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path9"
    testPathName: "containsPropertyWhenCaughtExceptionAndThisDefaultResolverNotContainsPropertyKey"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "8B800BCB8CCBE68758003C7D978AAC3A"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid5):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "3D4CFC8C30A15D60DF6703A4C2EF9FA8"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "FIELD"
      name: "defaultResolver"
      modelFingerprint: "13C649DEAC9902C51591E1585BFEA2EB"
      valueUuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      methodExercised:
        expression: "containsProperty(key:key):boolean3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5633A2B0C967879105766C98D64A3959"
      valueUuid: "boolean3"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.defaultResolver.containsProperty(key);"
      lineNumber: 55
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: defaultResolver - Method: containsProperty"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
      uuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 45
      expression: "attached != null"
      range: "(45,7)-(45,22)"
      evaluatedAs: true
    - lineNumber: 47
      expression: "name != null"
      range: "(47,8)-(47,19)"
      evaluatedAs: true
    - lineNumber: 49
      expression: "attached.findConfigurationProperty(name) != null"
      range: "(49,13)-(49,60)"
      evaluatedAs: true
    - lineNumber: 51
      expression: "catch-exception (Exception)"
      range: "(51,5)-(51,23)"
      evaluatedAs: true
    - lineNumber: 55
      expression: "this.defaultResolver.containsProperty(key)"
      range: "(55,10)-(55,51)"
      evaluatedAs: false
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
- method:
    name: "getProperty"
    sourceCodeSignature: "String getProperty(String key)"
    returnType: "java.lang.String"
    parameters:
    - name: "key"
      type: "java.lang.String"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "234ABB419CFA6DE53627E0E25FFF7B47"
  paths:
  - pathId: "path10"
    testPathName: "getPropertyWhenResolveNestedPlaceholdersAndValueNotInstanceOfString"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "5BC3895735BC54E79583CF48105E6B48"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "0C134D160E282AFD9B7598682316FF52"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "FIELD"
      name: "defaultResolver"
      modelFingerprint: "32FC8037BA3CD911B08E59F53F2CA25C"
      valueUuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      methodExercised:
        expression: "getProperty(key:key,targetValueType:uniqueUuid6,resolveNestedPlaceholders:uniqueUuid7):object"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "185AA38A788EC647F102B71A2DF0C0D9"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignableValue(type:uniqueUuid8,value:object):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "DefaultConversionService.class"
      modelFingerprint: "F52B8F76298A968A8655D1048F47C30A"
      valueUuid: "DefaultConversionService.class"
      methodExercised:
        expression: "getSharedInstance():conversionService"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "conversionServiceToUse"
      modelFingerprint: "D4640BEDD15041A25900F60161B0114C"
      valueUuid: "conversionService"
      methodExercised:
        expression: "convert(source:object,targetType:uniqueUuid9):object2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "461F15B21EBF768914604C727818489B"
      valueUuid: "object2"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.defaultResolver.getProperty(key, Object.class, false);"
      lineNumber: 97
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: defaultResolver - Method: getProperty"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      fixed: true
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
      uuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.support.DefaultConversionService"
      uuid: "DefaultConversionService.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_convert1"
      valueType: "java.lang.String"
      uuid: "object2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_convert1"
      valueType: "java.lang.String"
      uuid: "object2"
      explicitCastNeeded: true
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: false
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: false
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: false
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "resolveNestedPlaceholders"
      range: "(78,7)-(78,31)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "value instanceof String string"
      range: "(78,36)-(78,65)"
      evaluatedAs: false
      internalMethodName: "getProperty"
  - pathId: "path6"
    testPathName: "getPropertyWhenConfigurationPropertyIsNullAndValueIsNull"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "926D7911B43E5CCC8E2E6227AAD6F317"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid12):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "D31FB1FC45652E8280E434734C8A9380"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "494333D8A9619E3B4E57274C75B778A3"
      valueUuid: "object3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid12"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "object3"
      fixed: true
      explicitCastNeeded: true
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: false
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: true
      internalMethodName: "getProperty"
  - pathId: "path11"
    testPathName: "getPropertyWhenCaughtExceptionAndValueIsNull"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "5A31403EA098BB039A8ADB3648E292DF"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid13):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "0E84FD56767080CCB61AF7E9B002EC7D"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "LOCAL_VARIABLE"
      name: "configurationProperty"
      modelFingerprint: "18E47D2825E09CEDCD872E509293E354"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getValue():value"
    - type: "FIELD"
      name: "defaultResolver"
      modelFingerprint: "B10ADF26665132AE69584767226DDAD2"
      valueUuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      methodExercised:
        expression: "getProperty(key:key,targetValueType:uniqueUuid14,resolveNestedPlaceholders:uniqueUuid15):object3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "494333D8A9619E3B4E57274C75B778A3"
      valueUuid: "object4"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.defaultResolver.getProperty(key, Object.class, false);"
      lineNumber: 97
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: defaultResolver - Method: getProperty"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid13"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
      uuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      fixed: true
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "uniqueUuid14"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid15"
      fixed: true
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "object4"
      fixed: true
      explicitCastNeeded: true
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 93
      expression: "catch-exception (Exception)"
      range: "(93,5)-(93,23)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    catchBlockExercised:
      idExternalInstruction: 4
      id: 2
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path4"
    testPathName: "getPropertyWhenValueInstanceOfString"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "550F9B3E0209775A8E6DDCF9A2FF5628"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid16):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "DABDB9563BF374E2AF3A358E6D6C2569"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "LOCAL_VARIABLE"
      name: "configurationProperty"
      modelFingerprint: "58836722B039F43DC4F2682A24908052"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getValue():value"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "FB59684752A7B5B8D0B4401C7181EF23"
      methodExercised:
        expression: "resolveRequiredPlaceholders(text:value):string4"
        throwsExceptions:
        - "java.lang.IllegalArgumentException"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "D93AF9210BD5EF48F6A69CA1A31AE44E"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignableValue(type:uniqueUuid17,value:string4):boolean5"
        staticAccess: true
    - type: "STATIC"
      name: "DefaultConversionService.class"
      modelFingerprint: "F52B8F76298A968A8655D1048F47C30A"
      valueUuid: "DefaultConversionService.class"
      methodExercised:
        expression: "getSharedInstance():conversionService"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "conversionServiceToUse"
      modelFingerprint: "DD21483275399129E3248CBFBE8E7921"
      valueUuid: "conversionService"
      methodExercised:
        expression: "convert(source:string4,targetType:uniqueUuid18):object3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D6E347D87840A3F290EBEE9195DF7973"
      valueUuid: "object3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid16"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "value"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_resolveRequiredPlaceholders1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "value"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid17"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_resolveRequiredPlaceholders1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.support.DefaultConversionService"
      uuid: "DefaultConversionService.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "object3"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_resolveRequiredPlaceholders1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid18"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "object3"
      explicitCastNeeded: true
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "resolveNestedPlaceholders"
      range: "(78,7)-(78,31)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "value instanceof String string"
      range: "(78,36)-(78,65)"
      evaluatedAs: true
      internalMethodName: "getProperty"
  - pathId: "path2"
    testPathName: "getPropertyWhenResolveNestedPlaceholdersAndValueInstanceOfString"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "9F14BDDEA2613DC27ACFD6794394B2D6"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid21):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "8F75C3DD4A0CCDB561BBD44D21A596AA"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "LOCAL_VARIABLE"
      name: "configurationProperty"
      modelFingerprint: "1A31066CC753E74FC25F1DFCAD84522A"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getValue():value"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "E26C8F19DED9453FB0C21FEEE8091DAA"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignableValue(type:uniqueUuid22,value:value):boolean5"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D446A609419428DDEAA49A58091F3986"
      valueUuid: "value"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid21"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "value"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid22"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "value"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "value"
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "resolveNestedPlaceholders"
      range: "(78,7)-(78,31)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "value instanceof String string"
      range: "(78,36)-(78,65)"
      evaluatedAs: true
      internalMethodName: "getProperty"
  - pathId: "path14"
    testPathName: "getPropertyWhenCaughtExceptionAndValueIsNotNullAndResolveNestedPlaceholdersAndValueInstanceOfString"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "8B1A652E2BE1E5EA42B899838686F837"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid23):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "0E84FD56767080CCB61AF7E9B002EC7D"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "LOCAL_VARIABLE"
      name: "configurationProperty"
      modelFingerprint: "18E47D2825E09CEDCD872E509293E354"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getValue():value"
    - type: "FIELD"
      name: "defaultResolver"
      modelFingerprint: "7638C23AAF431817A7EC8997D716B1C7"
      valueUuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      methodExercised:
        expression: "getProperty(key:key,targetValueType:uniqueUuid24,resolveNestedPlaceholders:uniqueUuid25):object3"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "FB59684752A7B5B8D0B4401C7181EF23"
      methodExercised:
        expression: "resolveRequiredPlaceholders(text:object3):string4"
        throwsExceptions:
        - "java.lang.IllegalArgumentException"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "D93AF9210BD5EF48F6A69CA1A31AE44E"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignableValue(type:uniqueUuid26,value:string4):boolean5"
        staticAccess: true
    - type: "STATIC"
      name: "DefaultConversionService.class"
      modelFingerprint: "F52B8F76298A968A8655D1048F47C30A"
      valueUuid: "DefaultConversionService.class"
      methodExercised:
        expression: "getSharedInstance():conversionService"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "conversionServiceToUse"
      modelFingerprint: "DD21483275399129E3248CBFBE8E7921"
      valueUuid: "conversionService"
      methodExercised:
        expression: "convert(source:string4,targetType:uniqueUuid27):object4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D6E347D87840A3F290EBEE9195DF7973"
      valueUuid: "object4"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.defaultResolver.getProperty(key, Object.class, false);"
      lineNumber: 97
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: defaultResolver - Method: getProperty"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid23"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
      uuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "object3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "uniqueUuid24"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid25"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_resolveRequiredPlaceholders1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "object3"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid26"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_resolveRequiredPlaceholders1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.support.DefaultConversionService"
      uuid: "DefaultConversionService.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_convert1"
      valueType: "java.lang.String"
      uuid: "object4"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_resolveRequiredPlaceholders1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid27"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_convert1"
      valueType: "java.lang.String"
      uuid: "object4"
      explicitCastNeeded: true
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 93
      expression: "catch-exception (Exception)"
      range: "(93,5)-(93,23)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "resolveNestedPlaceholders"
      range: "(78,7)-(78,31)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "value instanceof String string"
      range: "(78,36)-(78,65)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    catchBlockExercised:
      idExternalInstruction: 4
      id: 2
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path12"
    testPathName: "getPropertyWhenConfigurationPropertyIsNotNullAndCaughtExceptionAndValueIsNotNullAndResolveNestedPlaceholdersAndValueIns"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "5A62C2EE7B0991C01B170C7906022C17"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid30):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "0E84FD56767080CCB61AF7E9B002EC7D"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "LOCAL_VARIABLE"
      name: "configurationProperty"
      modelFingerprint: "18E47D2825E09CEDCD872E509293E354"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getValue():value"
    - type: "FIELD"
      name: "defaultResolver"
      modelFingerprint: "E5A1FD372E2035794359F4CE2FE7A122"
      valueUuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      methodExercised:
        expression: "getProperty(key:key,targetValueType:uniqueUuid31,resolveNestedPlaceholders:uniqueUuid32):object3"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "E26C8F19DED9453FB0C21FEEE8091DAA"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignableValue(type:uniqueUuid33,value:object3):boolean5"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D446A609419428DDEAA49A58091F3986"
      valueUuid: "object3"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.defaultResolver.getProperty(key, Object.class, false);"
      lineNumber: 97
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: defaultResolver - Method: getProperty"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid30"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
      uuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "object3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "uniqueUuid31"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid32"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid33"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "object3"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "object3"
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 93
      expression: "catch-exception (Exception)"
      range: "(93,5)-(93,23)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "resolveNestedPlaceholders"
      range: "(78,7)-(78,31)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "value instanceof String string"
      range: "(78,36)-(78,65)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    catchBlockExercised:
      idExternalInstruction: 4
      id: 2
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path16"
    testPathName: "getPropertyWhenConfigurationPropertyIsNullAndCaughtExceptionAndValueIsNotNullAndResolveNestedPlaceholdersAndValueNotIns"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "E5D0FE27C28656BB8F9B7C7EC388C417"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid34):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "D31FB1FC45652E8280E434734C8A9380"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "FIELD"
      name: "defaultResolver"
      modelFingerprint: "32FC8037BA3CD911B08E59F53F2CA25C"
      valueUuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      methodExercised:
        expression: "getProperty(key:key,targetValueType:uniqueUuid35,resolveNestedPlaceholders:uniqueUuid36):object2"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "185AA38A788EC647F102B71A2DF0C0D9"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignableValue(type:uniqueUuid37,value:object2):boolean4"
        staticAccess: true
    - type: "STATIC"
      name: "DefaultConversionService.class"
      modelFingerprint: "F52B8F76298A968A8655D1048F47C30A"
      valueUuid: "DefaultConversionService.class"
      methodExercised:
        expression: "getSharedInstance():conversionService"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "conversionServiceToUse"
      modelFingerprint: "D4640BEDD15041A25900F60161B0114C"
      valueUuid: "conversionService"
      methodExercised:
        expression: "convert(source:object2,targetType:uniqueUuid38):object3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "461F15B21EBF768914604C727818489B"
      valueUuid: "object3"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.defaultResolver.getProperty(key, Object.class, false);"
      lineNumber: 97
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: defaultResolver - Method: getProperty"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid34"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
      uuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "uniqueUuid35"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid36"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid37"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.support.DefaultConversionService"
      uuid: "DefaultConversionService.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_convert1"
      valueType: "java.lang.String"
      uuid: "object3"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object2"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid38"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_convert1"
      valueType: "java.lang.String"
      uuid: "object3"
      explicitCastNeeded: true
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: false
      internalMethodName: "findPropertyValue"
    - lineNumber: 93
      expression: "catch-exception (Exception)"
      range: "(93,5)-(93,23)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "resolveNestedPlaceholders"
      range: "(78,7)-(78,31)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "value instanceof String string"
      range: "(78,36)-(78,65)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    catchBlockExercised:
      idExternalInstruction: 4
      id: 2
      catchExceptions:
      - "java.lang.Exception"
- method:
    name: "getProperty"
    sourceCodeSignature: "<T> T getProperty(String key, Class<T> targetValueType)"
    returnType: "java.lang.Object"
    parameters:
    - name: "key"
      type: "java.lang.String"
    - name: "targetValueType"
      type: "java.lang.Class"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "A6A2419BACD8E0CA2E27D5937D3AD45F"
  paths:
  - pathId: "path11"
    testPathName: "getProperty3WhenResolveNestedPlaceholdersAndValueNotInstanceOfString"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "A630FA9F250EC9C0ACE0391BCD5A97D5"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "INPUT"
      name: "targetValueType"
      modelFingerprint: "E26289C3B4EE49717ED07A67683033E2"
      valueUuid: "targetValueType"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "0C134D160E282AFD9B7598682316FF52"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "FIELD"
      name: "defaultResolver"
      modelFingerprint: "32FC8037BA3CD911B08E59F53F2CA25C"
      valueUuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      methodExercised:
        expression: "getProperty(key:key,targetValueType:uniqueUuid41,resolveNestedPlaceholders:uniqueUuid42):object"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "F0639315CAA1174F5D2EF86C5100AF44"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignableValue(type:targetValueType,value:object):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "DefaultConversionService.class"
      modelFingerprint: "F52B8F76298A968A8655D1048F47C30A"
      valueUuid: "DefaultConversionService.class"
      methodExercised:
        expression: "getSharedInstance():conversionService"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "conversionServiceToUse"
      modelFingerprint: "B54CA02119D8C7A3426E89BF1AA2B6B0"
      valueUuid: "conversionService"
      methodExercised:
        expression: "convert(source:object,targetType:targetValueType):object2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A5457F8C44AF90FDF3ACB1B2051E1175"
      valueUuid: "object2"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.defaultResolver.getProperty(key, Object.class, false);"
      lineNumber: 97
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: defaultResolver - Method: getProperty"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "targetValueType"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      fixed: true
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
      uuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "uniqueUuid41"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid42"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "targetValueType"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.support.DefaultConversionService"
      uuid: "DefaultConversionService.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "targetValueType"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object2"
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: false
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: false
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: false
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "resolveNestedPlaceholders"
      range: "(78,7)-(78,31)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "value instanceof String string"
      range: "(78,36)-(78,65)"
      evaluatedAs: false
      internalMethodName: "getProperty"
  - pathId: "path7"
    testPathName: "getProperty3WhenConfigurationPropertyIsNullAndValueIsNull"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "8C1CB3A8DC0411352AC8C970EEB8ECE4"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "INPUT"
      name: "targetValueType"
      modelFingerprint: "E26289C3B4EE49717ED07A67683033E2"
      valueUuid: "targetValueType"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid43):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "D31FB1FC45652E8280E434734C8A9380"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B5832848421B6892B8D06BE61ADCD847"
      valueUuid: "object3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "targetValueType"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid43"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object3"
      fixed: true
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: false
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: true
      internalMethodName: "getProperty"
  - pathId: "path12"
    testPathName: "getProperty3WhenCaughtExceptionAndValueIsNull"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "CF4CF63BAF4F3ED9AA025E3C53F4F0F1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "INPUT"
      name: "targetValueType"
      modelFingerprint: "E26289C3B4EE49717ED07A67683033E2"
      valueUuid: "targetValueType"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid44):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "0E84FD56767080CCB61AF7E9B002EC7D"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "LOCAL_VARIABLE"
      name: "configurationProperty"
      modelFingerprint: "18E47D2825E09CEDCD872E509293E354"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getValue():value"
    - type: "FIELD"
      name: "defaultResolver"
      modelFingerprint: "B10ADF26665132AE69584767226DDAD2"
      valueUuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      methodExercised:
        expression: "getProperty(key:key,targetValueType:uniqueUuid45,resolveNestedPlaceholders:uniqueUuid46):object3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B5832848421B6892B8D06BE61ADCD847"
      valueUuid: "object4"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.defaultResolver.getProperty(key, Object.class, false);"
      lineNumber: 97
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: defaultResolver - Method: getProperty"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "targetValueType"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid44"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
      uuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      fixed: true
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "uniqueUuid45"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid46"
      fixed: true
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object4"
      fixed: true
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 93
      expression: "catch-exception (Exception)"
      range: "(93,5)-(93,23)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    catchBlockExercised:
      idExternalInstruction: 4
      id: 2
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path5"
    testPathName: "getProperty3WhenValueInstanceOfString"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "D196ABB795083A59D6A7CD0084ADE36A"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "INPUT"
      name: "targetValueType"
      modelFingerprint: "E26289C3B4EE49717ED07A67683033E2"
      valueUuid: "targetValueType"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid47):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "DABDB9563BF374E2AF3A358E6D6C2569"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "LOCAL_VARIABLE"
      name: "configurationProperty"
      modelFingerprint: "58836722B039F43DC4F2682A24908052"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getValue():value"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "FB59684752A7B5B8D0B4401C7181EF23"
      methodExercised:
        expression: "resolveRequiredPlaceholders(text:value):string4"
        throwsExceptions:
        - "java.lang.IllegalArgumentException"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "F9C636EAF3185B1DFB4A6C7273395E89"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignableValue(type:targetValueType,value:string4):boolean5"
        staticAccess: true
    - type: "STATIC"
      name: "DefaultConversionService.class"
      modelFingerprint: "F52B8F76298A968A8655D1048F47C30A"
      valueUuid: "DefaultConversionService.class"
      methodExercised:
        expression: "getSharedInstance():conversionService"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "conversionServiceToUse"
      modelFingerprint: "6D789082DC29DA1672770BD8A87EC358"
      valueUuid: "conversionService"
      methodExercised:
        expression: "convert(source:string4,targetType:targetValueType):object3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A5457F8C44AF90FDF3ACB1B2051E1175"
      valueUuid: "object3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "targetValueType"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid47"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "value"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_resolveRequiredPlaceholders1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "value"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "targetValueType"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_resolveRequiredPlaceholders1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.support.DefaultConversionService"
      uuid: "DefaultConversionService.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_resolveRequiredPlaceholders1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "targetValueType"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object3"
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "resolveNestedPlaceholders"
      range: "(78,7)-(78,31)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "value instanceof String string"
      range: "(78,36)-(78,65)"
      evaluatedAs: true
      internalMethodName: "getProperty"
  - pathId: "path2"
    testPathName: "getProperty3WhenResolveNestedPlaceholdersAndValueInstanceOfString"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "43852944F4A36053397F6A8E35A71949"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "INPUT"
      name: "targetValueType"
      modelFingerprint: "7AAAFA826DAECF7DF19BBD22CF2AE602"
      valueUuid: "targetValueType"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid48):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "8F75C3DD4A0CCDB561BBD44D21A596AA"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "LOCAL_VARIABLE"
      name: "configurationProperty"
      modelFingerprint: "1A31066CC753E74FC25F1DFCAD84522A"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getValue():value"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D446A609419428DDEAA49A58091F3986"
      valueUuid: "value"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "NULL"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "targetValueType"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid48"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "value"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "value"
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "resolveNestedPlaceholders"
      range: "(78,7)-(78,31)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "value instanceof String string"
      range: "(78,36)-(78,65)"
      evaluatedAs: true
      internalMethodName: "getProperty"
  - pathId: "path3"
    testPathName: "getProperty3WhenConfigurationPropertyIsNotNullAndValueIsNotNullAndResolveNestedPlaceholdersAndValueInstanceOfString"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "92FE730F769FDB9DEDA3E34640F3FA8B"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "INPUT"
      name: "targetValueType"
      modelFingerprint: "E26289C3B4EE49717ED07A67683033E2"
      valueUuid: "targetValueType"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid49):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "8F75C3DD4A0CCDB561BBD44D21A596AA"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "LOCAL_VARIABLE"
      name: "configurationProperty"
      modelFingerprint: "1A31066CC753E74FC25F1DFCAD84522A"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getValue():value"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "1EE989091056F83345104A28D4331C86"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignableValue(type:targetValueType,value:value):boolean5"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D446A609419428DDEAA49A58091F3986"
      valueUuid: "value"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "targetValueType"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid49"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "value"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "targetValueType"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "value"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "value"
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "resolveNestedPlaceholders"
      range: "(78,7)-(78,31)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "value instanceof String string"
      range: "(78,36)-(78,65)"
      evaluatedAs: true
      internalMethodName: "getProperty"
  - pathId: "path15"
    testPathName: "getProperty3WhenCaughtExceptionAndValueIsNotNullAndResolveNestedPlaceholdersAndValueInstanceOfString"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "2864FFAA6C5E04ED6D5235028167A4ED"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "INPUT"
      name: "targetValueType"
      modelFingerprint: "E26289C3B4EE49717ED07A67683033E2"
      valueUuid: "targetValueType"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid50):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "0E84FD56767080CCB61AF7E9B002EC7D"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "LOCAL_VARIABLE"
      name: "configurationProperty"
      modelFingerprint: "18E47D2825E09CEDCD872E509293E354"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getValue():value"
    - type: "FIELD"
      name: "defaultResolver"
      modelFingerprint: "E5A1FD372E2035794359F4CE2FE7A122"
      valueUuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      methodExercised:
        expression: "getProperty(key:key,targetValueType:uniqueUuid51,resolveNestedPlaceholders:uniqueUuid52):object3"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "F9C636EAF3185B1DFB4A6C7273395E89"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignableValue(type:targetValueType,value:object3):boolean5"
        staticAccess: true
    - type: "STATIC"
      name: "DefaultConversionService.class"
      modelFingerprint: "F52B8F76298A968A8655D1048F47C30A"
      valueUuid: "DefaultConversionService.class"
      methodExercised:
        expression: "getSharedInstance():conversionService"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "conversionServiceToUse"
      modelFingerprint: "6D789082DC29DA1672770BD8A87EC358"
      valueUuid: "conversionService"
      methodExercised:
        expression: "convert(source:object3,targetType:targetValueType):object4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A5457F8C44AF90FDF3ACB1B2051E1175"
      valueUuid: "object4"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.defaultResolver.getProperty(key, Object.class, false);"
      lineNumber: 97
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: defaultResolver - Method: getProperty"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "targetValueType"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid50"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
      uuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "object3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "uniqueUuid51"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid52"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "targetValueType"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "object3"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.support.DefaultConversionService"
      uuid: "DefaultConversionService.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object4"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "object3"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "targetValueType"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object4"
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 93
      expression: "catch-exception (Exception)"
      range: "(93,5)-(93,23)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "resolveNestedPlaceholders"
      range: "(78,7)-(78,31)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "value instanceof String string"
      range: "(78,36)-(78,65)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    catchBlockExercised:
      idExternalInstruction: 4
      id: 2
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path13"
    testPathName: "getProperty3WhenConfigurationPropertyIsNotNullAndCaughtExceptionAndValueIsNotNullAndResolveNestedPlaceholdersAndValueIn"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "BC38C9BC4FE67CBA9686521A4F3CA12D"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "INPUT"
      name: "targetValueType"
      modelFingerprint: "7AAAFA826DAECF7DF19BBD22CF2AE602"
      valueUuid: "targetValueType"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid53):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "0E84FD56767080CCB61AF7E9B002EC7D"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "LOCAL_VARIABLE"
      name: "configurationProperty"
      modelFingerprint: "18E47D2825E09CEDCD872E509293E354"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getValue():value"
    - type: "FIELD"
      name: "defaultResolver"
      modelFingerprint: "E5A1FD372E2035794359F4CE2FE7A122"
      valueUuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      methodExercised:
        expression: "getProperty(key:key,targetValueType:uniqueUuid54,resolveNestedPlaceholders:uniqueUuid55):object3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D446A609419428DDEAA49A58091F3986"
      valueUuid: "object3"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.defaultResolver.getProperty(key, Object.class, false);"
      lineNumber: 97
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: defaultResolver - Method: getProperty"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "NULL"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "targetValueType"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid53"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
      uuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "object3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "uniqueUuid54"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid55"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "object3"
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 93
      expression: "catch-exception (Exception)"
      range: "(93,5)-(93,23)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "resolveNestedPlaceholders"
      range: "(78,7)-(78,31)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "value instanceof String string"
      range: "(78,36)-(78,65)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    catchBlockExercised:
      idExternalInstruction: 4
      id: 2
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path14"
    testPathName: "getProperty3WhenCaughtExceptionAndValueIsNotNullAndResolveNestedPlaceholdersAndValueInstanceOfString2"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "DE91D0AC7779246F5B1F9DD52A59E2C8"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "INPUT"
      name: "targetValueType"
      modelFingerprint: "E26289C3B4EE49717ED07A67683033E2"
      valueUuid: "targetValueType"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid56):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "0E84FD56767080CCB61AF7E9B002EC7D"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "LOCAL_VARIABLE"
      name: "configurationProperty"
      modelFingerprint: "18E47D2825E09CEDCD872E509293E354"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getValue():value"
    - type: "FIELD"
      name: "defaultResolver"
      modelFingerprint: "E5A1FD372E2035794359F4CE2FE7A122"
      valueUuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      methodExercised:
        expression: "getProperty(key:key,targetValueType:uniqueUuid57,resolveNestedPlaceholders:uniqueUuid58):object3"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "1EE989091056F83345104A28D4331C86"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignableValue(type:targetValueType,value:object3):boolean5"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D446A609419428DDEAA49A58091F3986"
      valueUuid: "object3"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.defaultResolver.getProperty(key, Object.class, false);"
      lineNumber: 97
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: defaultResolver - Method: getProperty"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "targetValueType"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid56"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
      uuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "object3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "uniqueUuid57"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid58"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "targetValueType"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "object3"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "object3"
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 93
      expression: "catch-exception (Exception)"
      range: "(93,5)-(93,23)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "resolveNestedPlaceholders"
      range: "(78,7)-(78,31)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "value instanceof String string"
      range: "(78,36)-(78,65)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    catchBlockExercised:
      idExternalInstruction: 4
      id: 2
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path16"
    testPathName: "getProperty3WhenCaughtExceptionAndValueIsNotNullAndResolveNestedPlaceholdersAndValueNotInstanceOfString"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "A19276C475375E0AF86B54E094DA20DC"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "INPUT"
      name: "targetValueType"
      modelFingerprint: "E26289C3B4EE49717ED07A67683033E2"
      valueUuid: "targetValueType"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid59):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "D31FB1FC45652E8280E434734C8A9380"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "FIELD"
      name: "defaultResolver"
      modelFingerprint: "32FC8037BA3CD911B08E59F53F2CA25C"
      valueUuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      methodExercised:
        expression: "getProperty(key:key,targetValueType:uniqueUuid60,resolveNestedPlaceholders:uniqueUuid61):object2"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "F0639315CAA1174F5D2EF86C5100AF44"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignableValue(type:targetValueType,value:object2):boolean4"
        staticAccess: true
    - type: "STATIC"
      name: "DefaultConversionService.class"
      modelFingerprint: "F52B8F76298A968A8655D1048F47C30A"
      valueUuid: "DefaultConversionService.class"
      methodExercised:
        expression: "getSharedInstance():conversionService"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "conversionServiceToUse"
      modelFingerprint: "B54CA02119D8C7A3426E89BF1AA2B6B0"
      valueUuid: "conversionService"
      methodExercised:
        expression: "convert(source:object2,targetType:targetValueType):object3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A5457F8C44AF90FDF3ACB1B2051E1175"
      valueUuid: "object3"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.defaultResolver.getProperty(key, Object.class, false);"
      lineNumber: 97
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: defaultResolver - Method: getProperty"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "targetValueType"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid59"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
      uuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "uniqueUuid60"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid61"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "targetValueType"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.support.DefaultConversionService"
      uuid: "DefaultConversionService.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object3"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object2"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "targetValueType"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object3"
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: false
      internalMethodName: "findPropertyValue"
    - lineNumber: 93
      expression: "catch-exception (Exception)"
      range: "(93,5)-(93,23)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "resolveNestedPlaceholders"
      range: "(78,7)-(78,31)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "value instanceof String string"
      range: "(78,36)-(78,65)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    catchBlockExercised:
      idExternalInstruction: 4
      id: 2
      catchExceptions:
      - "java.lang.Exception"
- method:
    name: "getPropertyAsRawString"
    sourceCodeSignature: "String getPropertyAsRawString(String key)"
    returnType: "java.lang.String"
    parameters:
    - name: "key"
      type: "java.lang.String"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "28AE2C9D1C5D8999EF6C33F11C027021"
  paths:
  - pathId: "path8"
    testPathName: "getPropertyAsRawStringWhenValueIsNotNullAndNotResolveNestedPlaceholders"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "D336804420350BE87269F872B3CA1227"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "0C134D160E282AFD9B7598682316FF52"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "FIELD"
      name: "defaultResolver"
      modelFingerprint: "32FC8037BA3CD911B08E59F53F2CA25C"
      valueUuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      methodExercised:
        expression: "getProperty(key:key,targetValueType:uniqueUuid62,resolveNestedPlaceholders:uniqueUuid63):object"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "185AA38A788EC647F102B71A2DF0C0D9"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignableValue(type:uniqueUuid64,value:object):boolean2"
        staticAccess: true
    - type: "STATIC"
      name: "DefaultConversionService.class"
      modelFingerprint: "F52B8F76298A968A8655D1048F47C30A"
      valueUuid: "DefaultConversionService.class"
      methodExercised:
        expression: "getSharedInstance():conversionService"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "conversionServiceToUse"
      modelFingerprint: "D4640BEDD15041A25900F60161B0114C"
      valueUuid: "conversionService"
      methodExercised:
        expression: "convert(source:object,targetType:uniqueUuid65):object2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "461F15B21EBF768914604C727818489B"
      valueUuid: "object2"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.defaultResolver.getProperty(key, Object.class, false);"
      lineNumber: 97
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: defaultResolver - Method: getProperty"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      fixed: true
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
      uuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "uniqueUuid62"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid63"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid64"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.support.DefaultConversionService"
      uuid: "DefaultConversionService.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_convert1"
      valueType: "java.lang.String"
      uuid: "object2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid65"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_convert1"
      valueType: "java.lang.String"
      uuid: "object2"
      explicitCastNeeded: true
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: false
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: false
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: false
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "resolveNestedPlaceholders"
      range: "(78,7)-(78,31)"
      evaluatedAs: false
      internalMethodName: "getProperty"
  - pathId: "path4"
    testPathName: "getPropertyAsRawStringWhenConfigurationPropertyIsNullAndValueIsNull"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "5A5744398DA5136B7176782A1385146D"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid68):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "D31FB1FC45652E8280E434734C8A9380"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "494333D8A9619E3B4E57274C75B778A3"
      valueUuid: "object3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid68"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "object3"
      fixed: true
      explicitCastNeeded: true
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: false
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: true
      internalMethodName: "getProperty"
  - pathId: "path3"
    testPathName: "getPropertyAsRawStringWhenConfigurationPropertyIsNotNullAndValueIsNotNullAndNotResolveNestedPlaceholders"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "F756198712453B2B17543C3D22087EB0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid69):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "0E84FD56767080CCB61AF7E9B002EC7D"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "LOCAL_VARIABLE"
      name: "configurationProperty"
      modelFingerprint: "18E47D2825E09CEDCD872E509293E354"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getValue():value"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "185AA38A788EC647F102B71A2DF0C0D9"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignableValue(type:uniqueUuid70,value:value):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "DefaultConversionService.class"
      modelFingerprint: "F52B8F76298A968A8655D1048F47C30A"
      valueUuid: "DefaultConversionService.class"
      methodExercised:
        expression: "getSharedInstance():conversionService"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "conversionServiceToUse"
      modelFingerprint: "D4640BEDD15041A25900F60161B0114C"
      valueUuid: "conversionService"
      methodExercised:
        expression: "convert(source:value,targetType:uniqueUuid71):object3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "461F15B21EBF768914604C727818489B"
      valueUuid: "object3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid69"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "value"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid70"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "value"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.support.DefaultConversionService"
      uuid: "DefaultConversionService.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "object3"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "value"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid71"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "object3"
      explicitCastNeeded: true
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "resolveNestedPlaceholders"
      range: "(78,7)-(78,31)"
      evaluatedAs: false
      internalMethodName: "getProperty"
  - pathId: "path2"
    testPathName: "getPropertyAsRawStringWhenConfigurationPropertyIsNotNullAndValueIsNotNullAndNotResolveNestedPlaceholders2"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "D924BFBC6383DF8E34C7A0D07C478124"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid74):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "8F75C3DD4A0CCDB561BBD44D21A596AA"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "LOCAL_VARIABLE"
      name: "configurationProperty"
      modelFingerprint: "1A31066CC753E74FC25F1DFCAD84522A"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getValue():value"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "E26C8F19DED9453FB0C21FEEE8091DAA"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignableValue(type:uniqueUuid75,value:value):boolean3"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D446A609419428DDEAA49A58091F3986"
      valueUuid: "value"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid74"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "value1"
            valueType: "java.lang.String"
            uuid: "value"
            explicitCastNeeded: true
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "value1"
            valueType: "java.lang.String"
            uuid: "value"
            explicitCastNeeded: true
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "BASIC"
      content: !<regular>
        value: "value1"
      valueType: "java.lang.String"
      uuid: "value"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid75"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "value1"
      valueType: "java.lang.String"
      uuid: "value"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "value1"
      valueType: "java.lang.String"
      uuid: "value"
      explicitCastNeeded: true
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "resolveNestedPlaceholders"
      range: "(78,7)-(78,31)"
      evaluatedAs: false
      internalMethodName: "getProperty"
  - pathId: "path9"
    testPathName: "getPropertyAsRawStringWhenCaughtExceptionAndValueIsNull"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "E65916155D44A020461816CFE4B694BD"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid76):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "0E84FD56767080CCB61AF7E9B002EC7D"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "LOCAL_VARIABLE"
      name: "configurationProperty"
      modelFingerprint: "18E47D2825E09CEDCD872E509293E354"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getValue():value"
    - type: "FIELD"
      name: "defaultResolver"
      modelFingerprint: "B10ADF26665132AE69584767226DDAD2"
      valueUuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      methodExercised:
        expression: "getProperty(key:key,targetValueType:uniqueUuid77,resolveNestedPlaceholders:uniqueUuid78):object3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "494333D8A9619E3B4E57274C75B778A3"
      valueUuid: "object4"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.defaultResolver.getProperty(key, Object.class, false);"
      lineNumber: 97
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: defaultResolver - Method: getProperty"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid76"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
      uuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      fixed: true
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "uniqueUuid77"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid78"
      fixed: true
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "object4"
      fixed: true
      explicitCastNeeded: true
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 93
      expression: "catch-exception (Exception)"
      range: "(93,5)-(93,23)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: true
      internalMethodName: "getProperty"
    catchBlockExercised:
      idExternalInstruction: 4
      id: 2
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path11"
    testPathName: "getPropertyAsRawStringWhenCaughtExceptionAndValueIsNotNullAndNotResolveNestedPlaceholders"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "A1FD305F07152192C3B14DE9C9460D7D"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid79):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "0E84FD56767080CCB61AF7E9B002EC7D"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "LOCAL_VARIABLE"
      name: "configurationProperty"
      modelFingerprint: "18E47D2825E09CEDCD872E509293E354"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getValue():value"
    - type: "FIELD"
      name: "defaultResolver"
      modelFingerprint: "32FC8037BA3CD911B08E59F53F2CA25C"
      valueUuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      methodExercised:
        expression: "getProperty(key:key,targetValueType:uniqueUuid80,resolveNestedPlaceholders:uniqueUuid81):object3"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "185AA38A788EC647F102B71A2DF0C0D9"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignableValue(type:uniqueUuid82,value:object3):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "DefaultConversionService.class"
      modelFingerprint: "F52B8F76298A968A8655D1048F47C30A"
      valueUuid: "DefaultConversionService.class"
      methodExercised:
        expression: "getSharedInstance():conversionService"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "conversionServiceToUse"
      modelFingerprint: "D4640BEDD15041A25900F60161B0114C"
      valueUuid: "conversionService"
      methodExercised:
        expression: "convert(source:object3,targetType:uniqueUuid83):object4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "461F15B21EBF768914604C727818489B"
      valueUuid: "object4"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.defaultResolver.getProperty(key, Object.class, false);"
      lineNumber: 97
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: defaultResolver - Method: getProperty"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid79"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
      uuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "uniqueUuid80"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid81"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid82"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object3"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.support.DefaultConversionService"
      uuid: "DefaultConversionService.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_convert1"
      valueType: "java.lang.String"
      uuid: "object4"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object3"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid83"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_convert1"
      valueType: "java.lang.String"
      uuid: "object4"
      explicitCastNeeded: true
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 93
      expression: "catch-exception (Exception)"
      range: "(93,5)-(93,23)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "resolveNestedPlaceholders"
      range: "(78,7)-(78,31)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    catchBlockExercised:
      idExternalInstruction: 4
      id: 2
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path10"
    testPathName: "getPropertyAsRawStringWhenConfigurationPropertyIsNotNullAndCaughtExceptionAndValueIsNotNullAndNotResolveNestedPlacehold"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "41F419F7DAD8AF1701D82083847DEA28"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid86):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "0E84FD56767080CCB61AF7E9B002EC7D"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "LOCAL_VARIABLE"
      name: "configurationProperty"
      modelFingerprint: "18E47D2825E09CEDCD872E509293E354"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getValue():value"
    - type: "FIELD"
      name: "defaultResolver"
      modelFingerprint: "E5A1FD372E2035794359F4CE2FE7A122"
      valueUuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      methodExercised:
        expression: "getProperty(key:key,targetValueType:uniqueUuid87,resolveNestedPlaceholders:uniqueUuid88):object3"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "E26C8F19DED9453FB0C21FEEE8091DAA"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignableValue(type:uniqueUuid89,value:object3):boolean3"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D446A609419428DDEAA49A58091F3986"
      valueUuid: "object3"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.defaultResolver.getProperty(key, Object.class, false);"
      lineNumber: 97
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: defaultResolver - Method: getProperty"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid86"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "value"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
      uuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProperty1"
      valueType: "java.lang.String"
      uuid: "object3"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "uniqueUuid87"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid88"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid89"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProperty1"
      valueType: "java.lang.String"
      uuid: "object3"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProperty1"
      valueType: "java.lang.String"
      uuid: "object3"
      explicitCastNeeded: true
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 93
      expression: "catch-exception (Exception)"
      range: "(93,5)-(93,23)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "resolveNestedPlaceholders"
      range: "(78,7)-(78,31)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    catchBlockExercised:
      idExternalInstruction: 4
      id: 2
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path12"
    testPathName: "getPropertyAsRawStringWhenConfigurationPropertyIsNullAndCaughtExceptionAndValueIsNotNullAndNotResolveNestedPlaceholders"
    constructorSignature: "<init>(org.springframework.core.env.MutablePropertySources)\
      \ : void"
    modelFingerprint: "16B6EE751FB3DB934172BFC44727269F"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "87ABE4DE52D925EFE770BBD8150317E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "key"
      modelFingerprint: "A4B031520ABEDE26EA7F395AC59F72CE"
      valueUuid: "key"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5E4059EEF22AE082D4C19F16670EFCEA"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:propertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      name: "springSource"
      modelFingerprint: "FFF36BE5A86C2F2DDAD9A9FCEED1C7BA"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:propertySources):boolean2"
    - type: "STATIC"
      name: "ConfigurationPropertyName.class"
      modelFingerprint: "FAC167B657BBEA42C68AC99C2D2510AA"
      valueUuid: "ConfigurationPropertyName.class"
      methodExercised:
        expression: "of(name:key,returnNullIfInvalid:uniqueUuid90):configurationPropertyName"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "D31FB1FC45652E8280E434734C8A9380"
      valueUuid: "propertySource"
      methodExercised:
        expression: "findConfigurationProperty(name:configurationPropertyName):configurationProperty"
    - type: "FIELD"
      name: "defaultResolver"
      modelFingerprint: "32FC8037BA3CD911B08E59F53F2CA25C"
      valueUuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      methodExercised:
        expression: "getProperty(key:key,targetValueType:uniqueUuid91,resolveNestedPlaceholders:uniqueUuid92):object2"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "185AA38A788EC647F102B71A2DF0C0D9"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isAssignableValue(type:uniqueUuid93,value:object2):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "DefaultConversionService.class"
      modelFingerprint: "F52B8F76298A968A8655D1048F47C30A"
      valueUuid: "DefaultConversionService.class"
      methodExercised:
        expression: "getSharedInstance():conversionService"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "conversionServiceToUse"
      modelFingerprint: "D4640BEDD15041A25900F60161B0114C"
      valueUuid: "conversionService"
      methodExercised:
        expression: "convert(source:object2,targetType:uniqueUuid94):object3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "461F15B21EBF768914604C727818489B"
      valueUuid: "object3"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return this.defaultResolver.getProperty(key, Object.class, false);"
      lineNumber: 97
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: defaultResolver - Method: getProperty"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "ConfigurationPropertyName.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid90"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver$DefaultResolver"
      uuid: "configurationPropertySourcesPropertyResolver.DefaultResolver"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "key1"
      valueType: "java.lang.String"
      uuid: "key"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "uniqueUuid91"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid92"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid93"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.support.DefaultConversionService"
      uuid: "DefaultConversionService.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_convert1"
      valueType: "java.lang.String"
      uuid: "object3"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object2"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid94"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_convert1"
      valueType: "java.lang.String"
      uuid: "object3"
      explicitCastNeeded: true
    branches:
    - lineNumber: 103
      expression: "attached != null"
      range: "(103,59)-(103,74)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 104
      expression: "attachedSource instanceof SpringConfigurationPropertySources springSource"
      range: "(104,8)-(104,80)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 105
      expression: "springSource.isUsingSources(this.propertySources)"
      range: "(105,8)-(105,56)"
      evaluatedAs: true
      internalMethodName: "getAttached"
    - lineNumber: 86
      expression: "attached != null"
      range: "(86,7)-(86,22)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 88
      expression: "name != null"
      range: "(88,8)-(88,19)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 91
      expression: "configurationProperty != null"
      range: "(91,14)-(91,42)"
      evaluatedAs: false
      internalMethodName: "findPropertyValue"
    - lineNumber: 93
      expression: "catch-exception (Exception)"
      range: "(93,5)-(93,23)"
      evaluatedAs: true
      internalMethodName: "findPropertyValue"
    - lineNumber: 75
      expression: "value == null"
      range: "(75,7)-(75,19)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    - lineNumber: 78
      expression: "resolveNestedPlaceholders"
      range: "(78,7)-(78,31)"
      evaluatedAs: false
      internalMethodName: "getProperty"
    catchBlockExercised:
      idExternalInstruction: 4
      id: 2
      catchExceptions:
      - "java.lang.Exception"
