---
modelFingerprint: "C557EAA58376377E62F11A3672757EBE"
targetClass:
  fullClassName: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
methods:
- method:
    name: "createPropertyResolver"
    sourceCodeSignature: "ConfigurablePropertyResolver createPropertyResolver(MutablePropertySources\
      \ propertySources)"
    returnType: "org.springframework.core.env.ConfigurablePropertyResolver"
    parameters:
    - name: "propertySources"
      type: "org.springframework.core.env.MutablePropertySources"
    instructionFingerprint: "8E382E687448961D91CFE89D61B073B6"
  paths:
  - pathId: "path1"
    testPathName: "createPropertyResolverTest"
    modelFingerprint: "D656E345A2411707003708A4936AB509"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "propertySources"
      modelFingerprint: "D7ED1A646EC640E7C196D7F944C75BBE"
      valueUuid: "propertySources"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B638992249486E9A66410F88F682AFCE"
      valueUuid: "configurationPropertySourcesPropertyResolver"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "propertySources"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.MutablePropertySources"
            uuid: "propertySources"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertyResolver"
      uuid: "configurationPropertySourcesPropertyResolver"
      fixed: true
- method:
    name: "isAttachedConfigurationPropertySource"
    sourceCodeSignature: "boolean isAttachedConfigurationPropertySource(PropertySource<?>\
      \ propertySource)"
    returnType: "boolean"
    parameters:
    - name: "propertySource"
      type: "org.springframework.core.env.PropertySource"
    instructionFingerprint: "BF11EF9164742D14A208C3042B2DBABB"
  paths:
  - pathId: "path1"
    testPathName: "isAttachedConfigurationPropertySourceWhenATTACHED_PROPERTY_SOURCE_NAMEEqualsPropertySourceGetName"
    modelFingerprint: "5338B6414425CB3ABD6B71F3D10CC44B"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "propertySource"
      modelFingerprint: "191C73B46670A45197E5B136B2DDD310"
      valueUuid: "propertySource"
    - type: "LOCAL_VARIABLE"
      name: "propertySource"
      modelFingerprint: "437CAA04126CAE99C27903D8BCBEC31C"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getName():name"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "008FA075564487DD49423319C7795C5E"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.env.PropertySource"
        method: "named"
        methodParameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "configurationProperties"
            valueType: "java.lang.String"
            uuid: "name"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "propertySource"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.env.PropertySource"
        method: "named"
        methodParameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "configurationProperties"
            valueType: "java.lang.String"
            uuid: "name"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "configurationProperties"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    branches:
    - lineNumber: 70
      expression: "ATTACHED_PROPERTY_SOURCE_NAME.equals(propertySource.getName())"
      range: "(70,10)-(70,71)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "isAttachedConfigurationPropertySourceWhenATTACHED_PROPERTY_SOURCE_NAMENotEqualsPropertySourceGetName"
    modelFingerprint: "FDF3D5C3B83B24812B4D60F189E5944F"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "propertySource"
      modelFingerprint: "5BE3E06FFC3FA34B83B8B7B7EFDFAD11"
      valueUuid: "propertySource"
    - type: "LOCAL_VARIABLE"
      name: "propertySource"
      modelFingerprint: "649A048C506CAC25C7B43DC31075230C"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getName():name"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C532B70D233E59BD0B9DC9C634733651"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.env.PropertySource"
        method: "named"
        methodParameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "propertySource"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.env.PropertySource"
        method: "named"
        methodParameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name"
      valueType: "org.springframework.core.env.PropertySource"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    branches:
    - lineNumber: 70
      expression: "ATTACHED_PROPERTY_SOURCE_NAME.equals(propertySource.getName())"
      range: "(70,10)-(70,71)"
      evaluatedAs: false
- method:
    name: "attach"
    sourceCodeSignature: "void attach(Environment environment)"
    returnType: "void"
    parameters:
    - name: "environment"
      type: "org.springframework.core.env.Environment"
    instructionFingerprint: "04F5E81E37886E1B2CA790E2C4B5F3CC"
  paths:
  - pathId: "path1"
    testPathName: "attachWhenIsUsingSourcesAttachedSources"
    modelFingerprint: "E72A31FEB2B7329991E8792379B46E49"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "2AB40C7309B23844284816875A86BEFD"
      valueUuid: "environment"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4526E310A97177CF9DE025FC0C109971"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid1,obj:environment):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "E97B1B215647A456976BAD20E92F84F8"
      valueUuid: "environment"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "BAD3F9D52A1BC2E9E2C9101EA27A49A5"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:mutablePropertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "AB5847197FDAF5741C30D7B99EEDA432"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:mutablePropertySources):boolean2"
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "0BA783D662988A64B1E1A88D8C0ACF90"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "remove(name:uniqueUuid2):propertySource2"
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "ECADE690DCE75E01640C174B9306B1DE"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "addFirst(propertySource:propertySource):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.core.env.ConfigurableEnvironment"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "configurationProperties"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 90
      expression: "attached == null"
      range: "(90,7)-(90,22)"
      evaluatedAs: false
    - lineNumber: 99
      expression: "attached instanceof ConfigurationPropertySourcesPropertySource"
      range: "(99,10)-(99,71)"
      evaluatedAs: true
      internalMethodName: "isUsingSources"
    - lineNumber: 100
      expression: "((SpringConfigurationPropertySources) attached.getSource()).isUsingSources(sources)"
      range: "(100,8)-(100,90)"
      evaluatedAs: true
      internalMethodName: "isUsingSources"
    - lineNumber: 90
      expression: "!isUsingSources(attached, sources)"
      range: "(90,27)-(90,60)"
      evaluatedAs: false
    calledSomeStaticInternalMethod: true
  - pathId: "path2"
    testPathName: "attachWhenAttachedGetSourceNotIsUsingSourcesSourcesAndIsUsingSourcesNotAttachedSources"
    modelFingerprint: "36358730E99D391FBCD55EDE87590D35"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "2AB40C7309B23844284816875A86BEFD"
      valueUuid: "environment"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4526E310A97177CF9DE025FC0C109971"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid3,obj:environment):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "E97B1B215647A456976BAD20E92F84F8"
      valueUuid: "environment"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "BAD3F9D52A1BC2E9E2C9101EA27A49A5"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "getAttached(sources:mutablePropertySources):propertySource"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "85055E549D6CD0D0354BF5C027A5E574"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "410247D39B9B55216F9CD3B6C4CACC3D"
      valueUuid: "source"
      methodExercised:
        expression: "isUsingSources(sources:mutablePropertySources):boolean2"
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "0BA783D662988A64B1E1A88D8C0ACF90"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "remove(name:uniqueUuid4):propertySource2"
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "89A3E9152D1A268A45F5AFD1783EEDE0"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "addFirst(propertySource:configurationPropertySourcesPropertySource):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.core.env.ConfigurableEnvironment"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "configurationProperties"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "configurationPropertySourcesPropertySource"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 90
      expression: "attached == null"
      range: "(90,7)-(90,22)"
      evaluatedAs: false
    - lineNumber: 99
      expression: "attached instanceof ConfigurationPropertySourcesPropertySource"
      range: "(99,10)-(99,71)"
      evaluatedAs: true
      internalMethodName: "isUsingSources"
    - lineNumber: 100
      expression: "((SpringConfigurationPropertySources) attached.getSource()).isUsingSources(sources)"
      range: "(100,8)-(100,90)"
      evaluatedAs: false
      internalMethodName: "isUsingSources"
    - lineNumber: 90
      expression: "!isUsingSources(attached, sources)"
      range: "(90,27)-(90,60)"
      evaluatedAs: true
    calledSomeStaticInternalMethod: true
- method:
    name: "getAttached"
    sourceCodeSignature: "PropertySource<?> getAttached(MutablePropertySources sources)"
    returnType: "org.springframework.core.env.PropertySource"
    genericReturnType: "?"
    parameters:
    - name: "sources"
      type: "org.springframework.core.env.MutablePropertySources"
    instructionFingerprint: "9C5F4B6ADA1992316E29031D1F5808A3"
  paths:
  - pathId: "path1"
    testPathName: "getAttachedWhenSourcesIsNotNull"
    modelFingerprint: "FC6D931F6631E2E0A1231E338F5B1760"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "sources"
      modelFingerprint: "E1D157CD5C784FACF9C9EECD5B26544C"
      valueUuid: "sources"
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "7116154114281A6424E584868E1607F3"
      valueUuid: "sources"
      methodExercised:
        expression: "get(name:uniqueUuid6):propertySource"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "699610724528D4F55B369142E8EAB54B"
      valueUuid: "propertySource"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "sources"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "sources"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "configurationProperties"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    branches:
    - lineNumber: 104
      expression: "sources != null"
      range: "(104,11)-(104,25)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "getAttachedWhenSourcesIsNull"
    modelFingerprint: "D9E00E4955A82E0B1C05D564E8215B34"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "sources"
      modelFingerprint: "23C927EEA50BF62FE4B3B258E38C2F30"
      valueUuid: "sources"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5C492BB0F1B3C993C06892F582E060FE"
      valueUuid: "propertySource"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "sources"
      fixed: true
    - sapientType: "NULL"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
      fixed: true
    branches:
    - lineNumber: 104
      expression: "sources != null"
      range: "(104,11)-(104,25)"
      evaluatedAs: false
- method:
    name: "get"
    sourceCodeSignature: "Iterable<ConfigurationPropertySource> get(Environment environment)"
    returnType: "java.lang.Iterable"
    genericReturnType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
    parameters:
    - name: "environment"
      type: "org.springframework.core.env.Environment"
    instructionFingerprint: "5C0C77654358EF7832615F9528B8ADB1"
  paths:
  - pathId: "path1"
    testPathName: "getWhenAttachedIsNull"
    modelFingerprint: "4AF1BC34112111CA862309EFBEA473D7"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "2AB40C7309B23844284816875A86BEFD"
      valueUuid: "environment"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4526E310A97177CF9DE025FC0C109971"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid7,obj:environment):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "E97B1B215647A456976BAD20E92F84F8"
      valueUuid: "environment"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources"
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "4675DBCB2993A697D0B2F7AAC4CB9DDB"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "get(name:uniqueUuid8):propertySource"
    - type: "STATIC"
      name: "ConfigurationPropertySources.class"
      modelFingerprint: "5BCDC2C500EC64D20F01C1B1FDF04F87"
      valueUuid: "ConfigurationPropertySources.class"
      methodExercised:
        expression: "from(sources:mutablePropertySources):iterable"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5AEC985607059676ABF9DE02B5E83EBA"
      valueUuid: "iterable"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.core.env.ConfigurableEnvironment"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      fixed: true
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "configurationProperties"
      valueType: "java.lang.String"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySources"
      uuid: "ConfigurationPropertySources.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "iterable"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "iterable"
    branches:
    - lineNumber: 121
      expression: "attached == null"
      range: "(121,7)-(121,22)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "getWhenAttachedIsNotNull"
    modelFingerprint: "9DCD043B208B35E4E023F07BF0E78B36"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "2AB40C7309B23844284816875A86BEFD"
      valueUuid: "environment"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4526E310A97177CF9DE025FC0C109971"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid9,obj:environment):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "E97B1B215647A456976BAD20E92F84F8"
      valueUuid: "environment"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources"
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "A34A067B6648E2006A5F003B9990F205"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "get(name:uniqueUuid10):propertySource"
    - type: "LOCAL_VARIABLE"
      name: "attached"
      modelFingerprint: "743159CC0A1D65CF738C292C4AE7D498"
      valueUuid: "propertySource"
      methodExercised:
        expression: "getSource():source"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "93813135D1816DCA3838AE02BE88DC45"
      valueUuid: "source"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.core.env.ConfigurableEnvironment"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "configurationProperties"
      valueType: "java.lang.String"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource"
      uuid: "propertySource"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      uuid: "source"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      uuid: "source"
      explicitCastNeeded: true
    branches:
    - lineNumber: 121
      expression: "attached == null"
      range: "(121,7)-(121,22)"
      evaluatedAs: false
- method:
    name: "from"
    sourceCodeSignature: "Iterable<ConfigurationPropertySource> from(PropertySource<?>\
      \ source)"
    returnType: "java.lang.Iterable"
    genericReturnType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
    parameters:
    - name: "source"
      type: "org.springframework.core.env.PropertySource"
    instructionFingerprint: "1E074F29F68F28B73E0D713DFE57E163"
  paths:
  - pathId: "path1"
    testPathName: "fromTest"
    modelFingerprint: "BBF7D67655EFF2F326FFF50AA9360D1F"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "source"
      modelFingerprint: "22D49AA94F916B36E3AF4CDA69DD6A6C"
      valueUuid: "source"
    - type: "STATIC"
      name: "ConfigurationPropertySource.class"
      modelFingerprint: "E19A877EE1488CD0E8E77054887C2683"
      valueUuid: "ConfigurationPropertySource.class"
      methodExercised:
        expression: "from(source:source):configurationPropertySource"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "EA4A3F51F29156CAFC60CAD651464592"
      valueUuid: "set"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "ConfigurationPropertySource.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "configurationPropertySource"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "source"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
          uuid: "configurationPropertySource"
      valueType: "java.util.Set"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "set"
- method:
    name: "from"
    sourceCodeSignature: "Iterable<ConfigurationPropertySource> from(Iterable<PropertySource<?>>\
      \ sources)"
    returnType: "java.lang.Iterable"
    genericReturnType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
    parameters:
    - name: "sources"
      type: "java.lang.Iterable"
    instructionFingerprint: "F186BFCE8AF33123893FDED517F8FAFB"
  paths:
  - pathId: "path1"
    testPathName: "from1Test"
    modelFingerprint: "F57ACA88F283626C20074BFA8BF01FC0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "sources"
      modelFingerprint: "56D8F9F12003588046D170D00AEDADE2"
      valueUuid: "sources"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C6A649C70EC174D05855CC2DA874DF53"
      valueUuid: "springConfigurationPropertySources"
    disabled: false
    allValues:
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      genericValueType: "org.springframework.core.env.PropertySource<?>"
      uuid: "sources"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
        parameters:
        - name: "sources"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.lang.Iterable"
            genericValueType: "org.springframework.core.env.PropertySource<?>"
            uuid: "sources"
      valueType: "org.springframework.boot.context.properties.source.SpringConfigurationPropertySources"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "springConfigurationPropertySources"
      fixed: true
