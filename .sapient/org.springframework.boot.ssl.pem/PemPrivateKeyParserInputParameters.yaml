---
modelFingerprint: "33A04909D5915A242C498772CC181427"
targetClass:
  fullClassName: "org.springframework.boot.ssl.pem.PemPrivateKeyParser"
methods:
- method:
    name: "parse"
    sourceCodeSignature: "PrivateKey parse(String text)"
    returnType: "java.security.PrivateKey"
    parameters:
    - name: "text"
      type: "java.lang.String"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    - idExternalInstruction: 0
      id: 3
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "D6BC0EADB776E6569F85E057608C684F"
  paths:
  - pathId: "path1"
    testPathName: "parseTest"
    modelFingerprint: "923F73B785F315A4B8AAE34C0C3BD9E5"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "text"
      modelFingerprint: "75F4C56DBEDD094E5417ACFA558A423E"
      valueUuid: "text"
    - type: "STATIC"
      name: "PemPrivateKeyParser.class"
      modelFingerprint: "AA275E35B77EF47B422DB707FE030241"
      valueUuid: "PemPrivateKeyParser.class"
      methodExercised:
        expression: "parse(text:text,password:uniqueUuid1):privateKey"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "94D8732E0693A782429EF28E2744BF57"
      valueUuid: "privateKey"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.pem.PemPrivateKeyParser"
      uuid: "PemPrivateKeyParser.class"
    - sapientType: "MOCK"
      valueType: "java.security.PrivateKey"
      uuid: "privateKey"
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
    - sapientType: "MOCK"
      valueType: "java.security.PrivateKey"
      uuid: "privateKey"
- method:
    name: "parse"
    sourceCodeSignature: "PrivateKey parse(String text, String password)"
    returnType: "java.security.PrivateKey"
    parameters:
    - name: "text"
      type: "java.lang.String"
    - name: "password"
      type: "java.lang.String"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    - idExternalInstruction: 0
      id: 3
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "036B2F015970068FF10EA3DB707CA193"
  paths:
  - pathId: "path1"
    testPathName: "parse1WhenTextIsNull"
    modelFingerprint: "C084C86578401DA8F886DE5092C6F74D"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "text"
      modelFingerprint: "07E7BB736C8D59AE4628F9EF20819A1B"
      valueUuid: "text"
    - type: "INPUT"
      name: "password"
      modelFingerprint: "57FABA1F4A3BB2CB7AD0DE4379566EA8"
      valueUuid: "password"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "23E040B7991D1D96E333017AA8D6186D"
      valueUuid: "privateKey"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "text"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "password1"
      valueType: "java.lang.String"
      uuid: "password"
    - sapientType: "NULL"
      valueType: "java.security.PrivateKey"
      uuid: "privateKey"
      fixed: true
    branches:
    - lineNumber: 202
      expression: "text == null"
      range: "(202,7)-(202,18)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "parse1WhenPrivateKeyIsNotNull"
    modelFingerprint: "99A4CEE9F106DC50CE0D0F5674EADD65"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "text"
      modelFingerprint: "75F4C56DBEDD094E5417ACFA558A423E"
      valueUuid: "text"
    - type: "INPUT"
      name: "password"
      modelFingerprint: "57FABA1F4A3BB2CB7AD0DE4379566EA8"
      valueUuid: "password"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "94D8732E0693A782429EF28E2744BF57"
      valueUuid: "privateKey"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "PrivateKey privateKey = pemParser.parse(text, password);"
      lineNumber: 207
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: pemParser - Method: parse"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "BASIC"
      content: !<regular>
        value: "password1"
      valueType: "java.lang.String"
      uuid: "password"
    - sapientType: "MOCK"
      valueType: "java.security.PrivateKey"
      uuid: "privateKey"
    branches:
    - lineNumber: 202
      expression: "text == null"
      range: "(202,7)-(202,18)"
      evaluatedAs: false
    - lineNumber: 206
      expression: "for-each(PEM_PARSERS)"
      range: "(206,31)-(206,41)"
      evaluatedAs: true
    - lineNumber: 208
      expression: "privateKey != null"
      range: "(208,9)-(208,26)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "parse1WhenPrivateKeyIsNullThrowsIllegalStateException"
    modelFingerprint: "CC23D04020D921162DB959F2C718E36C"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "text"
      modelFingerprint: "75F4C56DBEDD094E5417ACFA558A423E"
      valueUuid: "text"
    - type: "INPUT"
      name: "password"
      modelFingerprint: "57FABA1F4A3BB2CB7AD0DE4379566EA8"
      valueUuid: "password"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "774EB48FDEF24931550B064B33093DE9"
      valueUuid: "illegalStateException"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "PrivateKey privateKey = pemParser.parse(text, password);"
      lineNumber: 207
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: pemParser - Method: parse"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "BASIC"
      content: !<regular>
        value: "password1"
      valueType: "java.lang.String"
      uuid: "password"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Missing private key or unrecognized format"
            valueType: "java.lang.String"
            uuid: "uniqueUuid2"
            fixed: true
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 202
      expression: "text == null"
      range: "(202,7)-(202,18)"
      evaluatedAs: false
    - lineNumber: 206
      expression: "for-each(PEM_PARSERS)"
      range: "(206,31)-(206,41)"
      evaluatedAs: true
    - lineNumber: 208
      expression: "privateKey != null"
      range: "(208,9)-(208,26)"
      evaluatedAs: false
  - pathId: "path4"
    testPathName: "parse1WhenCaughtExceptionThrowsIllegalStateException"
    modelFingerprint: "C45437180E08A0AE1F710A631F35EF52"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "text"
      modelFingerprint: "75F4C56DBEDD094E5417ACFA558A423E"
      valueUuid: "text"
    - type: "INPUT"
      name: "password"
      modelFingerprint: "57FABA1F4A3BB2CB7AD0DE4379566EA8"
      valueUuid: "password"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "487FFD3642D617A51B21BA1DF41FE13A"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "PrivateKey privateKey = pemParser.parse(text, password);"
      lineNumber: 207
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: pemParser - Method: parse"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "BASIC"
      content: !<regular>
        value: "password1"
      valueType: "java.lang.String"
      uuid: "password"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Error loading private key file: A"
            valueType: "java.lang.String"
            uuid: "string10"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Exception"
              parameters:
              - name: "message"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "A"
                  valueType: "java.lang.String"
                  uuid: "message"
            valueType: "java.lang.Exception"
            uuid: "exception"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 202
      expression: "text == null"
      range: "(202,7)-(202,18)"
      evaluatedAs: false
    - lineNumber: 206
      expression: "for-each(PEM_PARSERS)"
      range: "(206,31)-(206,41)"
      evaluatedAs: true
    - lineNumber: 208
      expression: "privateKey != null"
      range: "(208,9)-(208,26)"
      evaluatedAs: true
    - lineNumber: 213
      expression: "catch-exception (Exception)"
      range: "(213,3)-(213,21)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path6"
    testPathName: "parse1WhenPEM_PARSERSIsNotEmptyAndPrivateKeyIsNullAndCaughtExceptionThrowsIllegalStateException"
    modelFingerprint: "06B8543C2D5A83CC66E5EB4B5463A4B8"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "text"
      modelFingerprint: "75F4C56DBEDD094E5417ACFA558A423E"
      valueUuid: "text"
    - type: "INPUT"
      name: "password"
      modelFingerprint: "57FABA1F4A3BB2CB7AD0DE4379566EA8"
      valueUuid: "password"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "487FFD3642D617A51B21BA1DF41FE13A"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "PrivateKey privateKey = pemParser.parse(text, password);"
      lineNumber: 207
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: pemParser - Method: parse"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "BASIC"
      content: !<regular>
        value: "password1"
      valueType: "java.lang.String"
      uuid: "password"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Error loading private key file: A"
            valueType: "java.lang.String"
            uuid: "string10"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Exception"
              parameters:
              - name: "message"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "A"
                  valueType: "java.lang.String"
                  uuid: "message"
            valueType: "java.lang.Exception"
            uuid: "exception"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 202
      expression: "text == null"
      range: "(202,7)-(202,18)"
      evaluatedAs: false
    - lineNumber: 206
      expression: "for-each(PEM_PARSERS)"
      range: "(206,31)-(206,41)"
      evaluatedAs: true
    - lineNumber: 208
      expression: "privateKey != null"
      range: "(208,9)-(208,26)"
      evaluatedAs: false
    - lineNumber: 213
      expression: "catch-exception (Exception)"
      range: "(213,3)-(213,21)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 3
      catchExceptions:
      - "java.lang.Exception"
