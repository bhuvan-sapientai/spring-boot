---
modelFingerprint: "DB8E17399E0EA0F1A385EE0D97B34372"
methods:
- method:
    name: "parse"
    signature: "parse(java.lang.String) : java.util.List<java.security.cert.X509Certificate>"
    sourceCodeSignature: "List<X509Certificate> parse(String text)"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.security.cert.CertificateException"
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.security.cert.CertificateException"
    instructionFingerprint: "871D99E365B1DA9465D693C0FE12B6D2"
  paths:
  - pathId: "path1"
    testPathName: "parseWhenTextIsNull"
    modelFingerprint: "827E435539FB73C80A405E4210C17D54"
    problemWasSolvedByProver: true
    truncated: false
    inputParameters:
    - type: "INPUT"
      name: "text"
      modelFingerprint: "017145E7AE87CC2BA436C412639F6CCF"
      index: 1
      valueUuid: "parse_string1"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "7D713A8BEEBB757BFBF8D3B40219C3A5"
      index: 2
      valueUuid: "parse_list1"
    uuid: "338a9b6c-713e-3004-8310-8ed2c59d6a79"
    deleted: false
    disabled: false
    ignoredBySystem: false
    prover: "DEFAULT"
    disabledStatusUpdatedByUser: false
    disabledStatusUpdatedBySystem: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "parse_string1"
      fixed: true
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "NULL"
      valueType: "java.util.List"
      genericValueType: "java.security.cert.X509Certificate"
      uuid: "parse_list1"
      fixed: true
      equalsMethodPresent: true
      explicitCastNeeded: false
  - pathId: "path6"
    testPathName: "parseWhenCaughtCertificateExceptionThrowsIllegalStateException"
    modelFingerprint: "7096A2E2CEC47A25904FC1EC9E6796EC"
    problemWasSolvedByProver: true
    catchBlockExercised:
      idExternalInstruction: 11
      id: 1
      catchExceptions:
      - "java.security.cert.CertificateException"
    truncated: false
    inputParameters:
    - type: "INPUT"
      name: "text"
      modelFingerprint: "6E37F18D7B060A2259FD8DF6EE4155A5"
      index: 1
      valueUuid: "parse_string1"
    - type: "STATIC"
      name: "CertificateFactory"
      modelFingerprint: "2448DA9E949095AE5B21A407095B0FEA"
      index: 2
      idsTryCatchBlockSurrounding:
      - 110001
      valueUuid: "uuid2"
      methodExercised:
        target: "java.security.cert.CertificateFactory"
        name: "getInstance"
        parameters:
        - name: "instance"
          valueUuid: "uuid1"
        throwsExceptions:
        - "java.security.cert.CertificateException"
        signature: "getInstance(String): CertificateFactory throws java.security.cert.CertificateException"
        returnValueUuid: "getCertificateFactory_certificateFactory1"
        access: 25
    - type: "RESULT"
      name: "result"
      modelFingerprint: "2CF76C3877A793C920E5E3FFBAABDC07"
      index: 3
      valueUuid: "getCertificateFactory_illegalStateException1"
    uuid: "dda8f05a-7c6e-385d-a7df-65b719c84f92"
    deleted: false
    disabled: false
    ignoredBySystem: false
    prover: "DEFAULT"
    disabledStatusUpdatedByUser: false
    disabledStatusUpdatedBySystem: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "parse_string1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "java.security.cert.CertificateFactory"
      uuid: "uuid2"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.security.cert.CertificateException"
        parameters: []
        privateConstructor: false
        createdByTargetCode: false
      valueType: "java.security.cert.CertificateException"
      uuid: "getCertificateFactory_certificateFactory1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "BASIC"
      content: !<regular>
        value: "X.509"
      valueType: "java.lang.String"
      uuid: "uuid1"
      fixed: true
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Unable to get X.509 certificate factory"
            valueType: "java.lang.String"
            fixed: true
            equalsMethodPresent: false
            explicitCastNeeded: false
        - name: "cause"
          value:
            sapientType: "EXCEPTION"
            content: !<new>
              target: "java.security.cert.CertificateException"
              parameters: []
              privateConstructor: false
              createdByTargetCode: false
            valueType: "java.security.cert.CertificateException"
            uuid: "getCertificateFactory_certificateFactory1"
            fixed: false
            equalsMethodPresent: false
            explicitCastNeeded: false
        privateConstructor: false
        createdByTargetCode: true
      valueType: "java.lang.IllegalStateException"
      uuid: "getCertificateFactory_illegalStateException1"
      fixed: true
      equalsMethodPresent: false
      explicitCastNeeded: false
  - pathId: "path3"
    testPathName: "parseWhenCollectionUtilsIsEmptyCerts"
    modelFingerprint: "F66E3BC9B043951C98232EF69C34FD53"
    problemWasSolvedByProver: false
    truncated: true
    inputParameters: []
    uuid: "0ecf8f60-265c-3e09-b5b9-c2fcef25e075"
    deleted: true
    disabled: false
    ignoredBySystem: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.List.copyOf(java.util.List<java.security.cert.X509Certificate>)\
        \ : java.util.List<java.security.cert.X509Certificate>"
    disabledStatusUpdatedByUser: false
    disabledStatusUpdatedBySystem: false
    allValues: []
  - pathId: "path5"
    testPathName: "parseWhenMatcherNotFindAndCaughtCertificateExceptionThrowsIllegalStateException"
    modelFingerprint: "4340804655CAEA1883FEE670E56D301B"
    problemWasSolvedByProver: true
    catchBlockExercised:
      idExternalInstruction: 28
      id: 2
      catchExceptions:
      - "java.security.cert.CertificateException"
    truncated: true
    inputParameters: []
    uuid: "1df735aa-ae89-3348-9dd6-423e7444f313"
    deleted: true
    disabled: false
    ignoredBySystem: true
    prover: "DEFAULT"
    disabledStatusUpdatedByUser: false
    disabledStatusUpdatedBySystem: false
    allValues: []
  - pathId: "path2"
    testPathName: "parseWhenInputStreamAvailableGreaterThan0AndCollectionUtilsIsEmptyCerts"
    modelFingerprint: "484D04E5F7B4331E35F3EBED8D1EB7C3"
    problemWasSolvedByProver: false
    truncated: false
    inputParameters:
    - type: "INPUT"
      name: "text"
      modelFingerprint: "788B1B6D16024D16D347A7FC6AA46DB4"
      index: 1
      valueUuid: "parse_string1"
    - type: "STATIC"
      name: "CollectionUtils"
      modelFingerprint: "44BF872EFE5C1B81A2400F5F246C6262"
      index: 2
      valueUuid: "uuid7"
      methodExercised:
        target: "org.springframework.util.CollectionUtils"
        name: "isEmpty"
        parameters:
        - name: "collection"
          valueUuid: "parse_arrayList1"
        signature: "isEmpty(List): boolean"
        returnValueUuid: "parse_boolean1"
        access: 9
    - type: "STATIC"
      name: "Assert"
      modelFingerprint: "FD101691B5B3E9D5167F69A405EF35F5"
      index: 3
      valueUuid: "uuid10"
      methodExercised:
        target: "org.springframework.util.Assert"
        name: "state"
        parameters:
        - name: "expression"
          valueUuid: "uuid8"
        - name: "message"
          valueUuid: "uuid9"
        signature: "state(boolean,String): void"
        returnValueUuid: "parse_void1"
        access: 9
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D09DA0A2F2A5A198916ADF51501CAAF9"
      index: 4
      valueUuid: "parse_list2"
    uuid: "7dbfec7e-54da-3601-866e-eee4a83b8a65"
    deleted: false
    disabled: false
    ignoredBySystem: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.io.ByteArrayInputStream.available() : int"
    disabledStatusUpdatedByUser: false
    disabledStatusUpdatedBySystem: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "parse_string1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "REAL"
      valueType: "org.springframework.util.CollectionUtils"
      uuid: "uuid7"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "parse_boolean1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.security.cert.X509Certificate"
      uuid: "parse_arrayList1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "uuid10"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "VOID"
      valueType: "void"
      uuid: "parse_void1"
      fixed: true
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uuid8"
      fixed: true
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "BASIC"
      content: !<regular>
        value: "Missing certificates or unrecognized format"
      valueType: "java.lang.String"
      uuid: "uuid9"
      fixed: true
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.security.cert.X509Certificate"
      uuid: "parse_list2"
      fixed: false
      equalsMethodPresent: true
      explicitCastNeeded: false
  - pathId: "path4"
    testPathName: "parseWhenInputStreamAvailableGreaterThan0AndCaughtCertificateExceptionThrowsIllegalStateException"
    modelFingerprint: "FEBA7A837CF1FD4704D6DC00F8F712CD"
    problemWasSolvedByProver: false
    catchBlockExercised:
      idExternalInstruction: 28
      id: 2
      catchExceptions:
      - "java.security.cert.CertificateException"
    truncated: false
    inputParameters:
    - type: "INPUT"
      name: "text"
      modelFingerprint: "111EED4A0CC6A74C13F8E8B0F5BBAB08"
      index: 1
      valueUuid: "parse_string1"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "EFA37E14BDFDAC3CFF5EB5ABFA447AFC"
      index: 2
      valueUuid: "readCertificates_illegalStateException1"
    uuid: "d0daca89-7f9e-3849-b113-3952438a9b4e"
    deleted: false
    disabled: true
    ignoredBySystem: false
    failureReason:
      reason: "DEPENDENCY_TO_THROW_EXCEPTION_NOT_FOUND"
    prover: "LLM"
    disabledStatusUpdatedByUser: false
    disabledStatusUpdatedBySystem: true
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "valid input value"
      valueType: "java.lang.String"
      uuid: "parse_string1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Error reading certificate: A"
            valueType: "java.lang.String"
            uuid: "readCertificates_string2"
            fixed: false
            equalsMethodPresent: false
            explicitCastNeeded: false
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.security.cert.CertificateException"
              parameters:
              - name: "msg"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "A"
                  valueType: "java.lang.String"
                  uuid: "readCertificates_string1"
                  fixed: false
                  equalsMethodPresent: false
                  explicitCastNeeded: false
              privateConstructor: false
              createdByTargetCode: false
            valueType: "java.security.cert.CertificateException"
            uuid: "readCertificates_certificateException1"
            fixed: false
            equalsMethodPresent: false
            explicitCastNeeded: false
        privateConstructor: false
        createdByTargetCode: true
      valueType: "java.lang.IllegalStateException"
      uuid: "readCertificates_illegalStateException1"
      fixed: true
      equalsMethodPresent: false
      explicitCastNeeded: false
