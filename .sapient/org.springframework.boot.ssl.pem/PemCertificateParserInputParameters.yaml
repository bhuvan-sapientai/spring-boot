---
modelFingerprint: "BC768AF8F6F5719C87900CA277B76A8B"
targetClass:
  fullClassName: "org.springframework.boot.ssl.pem.PemCertificateParser"
methods:
- method:
    name: "parse"
    sourceCodeSignature: "List<X509Certificate> parse(String text)"
    returnType: "java.util.List"
    genericReturnType: "java.security.cert.X509Certificate"
    parameters:
    - name: "text"
      type: "java.lang.String"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.security.cert.CertificateException"
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.security.cert.CertificateException"
    instructionFingerprint: "871D99E365B1DA9465D693C0FE12B6D2"
  paths:
  - pathId: "path1"
    testPathName: "parseWhenTextIsNull"
    modelFingerprint: "02C7F5F95CF05E8D66006FBB25C9CA4A"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "text"
      modelFingerprint: "07E7BB736C8D59AE4628F9EF20819A1B"
      valueUuid: "text"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "EFCF0CBF33E0909E95707839A30B0172"
      valueUuid: "list"
    disabled: false
    allValues:
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "text"
      fixed: true
    - sapientType: "NULL"
      valueType: "java.util.List"
      genericValueType: "java.security.cert.X509Certificate"
      uuid: "list"
      fixed: true
    branches:
    - lineNumber: 58
      expression: "text == null"
      range: "(58,7)-(58,18)"
      evaluatedAs: true
  - pathId: "path7"
    testPathName: "parseWhenCaughtCertificateExceptionThrowsIllegalStateException"
    modelFingerprint: "489FE2DA8FBF73E8C5A2E443A05FF1EE"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "text"
      modelFingerprint: "31AF76FE1D8053C27F838A5C01D8B127"
      valueUuid: "text"
    - type: "STATIC"
      name: "CertificateFactory.class"
      modelFingerprint: "D3B6A81A8D203E4D96CBB061617377B5"
      valueUuid: "CertificateFactory.class"
      methodExercised:
        expression: "getInstance(type:uniqueUuid1):certificateFactory"
        throwsExceptions:
        - "java.security.cert.CertificateException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "FA2FA41C67C9AB3959B46CF2C9C7249F"
      valueUuid: "illegalStateException"
    disabled: false
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "MOCK"
      valueType: "java.security.cert.CertificateFactory"
      uuid: "CertificateFactory.class"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.security.cert.CertificateException"
        parameters: []
      valueType: "java.security.cert.CertificateException"
      uuid: "certificateFactory"
    - sapientType: "BASIC"
      content: !<regular>
        value: "X.509"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Unable to get X.509 certificate factory"
            valueType: "java.lang.String"
            uuid: "uniqueUuid2"
            fixed: true
        - name: "cause"
          value:
            sapientType: "EXCEPTION"
            content: !<new>
              target: "java.security.cert.CertificateException"
              parameters: []
            valueType: "java.security.cert.CertificateException"
            uuid: "certificateFactory"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 58
      expression: "text == null"
      range: "(58,7)-(58,18)"
      evaluatedAs: false
    - lineNumber: 72
      expression: "catch-exception (CertificateException)"
      range: "(72,3)-(72,32)"
      evaluatedAs: true
      internalMethodName: "getCertificateFactory"
    calledSomeStaticInternalMethod: true
    catchBlockExercised:
      idExternalInstruction: 11
      id: 1
      catchExceptions:
      - "java.security.cert.CertificateException"
  - pathId: "path2"
    testPathName: "parseWhenInputStreamAvailableGreaterThan0AndCollectionUtilsIsEmptyCerts"
    modelFingerprint: "2E539569D659F8AC43E82E9FFFD00E2A"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "text"
      modelFingerprint: "75F4C56DBEDD094E5417ACFA558A423E"
      valueUuid: "text"
    - type: "STATIC"
      name: "CollectionUtils.class.real"
      modelFingerprint: "7C859158BC48A3419B20655A96B3D4A0"
      valueUuid: "CollectionUtils.class.real"
      methodExercised:
        expression: "isEmpty(collection:arrayList):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "234DF6CA71124C94826700711E642FDA"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid4,message:uniqueUuid5):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5E862CD71BA870A1F07368B451D5CE6A"
      valueUuid: "list2"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.io.ByteArrayInputStream.available() : int"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "text1"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "REAL"
      valueType: "org.springframework.util.CollectionUtils"
      uuid: "CollectionUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.security.cert.X509Certificate"
      uuid: "arrayList"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Missing certificates or unrecognized format"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.security.cert.X509Certificate"
      uuid: "list2"
    branches:
    - lineNumber: 58
      expression: "text == null"
      range: "(58,7)-(58,18)"
      evaluatedAs: false
    - lineNumber: 80
      expression: "matcher.find()"
      range: "(80,11)-(80,24)"
      evaluatedAs: true
      internalMethodName: "readCertificates"
    - lineNumber: 84
      expression: "inputStream.available() > 0"
      range: "(84,12)-(84,38)"
      evaluatedAs: true
      internalMethodName: "readCertificates"
    - lineNumber: 64
      expression: "!CollectionUtils.isEmpty(certs)"
      range: "(64,16)-(64,46)"
      evaluatedAs: false
    calledSomeStaticInternalMethod: true
  - pathId: "path5"
    testPathName: "parseWhenInputStreamAvailableGreaterThan0AndCaughtCertificateExceptionThrowsIllegalStateException"
    modelFingerprint: "0E6E9FF279B70B83EE591557FB8B78E7"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "text"
      modelFingerprint: "EA4681BEB587EDD859AD51AB5C926EE5"
      valueUuid: "text"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0E3A080E3BB3E3154907F71B9D4EFFE3"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "DEPENDENCY_TO_THROW_EXCEPTION_NOT_FOUND"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "BASIC"
      content: !<regular>
        value: "<valid_input_value>"
      valueType: "java.lang.String"
      uuid: "text"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Error reading certificate: A"
            valueType: "java.lang.String"
            uuid: "string2"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.security.cert.CertificateException"
              parameters:
              - name: "msg"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "A"
                  valueType: "java.lang.String"
                  uuid: "message"
            valueType: "java.security.cert.CertificateException"
            uuid: "certificateException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 58
      expression: "text == null"
      range: "(58,7)-(58,18)"
      evaluatedAs: false
    - lineNumber: 80
      expression: "matcher.find()"
      range: "(80,11)-(80,24)"
      evaluatedAs: false
      internalMethodName: "readCertificates"
    - lineNumber: 89
      expression: "catch-exception (CertificateException)"
      range: "(89,3)-(89,32)"
      evaluatedAs: true
      internalMethodName: "readCertificates"
    calledSomeStaticInternalMethod: true
    catchBlockExercised:
      idExternalInstruction: 28
      id: 2
      catchExceptions:
      - "java.security.cert.CertificateException"
