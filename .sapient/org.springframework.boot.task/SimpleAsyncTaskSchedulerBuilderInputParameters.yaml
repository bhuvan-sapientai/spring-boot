---
modelFingerprint: "7490C225EFAB53A487BBBA766F9A5357"
targetClass:
  fullClassName: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
methods:
- method:
    name: "threadNamePrefix"
    sourceCodeSignature: "SimpleAsyncTaskSchedulerBuilder threadNamePrefix(String\
      \ threadNamePrefix)"
    returnType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
    parameters:
    - name: "threadNamePrefix"
      type: "java.lang.String"
    instructionFingerprint: "159A4D074037386F98700BF4EE32E60D"
  paths:
  - pathId: "path1"
    testPathName: "threadNamePrefixTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "A8B73AF6A686253467657B9108B6115D"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "threadNamePrefix"
      modelFingerprint: "9F9EA50672AC88DCFFD3FE5EA043CC4A"
      valueUuid: "threadNamePrefix"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "E3616E7EED1D0BA8DA5363AB8153C8E3"
      valueUuid: "simpleAsyncTaskSchedulerBuilder3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
        parameters: []
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "threadNamePrefix1"
      valueType: "java.lang.String"
      uuid: "threadNamePrefix"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
        parameters:
        - name: "threadNamePrefix"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "threadNamePrefix1"
            valueType: "java.lang.String"
            uuid: "threadNamePrefix"
        - name: "concurrencyLimit"
          value:
            sapientType: "NULL"
            valueType: "java.lang.Integer"
            uuid: "uniqueUuid1"
        - name: "virtualThreads"
          value:
            sapientType: "NULL"
            valueType: "java.lang.Boolean"
            uuid: "uniqueUuid2"
        - name: "taskSchedulerCustomizers"
          value:
            sapientType: "NULL"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer"
            uuid: "uniqueUuid3"
        - name: "taskTerminationTimeout"
          value:
            sapientType: "NULL"
            valueType: "java.time.Duration"
            uuid: "uniqueUuid4"
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
      uuid: "simpleAsyncTaskSchedulerBuilder3"
      fixed: true
- method:
    name: "concurrencyLimit"
    sourceCodeSignature: "SimpleAsyncTaskSchedulerBuilder concurrencyLimit(Integer\
      \ concurrencyLimit)"
    returnType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
    parameters:
    - name: "concurrencyLimit"
      type: "java.lang.Integer"
    instructionFingerprint: "94DE40F1268785DDFB21FC33AF13F4B6"
  paths:
  - pathId: "path1"
    testPathName: "concurrencyLimitTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "91084169CD83E1DAEFFC59D8B0FC7087"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "concurrencyLimit"
      modelFingerprint: "01307B5194DB6C9A5300FB7B8989FC35"
      valueUuid: "concurrencyLimit"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "674CEE6AB8160E4D8AFE4BE8D4D34CE3"
      valueUuid: "simpleAsyncTaskSchedulerBuilder3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
        parameters: []
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.lang.Integer"
      uuid: "concurrencyLimit"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
        parameters:
        - name: "threadNamePrefix"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid5"
        - name: "concurrencyLimit"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "java.lang.Integer"
            uuid: "concurrencyLimit"
        - name: "virtualThreads"
          value:
            sapientType: "NULL"
            valueType: "java.lang.Boolean"
            uuid: "uniqueUuid6"
        - name: "taskSchedulerCustomizers"
          value:
            sapientType: "NULL"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer"
            uuid: "uniqueUuid7"
        - name: "taskTerminationTimeout"
          value:
            sapientType: "NULL"
            valueType: "java.time.Duration"
            uuid: "uniqueUuid8"
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
      uuid: "simpleAsyncTaskSchedulerBuilder3"
      fixed: true
- method:
    name: "virtualThreads"
    sourceCodeSignature: "SimpleAsyncTaskSchedulerBuilder virtualThreads(Boolean virtualThreads)"
    returnType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
    parameters:
    - name: "virtualThreads"
      type: "java.lang.Boolean"
    instructionFingerprint: "52A2BF8B4EE0E5BC3A0452DAE312A8E9"
  paths:
  - pathId: "path1"
    testPathName: "virtualThreadsTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "3D736B089EA646D9C086213E5BA6F2E0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "virtualThreads"
      modelFingerprint: "D3DE30A3C9568DD581224DB91FE70777"
      valueUuid: "virtualThreads"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "DA9D23ECB63341CB88759748191D2DBF"
      valueUuid: "simpleAsyncTaskSchedulerBuilder3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
        parameters: []
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "java.lang.Boolean"
      uuid: "virtualThreads"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
        parameters:
        - name: "threadNamePrefix"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid9"
        - name: "concurrencyLimit"
          value:
            sapientType: "NULL"
            valueType: "java.lang.Integer"
            uuid: "uniqueUuid10"
        - name: "virtualThreads"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "java.lang.Boolean"
            uuid: "virtualThreads"
        - name: "taskSchedulerCustomizers"
          value:
            sapientType: "NULL"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer"
            uuid: "uniqueUuid11"
        - name: "taskTerminationTimeout"
          value:
            sapientType: "NULL"
            valueType: "java.time.Duration"
            uuid: "uniqueUuid12"
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
      uuid: "simpleAsyncTaskSchedulerBuilder3"
      fixed: true
- method:
    name: "taskTerminationTimeout"
    sourceCodeSignature: "SimpleAsyncTaskSchedulerBuilder taskTerminationTimeout(Duration\
      \ taskTerminationTimeout)"
    returnType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
    parameters:
    - name: "taskTerminationTimeout"
      type: "java.time.Duration"
    instructionFingerprint: "463A5C868F4FF362094AA4CDA48AE64F"
  paths:
  - pathId: "path1"
    testPathName: "taskTerminationTimeoutTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "B064F0988D813C87E0B5886642AEDDEA"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "taskTerminationTimeout"
      modelFingerprint: "0CF258327AFB88AD6839766E67F5F74D"
      valueUuid: "taskTerminationTimeout"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4B822C1434D2DBB51D6861D35336B8FC"
      valueUuid: "simpleAsyncTaskSchedulerBuilder3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
        parameters: []
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.time.Duration"
        method: "ofDays"
        methodParameters:
        - name: "days"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "long"
            uuid: "taskTerminationTimeout-days"
      valueType: "java.time.Duration"
      uuid: "taskTerminationTimeout"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
        parameters:
        - name: "threadNamePrefix"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid13"
        - name: "concurrencyLimit"
          value:
            sapientType: "NULL"
            valueType: "java.lang.Integer"
            uuid: "uniqueUuid14"
        - name: "virtualThreads"
          value:
            sapientType: "NULL"
            valueType: "java.lang.Boolean"
            uuid: "uniqueUuid15"
        - name: "taskSchedulerCustomizers"
          value:
            sapientType: "NULL"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer"
            uuid: "uniqueUuid16"
        - name: "taskTerminationTimeout"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.time.Duration"
              method: "ofDays"
              methodParameters:
              - name: "days"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "long"
                  uuid: "taskTerminationTimeout-days"
            valueType: "java.time.Duration"
            uuid: "taskTerminationTimeout"
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
      uuid: "simpleAsyncTaskSchedulerBuilder3"
      fixed: true
- method:
    name: "customizers"
    sourceCodeSignature: "SimpleAsyncTaskSchedulerBuilder customizers(SimpleAsyncTaskSchedulerCustomizer...\
      \ customizers)"
    returnType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
    parameters:
    - name: "customizers"
      type: "org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer[]"
    instructionFingerprint: "1D7AFCD9DF2B8D9520E2B7F775D76ADE"
  paths:
  - pathId: "path1"
    testPathName: "customizersTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "5AE4D5E3515A50CA6DEAAC58E2DEE26E"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "customizers"
      modelFingerprint: "05622B767EAC240DE170CA682C3BB4D7"
      valueUuid: "customizers"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "6AC0A9E1CFE0258C0A07ACA92EBA5166"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid17):void"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "57F6A9D6989AAFF354F590D4FE34FA8B"
      methodExercised:
        expression: "customizers(customizers:list):simpleAsyncTaskSchedulerBuilder3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "CDB9FCD8266AA830CB5D7D72154607EC"
      valueUuid: "simpleAsyncTaskSchedulerBuilder3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
        parameters: []
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer[]"
      uuid: "customizers"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid17"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
      uuid: "simpleAsyncTaskSchedulerBuilder3"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
      uuid: "simpleAsyncTaskSchedulerBuilder3"
- method:
    name: "customizers"
    sourceCodeSignature: "SimpleAsyncTaskSchedulerBuilder customizers(Iterable<? extends\
      \ SimpleAsyncTaskSchedulerCustomizer> customizers)"
    returnType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
    parameters:
    - name: "customizers"
      type: "java.lang.Iterable"
    instructionFingerprint: "BE1A04AE7B2E413FC9FCD7EE21B16966"
  paths:
  - pathId: "path1"
    testPathName: "customizers1WhenSetIsNull"
    constructorSignature: "<init>() : void"
    modelFingerprint: "F72140E8538EC0B27F5FDC0087BDB392"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "customizers"
      modelFingerprint: "35A7F62D89EB1C4DD51B47BAFCC3B24D"
      valueUuid: "customizers"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "83AE264BD03532EC1A043BE04CEA63CE"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid18):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "41424F1CA93C01886F293F304A16BCE9"
      valueUuid: "simpleAsyncTaskSchedulerBuilder3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
        parameters: []
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer"
          uuid: "simpleAsyncTaskSchedulerCustomizer"
          collectionUuid: "customizers"
      valueType: "java.lang.Iterable"
      genericValueType: "? extends org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer"
      uuid: "customizers"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer"
          uuid: "simpleAsyncTaskSchedulerCustomizer"
          collectionUuid: "customizers"
      valueType: "java.lang.Iterable"
      genericValueType: "? extends org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid18"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
        parameters:
        - name: "threadNamePrefix"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid19"
        - name: "concurrencyLimit"
          value:
            sapientType: "NULL"
            valueType: "java.lang.Integer"
            uuid: "uniqueUuid20"
        - name: "virtualThreads"
          value:
            sapientType: "NULL"
            valueType: "java.lang.Boolean"
            uuid: "uniqueUuid21"
        - name: "taskSchedulerCustomizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashSet"
              parameters:
              - name: "c"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.Set"
                  uuid: "set"
              values:
              - sapientType: "MOCK"
                valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer"
                uuid: "simpleAsyncTaskSchedulerCustomizer"
                collectionUuid: "customizers"
            valueType: "java.util.Set"
            uuid: "set3"
        - name: "taskTerminationTimeout"
          value:
            sapientType: "NULL"
            valueType: "java.time.Duration"
            uuid: "uniqueUuid22"
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
      uuid: "simpleAsyncTaskSchedulerBuilder3"
      fixed: true
    branches:
    - lineNumber: 197
      expression: "set != null"
      range: "(197,40)-(197,50)"
      evaluatedAs: false
      internalMethodName: "append"
- method:
    name: "additionalCustomizers"
    sourceCodeSignature: "SimpleAsyncTaskSchedulerBuilder additionalCustomizers(SimpleAsyncTaskSchedulerCustomizer...\
      \ customizers)"
    returnType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
    parameters:
    - name: "customizers"
      type: "org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer[]"
    instructionFingerprint: "3E53482C6F2D3BD213508D173B17D4FF"
  paths:
  - pathId: "path1"
    testPathName: "additionalCustomizersTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "4BFB524F015B351201D62E7A26822E7D"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "customizers"
      modelFingerprint: "05622B767EAC240DE170CA682C3BB4D7"
      valueUuid: "customizers"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "6AC0A9E1CFE0258C0A07ACA92EBA5166"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid23):void"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "0BC3326C36324B7A8DFA94F5FEA8FD94"
      methodExercised:
        expression: "additionalCustomizers(customizers:list):simpleAsyncTaskSchedulerBuilder3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "CDB9FCD8266AA830CB5D7D72154607EC"
      valueUuid: "simpleAsyncTaskSchedulerBuilder3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
        parameters: []
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer[]"
      uuid: "customizers"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid23"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
      uuid: "simpleAsyncTaskSchedulerBuilder3"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
      uuid: "simpleAsyncTaskSchedulerBuilder3"
- method:
    name: "additionalCustomizers"
    sourceCodeSignature: "SimpleAsyncTaskSchedulerBuilder additionalCustomizers(Iterable<?\
      \ extends SimpleAsyncTaskSchedulerCustomizer> customizers)"
    returnType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
    parameters:
    - name: "customizers"
      type: "java.lang.Iterable"
    instructionFingerprint: "78D226A4BA148112F5B75D223D25BCE2"
  paths:
  - pathId: "path1"
    testPathName: "additionalCustomizers1WhenSetIsNull"
    constructorSignature: "<init>() : void"
    modelFingerprint: "3844804D4A130F1F9E441CE0C502BFF0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "customizers"
      modelFingerprint: "35A7F62D89EB1C4DD51B47BAFCC3B24D"
      valueUuid: "customizers"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "83AE264BD03532EC1A043BE04CEA63CE"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid24):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "41424F1CA93C01886F293F304A16BCE9"
      valueUuid: "simpleAsyncTaskSchedulerBuilder3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
        parameters: []
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer"
          uuid: "simpleAsyncTaskSchedulerCustomizer"
          collectionUuid: "customizers"
      valueType: "java.lang.Iterable"
      genericValueType: "? extends org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer"
      uuid: "customizers"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer"
          uuid: "simpleAsyncTaskSchedulerCustomizer"
          collectionUuid: "customizers"
      valueType: "java.lang.Iterable"
      genericValueType: "? extends org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid24"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
        parameters:
        - name: "threadNamePrefix"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid25"
        - name: "concurrencyLimit"
          value:
            sapientType: "NULL"
            valueType: "java.lang.Integer"
            uuid: "uniqueUuid26"
        - name: "virtualThreads"
          value:
            sapientType: "NULL"
            valueType: "java.lang.Boolean"
            uuid: "uniqueUuid27"
        - name: "taskSchedulerCustomizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashSet"
              parameters:
              - name: "c"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.Set"
                  uuid: "set"
              values:
              - sapientType: "MOCK"
                valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer"
                uuid: "simpleAsyncTaskSchedulerCustomizer"
                collectionUuid: "customizers"
            valueType: "java.util.Set"
            uuid: "set3"
        - name: "taskTerminationTimeout"
          value:
            sapientType: "NULL"
            valueType: "java.time.Duration"
            uuid: "uniqueUuid28"
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
      uuid: "simpleAsyncTaskSchedulerBuilder3"
      fixed: true
    branches:
    - lineNumber: 197
      expression: "set != null"
      range: "(197,40)-(197,50)"
      evaluatedAs: false
      internalMethodName: "append"
- method:
    name: "build"
    sourceCodeSignature: "SimpleAsyncTaskScheduler build()"
    returnType: "org.springframework.scheduling.concurrent.SimpleAsyncTaskScheduler"
    instructionFingerprint: "253EB2B62762CD2FA9296FC1E330AAED"
  paths:
  - pathId: "path1"
    testPathName: "buildTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "6EE48D0E29BE47C635FBBF991E3CF628"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "29DAC749D6BA8758D0D19E12199C9DC8"
      methodExercised:
        expression: "configure(taskScheduler:simpleAsyncTaskScheduler):simpleAsyncTaskScheduler2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "721E25B4C3A191EC8005D15B210959CF"
      valueUuid: "simpleAsyncTaskScheduler2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
        parameters: []
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.scheduling.concurrent.SimpleAsyncTaskScheduler"
      uuid: "simpleAsyncTaskScheduler2"
    - sapientType: "ANY"
      valueType: "org.springframework.scheduling.concurrent.SimpleAsyncTaskScheduler"
      uuid: "simpleAsyncTaskScheduler"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.scheduling.concurrent.SimpleAsyncTaskScheduler"
      uuid: "simpleAsyncTaskScheduler2"
- method:
    name: "configure"
    sourceCodeSignature: "<T extends SimpleAsyncTaskScheduler> T configure(T taskScheduler)"
    returnType: "org.springframework.scheduling.concurrent.SimpleAsyncTaskScheduler"
    parameters:
    - name: "taskScheduler"
      type: "org.springframework.scheduling.concurrent.SimpleAsyncTaskScheduler"
    instructionFingerprint: "4620BD3CD9C2424A3F23B920C6D682DE"
  paths:
  - pathId: "path1"
    testPathName: "configureWhenCollectionUtilsIsEmptyThisCustomizers"
    constructorSignature: "<init>() : void"
    modelFingerprint: "45C256D52F6A0890D60E161250DB8929"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "taskScheduler"
      modelFingerprint: "0C291ED0240A5E83A4DBF30C74DE45A6"
      valueUuid: "taskScheduler"
    - type: "STATIC"
      name: "PropertyMapper.class"
      modelFingerprint: "B1B41702847FC8B31AB887927AD81CC1"
      valueUuid: "PropertyMapper.class"
      methodExercised:
        expression: "get():propertyMapper"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "44331629620EEBF77844433E7BB802E9"
      valueUuid: "propertyMapper"
      methodExercised:
        expression: "alwaysApplyingWhenNonNull():propertyMapper2"
    - type: "LOCAL_VARIABLE"
      name: "map"
      modelFingerprint: "3CA490B427FFE191E8BAEBB105047C1B"
      valueUuid: "propertyMapper2"
      methodExercised:
        expression: "from(value:uniqueUuid29):propertyMapper.Source"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "7F471C9EE842352039FDFCB21D31C037"
      valueUuid: "propertyMapper.Source"
      methodExercised:
        expression: "to(consumer:uniqueUuid30):void"
    - type: "LOCAL_VARIABLE"
      name: "map"
      modelFingerprint: "3C3F8CF40A2E825C718F81DC4B862CC2"
      valueUuid: "propertyMapper2"
      methodExercised:
        expression: "from(value:uniqueUuid31):propertyMapper.Source2"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "863EE5ED5B493523F7672AB59CD67B8A"
      valueUuid: "propertyMapper.Source2"
      methodExercised:
        expression: "to(consumer:uniqueUuid33):void2"
    - type: "LOCAL_VARIABLE"
      name: "map"
      modelFingerprint: "9EB49C86D50236B4A6258070C3DD6C06"
      valueUuid: "propertyMapper2"
      methodExercised:
        expression: "from(value:uniqueUuid35):propertyMapper.Source3"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "6343FA10439324183A86461BAFCD9911"
      valueUuid: "propertyMapper.Source3"
      methodExercised:
        expression: "to(consumer:uniqueUuid37):void3"
    - type: "LOCAL_VARIABLE"
      name: "map"
      modelFingerprint: "CDD7560945182734D68D51D6C8859915"
      valueUuid: "propertyMapper2"
      methodExercised:
        expression: "from(value:uniqueUuid39):propertyMapper.Source4"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "E6A6984D952D3B0FCD40908F1733F39A"
      valueUuid: "propertyMapper.Source4"
      methodExercised:
        expression: "as(adapter:uniqueUuid41):propertyMapper.Source5"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "5191C5A67CD6D9016AE3D798D5E9CC67"
      valueUuid: "propertyMapper.Source5"
      methodExercised:
        expression: "to(consumer:uniqueUuid44):void4"
    - type: "STATIC"
      name: "CollectionUtils.class.real"
      modelFingerprint: "4E604720065A510960F1F2503BCD6980"
      valueUuid: "CollectionUtils.class.real"
      methodExercised:
        expression: "isEmpty(collection:uniqueUuid46):boolean1"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "42759B299B0008008ABDB2733CC18103"
      valueUuid: "taskScheduler"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "map.from(this.concurrencyLimit).to(taskScheduler::setConcurrencyLimit);"
      lineNumber: 187
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type PropertyMapper.Source - Method: to"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
        parameters: []
      valueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerBuilder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.scheduling.concurrent.SimpleAsyncTaskScheduler"
      uuid: "taskScheduler"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.PropertyMapper"
      uuid: "PropertyMapper.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.PropertyMapper"
      uuid: "propertyMapper"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.PropertyMapper"
      uuid: "propertyMapper"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.PropertyMapper"
      uuid: "propertyMapper2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.PropertyMapper"
      uuid: "propertyMapper2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.PropertyMapper$Source"
      uuid: "propertyMapper.Source"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "uniqueUuid29"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.PropertyMapper$Source"
      uuid: "propertyMapper.Source"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Consumer"
      uuid: "uniqueUuid30"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.PropertyMapper"
      uuid: "propertyMapper2"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.boot.context.properties.PropertyMapper$Source"
        localVariableValue:
          sapientType: "MOCK"
          valueType: "org.springframework.boot.context.properties.PropertyMapper"
          uuid: "propertyMapper2"
        methodParameters:
        - value:
            sapientType: "NULL"
            valueType: "java.lang.Integer"
            uuid: "uniqueUuid34"
        methodName: "from"
      valueType: "org.springframework.boot.context.properties.PropertyMapper$Source"
      uuid: "propertyMapper.Source2"
    - sapientType: "NULL"
      valueType: "java.lang.Integer"
      uuid: "uniqueUuid31"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.boot.context.properties.PropertyMapper$Source"
        localVariableValue:
          sapientType: "MOCK"
          valueType: "org.springframework.boot.context.properties.PropertyMapper"
          uuid: "propertyMapper2"
        methodParameters:
        - value:
            sapientType: "NULL"
            valueType: "java.lang.Integer"
            uuid: "uniqueUuid34"
        methodName: "from"
      valueType: "org.springframework.boot.context.properties.PropertyMapper$Source"
      uuid: "propertyMapper.Source2"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Consumer"
      uuid: "uniqueUuid33"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.PropertyMapper"
      uuid: "propertyMapper2"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.boot.context.properties.PropertyMapper$Source"
        localVariableValue:
          sapientType: "MOCK"
          valueType: "org.springframework.boot.context.properties.PropertyMapper"
          uuid: "propertyMapper2"
        methodParameters:
        - value:
            sapientType: "NULL"
            valueType: "java.lang.Boolean"
            uuid: "uniqueUuid38"
        methodName: "from"
      valueType: "org.springframework.boot.context.properties.PropertyMapper$Source"
      uuid: "propertyMapper.Source3"
    - sapientType: "NULL"
      valueType: "java.lang.Boolean"
      uuid: "uniqueUuid35"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.boot.context.properties.PropertyMapper$Source"
        localVariableValue:
          sapientType: "MOCK"
          valueType: "org.springframework.boot.context.properties.PropertyMapper"
          uuid: "propertyMapper2"
        methodParameters:
        - value:
            sapientType: "NULL"
            valueType: "java.lang.Boolean"
            uuid: "uniqueUuid38"
        methodName: "from"
      valueType: "org.springframework.boot.context.properties.PropertyMapper$Source"
      uuid: "propertyMapper.Source3"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Consumer"
      uuid: "uniqueUuid37"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.PropertyMapper"
      uuid: "propertyMapper2"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.boot.context.properties.PropertyMapper$Source"
        localVariableValue:
          sapientType: "MOCK"
          valueType: "org.springframework.boot.context.properties.PropertyMapper"
          uuid: "propertyMapper2"
        methodParameters:
        - value:
            sapientType: "NULL"
            valueType: "java.time.Duration"
            uuid: "uniqueUuid43"
        methodName: "from"
      valueType: "org.springframework.boot.context.properties.PropertyMapper$Source"
      uuid: "propertyMapper.Source4"
    - sapientType: "NULL"
      valueType: "java.time.Duration"
      uuid: "uniqueUuid39"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.boot.context.properties.PropertyMapper$Source"
        localVariableValue:
          sapientType: "MOCK"
          valueType: "org.springframework.boot.context.properties.PropertyMapper"
          uuid: "propertyMapper2"
        methodParameters:
        - value:
            sapientType: "NULL"
            valueType: "java.time.Duration"
            uuid: "uniqueUuid43"
        methodName: "from"
      valueType: "org.springframework.boot.context.properties.PropertyMapper$Source"
      uuid: "propertyMapper.Source4"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.boot.context.properties.PropertyMapper$Source"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<method_return_from_value>
            target: "org.springframework.boot.context.properties.PropertyMapper$Source"
            localVariableValue:
              sapientType: "MOCK"
              valueType: "org.springframework.boot.context.properties.PropertyMapper"
              uuid: "propertyMapper2"
            methodParameters:
            - value:
                sapientType: "NULL"
                valueType: "java.time.Duration"
            methodName: "from"
          valueType: "org.springframework.boot.context.properties.PropertyMapper$Source"
          uuid: "propertyMapper.Source4"
        methodParameters:
        - name: "adapter"
          value:
            sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
            valueType: "java.util.function.Function"
            uuid: "uniqueUuid45"
        methodName: "as"
      valueType: "org.springframework.boot.context.properties.PropertyMapper$Source"
      uuid: "propertyMapper.Source5"
    - sapientType: "ANY"
      valueType: "java.util.function.Function"
      uuid: "uniqueUuid41"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.boot.context.properties.PropertyMapper$Source"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<method_return_from_value>
            target: "org.springframework.boot.context.properties.PropertyMapper$Source"
            localVariableValue:
              sapientType: "MOCK"
              valueType: "org.springframework.boot.context.properties.PropertyMapper"
              uuid: "propertyMapper2"
            methodParameters:
            - value:
                sapientType: "NULL"
                valueType: "java.time.Duration"
            methodName: "from"
          valueType: "org.springframework.boot.context.properties.PropertyMapper$Source"
          uuid: "propertyMapper.Source4"
        methodParameters:
        - name: "adapter"
          value:
            sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
            valueType: "java.util.function.Function"
            uuid: "uniqueUuid45"
        methodName: "as"
      valueType: "org.springframework.boot.context.properties.PropertyMapper$Source"
      uuid: "propertyMapper.Source5"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Consumer"
      uuid: "uniqueUuid44"
    - sapientType: "REAL"
      valueType: "org.springframework.util.CollectionUtils"
      uuid: "CollectionUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "NULL"
      valueType: "java.util.Set"
      genericValueType: "org.springframework.boot.task.SimpleAsyncTaskSchedulerCustomizer"
      uuid: "uniqueUuid46"
    - sapientType: "MOCK"
      valueType: "org.springframework.scheduling.concurrent.SimpleAsyncTaskScheduler"
      uuid: "taskScheduler"
    branches:
    - lineNumber: 190
      expression: "!CollectionUtils.isEmpty(this.customizers)"
      range: "(190,7)-(190,48)"
      evaluatedAs: false
