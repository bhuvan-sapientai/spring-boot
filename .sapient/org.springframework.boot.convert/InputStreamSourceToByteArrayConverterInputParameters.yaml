---
modelFingerprint: "207028253D6CA5DEFC817229AF742B05"
methods:
- method:
    name: "convert"
    signature: "convert(org.springframework.core.io.InputStreamSource) : byte[]"
    sourceCodeSignature: "byte[] convert(InputStreamSource source)"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
    instructionFingerprint: "46B31515ECD280470BDC4B4F7FB00309"
  paths:
  - pathId: "path1"
    testPathName: "convertTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "89F2D36CB41ABB6AD665047916B71368"
    problemWasSolvedByProver: false
    truncated: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      index: 1
      valueUuid: "target"
    - type: "INPUT"
      name: "source"
      modelFingerprint: "5C3757097C254A86BBE7BCAEF1825E9E"
      index: 2
      valueUuid: "convert_inputStreamSource1"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "9E9ACA869AA3E76DE9F2EEA5C0B08D13"
      index: 3
      idsTryCatchBlockSurrounding:
      - 1
      valueUuid: "convert_inputStreamSource1"
      methodExercised:
        target: "source"
        name: "getInputStream"
        parameters: []
        throwsExceptions:
        - "java.io.IOException"
        signature: "getInputStream(): InputStream throws java.io.IOException"
        returnValueUuid: "convert_inputStream1"
        access: 1025
    - type: "STATIC"
      name: "FileCopyUtils"
      modelFingerprint: "CE91AC20818DFD4993AB07965DA5ADB8"
      index: 4
      idsTryCatchBlockSurrounding:
      - 1
      valueUuid: "uuid1"
      methodExercised:
        target: "org.springframework.util.FileCopyUtils"
        name: "copyToByteArray"
        parameters:
        - name: "in"
          valueUuid: "convert_inputStream1"
        throwsExceptions:
        - "java.io.IOException"
        signature: "copyToByteArray(InputStream): byte[] throws java.io.IOException"
        returnValueUuid: "convert_byte[]1"
        access: 9
    - type: "RESULT"
      name: "result"
      modelFingerprint: "740324D8AEEA83F5639543B37CAABC19"
      index: 5
      valueUuid: "convert_byte[]1"
    uuid: "bcac3615-eb3e-3c15-88e5-1c9363f33c9d"
    deleted: false
    disabled: true
    ignoredBySystem: false
    failureReason:
      reason: "UNKNOWN_REASON"
    prover: "DEFAULT"
    disabledStatusUpdatedByUser: false
    disabledStatusUpdatedBySystem: true
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.convert.InputStreamSourceToByteArrayConverter"
        parameters: []
        privateConstructor: false
        createdByTargetCode: false
      valueType: "org.springframework.boot.convert.InputStreamSourceToByteArrayConverter"
      uuid: "target"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.InputStreamSource"
      uuid: "convert_inputStreamSource1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.InputStreamSource"
      uuid: "convert_inputStreamSource1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "convert_inputStream1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "org.springframework.util.FileCopyUtils"
      uuid: "uuid1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "convert_byte[]1"
      fixed: false
      equalsMethodPresent: true
      explicitCastNeeded: false
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "convert_inputStream1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "convert_byte[]1"
      fixed: false
      equalsMethodPresent: true
      explicitCastNeeded: false
  - pathId: "path2"
    testPathName: "convertWhenOriginIsNotNullThrowsIllegalStateException"
    constructorSignature: "<init>() : void"
    modelFingerprint: "9F36900BE9236F561C99DC3B6658412A"
    problemWasSolvedByProver: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
    truncated: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      index: 1
      valueUuid: "target"
    - type: "INPUT"
      name: "source"
      modelFingerprint: "5C3757097C254A86BBE7BCAEF1825E9E"
      index: 2
      valueUuid: "convert_inputStreamSource1"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "0D63F42BB1DAE02E396485407BD32893"
      index: 3
      idsTryCatchBlockSurrounding:
      - 1
      valueUuid: "convert_inputStreamSource1"
      methodExercised:
        target: "source"
        name: "getInputStream"
        parameters: []
        throwsExceptions:
        - "java.io.IOException"
        signature: "getInputStream(): InputStream throws java.io.IOException"
        returnValueUuid: "convert_inputStream1"
        access: 1025
    - type: "STATIC"
      name: "Origin"
      modelFingerprint: "7DC3C6388975F640975EDAA6F4E7FBEC"
      index: 4
      valueUuid: "uuid1"
      methodExercised:
        target: "org.springframework.boot.origin.Origin"
        name: "from"
        parameters:
        - name: "source"
          valueUuid: "convert_inputStreamSource1"
        signature: "from(InputStreamSource): Origin"
        returnValueUuid: "getName_origin1"
        access: 9
    - type: "RESULT"
      name: "result"
      modelFingerprint: "06E58012B3B6769865B3E385BD15429D"
      index: 5
      valueUuid: "convert_illegalStateException1"
    uuid: "f9ae9271-acf9-3244-8213-540798a56fca"
    deleted: false
    disabled: false
    ignoredBySystem: false
    prover: "DEFAULT"
    disabledStatusUpdatedByUser: false
    disabledStatusUpdatedBySystem: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.convert.InputStreamSourceToByteArrayConverter"
        parameters: []
        privateConstructor: false
        createdByTargetCode: false
      valueType: "org.springframework.boot.convert.InputStreamSourceToByteArrayConverter"
      uuid: "target"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.InputStreamSource"
      uuid: "convert_inputStreamSource1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.InputStreamSource"
      uuid: "convert_inputStreamSource1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.io.IOException"
        parameters: []
        privateConstructor: false
        createdByTargetCode: false
      valueType: "java.io.IOException"
      uuid: "convert_inputStream1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "uuid1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "getName_origin1"
      fixed: false
      nameForMock: "getName_origin1"
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.InputStreamSource"
      uuid: "convert_inputStreamSource1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Unable to read from getName_origin1"
            valueType: "java.lang.String"
            uuid: "convert_string1"
            fixed: false
            equalsMethodPresent: false
            explicitCastNeeded: false
        - name: "cause"
          value:
            sapientType: "EXCEPTION"
            content: !<new>
              target: "java.io.IOException"
              parameters: []
              privateConstructor: false
              createdByTargetCode: false
            valueType: "java.io.IOException"
            uuid: "convert_inputStream1"
            fixed: false
            equalsMethodPresent: false
            explicitCastNeeded: false
        privateConstructor: false
        createdByTargetCode: true
      valueType: "java.lang.IllegalStateException"
      uuid: "convert_illegalStateException1"
      fixed: true
      equalsMethodPresent: false
      explicitCastNeeded: false
  - pathId: "path3"
    testPathName: "convertWhenSourceNotInstanceOfResourceThrowsIllegalStateException"
    constructorSignature: "<init>() : void"
    modelFingerprint: "39509FC8E0C94BE681319BF9734BB4DC"
    problemWasSolvedByProver: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
    truncated: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      index: 1
      valueUuid: "target"
    - type: "INPUT"
      name: "source"
      modelFingerprint: "5C3757097C254A86BBE7BCAEF1825E9E"
      index: 2
      valueUuid: "convert_inputStreamSource1"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "0D63F42BB1DAE02E396485407BD32893"
      index: 3
      idsTryCatchBlockSurrounding:
      - 1
      valueUuid: "convert_inputStreamSource1"
      methodExercised:
        target: "source"
        name: "getInputStream"
        parameters: []
        throwsExceptions:
        - "java.io.IOException"
        signature: "getInputStream(): InputStream throws java.io.IOException"
        returnValueUuid: "convert_inputStream1"
        access: 1025
    - type: "STATIC"
      name: "Origin"
      modelFingerprint: "D1ED6DB5AEA9F04D7C2F246D9A29E2E5"
      index: 4
      valueUuid: "uuid1"
      methodExercised:
        target: "org.springframework.boot.origin.Origin"
        name: "from"
        parameters:
        - name: "source"
          valueUuid: "convert_inputStreamSource1"
        signature: "from(InputStreamSource): Origin"
        returnValueUuid: "getName_origin1"
        access: 9
    - type: "RESULT"
      name: "result"
      modelFingerprint: "053202151BE19777386B2771F1E24D69"
      index: 5
      valueUuid: "convert_illegalStateException1"
    uuid: "bca02bdf-c776-34ac-9050-66a4b931f279"
    deleted: false
    disabled: false
    ignoredBySystem: false
    prover: "DEFAULT"
    disabledStatusUpdatedByUser: false
    disabledStatusUpdatedBySystem: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.convert.InputStreamSourceToByteArrayConverter"
        parameters: []
        privateConstructor: false
        createdByTargetCode: false
      valueType: "org.springframework.boot.convert.InputStreamSourceToByteArrayConverter"
      uuid: "target"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.InputStreamSource"
      uuid: "convert_inputStreamSource1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.InputStreamSource"
      uuid: "convert_inputStreamSource1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.io.IOException"
        parameters: []
        privateConstructor: false
        createdByTargetCode: false
      valueType: "java.io.IOException"
      uuid: "convert_inputStream1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "uuid1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "NULL"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "getName_origin1"
      fixed: true
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.InputStreamSource"
      uuid: "convert_inputStreamSource1"
      fixed: false
      equalsMethodPresent: false
      explicitCastNeeded: false
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Unable to read from input stream source"
            valueType: "java.lang.String"
            fixed: true
            equalsMethodPresent: false
            explicitCastNeeded: false
        - name: "cause"
          value:
            sapientType: "EXCEPTION"
            content: !<new>
              target: "java.io.IOException"
              parameters: []
              privateConstructor: false
              createdByTargetCode: false
            valueType: "java.io.IOException"
            uuid: "convert_inputStream1"
            fixed: false
            equalsMethodPresent: false
            explicitCastNeeded: false
        privateConstructor: false
        createdByTargetCode: true
      valueType: "java.lang.IllegalStateException"
      uuid: "convert_illegalStateException1"
      fixed: true
      equalsMethodPresent: false
      explicitCastNeeded: false
