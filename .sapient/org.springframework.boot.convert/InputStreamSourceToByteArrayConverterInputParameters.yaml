---
modelFingerprint: "9A7C14F14DE75D28F4F04E925318787E"
targetClass:
  fullClassName: "org.springframework.boot.convert.InputStreamSourceToByteArrayConverter"
methods:
- method:
    name: "convert"
    sourceCodeSignature: "byte[] convert(InputStreamSource source)"
    returnType: "byte[]"
    parameters:
    - name: "source"
      type: "org.springframework.core.io.InputStreamSource"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
    instructionFingerprint: "46B31515ECD280470BDC4B4F7FB00309"
  paths:
  - pathId: "path1"
    testPathName: "convertTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "AB1E960CDE82FCB38613666E23F3CEF2"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "source"
      modelFingerprint: "F3DCCA1F4EE0F5AD5F611D789F3B03C4"
      valueUuid: "source"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "36759AB71A496F500F9CA32C3586BAC5"
      valueUuid: "source"
      methodExercised:
        expression: "getInputStream():inputStream"
        throwsExceptions:
        - "java.io.IOException"
    - type: "STATIC"
      name: "FileCopyUtils.class"
      modelFingerprint: "08B20428D7C74D6EF6F0751255F2A829"
      valueUuid: "FileCopyUtils.class"
      methodExercised:
        expression: "copyToByteArray(in:inputStream):byteArray"
        throwsExceptions:
        - "java.io.IOException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "E2BCA4D1B70332EEE4A7058CEF2E1EFD"
      valueUuid: "byteArray"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.convert.InputStreamSourceToByteArrayConverter"
        parameters: []
      valueType: "org.springframework.boot.convert.InputStreamSourceToByteArrayConverter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.InputStreamSource"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.InputStreamSource"
      uuid: "source"
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "inputStream"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.FileCopyUtils"
      uuid: "FileCopyUtils.class"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "byteArray"
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "inputStream"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "byte[]"
      uuid: "byteArray"
  - pathId: "path2"
    testPathName: "convertWhenOriginIsNotNullThrowsIllegalStateException"
    constructorSignature: "<init>() : void"
    modelFingerprint: "E3CCB68A874C0E167C5B2B842EDC9A36"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "source"
      modelFingerprint: "F3DCCA1F4EE0F5AD5F611D789F3B03C4"
      valueUuid: "source"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "1BAF2FBF22B5E8EE61AC321C6398C76D"
      valueUuid: "source"
      methodExercised:
        expression: "getInputStream():inputStream"
        throwsExceptions:
        - "java.io.IOException"
    - type: "STATIC"
      name: "Origin.class"
      modelFingerprint: "2BB18E1C89F86F66EE99AA0C2D73BB2D"
      valueUuid: "Origin.class"
      methodExercised:
        expression: "from(source:source):origin"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "68215E60BE5A92224632D7AC889DE800"
      valueUuid: "illegalStateException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.convert.InputStreamSourceToByteArrayConverter"
        parameters: []
      valueType: "org.springframework.boot.convert.InputStreamSourceToByteArrayConverter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.InputStreamSource"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.InputStreamSource"
      uuid: "source"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.io.IOException"
        parameters: []
      valueType: "java.io.IOException"
      uuid: "inputStream"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "Origin.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "origin"
      nameForMock: "origin"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.InputStreamSource"
      uuid: "source"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Unable to read from origin"
            valueType: "java.lang.String"
            uuid: "string2"
        - name: "cause"
          value:
            sapientType: "EXCEPTION"
            content: !<new>
              target: "java.io.IOException"
              parameters: []
            valueType: "java.io.IOException"
            uuid: "inputStream"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 39
      expression: "catch-exception (IOException)"
      range: "(39,3)-(39,23)"
      evaluatedAs: true
    - lineNumber: 46
      expression: "origin != null"
      range: "(46,7)-(46,20)"
      evaluatedAs: true
      internalMethodName: "getName"
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
  - pathId: "path3"
    testPathName: "convertWhenSourceNotInstanceOfResourceThrowsIllegalStateException"
    constructorSignature: "<init>() : void"
    modelFingerprint: "5BDF526B7F699654E18D6A7EDAAA2C71"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "source"
      modelFingerprint: "F3DCCA1F4EE0F5AD5F611D789F3B03C4"
      valueUuid: "source"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "1BAF2FBF22B5E8EE61AC321C6398C76D"
      valueUuid: "source"
      methodExercised:
        expression: "getInputStream():inputStream"
        throwsExceptions:
        - "java.io.IOException"
    - type: "STATIC"
      name: "Origin.class"
      modelFingerprint: "24F019883BE5FD3D69F2FEFA43BB2C82"
      valueUuid: "Origin.class"
      methodExercised:
        expression: "from(source:source):origin"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "01DC7CBC4B220D3C77890AEE6EFE28DD"
      valueUuid: "illegalStateException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.convert.InputStreamSourceToByteArrayConverter"
        parameters: []
      valueType: "org.springframework.boot.convert.InputStreamSourceToByteArrayConverter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.InputStreamSource"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.InputStreamSource"
      uuid: "source"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.io.IOException"
        parameters: []
      valueType: "java.io.IOException"
      uuid: "inputStream"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "Origin.class"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "origin"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.InputStreamSource"
      uuid: "source"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Unable to read from input stream source"
            valueType: "java.lang.String"
            uuid: "uniqueUuid1"
            fixed: true
        - name: "cause"
          value:
            sapientType: "EXCEPTION"
            content: !<new>
              target: "java.io.IOException"
              parameters: []
            valueType: "java.io.IOException"
            uuid: "inputStream"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 39
      expression: "catch-exception (IOException)"
      range: "(39,3)-(39,23)"
      evaluatedAs: true
    - lineNumber: 46
      expression: "origin != null"
      range: "(46,7)-(46,20)"
      evaluatedAs: false
      internalMethodName: "getName"
    - lineNumber: 49
      expression: "source instanceof Resource resource"
      range: "(49,7)-(49,41)"
      evaluatedAs: false
      internalMethodName: "getName"
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
