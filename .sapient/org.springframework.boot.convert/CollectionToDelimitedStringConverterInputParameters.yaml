---
modelFingerprint: "23BAC137A43F4F9D32A0EC5C7E76ED36"
targetClass:
  fullClassName: "org.springframework.boot.convert.CollectionToDelimitedStringConverter"
methods:
- method:
    name: "getConvertibleTypes"
    sourceCodeSignature: "Set<ConvertiblePair> getConvertibleTypes()"
    returnType: "java.util.Set"
    genericReturnType: "org.springframework.core.convert.converter.GenericConverter$ConvertiblePair"
    instructionFingerprint: "A26B0E89D5DABE294F88F50F2224A339"
  paths:
  - pathId: "path1"
    testPathName: "getConvertibleTypesTest"
    constructorSignature: "<init>(org.springframework.core.convert.ConversionService)\
      \ : void"
    modelFingerprint: "660FB3184F4D025EF9EEA1BE3B70FA76"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "241FB8FF4849D4F44034A7279F5B50E9"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "42137E15186D8EF2DDB513DC38335EBF"
      valueUuid: "set"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.convert.CollectionToDelimitedStringConverter"
        parameters:
        - name: "conversionService"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.convert.ConversionService"
            uuid: "conversionService"
      valueType: "org.springframework.boot.convert.CollectionToDelimitedStringConverter"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.core.convert.converter.GenericConverter$ConvertiblePair"
            parameters:
            - name: "sourceType"
              value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "java.util.Collection"
                valueType: "java.lang.Class"
                genericValueType: "java.util.Collection"
                fixed: true
            - name: "targetType"
              value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.String"
                valueType: "java.lang.Class"
                genericValueType: "java.lang.String"
                fixed: true
          valueType: "org.springframework.core.convert.converter.GenericConverter$ConvertiblePair"
          uuid: "genericConverter.ConvertiblePair"
          fixed: true
      valueType: "java.util.Set"
      genericValueType: "org.springframework.core.convert.converter.GenericConverter$ConvertiblePair"
      uuid: "set"
- method:
    name: "matches"
    sourceCodeSignature: "boolean matches(TypeDescriptor sourceType, TypeDescriptor\
      \ targetType)"
    returnType: "boolean"
    parameters:
    - name: "sourceType"
      type: "org.springframework.core.convert.TypeDescriptor"
    - name: "targetType"
      type: "org.springframework.core.convert.TypeDescriptor"
    instructionFingerprint: "BB2BEBE5772E983F388932759B880BE0"
  paths:
  - pathId: "path1"
    testPathName: "matchesWhenSourceElementTypeIsNull"
    constructorSignature: "<init>(org.springframework.core.convert.ConversionService)\
      \ : void"
    modelFingerprint: "E10EA7DA83387CA4651E81F438F2B128"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "241FB8FF4849D4F44034A7279F5B50E9"
      valueUuid: "target"
    - type: "INPUT"
      name: "sourceType"
      modelFingerprint: "2FFF26BD9B0CE97DDB65EA1E2F1EB7E4"
      valueUuid: "sourceType"
    - type: "INPUT"
      name: "targetType"
      modelFingerprint: "6F1AA1CCF0481D3BCFE67EFB2BB4F52E"
      valueUuid: "targetType"
    - type: "LOCAL_VARIABLE"
      name: "sourceType"
      modelFingerprint: "2FA4A175430043BD8962968164CB3BE5"
      valueUuid: "sourceType"
      methodExercised:
        expression: "getElementTypeDescriptor():typeDescriptor"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.convert.CollectionToDelimitedStringConverter"
        parameters:
        - name: "conversionService"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.convert.ConversionService"
            uuid: "conversionService"
      valueType: "org.springframework.boot.convert.CollectionToDelimitedStringConverter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "sourceType"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "targetType"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "sourceType"
    - sapientType: "NULL"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "typeDescriptor"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 49
      expression: "targetType == null"
      range: "(49,7)-(49,24)"
      evaluatedAs: false
    - lineNumber: 49
      expression: "sourceElementType == null"
      range: "(49,29)-(49,53)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "matchesWhenSourceElementTypeGetTypeIsAssignableFromTargetTypeGetType"
    constructorSignature: "<init>(org.springframework.core.convert.ConversionService)\
      \ : void"
    modelFingerprint: "10D5BDE9CC789D650E004CDE8F16162B"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "F4FE1F638E53790B766AA80EBE6107FC"
      valueUuid: "target"
    - type: "INPUT"
      name: "sourceType"
      modelFingerprint: "2FFF26BD9B0CE97DDB65EA1E2F1EB7E4"
      valueUuid: "sourceType"
    - type: "INPUT"
      name: "targetType"
      modelFingerprint: "ED140620F9F80C88AC6521C456F50510"
      valueUuid: "targetType"
    - type: "LOCAL_VARIABLE"
      name: "sourceType"
      modelFingerprint: "8B0C0427022F3172414168DF8F010435"
      valueUuid: "sourceType"
      methodExercised:
        expression: "getElementTypeDescriptor():typeDescriptor"
    - type: "FIELD"
      name: "conversionService"
      modelFingerprint: "21CBAEF5CCB9069577AA23C04BB2177A"
      valueUuid: "conversionService"
      methodExercised:
        expression: "canConvert(sourceType:typeDescriptor,targetType:targetType):boolean1"
    - type: "LOCAL_VARIABLE"
      name: "sourceElementType"
      modelFingerprint: "DF6BE1818C72B981C168DC4F59944B9B"
      valueUuid: "typeDescriptor"
      methodExercised:
        expression: "getType():type"
    - type: "LOCAL_VARIABLE"
      name: "targetType"
      modelFingerprint: "03099C7E051229BE4EBE3346F50DB7C4"
      valueUuid: "targetType"
      methodExercised:
        expression: "getType():type2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isAssignableFrom(java.lang.Class<?>)\
        \ : boolean"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.convert.CollectionToDelimitedStringConverter"
        parameters:
        - name: "conversionService"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.convert.ConversionService"
            uuid: "conversionService"
      valueType: "org.springframework.boot.convert.CollectionToDelimitedStringConverter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "sourceType"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.convert.TypeDescriptor"
        parameters:
        - name: "resolvableType"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.ResolvableType"
            uuid: "targetType-resolvableType"
        - name: "type"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "type2"
        - name: "annotations"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.annotation.Annotation[]"
            uuid: "targetType-annotations"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "targetType"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "sourceType"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.convert.TypeDescriptor"
        parameters:
        - name: "resolvableType"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.ResolvableType"
            uuid: "typeDescriptor-resolvableType"
        - name: "type"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "type"
        - name: "annotations"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.annotation.Annotation[]"
            uuid: "typeDescriptor-annotations"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "typeDescriptor"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.convert.TypeDescriptor"
        parameters:
        - name: "resolvableType"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.ResolvableType"
            uuid: "typeDescriptor-resolvableType"
        - name: "type"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "type"
        - name: "annotations"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.annotation.Annotation[]"
            uuid: "typeDescriptor-annotations"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "typeDescriptor"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.convert.TypeDescriptor"
        parameters:
        - name: "resolvableType"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.ResolvableType"
            uuid: "targetType-resolvableType"
        - name: "type"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "type2"
        - name: "annotations"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.annotation.Annotation[]"
            uuid: "targetType-annotations"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "targetType"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.convert.TypeDescriptor"
        parameters:
        - name: "resolvableType"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.ResolvableType"
            uuid: "typeDescriptor-resolvableType"
        - name: "type"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "type"
        - name: "annotations"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.annotation.Annotation[]"
            uuid: "typeDescriptor-annotations"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "typeDescriptor"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "type"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.convert.TypeDescriptor"
        parameters:
        - name: "resolvableType"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.ResolvableType"
            uuid: "targetType-resolvableType"
        - name: "type"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "type2"
        - name: "annotations"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.annotation.Annotation[]"
            uuid: "targetType-annotations"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "targetType"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "type2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 49
      expression: "targetType == null"
      range: "(49,7)-(49,24)"
      evaluatedAs: false
    - lineNumber: 49
      expression: "sourceElementType == null"
      range: "(49,29)-(49,53)"
      evaluatedAs: false
    - lineNumber: 52
      expression: "this.conversionService.canConvert(sourceElementType, targetType)"
      range: "(52,10)-(52,73)"
      evaluatedAs: false
    - lineNumber: 53
      expression: "sourceElementType.getType().isAssignableFrom(targetType.getType())"
      range: "(53,8)-(53,73)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "matchesWhenSourceElementTypeGetTypeNotIsAssignableFromTargetTypeGetType"
    constructorSignature: "<init>(org.springframework.core.convert.ConversionService)\
      \ : void"
    modelFingerprint: "DAD324FF1AD6B9A6BC6CAC79DA3A150A"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "F4FE1F638E53790B766AA80EBE6107FC"
      valueUuid: "target"
    - type: "INPUT"
      name: "sourceType"
      modelFingerprint: "2FFF26BD9B0CE97DDB65EA1E2F1EB7E4"
      valueUuid: "sourceType"
    - type: "INPUT"
      name: "targetType"
      modelFingerprint: "ED140620F9F80C88AC6521C456F50510"
      valueUuid: "targetType"
    - type: "LOCAL_VARIABLE"
      name: "sourceType"
      modelFingerprint: "8B0C0427022F3172414168DF8F010435"
      valueUuid: "sourceType"
      methodExercised:
        expression: "getElementTypeDescriptor():typeDescriptor"
    - type: "FIELD"
      name: "conversionService"
      modelFingerprint: "21CBAEF5CCB9069577AA23C04BB2177A"
      valueUuid: "conversionService"
      methodExercised:
        expression: "canConvert(sourceType:typeDescriptor,targetType:targetType):boolean1"
    - type: "LOCAL_VARIABLE"
      name: "sourceElementType"
      modelFingerprint: "DF6BE1818C72B981C168DC4F59944B9B"
      valueUuid: "typeDescriptor"
      methodExercised:
        expression: "getType():type"
    - type: "LOCAL_VARIABLE"
      name: "targetType"
      modelFingerprint: "03099C7E051229BE4EBE3346F50DB7C4"
      valueUuid: "targetType"
      methodExercised:
        expression: "getType():type2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5633A2B0C967879105766C98D64A3959"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isAssignableFrom(java.lang.Class<?>)\
        \ : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.convert.CollectionToDelimitedStringConverter"
        parameters:
        - name: "conversionService"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.convert.ConversionService"
            uuid: "conversionService"
      valueType: "org.springframework.boot.convert.CollectionToDelimitedStringConverter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "sourceType"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.convert.TypeDescriptor"
        parameters:
        - name: "resolvableType"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.ResolvableType"
            uuid: "targetType-resolvableType"
        - name: "type"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "type2"
        - name: "annotations"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.annotation.Annotation[]"
            uuid: "targetType-annotations"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "targetType"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "sourceType"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.convert.TypeDescriptor"
        parameters:
        - name: "resolvableType"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.ResolvableType"
            uuid: "typeDescriptor-resolvableType"
        - name: "type"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "type"
        - name: "annotations"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.annotation.Annotation[]"
            uuid: "typeDescriptor-annotations"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "typeDescriptor"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.ConversionService"
      uuid: "conversionService"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.convert.TypeDescriptor"
        parameters:
        - name: "resolvableType"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.ResolvableType"
            uuid: "typeDescriptor-resolvableType"
        - name: "type"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "type"
        - name: "annotations"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.annotation.Annotation[]"
            uuid: "typeDescriptor-annotations"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "typeDescriptor"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.convert.TypeDescriptor"
        parameters:
        - name: "resolvableType"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.ResolvableType"
            uuid: "targetType-resolvableType"
        - name: "type"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "type2"
        - name: "annotations"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.annotation.Annotation[]"
            uuid: "targetType-annotations"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "targetType"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.convert.TypeDescriptor"
        parameters:
        - name: "resolvableType"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.ResolvableType"
            uuid: "typeDescriptor-resolvableType"
        - name: "type"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "type"
        - name: "annotations"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.annotation.Annotation[]"
            uuid: "typeDescriptor-annotations"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "typeDescriptor"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "type"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.convert.TypeDescriptor"
        parameters:
        - name: "resolvableType"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.ResolvableType"
            uuid: "targetType-resolvableType"
        - name: "type"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "type2"
        - name: "annotations"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.annotation.Annotation[]"
            uuid: "targetType-annotations"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "targetType"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "type2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 49
      expression: "targetType == null"
      range: "(49,7)-(49,24)"
      evaluatedAs: false
    - lineNumber: 49
      expression: "sourceElementType == null"
      range: "(49,29)-(49,53)"
      evaluatedAs: false
    - lineNumber: 52
      expression: "this.conversionService.canConvert(sourceElementType, targetType)"
      range: "(52,10)-(52,73)"
      evaluatedAs: false
    - lineNumber: 53
      expression: "sourceElementType.getType().isAssignableFrom(targetType.getType())"
      range: "(53,8)-(53,73)"
      evaluatedAs: false
- method:
    name: "convert"
    sourceCodeSignature: "Object convert(Object source, TypeDescriptor sourceType,\
      \ TypeDescriptor targetType)"
    returnType: "java.lang.Object"
    parameters:
    - name: "source"
      type: "java.lang.Object"
    - name: "sourceType"
      type: "org.springframework.core.convert.TypeDescriptor"
    - name: "targetType"
      type: "org.springframework.core.convert.TypeDescriptor"
    instructionFingerprint: "68447DEF1D522BBB66912C1BC1457597"
  paths:
  - pathId: "path1"
    testPathName: "convertWhenSourceIsNull"
    constructorSignature: "<init>(org.springframework.core.convert.ConversionService)\
      \ : void"
    modelFingerprint: "03CB2FB9319B8A7DEA62D3BBE327140D"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "241FB8FF4849D4F44034A7279F5B50E9"
      valueUuid: "target"
    - type: "INPUT"
      name: "source"
      modelFingerprint: "F6FFB6CDEC4F875F0D04D6C217ECB41A"
      valueUuid: "source"
    - type: "INPUT"
      name: "sourceType"
      modelFingerprint: "91EECCE55C37529E96EA4FBD7681A2FD"
      valueUuid: "sourceType"
    - type: "INPUT"
      name: "targetType"
      modelFingerprint: "6F1AA1CCF0481D3BCFE67EFB2BB4F52E"
      valueUuid: "targetType"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B5832848421B6892B8D06BE61ADCD847"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.convert.CollectionToDelimitedStringConverter"
        parameters:
        - name: "conversionService"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.convert.ConversionService"
            uuid: "conversionService"
      valueType: "org.springframework.boot.convert.CollectionToDelimitedStringConverter"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "source"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "sourceType"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "targetType"
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
      fixed: true
    branches:
    - lineNumber: 58
      expression: "source == null"
      range: "(58,7)-(58,20)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "convertWhenSourceIsNotNull"
    constructorSignature: "<init>(org.springframework.core.convert.ConversionService)\
      \ : void"
    modelFingerprint: "A1C25418E2EA07091B1A22BE0461A232"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "241FB8FF4849D4F44034A7279F5B50E9"
      valueUuid: "target"
    - type: "INPUT"
      name: "source"
      modelFingerprint: "6B0DF48F73FA31DFEA9606D7747AC183"
      valueUuid: "source"
    - type: "INPUT"
      name: "sourceType"
      modelFingerprint: "91EECCE55C37529E96EA4FBD7681A2FD"
      valueUuid: "sourceType"
    - type: "INPUT"
      name: "targetType"
      modelFingerprint: "6F1AA1CCF0481D3BCFE67EFB2BB4F52E"
      valueUuid: "targetType"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A5457F8C44AF90FDF3ACB1B2051E1175"
      valueUuid: "object"
    disabled: false
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_INTERNAL_METHOD_RECURSIVE_CALL"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.convert.CollectionToDelimitedStringConverter"
        parameters:
        - name: "conversionService"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.convert.ConversionService"
            uuid: "conversionService"
      valueType: "org.springframework.boot.convert.CollectionToDelimitedStringConverter"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      uuid: "source"
      explicitCastNeeded: true
      explicitCastForOverloadedMethods: "java.lang.Object"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "sourceType"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.convert.TypeDescriptor"
      uuid: "targetType"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    branches:
    - lineNumber: 58
      expression: "source == null"
      range: "(58,7)-(58,20)"
      evaluatedAs: false
