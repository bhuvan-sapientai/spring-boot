---
modelFingerprint: "673F3FF14BA61FA217546DCA0D986CD4"
targetClass:
  fullClassName: "org.springframework.boot.convert.StringToFileConverter"
methods:
- method:
    name: "convert"
    sourceCodeSignature: "File convert(String source)"
    returnType: "java.io.File"
    parameters:
    - name: "source"
      type: "java.lang.String"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
    instructionFingerprint: "50A4DCF47130540871D6098A2A8F35BF"
  paths:
  - pathId: "path1"
    testPathName: "convertWhenResourceUtilsIsUrlSource"
    constructorSignature: "<init>() : void"
    modelFingerprint: "4EDAE5CF4753DC1D5EC52248F249A3EE"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "source"
      modelFingerprint: "77826ACA4ED033964A20959AE8EBA5EA"
      valueUuid: "source"
    - type: "STATIC"
      name: "ResourceUtils.class"
      modelFingerprint: "44648530B05F9064659AAAD74F8C5886"
      valueUuid: "ResourceUtils.class"
      methodExercised:
        expression: "isUrl(resourceLocation:source):boolean1"
        staticAccess: true
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "7207E3D896DDC63F94E1DAADFC4AE742"
      valueUuid: "defaultResourceLoader"
      methodExercised:
        expression: "getResource(location:source):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "5D4C4ADD1505B9D4D0CEDD5B1512ED5F"
      valueUuid: "resource"
      methodExercised:
        expression: "getFile():file"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "F10E0885B7AAA7871F2562FC3D0D2216"
      valueUuid: "file"
    disabled: true
    failureReason:
      reason: "REFLECTION_CALL_FAILURE"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.convert.StringToFileConverter"
        parameters: []
      valueType: "org.springframework.boot.convert.StringToFileConverter"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.io.DefaultResourceLoader"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "NULL"
            valueType: "java.lang.ClassLoader"
            uuid: "uniqueUuid1"
      valueType: "org.springframework.core.io.DefaultResourceLoader"
      uuid: "defaultResourceLoader"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.core.io.Resource"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.core.io.DefaultResourceLoader"
            parameters:
            - name: "classLoader"
              value:
                sapientType: "NULL"
                valueType: "java.lang.ClassLoader"
          valueType: "org.springframework.core.io.DefaultResourceLoader"
          uuid: "defaultResourceLoader"
          fixed: true
        methodParameters:
        - name: "location"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "source"
        methodName: "getResource"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.core.io.Resource"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.core.io.DefaultResourceLoader"
            parameters:
            - name: "classLoader"
              value:
                sapientType: "NULL"
                valueType: "java.lang.ClassLoader"
          valueType: "org.springframework.core.io.DefaultResourceLoader"
          uuid: "defaultResourceLoader"
          fixed: true
        methodParameters:
        - name: "location"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "source"
        methodName: "getResource"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
    branches:
    - lineNumber: 40
      expression: "ResourceUtils.isUrl(source)"
      range: "(40,7)-(40,33)"
      evaluatedAs: true
  - pathId: "path6"
    testPathName: "convertWhenCaughtIOExceptionThrowsIllegalStateException"
    constructorSignature: "<init>() : void"
    modelFingerprint: "5F2E5C139AB527BBF4FC299BAE73D2E4"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "source"
      modelFingerprint: "77826ACA4ED033964A20959AE8EBA5EA"
      valueUuid: "source"
    - type: "STATIC"
      name: "ResourceUtils.class"
      modelFingerprint: "44648530B05F9064659AAAD74F8C5886"
      valueUuid: "ResourceUtils.class"
      methodExercised:
        expression: "isUrl(resourceLocation:source):boolean1"
        staticAccess: true
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "7207E3D896DDC63F94E1DAADFC4AE742"
      valueUuid: "defaultResourceLoader"
      methodExercised:
        expression: "getResource(location:source):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "5D4C4ADD1505B9D4D0CEDD5B1512ED5F"
      valueUuid: "resource"
      methodExercised:
        expression: "getFile():file"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "1D82ADF61C3A89EB0296B55498A7359A"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "OBJECT_REFERENCE_COULD_NOT_BE_MOCKED_AND_NEEDS_TO_STRING"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.convert.StringToFileConverter"
        parameters: []
      valueType: "org.springframework.boot.convert.StringToFileConverter"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.io.DefaultResourceLoader"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "NULL"
            valueType: "java.lang.ClassLoader"
            uuid: "uniqueUuid2"
      valueType: "org.springframework.core.io.DefaultResourceLoader"
      uuid: "defaultResourceLoader"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.core.io.Resource"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.core.io.DefaultResourceLoader"
            parameters:
            - name: "classLoader"
              value:
                sapientType: "NULL"
                valueType: "java.lang.ClassLoader"
          valueType: "org.springframework.core.io.DefaultResourceLoader"
          uuid: "defaultResourceLoader"
          fixed: true
        methodParameters:
        - name: "location"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "source"
        methodName: "getResource"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.core.io.Resource"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.core.io.DefaultResourceLoader"
            parameters:
            - name: "classLoader"
              value:
                sapientType: "NULL"
                valueType: "java.lang.ClassLoader"
          valueType: "org.springframework.core.io.DefaultResourceLoader"
          uuid: "defaultResourceLoader"
          fixed: true
        methodParameters:
        - name: "location"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "source"
        methodName: "getResource"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Could not retrieve file for D: B"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 40
      expression: "ResourceUtils.isUrl(source)"
      range: "(40,7)-(40,33)"
      evaluatedAs: true
    - lineNumber: 58
      expression: "catch-exception (IOException)"
      range: "(58,3)-(58,23)"
      evaluatedAs: true
      internalMethodName: "getFile"
    catchBlockExercised:
      idExternalInstruction: 11
      id: 1
      catchExceptions:
      - "java.io.IOException"
  - pathId: "path2"
    testPathName: "convertWhenFileExists"
    constructorSignature: "<init>() : void"
    modelFingerprint: "BBE3664129FB9D75FBA5F8D7F0EB9BDC"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "source"
      modelFingerprint: "77826ACA4ED033964A20959AE8EBA5EA"
      valueUuid: "source"
    - type: "STATIC"
      name: "ResourceUtils.class.real"
      modelFingerprint: "1A76BCE4F5150F3B937A188139D85257"
      valueUuid: "ResourceUtils.class.real"
      methodExercised:
        expression: "isUrl(resourceLocation:source):boolean1"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "669B42FD10C341F92F555922102CCA45"
      valueUuid: "file"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "if (file.exists()) {"
      lineNumber: 44
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: file - Method: exists"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.convert.StringToFileConverter"
        parameters: []
      valueType: "org.springframework.boot.convert.StringToFileConverter"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "source"
      valueType: "java.io.File"
      uuid: "file"
      fixed: true
    branches:
    - lineNumber: 40
      expression: "ResourceUtils.isUrl(source)"
      range: "(40,7)-(40,33)"
      evaluatedAs: false
    - lineNumber: 44
      expression: "file.exists()"
      range: "(44,7)-(44,19)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "convertWhenResourceExists"
    constructorSignature: "<init>() : void"
    modelFingerprint: "B4167F49C9628963D1267270D7151E27"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "source"
      modelFingerprint: "CA57CC20A9EBC79858FA8E6B7526CE39"
      valueUuid: "source"
    - type: "STATIC"
      name: "ResourceUtils.class.real"
      modelFingerprint: "421F392B8BBD1C249738F4C3C67D3A89"
      valueUuid: "ResourceUtils.class.real"
      methodExercised:
        expression: "isUrl(resourceLocation:source):boolean1"
        staticAccess: true
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "6B50A7042E3319A4717EAA0232230BE1"
      valueUuid: "defaultResourceLoader"
      methodExercised:
        expression: "getResource(location:source):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "FC01EF01ED7BAC417E72D57C79809924"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean3"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BF386FAE760547158A22B8F8CAC4FDD9"
      valueUuid: "resource"
      methodExercised:
        expression: "getFile():file2"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "F10E0885B7AAA7871F2562FC3D0D2216"
      valueUuid: "file2"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "if (file.exists()) {"
      lineNumber: 44
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: file - Method: exists"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.convert.StringToFileConverter"
        parameters: []
      valueType: "org.springframework.boot.convert.StringToFileConverter"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "source1"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "source1"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.io.DefaultResourceLoader"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "NULL"
            valueType: "java.lang.ClassLoader"
            uuid: "uniqueUuid3"
      valueType: "org.springframework.core.io.DefaultResourceLoader"
      uuid: "defaultResourceLoader"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.core.io.Resource"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.core.io.DefaultResourceLoader"
            parameters:
            - name: "classLoader"
              value:
                sapientType: "NULL"
                valueType: "java.lang.ClassLoader"
          valueType: "org.springframework.core.io.DefaultResourceLoader"
          uuid: "defaultResourceLoader"
          fixed: true
        methodParameters:
        - name: "location"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "source1"
            valueType: "java.lang.String"
            uuid: "source"
        methodName: "getResource"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "source1"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.core.io.Resource"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.core.io.DefaultResourceLoader"
            parameters:
            - name: "classLoader"
              value:
                sapientType: "NULL"
                valueType: "java.lang.ClassLoader"
          valueType: "org.springframework.core.io.DefaultResourceLoader"
          uuid: "defaultResourceLoader"
          fixed: true
        methodParameters:
        - name: "location"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "source1"
            valueType: "java.lang.String"
            uuid: "source"
        methodName: "getResource"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.core.io.Resource"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.core.io.DefaultResourceLoader"
            parameters:
            - name: "classLoader"
              value:
                sapientType: "NULL"
                valueType: "java.lang.ClassLoader"
          valueType: "org.springframework.core.io.DefaultResourceLoader"
          uuid: "defaultResourceLoader"
          fixed: true
        methodParameters:
        - name: "location"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "source1"
            valueType: "java.lang.String"
            uuid: "source"
        methodName: "getResource"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file2-pathname"
      valueType: "java.io.File"
      uuid: "file2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file2-pathname"
      valueType: "java.io.File"
      uuid: "file2"
    branches:
    - lineNumber: 40
      expression: "ResourceUtils.isUrl(source)"
      range: "(40,7)-(40,33)"
      evaluatedAs: false
    - lineNumber: 44
      expression: "file.exists()"
      range: "(44,7)-(44,19)"
      evaluatedAs: false
    - lineNumber: 48
      expression: "resource.exists()"
      range: "(48,7)-(48,23)"
      evaluatedAs: true
  - pathId: "path4"
    testPathName: "convertWhenResourceNotExists"
    constructorSignature: "<init>() : void"
    modelFingerprint: "B4AD0C542CB7C045C26FE3CAAC50002E"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "source"
      modelFingerprint: "2DCE0C2D028EC17FDCD9075DD79B36E6"
      valueUuid: "source"
    - type: "STATIC"
      name: "ResourceUtils.class.real"
      modelFingerprint: "CE991174C319E5712742CE56D88DF727"
      valueUuid: "ResourceUtils.class.real"
      methodExercised:
        expression: "isUrl(resourceLocation:source):boolean1"
        staticAccess: true
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "8ECBC0A2B6B0F3E24C26B009A5B8B4F1"
      valueUuid: "defaultResourceLoader"
      methodExercised:
        expression: "getResource(location:source):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "979FEA195A4304385DBD6B79EE737BCE"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "2B972CED59B3BADF1338DD4ECD672178"
      valueUuid: "file"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.convert.StringToFileConverter"
        parameters: []
      valueType: "org.springframework.boot.convert.StringToFileConverter"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.io.DefaultResourceLoader"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "NULL"
            valueType: "java.lang.ClassLoader"
            uuid: "uniqueUuid1"
      valueType: "org.springframework.core.io.DefaultResourceLoader"
      uuid: "defaultResourceLoader"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.core.io.Resource"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.core.io.DefaultResourceLoader"
            parameters:
            - name: "classLoader"
              value:
                sapientType: "NULL"
                valueType: "java.lang.ClassLoader"
          valueType: "org.springframework.core.io.DefaultResourceLoader"
          uuid: "defaultResourceLoader"
          fixed: true
        methodParameters:
        - name: "location"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "source"
        methodName: "getResource"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.core.io.Resource"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.core.io.DefaultResourceLoader"
            parameters:
            - name: "classLoader"
              value:
                sapientType: "NULL"
                valueType: "java.lang.ClassLoader"
          valueType: "org.springframework.core.io.DefaultResourceLoader"
          uuid: "defaultResourceLoader"
          fixed: true
        methodParameters:
        - name: "location"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "source"
        methodName: "getResource"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "source"
      valueType: "java.io.File"
      uuid: "file"
      fixed: true
    branches:
    - lineNumber: 40
      expression: "ResourceUtils.isUrl(source)"
      range: "(40,7)-(40,33)"
      evaluatedAs: false
    - lineNumber: 44
      expression: "file.exists()"
      range: "(44,7)-(44,19)"
      evaluatedAs: false
    - lineNumber: 48
      expression: "resource.exists()"
      range: "(48,7)-(48,23)"
      evaluatedAs: false
  - pathId: "path5"
    testPathName: "convertWhenResourceExistsAndCaughtIOExceptionThrowsIllegalStateException"
    constructorSignature: "<init>() : void"
    modelFingerprint: "2AB4A5C4BB77A4142A61C46D47A22CE9"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "source"
      modelFingerprint: "CA57CC20A9EBC79858FA8E6B7526CE39"
      valueUuid: "source"
    - type: "STATIC"
      name: "ResourceUtils.class.real"
      modelFingerprint: "421F392B8BBD1C249738F4C3C67D3A89"
      valueUuid: "ResourceUtils.class.real"
      methodExercised:
        expression: "isUrl(resourceLocation:source):boolean1"
        staticAccess: true
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "6B50A7042E3319A4717EAA0232230BE1"
      valueUuid: "defaultResourceLoader"
      methodExercised:
        expression: "getResource(location:source):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "FC01EF01ED7BAC417E72D57C79809924"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean3"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BF386FAE760547158A22B8F8CAC4FDD9"
      valueUuid: "resource"
      methodExercised:
        expression: "getFile():file2"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "734D621296D9586F4162A9802C2467AE"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "if (file.exists()) {"
      lineNumber: 44
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: file - Method: exists"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.convert.StringToFileConverter"
        parameters: []
      valueType: "org.springframework.boot.convert.StringToFileConverter"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "source1"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "source1"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.io.DefaultResourceLoader"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "NULL"
            valueType: "java.lang.ClassLoader"
            uuid: "uniqueUuid5"
      valueType: "org.springframework.core.io.DefaultResourceLoader"
      uuid: "defaultResourceLoader"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.core.io.Resource"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.core.io.DefaultResourceLoader"
            parameters:
            - name: "classLoader"
              value:
                sapientType: "NULL"
                valueType: "java.lang.ClassLoader"
          valueType: "org.springframework.core.io.DefaultResourceLoader"
          uuid: "defaultResourceLoader"
          fixed: true
        methodParameters:
        - name: "location"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "source1"
            valueType: "java.lang.String"
            uuid: "source"
        methodName: "getResource"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "source1"
      valueType: "java.lang.String"
      uuid: "source"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.core.io.Resource"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.core.io.DefaultResourceLoader"
            parameters:
            - name: "classLoader"
              value:
                sapientType: "NULL"
                valueType: "java.lang.ClassLoader"
          valueType: "org.springframework.core.io.DefaultResourceLoader"
          uuid: "defaultResourceLoader"
          fixed: true
        methodParameters:
        - name: "location"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "source1"
            valueType: "java.lang.String"
            uuid: "source"
        methodName: "getResource"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.core.io.Resource"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.core.io.DefaultResourceLoader"
            parameters:
            - name: "classLoader"
              value:
                sapientType: "NULL"
                valueType: "java.lang.ClassLoader"
          valueType: "org.springframework.core.io.DefaultResourceLoader"
          uuid: "defaultResourceLoader"
          fixed: true
        methodParameters:
        - name: "location"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "source1"
            valueType: "java.lang.String"
            uuid: "source"
        methodName: "getResource"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file2-pathname"
      valueType: "java.io.File"
      uuid: "file2"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "s1"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 40
      expression: "ResourceUtils.isUrl(source)"
      range: "(40,7)-(40,33)"
      evaluatedAs: false
    - lineNumber: 44
      expression: "file.exists()"
      range: "(44,7)-(44,19)"
      evaluatedAs: false
    - lineNumber: 48
      expression: "resource.exists()"
      range: "(48,7)-(48,23)"
      evaluatedAs: true
    - lineNumber: 58
      expression: "catch-exception (IOException)"
      range: "(58,3)-(58,23)"
      evaluatedAs: true
      internalMethodName: "getFile"
    catchBlockExercised:
      idExternalInstruction: 46
      id: 1
      catchExceptions:
      - "java.io.IOException"
