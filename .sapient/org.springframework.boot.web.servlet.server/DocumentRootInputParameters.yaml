---
modelFingerprint: "511EAB296628A23CB059B725B3517F54"
targetClass:
  fullClassName: "org.springframework.boot.web.servlet.server.DocumentRoot"
methods:
- method:
    name: "getDirectory"
    sourceCodeSignature: "File getDirectory()"
    returnType: "java.io.File"
    instructionFingerprint: "B3E5FBA6B45FDCCBFF1015595919E679"
  paths:
  - pathId: "path1"
    testPathName: "getDirectoryTest"
    constructorSignature: "<init>(org.apache.commons.logging.Log) : void"
    modelFingerprint: "89849D150DB5203CC58AEDE2DFA11763"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "setDirectory"
    sourceCodeSignature: "void setDirectory(File directory)"
    returnType: "void"
    parameters:
    - name: "directory"
      type: "java.io.File"
    instructionFingerprint: "5391D2F23E78EDD0215BAB95BB393FD1"
  paths:
  - pathId: "path1"
    testPathName: "setDirectoryTest"
    constructorSignature: "<init>(org.apache.commons.logging.Log) : void"
    modelFingerprint: "587E3F7E25017D1E4C3553598EC51043"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "getValidDirectory"
    sourceCodeSignature: "File getValidDirectory()"
    returnType: "java.io.File"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "891503C8CC68BDFD57D48894CB802BB5"
  paths:
  - pathId: "path1"
    testPathName: "getValidDirectoryWhenThisLoggerIsDebugEnabled"
    constructorSignature: "<init>(org.apache.commons.logging.Log) : void"
    modelFingerprint: "702B165AC481A347308AC2F440DDC4D5"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "CDCAA2C4468DE72582292302DB8E67AA"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "3A17F121DF100CF26F375BD68CF4B3D2"
      methodExercised:
        expression: "getCodeSourceArchive(codeSource:codeSource):file"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "F10E0885B7AAA7871F2562FC3D0D2216"
      valueUuid: "file2"
    disabled: true
    failureReason:
      reason: "CLASS_TYPE_COULD_NOT_BE_MOCKED_AND_NEEDS_TO_STRING"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.server.DocumentRoot"
        parameters:
        - name: "logger"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.apache.commons.logging.impl.NoOpLog"
              parameters: []
            valueType: "org.apache.commons.logging.impl.NoOpLog"
            uuid: "logger"
      valueType: "org.springframework.boot.web.servlet.server.DocumentRoot"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
      nameForMock: "file"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.security.CodeSource"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<method_return_from_value>
            target: "java.security.ProtectionDomain"
            localVariableValue:
              sapientType: "CLASS"
              content: !<regular>
                value: "org.springframework.boot.web.servlet.server.DocumentRoot"
              valueType: "java.lang.Class"
              genericValueType: "org.springframework.boot.web.servlet.server.DocumentRoot"
              fixed: true
            methodParameters: []
            methodName: "getProtectionDomain"
          valueType: "java.security.ProtectionDomain"
          uuid: "protectionDomain"
        methodParameters: []
        methodName: "getCodeSource"
      valueType: "java.security.CodeSource"
      uuid: "codeSource"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file2-pathname"
      valueType: "java.io.File"
      uuid: "file2"
      nameForMock: "file2"
    branches:
    - lineNumber: 62
      expression: "file != null"
      range: "(62,11)-(62,22)"
      evaluatedAs: false
    - lineNumber: 80
      expression: "this.logger.isDebugEnabled()"
      range: "(80,7)-(80,34)"
      evaluatedAs: true
      internalMethodName: "getArchiveFileDocumentRoot"
    - lineNumber: 83
      expression: "file != null"
      range: "(83,7)-(83,18)"
      evaluatedAs: true
      internalMethodName: "getArchiveFileDocumentRoot"
    - lineNumber: 83
      expression: "file.exists()"
      range: "(83,23)-(83,35)"
      evaluatedAs: true
      internalMethodName: "getArchiveFileDocumentRoot"
    - lineNumber: 83
      expression: "!file.isDirectory()"
      range: "(83,40)-(83,58)"
      evaluatedAs: true
      internalMethodName: "getArchiveFileDocumentRoot"
    - lineNumber: 84
      expression: "file.getName().toLowerCase(Locale.ENGLISH).endsWith(extension)"
      range: "(84,8)-(84,69)"
      evaluatedAs: true
      internalMethodName: "getArchiveFileDocumentRoot"
    - lineNumber: 63
      expression: "file != null"
      range: "(63,11)-(63,22)"
      evaluatedAs: true
    - lineNumber: 64
      expression: "file != null"
      range: "(64,11)-(64,22)"
      evaluatedAs: true
    - lineNumber: 65
      expression: "file == null"
      range: "(65,7)-(65,18)"
      evaluatedAs: false
    - lineNumber: 68
      expression: "this.logger.isDebugEnabled()"
      range: "(68,12)-(68,39)"
      evaluatedAs: true
  - pathId: "path7"
    testPathName: "getValidDirectoryWhenThisLoggerNotIsDebugEnabledAndThisLoggerNotIsDebugEnabled"
    constructorSignature: "<init>(org.apache.commons.logging.Log) : void"
    modelFingerprint: "B4BB4506FF589C8723044DECF83ED016"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "CDCAA2C4468DE72582292302DB8E67AA"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "74BA76C850BD91376456B62FE070F6AA"
      methodExercised:
        expression: "getCodeSourceArchive(codeSource:codeSource):file"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "3A17F121DF100CF26F375BD68CF4B3D2"
      methodExercised:
        expression: "getCodeSourceArchive(codeSource:codeSource2):file3"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "57ABA46773164D5BEE87D3F40FBF3C1D"
      methodExercised:
        expression: "getExplodedWarFileDocumentRoot(codeSourceFile:file3):file4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4019B7A62EBA20E6A47FF596AE16C58F"
      valueUuid: "file8"
    disabled: false
    failureReason:
      reason: "CLASS_TYPE_COULD_NOT_BE_MOCKED_AND_NEEDS_TO_STRING"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.server.DocumentRoot"
        parameters:
        - name: "logger"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.apache.commons.logging.impl.NoOpLog"
              parameters: []
            valueType: "org.apache.commons.logging.impl.NoOpLog"
            uuid: "logger"
      valueType: "org.springframework.boot.web.servlet.server.DocumentRoot"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "java.io.File"
      uuid: "file"
      fixed: true
      nameForMock: "file"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.security.CodeSource"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<method_return_from_value>
            target: "java.security.ProtectionDomain"
            localVariableValue:
              sapientType: "CLASS"
              content: !<regular>
                value: "org.springframework.boot.web.servlet.server.DocumentRoot"
              valueType: "java.lang.Class"
              genericValueType: "org.springframework.boot.web.servlet.server.DocumentRoot"
              fixed: true
            methodParameters: []
            methodName: "getProtectionDomain"
          valueType: "java.security.ProtectionDomain"
          uuid: "protectionDomain"
        methodParameters: []
        methodName: "getCodeSource"
      valueType: "java.security.CodeSource"
      uuid: "codeSource"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file3-pathname"
      valueType: "java.io.File"
      uuid: "file3"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.security.CodeSource"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<method_return_from_value>
            target: "java.security.ProtectionDomain"
            localVariableValue:
              sapientType: "CLASS"
              content: !<regular>
                value: "org.springframework.boot.web.servlet.server.DocumentRoot"
              valueType: "java.lang.Class"
              genericValueType: "org.springframework.boot.web.servlet.server.DocumentRoot"
              fixed: true
            methodParameters: []
            methodName: "getProtectionDomain"
          valueType: "java.security.ProtectionDomain"
          uuid: "protectionDomain2"
        methodParameters: []
        methodName: "getCodeSource"
      valueType: "java.security.CodeSource"
      uuid: "codeSource2"
    - sapientType: "NULL"
      valueType: "java.io.File"
      uuid: "file4"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file3-pathname"
      valueType: "java.io.File"
      uuid: "file3"
    - sapientType: "NULL"
      valueType: "java.io.File"
      uuid: "file8"
      fixed: true
    branches:
    - lineNumber: 62
      expression: "file != null"
      range: "(62,11)-(62,22)"
      evaluatedAs: false
    - lineNumber: 80
      expression: "this.logger.isDebugEnabled()"
      range: "(80,7)-(80,34)"
      evaluatedAs: true
      internalMethodName: "getArchiveFileDocumentRoot"
    - lineNumber: 83
      expression: "file != null"
      range: "(83,7)-(83,18)"
      evaluatedAs: false
      internalMethodName: "getArchiveFileDocumentRoot"
    - lineNumber: 63
      expression: "file != null"
      range: "(63,11)-(63,22)"
      evaluatedAs: false
    - lineNumber: 64
      expression: "file != null"
      range: "(64,11)-(64,22)"
      evaluatedAs: false
    - lineNumber: 139
      expression: "for-each(COMMON_DOC_ROOTS)"
      range: "(139,31)-(139,46)"
      evaluatedAs: true
      internalMethodName: "getCommonDocumentRoot"
    - lineNumber: 141
      expression: "root.exists()"
      range: "(141,8)-(141,20)"
      evaluatedAs: false
      internalMethodName: "getCommonDocumentRoot"
    - lineNumber: 65
      expression: "file == null"
      range: "(65,7)-(65,18)"
      evaluatedAs: true
    - lineNumber: 65
      expression: "this.logger.isDebugEnabled()"
      range: "(65,23)-(65,50)"
      evaluatedAs: false
    - lineNumber: 68
      expression: "this.logger.isDebugEnabled()"
      range: "(68,12)-(68,39)"
      evaluatedAs: false
  - pathId: "path5"
    testPathName: "getValidDirectoryWhenFileIsNullAndThisLoggerIsDebugEnabled"
    constructorSignature: "<init>(org.apache.commons.logging.Log) : void"
    modelFingerprint: "3D4A28EE571B33500F442142A029BA43"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "CDCAA2C4468DE72582292302DB8E67AA"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "3A17F121DF100CF26F375BD68CF4B3D2"
      methodExercised:
        expression: "getCodeSourceArchive(codeSource:codeSource):file"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "3A17F121DF100CF26F375BD68CF4B3D2"
      methodExercised:
        expression: "getCodeSourceArchive(codeSource:codeSource2):file3"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "57ABA46773164D5BEE87D3F40FBF3C1D"
      methodExercised:
        expression: "getExplodedWarFileDocumentRoot(codeSourceFile:file3):file4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4019B7A62EBA20E6A47FF596AE16C58F"
      valueUuid: "file8"
    disabled: false
    failureReason:
      reason: "CLASS_TYPE_COULD_NOT_BE_MOCKED_AND_NEEDS_TO_STRING"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.server.DocumentRoot"
        parameters:
        - name: "logger"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.apache.commons.logging.impl.NoOpLog"
              parameters: []
            valueType: "org.apache.commons.logging.impl.NoOpLog"
            uuid: "logger"
      valueType: "org.springframework.boot.web.servlet.server.DocumentRoot"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
      nameForMock: "file"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.security.CodeSource"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<method_return_from_value>
            target: "java.security.ProtectionDomain"
            localVariableValue:
              sapientType: "CLASS"
              content: !<regular>
                value: "org.springframework.boot.web.servlet.server.DocumentRoot"
              valueType: "java.lang.Class"
              genericValueType: "org.springframework.boot.web.servlet.server.DocumentRoot"
              fixed: true
            methodParameters: []
            methodName: "getProtectionDomain"
          valueType: "java.security.ProtectionDomain"
          uuid: "protectionDomain"
        methodParameters: []
        methodName: "getCodeSource"
      valueType: "java.security.CodeSource"
      uuid: "codeSource"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file3-pathname"
      valueType: "java.io.File"
      uuid: "file3"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.security.CodeSource"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<method_return_from_value>
            target: "java.security.ProtectionDomain"
            localVariableValue:
              sapientType: "CLASS"
              content: !<regular>
                value: "org.springframework.boot.web.servlet.server.DocumentRoot"
              valueType: "java.lang.Class"
              genericValueType: "org.springframework.boot.web.servlet.server.DocumentRoot"
              fixed: true
            methodParameters: []
            methodName: "getProtectionDomain"
          valueType: "java.security.ProtectionDomain"
          uuid: "protectionDomain2"
        methodParameters: []
        methodName: "getCodeSource"
      valueType: "java.security.CodeSource"
      uuid: "codeSource2"
    - sapientType: "NULL"
      valueType: "java.io.File"
      uuid: "file4"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file3-pathname"
      valueType: "java.io.File"
      uuid: "file3"
    - sapientType: "NULL"
      valueType: "java.io.File"
      uuid: "file8"
      fixed: true
    branches:
    - lineNumber: 62
      expression: "file != null"
      range: "(62,11)-(62,22)"
      evaluatedAs: false
    - lineNumber: 80
      expression: "this.logger.isDebugEnabled()"
      range: "(80,7)-(80,34)"
      evaluatedAs: true
      internalMethodName: "getArchiveFileDocumentRoot"
    - lineNumber: 83
      expression: "file != null"
      range: "(83,7)-(83,18)"
      evaluatedAs: true
      internalMethodName: "getArchiveFileDocumentRoot"
    - lineNumber: 83
      expression: "file.exists()"
      range: "(83,23)-(83,35)"
      evaluatedAs: true
      internalMethodName: "getArchiveFileDocumentRoot"
    - lineNumber: 83
      expression: "!file.isDirectory()"
      range: "(83,40)-(83,58)"
      evaluatedAs: true
      internalMethodName: "getArchiveFileDocumentRoot"
    - lineNumber: 84
      expression: "file.getName().toLowerCase(Locale.ENGLISH).endsWith(extension)"
      range: "(84,8)-(84,69)"
      evaluatedAs: true
      internalMethodName: "getArchiveFileDocumentRoot"
    - lineNumber: 63
      expression: "file != null"
      range: "(63,11)-(63,22)"
      evaluatedAs: false
    - lineNumber: 64
      expression: "file != null"
      range: "(64,11)-(64,22)"
      evaluatedAs: false
    - lineNumber: 139
      expression: "for-each(COMMON_DOC_ROOTS)"
      range: "(139,31)-(139,46)"
      evaluatedAs: true
      internalMethodName: "getCommonDocumentRoot"
    - lineNumber: 141
      expression: "root.exists()"
      range: "(141,8)-(141,20)"
      evaluatedAs: false
      internalMethodName: "getCommonDocumentRoot"
    - lineNumber: 65
      expression: "file == null"
      range: "(65,7)-(65,18)"
      evaluatedAs: true
    - lineNumber: 65
      expression: "this.logger.isDebugEnabled()"
      range: "(65,23)-(65,50)"
      evaluatedAs: true
- method:
    name: "getCodeSourceArchive"
    sourceCodeSignature: "File getCodeSourceArchive(CodeSource codeSource)"
    returnType: "java.io.File"
    parameters:
    - name: "codeSource"
      type: "java.security.CodeSource"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "8B9F698D2557B8B8DDF60F7BC84FA23C"
  paths:
  - pathId: "path4"
    testPathName: "getCodeSourceArchive1WhenCodeSourceIsNullAndLocationIsNull"
    constructorSignature: "<init>(org.apache.commons.logging.Log) : void"
    modelFingerprint: "E8357F9B93C11B5DF055EF1A0C11195B"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "CDCAA2C4468DE72582292302DB8E67AA"
      valueUuid: "target"
    - type: "INPUT"
      name: "codeSource"
      modelFingerprint: "01EF6AE2C17F92AC926FA7FAE454BC92"
      valueUuid: "codeSource"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4019B7A62EBA20E6A47FF596AE16C58F"
      valueUuid: "file"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.server.DocumentRoot"
        parameters:
        - name: "logger"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.apache.commons.logging.impl.NoOpLog"
              parameters: []
            valueType: "org.apache.commons.logging.impl.NoOpLog"
            uuid: "logger"
      valueType: "org.springframework.boot.web.servlet.server.DocumentRoot"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "java.security.CodeSource"
      uuid: "codeSource"
      fixed: true
    - sapientType: "NULL"
      valueType: "java.io.File"
      uuid: "file"
      fixed: true
    branches:
    - lineNumber: 100
      expression: "codeSource != null"
      range: "(100,20)-(100,37)"
      evaluatedAs: false
    - lineNumber: 101
      expression: "location == null"
      range: "(101,8)-(101,23)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "getCodeSourceArchive1WhenIndexNotEqualsMinus1"
    constructorSignature: "<init>(org.apache.commons.logging.Log) : void"
    modelFingerprint: "5EBC2C28BA82B9F45BFED51CBB0DD25B"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "CDCAA2C4468DE72582292302DB8E67AA"
      valueUuid: "target"
    - type: "INPUT"
      name: "codeSource"
      modelFingerprint: "610BFAED4C1BAB4FF114772992653732"
      valueUuid: "codeSource"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B4A22E2C260E42146E8A785F16123150"
      valueUuid: "file"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.security.CodeSource.getLocation() : java.net.URL"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.server.DocumentRoot"
        parameters:
        - name: "logger"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.apache.commons.logging.impl.NoOpLog"
              parameters: []
            valueType: "org.apache.commons.logging.impl.NoOpLog"
            uuid: "logger"
      valueType: "org.springframework.boot.web.servlet.server.DocumentRoot"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.security.CodeSource"
        parameters:
        - name: "url"
          value:
            sapientType: "MOCK"
            valueType: "java.net.URL"
            uuid: "codeSource-url"
        - name: "certs"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.security.cert.Certificate[]"
            uuid: "codeSource-certs"
      valueType: "java.security.CodeSource"
      uuid: "codeSource"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "java.io.File"
      uuid: "file"
      fixed: true
    branches:
    - lineNumber: 100
      expression: "codeSource != null"
      range: "(100,20)-(100,37)"
      evaluatedAs: true
    - lineNumber: 101
      expression: "location == null"
      range: "(101,8)-(101,23)"
      evaluatedAs: false
    - lineNumber: 106
      expression: "connection instanceof JarURLConnection jarURLConnection"
      range: "(106,8)-(106,62)"
      evaluatedAs: true
    - lineNumber: 113
      expression: "index != -1"
      range: "(113,8)-(113,18)"
      evaluatedAs: true
  - pathId: "path5"
    testPathName: "getCodeSourceArchive1WhenCaughtException"
    constructorSignature: "<init>(org.apache.commons.logging.Log) : void"
    modelFingerprint: "659F0CA288CF568BC6141B065807D8DF"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "CDCAA2C4468DE72582292302DB8E67AA"
      valueUuid: "target"
    - type: "INPUT"
      name: "codeSource"
      modelFingerprint: "610BFAED4C1BAB4FF114772992653732"
      valueUuid: "codeSource"
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "2F6CB635B42280BD9AD79303E89C613A"
      valueUuid: "uRL"
      methodExercised:
        expression: "openConnection():uRLConnection"
        throwsExceptions:
        - "java.io.IOException"
    - type: "LOCAL_VARIABLE"
      name: "jarURLConnection"
      modelFingerprint: "2AB6651219794E4820C10C4A4286D2A2"
      valueUuid: "uRLConnection"
      methodExercised:
        expression: "getJarFile():jarFile"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4019B7A62EBA20E6A47FF596AE16C58F"
      valueUuid: "file2"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.security.CodeSource.getLocation() : java.net.URL"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.server.DocumentRoot"
        parameters:
        - name: "logger"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.apache.commons.logging.impl.NoOpLog"
              parameters: []
            valueType: "org.apache.commons.logging.impl.NoOpLog"
            uuid: "logger"
      valueType: "org.springframework.boot.web.servlet.server.DocumentRoot"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.security.CodeSource"
        parameters:
        - name: "url"
          value:
            sapientType: "MOCK"
            valueType: "java.net.URL"
            uuid: "codeSource-url"
        - name: "certs"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.security.cert.Certificate[]"
            uuid: "codeSource-certs"
      valueType: "java.security.CodeSource"
      uuid: "codeSource"
    - sapientType: "MOCK"
      valueType: "java.net.URL"
      uuid: "uRL"
    - sapientType: "MOCK"
      valueType: "java.net.JarURLConnection"
      uuid: "uRLConnection"
    - sapientType: "MOCK"
      valueType: "java.net.JarURLConnection"
      uuid: "uRLConnection"
    - sapientType: "MOCK"
      valueType: "java.util.jar.JarFile"
      uuid: "jarFile"
    - sapientType: "NULL"
      valueType: "java.io.File"
      uuid: "file2"
      fixed: true
    branches:
    - lineNumber: 100
      expression: "codeSource != null"
      range: "(100,20)-(100,37)"
      evaluatedAs: true
    - lineNumber: 101
      expression: "location == null"
      range: "(101,8)-(101,23)"
      evaluatedAs: false
    - lineNumber: 106
      expression: "connection instanceof JarURLConnection jarURLConnection"
      range: "(106,8)-(106,62)"
      evaluatedAs: true
    - lineNumber: 113
      expression: "index != -1"
      range: "(113,8)-(113,18)"
      evaluatedAs: true
    - lineNumber: 118
      expression: "catch-exception (Exception)"
      range: "(118,3)-(118,21)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
- method:
    name: "getExplodedWarFileDocumentRoot"
    sourceCodeSignature: "File getExplodedWarFileDocumentRoot(File codeSourceFile)"
    returnType: "java.io.File"
    parameters:
    - name: "codeSourceFile"
      type: "java.io.File"
    instructionFingerprint: "AE847594632C5EE962EFFE5E1C66D3A6"
  paths:
  - pathId: "path1"
    testPathName: "getExplodedWarFileDocumentRoot1WhenWebInfPathIndexGreaterThanOrEqualsTo0"
    constructorSignature: "<init>(org.apache.commons.logging.Log) : void"
    modelFingerprint: "4FBA7FA69115157F21607CB62978BD67"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "CDCAA2C4468DE72582292302DB8E67AA"
      valueUuid: "target"
    - type: "INPUT"
      name: "codeSourceFile"
      modelFingerprint: "5D0097A21F6C383D0E5024AF3A254A5F"
      valueUuid: "codeSourceFile"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B4A22E2C260E42146E8A785F16123150"
      valueUuid: "file"
    disabled: true
    failureReason:
      reason: "CLASS_TYPE_COULD_NOT_BE_MOCKED_AND_NEEDS_TO_STRING"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.server.DocumentRoot"
        parameters:
        - name: "logger"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.apache.commons.logging.impl.NoOpLog"
              parameters: []
            valueType: "org.apache.commons.logging.impl.NoOpLog"
            uuid: "logger"
      valueType: "org.springframework.boot.web.servlet.server.DocumentRoot"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "codeSourceFile-pathname"
      valueType: "java.io.File"
      uuid: "codeSourceFile"
      nameForMock: "codeSourceFile"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "string4"
      valueType: "java.io.File"
      uuid: "file"
      fixed: true
    branches:
    - lineNumber: 124
      expression: "this.logger.isDebugEnabled()"
      range: "(124,7)-(124,34)"
      evaluatedAs: true
    - lineNumber: 127
      expression: "codeSourceFile != null"
      range: "(127,7)-(127,28)"
      evaluatedAs: true
    - lineNumber: 127
      expression: "codeSourceFile.exists()"
      range: "(127,33)-(127,55)"
      evaluatedAs: true
    - lineNumber: 130
      expression: "webInfPathIndex >= 0"
      range: "(130,8)-(130,27)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "getExplodedWarFileDocumentRoot1WhenWebInfPathIndexLessThan0"
    constructorSignature: "<init>(org.apache.commons.logging.Log) : void"
    modelFingerprint: "3BB8C1160FF5B01826FC49D09D066B89"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "CDCAA2C4468DE72582292302DB8E67AA"
      valueUuid: "target"
    - type: "INPUT"
      name: "codeSourceFile"
      modelFingerprint: "5D0097A21F6C383D0E5024AF3A254A5F"
      valueUuid: "codeSourceFile"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4019B7A62EBA20E6A47FF596AE16C58F"
      valueUuid: "file"
    disabled: false
    failureReason:
      reason: "CLASS_TYPE_COULD_NOT_BE_MOCKED_AND_NEEDS_TO_STRING"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.server.DocumentRoot"
        parameters:
        - name: "logger"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.apache.commons.logging.impl.NoOpLog"
              parameters: []
            valueType: "org.apache.commons.logging.impl.NoOpLog"
            uuid: "logger"
      valueType: "org.springframework.boot.web.servlet.server.DocumentRoot"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "codeSourceFile-pathname"
      valueType: "java.io.File"
      uuid: "codeSourceFile"
      nameForMock: "codeSourceFile"
    - sapientType: "NULL"
      valueType: "java.io.File"
      uuid: "file"
      fixed: true
    branches:
    - lineNumber: 124
      expression: "this.logger.isDebugEnabled()"
      range: "(124,7)-(124,34)"
      evaluatedAs: true
    - lineNumber: 127
      expression: "codeSourceFile != null"
      range: "(127,7)-(127,28)"
      evaluatedAs: true
    - lineNumber: 127
      expression: "codeSourceFile.exists()"
      range: "(127,33)-(127,55)"
      evaluatedAs: true
    - lineNumber: 130
      expression: "webInfPathIndex >= 0"
      range: "(130,8)-(130,27)"
      evaluatedAs: false
