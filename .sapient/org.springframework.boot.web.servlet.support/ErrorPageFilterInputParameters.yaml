---
modelFingerprint: "5166DA0BE39F3DC249D94AA26F9F86C3"
targetClass:
  fullClassName: "org.springframework.boot.web.servlet.support.ErrorPageFilter"
methods:
- method:
    name: "init"
    sourceCodeSignature: "void init(FilterConfig filterConfig)"
    returnType: "void"
    throwsExceptions:
    - "jakarta.servlet.ServletException"
    parameters:
    - name: "filterConfig"
      type: "jakarta.servlet.FilterConfig"
    instructionFingerprint: "769955DA058E5DCBAD7E224B88056F52"
  paths:
  - pathId: "path1"
    testPathName: "initTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "AF18FC050DB51F80206E1F259382DC73"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "filterConfig"
      modelFingerprint: "08A756C01EB6490B6F9EF07A223D801A"
      valueUuid: "filterConfig"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "this.delegate.init(filterConfig);"
      lineNumber: 111
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: delegate - Method: init"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.support.ErrorPageFilter"
        parameters: []
      valueType: "org.springframework.boot.web.servlet.support.ErrorPageFilter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.FilterConfig"
      uuid: "filterConfig"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "doFilter"
    sourceCodeSignature: "void doFilter(ServletRequest request, ServletResponse response,\
      \ FilterChain chain)"
    returnType: "void"
    throwsExceptions:
    - "java.io.IOException"
    - "jakarta.servlet.ServletException"
    parameters:
    - name: "request"
      type: "jakarta.servlet.ServletRequest"
    - name: "response"
      type: "jakarta.servlet.ServletResponse"
    - name: "chain"
      type: "jakarta.servlet.FilterChain"
    instructionFingerprint: "AC000B27663FB8AD06B58C2091AAEB86"
  paths:
  - pathId: "path1"
    testPathName: "doFilterTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "8A0B9DBC7C951DB03713BF5ABDA7407E"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "request"
      modelFingerprint: "C83DC83D979C83DA6CDD51B04F6FD402"
      valueUuid: "request"
    - type: "INPUT"
      name: "response"
      modelFingerprint: "AAFEB5CBF0D300486786AFAB9636BA11"
      valueUuid: "response"
    - type: "INPUT"
      name: "chain"
      modelFingerprint: "097513A7DFC7EF2B2F1AA6569EA47643"
      valueUuid: "chain"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "this.delegate.doFilter(request, response, chain);"
      lineNumber: 117
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: delegate - Method: doFilter"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.support.ErrorPageFilter"
        parameters: []
      valueType: "org.springframework.boot.web.servlet.support.ErrorPageFilter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.ServletRequest"
      uuid: "request"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.ServletResponse"
      uuid: "response"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.FilterChain"
      uuid: "chain"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "getDescription"
    sourceCodeSignature: "String getDescription(HttpServletRequest request)"
    returnType: "java.lang.String"
    parameters:
    - name: "request"
      type: "jakarta.servlet.http.HttpServletRequest"
    instructionFingerprint: "5F238159BCDA27D168351824E7AF6FCC"
  paths:
  - pathId: "path1"
    testPathName: "getDescriptionWhenRequestGetPathInfoIsNotNull"
    constructorSignature: "<init>() : void"
    modelFingerprint: "F86143A73198A9C869F446DC96C4F99C"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "request"
      modelFingerprint: "E43CBF7E2DA98885ECE5619567B77961"
      valueUuid: "request"
    - type: "LOCAL_VARIABLE"
      name: "request"
      modelFingerprint: "CB4102F91E57A609EA591EDB2C2AF5B0"
      valueUuid: "request"
      methodExercised:
        expression: "getPathInfo():string"
    - type: "LOCAL_VARIABLE"
      name: "request"
      modelFingerprint: "FB6D069EA6B1CA776BF89597A150B399"
      valueUuid: "request"
      methodExercised:
        expression: "getPathInfo():string2"
    - type: "LOCAL_VARIABLE"
      name: "request"
      modelFingerprint: "C74F97C4ED1BEED2D879020BE50FCF94"
      valueUuid: "request"
      methodExercised:
        expression: "getServletPath():string3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "58E07AB6E4B468FDC41E46FE1CBD4A4B"
      valueUuid: "string4"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.support.ErrorPageFilter"
        parameters: []
      valueType: "org.springframework.boot.web.servlet.support.ErrorPageFilter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getPathInfo1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "[AB]"
      valueType: "java.lang.String"
      uuid: "string4"
    branches:
    - lineNumber: 202
      expression: "request.getPathInfo() != null"
      range: "(202,22)-(202,50)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "getDescriptionWhenRequestGetPathInfoIsNull"
    constructorSignature: "<init>() : void"
    modelFingerprint: "94D0EE81CF9D8E573FB2EEC0E5B53ECE"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "request"
      modelFingerprint: "E43CBF7E2DA98885ECE5619567B77961"
      valueUuid: "request"
    - type: "LOCAL_VARIABLE"
      name: "request"
      modelFingerprint: "283F32671B775E45B98CE084728D8F94"
      valueUuid: "request"
      methodExercised:
        expression: "getPathInfo():string"
    - type: "LOCAL_VARIABLE"
      name: "request"
      modelFingerprint: "C74F97C4ED1BEED2D879020BE50FCF94"
      valueUuid: "request"
      methodExercised:
        expression: "getServletPath():string3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "10346DEA4D356605C3D8ED916185E000"
      valueUuid: "string4"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.support.ErrorPageFilter"
        parameters: []
      valueType: "org.springframework.boot.web.servlet.support.ErrorPageFilter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
      fixed: true
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "[A]"
      valueType: "java.lang.String"
      uuid: "string4"
    branches:
    - lineNumber: 202
      expression: "request.getPathInfo() != null"
      range: "(202,22)-(202,50)"
      evaluatedAs: false
- method:
    name: "addErrorPages"
    sourceCodeSignature: "void addErrorPages(ErrorPage... errorPages)"
    returnType: "void"
    parameters:
    - name: "errorPages"
      type: "org.springframework.boot.web.server.ErrorPage[]"
    instructionFingerprint: "94FC37D8F4EE5DFD7550A6984DC38908"
  paths:
  - pathId: "path1"
    testPathName: "addErrorPagesWhenErrorPageIsGlobal"
    constructorSignature: "<init>() : void"
    modelFingerprint: "0E682ABB39DEC8709CD3FDA596500895"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "errorPages"
      modelFingerprint: "DCBB22B483C516F6B779826B79C7A8BF"
      valueUuid: "errorPages"
    - type: "LOCAL_VARIABLE"
      name: "errorPage"
      modelFingerprint: "36A338DF11592791B5742AB4B637BC2F"
      valueUuid: "errorPage"
      methodExercised:
        expression: "isGlobal():boolean2"
    - type: "LOCAL_VARIABLE"
      name: "errorPage"
      modelFingerprint: "4239FB76EFF9936513A39E6A03559CE3"
      valueUuid: "errorPage"
      methodExercised:
        expression: "getPath():string"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    - type: "STATE_VERIFICATION_PARAMETER"
      name: "errorPages"
      modelFingerprint: "1160FE73D238E64AB436BBEFF694D785"
      valueUuid: "errorPageArray"
      originalValueUuid: "errorPages"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.support.ErrorPageFilter"
        parameters: []
      valueType: "org.springframework.boot.web.servlet.support.ErrorPageFilter"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.web.server.ErrorPage"
            uuid: "errorPage"
      valueType: "org.springframework.boot.web.server.ErrorPage[]"
      uuid: "errorPages"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.server.ErrorPage"
      uuid: "errorPage"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.server.ErrorPage"
      uuid: "errorPage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getPath1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.web.server.ErrorPage"
            uuid: "errorPage"
      valueType: "org.springframework.boot.web.server.ErrorPage[]"
      uuid: "errorPageArray"
    branches:
    - lineNumber: 280
      expression: "for-each(errorPages)"
      range: "(280,30)-(280,39)"
      evaluatedAs: true
    - lineNumber: 281
      expression: "errorPage.isGlobal()"
      range: "(281,8)-(281,27)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "addErrorPagesWhenErrorPageGetStatusIsNotNull"
    constructorSignature: "<init>() : void"
    modelFingerprint: "0D88E411B5B79D68F5B3AF6C2599C218"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "errorPages"
      modelFingerprint: "DCBB22B483C516F6B779826B79C7A8BF"
      valueUuid: "errorPages"
    - type: "LOCAL_VARIABLE"
      name: "errorPage"
      modelFingerprint: "DA9ECEBF596BDBFC37177A287E40B20B"
      valueUuid: "errorPage"
      methodExercised:
        expression: "isGlobal():boolean2"
    - type: "LOCAL_VARIABLE"
      name: "errorPage"
      modelFingerprint: "4FCFAB2DEC46250D9C061F0A8C658A54"
      valueUuid: "errorPage"
      methodExercised:
        expression: "getStatus():httpStatus"
    - type: "LOCAL_VARIABLE"
      name: "errorPage"
      modelFingerprint: "A96D654265A8140660DCEF9E19C0F2AA"
      valueUuid: "errorPage"
      methodExercised:
        expression: "getStatus():httpStatus2"
    - type: "LOCAL_VARIABLE"
      name: "errorPage"
      modelFingerprint: "4239FB76EFF9936513A39E6A03559CE3"
      valueUuid: "errorPage"
      methodExercised:
        expression: "getPath():string"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    - type: "STATE_VERIFICATION_PARAMETER"
      name: "errorPages"
      modelFingerprint: "1160FE73D238E64AB436BBEFF694D785"
      valueUuid: "errorPageArray"
      originalValueUuid: "errorPages"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.support.ErrorPageFilter"
        parameters: []
      valueType: "org.springframework.boot.web.servlet.support.ErrorPageFilter"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.web.server.ErrorPage"
            uuid: "errorPage"
      valueType: "org.springframework.boot.web.server.ErrorPage[]"
      uuid: "errorPages"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.server.ErrorPage"
      uuid: "errorPage"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.server.ErrorPage"
      uuid: "errorPage"
    - sapientType: "ENUM"
      content: !<regular>
        value: "CONTINUE"
      valueType: "org.springframework.http.HttpStatus"
      uuid: "httpStatus"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.server.ErrorPage"
      uuid: "errorPage"
    - sapientType: "ENUM"
      content: !<regular>
        value: "MULTI_STATUS"
      valueType: "org.springframework.http.HttpStatus"
      uuid: "httpStatus2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.server.ErrorPage"
      uuid: "errorPage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getPath1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.web.server.ErrorPage"
            uuid: "errorPage"
      valueType: "org.springframework.boot.web.server.ErrorPage[]"
      uuid: "errorPageArray"
    branches:
    - lineNumber: 280
      expression: "for-each(errorPages)"
      range: "(280,30)-(280,39)"
      evaluatedAs: true
    - lineNumber: 281
      expression: "errorPage.isGlobal()"
      range: "(281,8)-(281,27)"
      evaluatedAs: false
    - lineNumber: 284
      expression: "errorPage.getStatus() != null"
      range: "(284,13)-(284,41)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "addErrorPagesWhenErrorPageGetStatusIsNull"
    constructorSignature: "<init>() : void"
    modelFingerprint: "7234F430522042D5A32C1882D1A70A2D"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "errorPages"
      modelFingerprint: "E17F63CFEC2FACACED87AB7382AADCBD"
      valueUuid: "errorPages"
    - type: "LOCAL_VARIABLE"
      name: "errorPage"
      modelFingerprint: "DA9ECEBF596BDBFC37177A287E40B20B"
      valueUuid: "errorPage"
      methodExercised:
        expression: "isGlobal():boolean2"
    - type: "LOCAL_VARIABLE"
      name: "errorPage"
      modelFingerprint: "8D604FE80C97354503FC9433EC730C59"
      valueUuid: "errorPage"
      methodExercised:
        expression: "getStatus():httpStatus"
    - type: "LOCAL_VARIABLE"
      name: "errorPage"
      modelFingerprint: "33F2E1853486625C56F44B17DCB76693"
      valueUuid: "errorPage"
      methodExercised:
        expression: "getException():class2"
    - type: "LOCAL_VARIABLE"
      name: "errorPage"
      modelFingerprint: "4239FB76EFF9936513A39E6A03559CE3"
      valueUuid: "errorPage"
      methodExercised:
        expression: "getPath():string"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.support.ErrorPageFilter"
        parameters: []
      valueType: "org.springframework.boot.web.servlet.support.ErrorPageFilter"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.web.server.ErrorPage"
            uuid: "errorPage"
      valueType: "org.springframework.boot.web.server.ErrorPage[]"
      uuid: "errorPages"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.server.ErrorPage"
      uuid: "errorPage"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.server.ErrorPage"
      uuid: "errorPage"
    - sapientType: "NULL"
      valueType: "org.springframework.http.HttpStatus"
      uuid: "httpStatus"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.server.ErrorPage"
      uuid: "errorPage"
    - sapientType: "CLASS"
      content: !<regular>
        value: "? extends java.lang.Throwable"
      valueType: "java.lang.Class"
      genericValueType: "? extends java.lang.Throwable"
      uuid: "class2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.server.ErrorPage"
      uuid: "errorPage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getPath1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 280
      expression: "for-each(errorPages)"
      range: "(280,30)-(280,39)"
      evaluatedAs: true
    - lineNumber: 281
      expression: "errorPage.isGlobal()"
      range: "(281,8)-(281,27)"
      evaluatedAs: false
    - lineNumber: 284
      expression: "errorPage.getStatus() != null"
      range: "(284,13)-(284,41)"
      evaluatedAs: false
- method:
    name: "destroy"
    sourceCodeSignature: "void destroy()"
    returnType: "void"
    instructionFingerprint: "6E0772BC6B2B265F68376E160903F796"
  paths:
  - pathId: "path1"
    testPathName: "destroyTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "0A1F9D2307F891B79A39BE18CAA3B45A"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "getOrder"
    sourceCodeSignature: "int getOrder()"
    returnType: "int"
    instructionFingerprint: "D097CF84226A0A5BDFC73B598FC0E93C"
  paths:
  - pathId: "path1"
    testPathName: "getOrderTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "89AB67113BF6098C9DF9ABFB6DE35022"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "63E8B280596E8AE5AF41A3C5E7525AEE"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.servlet.support.ErrorPageFilter"
        parameters: []
      valueType: "org.springframework.boot.web.servlet.support.ErrorPageFilter"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: -2147483647
      valueType: "int"
      uuid: "expectedResult"
      fixed: true
