---
modelFingerprint: "798176A223BDC8DDCED53E5CC7624B56"
targetClass:
  fullClassName: "org.springframework.boot.web.reactive.result.view.MustacheView"
methods:
- method:
    name: "setCompiler"
    sourceCodeSignature: "void setCompiler(Compiler compiler)"
    returnType: "void"
    parameters:
    - name: "compiler"
      type: "com.samskivert.mustache.Mustache$Compiler"
    instructionFingerprint: "F35E98DFB5F25D9B058B344670717EBC"
  paths:
  - pathId: "path1"
    testPathName: "setCompilerTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "9FC47C1109444222D451340D2424400C"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "setCharset"
    sourceCodeSignature: "void setCharset(String charset)"
    returnType: "void"
    parameters:
    - name: "charset"
      type: "java.lang.String"
    instructionFingerprint: "7CE64AE350F1AB4E4BF9343F967573FA"
  paths:
  - pathId: "path1"
    testPathName: "setCharsetTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "EDE4495815E2C99677F2A3316E3DCF75"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "checkResourceExists"
    sourceCodeSignature: "boolean checkResourceExists(Locale locale)"
    returnType: "boolean"
    throwsExceptions:
    - "java.lang.Exception"
    parameters:
    - name: "locale"
      type: "java.util.Locale"
    instructionFingerprint: "4C2E897A700482AAFDFC2D170647EAE9"
  paths:
  - pathId: "path1"
    testPathName: "checkResourceExistsWhenResourceNotExistsAndResolveResourceIsNull"
    constructorSignature: "<init>() : void"
    modelFingerprint: "E51F096FE512E24DA0065AB8EB9CC81D"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "locale"
      modelFingerprint: "5A54D85CEB69D87DB67C2DBD628A7B22"
      valueUuid: "locale"
    - type: "STATIC"
      name: "ReactiveAdapterRegistry.class.real"
      modelFingerprint: "7455FBF27008720B5B5014BD8E1DC88F"
      valueUuid: "ReactiveAdapterRegistry.class.real"
      methodExercised:
        expression: "getSharedInstance():reactiveAdapterRegistry"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "30FFD5382FB7FC4BC90EEEF8773578C3"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "getResource(location:string):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "A6D3B599F5C19366D28CA5E4F2301D7D"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5633A2B0C967879105766C98D64A3959"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.reactive.result.view.MustacheView"
        parameters: []
        propertiesMap:
          applicationContext:
            sapientType: "MOCK"
            valueType: "org.springframework.context.ApplicationContext"
            uuid: "applicationContext"
          url:
            sapientType: "BASIC"
            content: !<regular>
              value: "url1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "org.springframework.boot.web.reactive.result.view.MustacheView"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Locale"
        parameters:
        - name: "language"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "language1"
            valueType: "java.lang.String"
            uuid: "locale-language"
      valueType: "java.util.Locale"
      uuid: "locale"
    - sapientType: "REAL"
      valueType: "org.springframework.core.ReactiveAdapterRegistry"
      uuid: "ReactiveAdapterRegistry.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.ReactiveAdapterRegistry"
        method: "getSharedInstance"
        methodParameters: []
      valueType: "org.springframework.core.ReactiveAdapterRegistry"
      uuid: "reactiveAdapterRegistry"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "url1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 105
      expression: "resource == null"
      range: "(105,7)-(105,22)"
      evaluatedAs: false
      internalMethodName: "resolveResource"
    - lineNumber: 105
      expression: "!resource.exists()"
      range: "(105,27)-(105,44)"
      evaluatedAs: true
      internalMethodName: "resolveResource"
    - lineNumber: 75
      expression: "resolveResource() != null"
      range: "(75,10)-(75,34)"
      evaluatedAs: false
  - pathId: "path2"
    testPathName: "checkResourceExistsWhenResolveResourceIsNotNull"
    constructorSignature: "<init>() : void"
    modelFingerprint: "74F2440A2D55F6F0A2A1B03E8569A1F0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "locale"
      modelFingerprint: "5A54D85CEB69D87DB67C2DBD628A7B22"
      valueUuid: "locale"
    - type: "STATIC"
      name: "ReactiveAdapterRegistry.class.real"
      modelFingerprint: "7455FBF27008720B5B5014BD8E1DC88F"
      valueUuid: "ReactiveAdapterRegistry.class.real"
      methodExercised:
        expression: "getSharedInstance():reactiveAdapterRegistry"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "30FFD5382FB7FC4BC90EEEF8773578C3"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "getResource(location:string):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "9C4E8CD9E94FF629496E2491E24168ED"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.reactive.result.view.MustacheView"
        parameters: []
        propertiesMap:
          applicationContext:
            sapientType: "MOCK"
            valueType: "org.springframework.context.ApplicationContext"
            uuid: "applicationContext"
          url:
            sapientType: "BASIC"
            content: !<regular>
              value: "url1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "org.springframework.boot.web.reactive.result.view.MustacheView"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Locale"
        parameters:
        - name: "language"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "language1"
            valueType: "java.lang.String"
            uuid: "locale-language"
      valueType: "java.util.Locale"
      uuid: "locale"
    - sapientType: "REAL"
      valueType: "org.springframework.core.ReactiveAdapterRegistry"
      uuid: "ReactiveAdapterRegistry.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.ReactiveAdapterRegistry"
        method: "getSharedInstance"
        methodParameters: []
      valueType: "org.springframework.core.ReactiveAdapterRegistry"
      uuid: "reactiveAdapterRegistry"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "url1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 105
      expression: "resource == null"
      range: "(105,7)-(105,22)"
      evaluatedAs: false
      internalMethodName: "resolveResource"
    - lineNumber: 105
      expression: "!resource.exists()"
      range: "(105,27)-(105,44)"
      evaluatedAs: false
      internalMethodName: "resolveResource"
    - lineNumber: 75
      expression: "resolveResource() != null"
      range: "(75,10)-(75,34)"
      evaluatedAs: true
- method:
    name: "renderInternal"
    sourceCodeSignature: "Mono<Void> renderInternal(Map<String, Object> model, MediaType\
      \ contentType, ServerWebExchange exchange)"
    returnType: "reactor.core.publisher.Mono"
    genericReturnType: "java.lang.Void"
    parameters:
    - name: "model"
      type: "java.util.Map"
    - name: "contentType"
      type: "org.springframework.http.MediaType"
    - name: "exchange"
      type: "org.springframework.web.server.ServerWebExchange"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Throwable"
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Throwable"
    - idExternalInstruction: 0
      id: 3
      catchExceptions:
      - "java.lang.Throwable"
    - idExternalInstruction: 0
      id: 4
      catchExceptions:
      - "java.lang.Throwable"
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "215F6B9DDCC54CE53CAA93AB0B7940C3"
  paths:
  - pathId: "path1"
    testPathName: "renderInternalWhenResourceNotExistsAndResourceIsNull"
    constructorSignature: "<init>() : void"
    modelFingerprint: "A778419EEAFB1C4DFC4F5DC8709A2354"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "model"
      modelFingerprint: "C35D3C219B8E99DA34A0749F96873518"
      valueUuid: "model"
    - type: "INPUT"
      name: "contentType"
      modelFingerprint: "004240E413C9A9FECE59636CD0C3D079"
      valueUuid: "contentType"
    - type: "INPUT"
      name: "exchange"
      modelFingerprint: "E36137FB65409461D68BFBFA04FDC323"
      valueUuid: "exchange"
    - type: "STATIC"
      name: "ReactiveAdapterRegistry.class.real"
      modelFingerprint: "7455FBF27008720B5B5014BD8E1DC88F"
      valueUuid: "ReactiveAdapterRegistry.class.real"
      methodExercised:
        expression: "getSharedInstance():reactiveAdapterRegistry"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "8DD81305677B436A66456750E3A6C438"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "getResource(location:string):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "A6D3B599F5C19366D28CA5E4F2301D7D"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean2"
    - type: "STATIC"
      name: "Mono.class"
      modelFingerprint: "BEC3B8DFD81982CBC58E898D0BB97A4C"
      valueUuid: "Mono.class"
      methodExercised:
        expression: "error(error:illegalStateException):mono"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "1541F35FCC67B4634BAD33F60B17DD09"
      valueUuid: "mono"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.reactive.result.view.MustacheView"
        parameters: []
        propertiesMap:
          applicationContext:
            sapientType: "MOCK"
            valueType: "org.springframework.context.ApplicationContext"
            uuid: "applicationContext"
          url:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "org.springframework.boot.web.reactive.result.view.MustacheView"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,java.lang.Object"
      uuid: "model"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.MediaType"
      uuid: "contentType"
    - sapientType: "MOCK"
      valueType: "org.springframework.web.server.ServerWebExchange"
      uuid: "exchange"
    - sapientType: "REAL"
      valueType: "org.springframework.core.ReactiveAdapterRegistry"
      uuid: "ReactiveAdapterRegistry.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.ReactiveAdapterRegistry"
        method: "getSharedInstance"
        methodParameters: []
      valueType: "org.springframework.core.ReactiveAdapterRegistry"
      uuid: "reactiveAdapterRegistry"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "reactor.core.publisher.Mono"
      uuid: "Mono.class"
    - sapientType: "MOCK"
      valueType: "reactor.core.publisher.Mono"
      genericValueType: "java.lang.Void"
      uuid: "mono"
    - sapientType: "ANY"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    - sapientType: "MOCK"
      valueType: "reactor.core.publisher.Mono"
      genericValueType: "java.lang.Void"
      uuid: "mono"
    branches:
    - lineNumber: 105
      expression: "resource == null"
      range: "(105,7)-(105,22)"
      evaluatedAs: false
      internalMethodName: "resolveResource"
    - lineNumber: 105
      expression: "!resource.exists()"
      range: "(105,27)-(105,44)"
      evaluatedAs: true
      internalMethodName: "resolveResource"
    - lineNumber: 81
      expression: "resource == null"
      range: "(81,7)-(81,22)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "renderInternalWhenDefaultBranch"
    constructorSignature: "<init>() : void"
    modelFingerprint: "160684D4CD338AD2A9755F26035D7048"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "model"
      modelFingerprint: "C35D3C219B8E99DA34A0749F96873518"
      valueUuid: "model"
    - type: "INPUT"
      name: "contentType"
      modelFingerprint: "2F62A4726CDB0DF1B646111DA4469BD8"
      valueUuid: "contentType"
    - type: "INPUT"
      name: "exchange"
      modelFingerprint: "0628AE06C1C4B8B348F48F63FBE49813"
      valueUuid: "exchange"
    - type: "STATIC"
      name: "ReactiveAdapterRegistry.class.real"
      modelFingerprint: "7455FBF27008720B5B5014BD8E1DC88F"
      valueUuid: "ReactiveAdapterRegistry.class.real"
      methodExercised:
        expression: "getSharedInstance():reactiveAdapterRegistry"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "30FFD5382FB7FC4BC90EEEF8773578C3"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "getResource(location:string):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "9C4E8CD9E94FF629496E2491E24168ED"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean2"
    - type: "LOCAL_VARIABLE"
      name: "exchange"
      modelFingerprint: "4738E862E7D0C07D139C25769982363C"
      valueUuid: "exchange"
      methodExercised:
        expression: "getResponse():serverHttpResponse"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "DCCB891F391BA107C7DA03F3F62A8DE1"
      valueUuid: "serverHttpResponse"
      methodExercised:
        expression: "bufferFactory():dataBufferFactory"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "CEE4857B4FBB7D1608326B8424339B44"
      valueUuid: "dataBufferFactory"
      methodExercised:
        expression: "allocateBuffer(initialCapacity:uniqueUuid1):dataBuffer"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "5B5C35D79B6C52369B57922472DE393E"
      valueUuid: "resource"
      methodExercised:
        expression: "getInputStream():inputStream"
        throwsExceptions:
        - "java.io.IOException"
    - type: "FIELD"
      name: "compiler"
      modelFingerprint: "9F1FB8C464E5A5040300D4D486C99EB1"
      valueUuid: "fieldMustache.Compiler"
      methodExercised:
        expression: "compile(source:inputStreamReader):template"
    - type: "LOCAL_VARIABLE"
      name: "mediaType"
      modelFingerprint: "995B3FB62DA2452F05E9C418138F2CBB"
      valueUuid: "contentType"
      methodExercised:
        expression: "getCharset():charset2"
    - type: "LOCAL_VARIABLE"
      name: "dataBuffer"
      modelFingerprint: "AA88088943E7AB8AC0B74B6863D6D754"
      valueUuid: "dataBuffer"
      methodExercised:
        expression: "asOutputStream():outputStream"
    - type: "LOCAL_VARIABLE"
      name: "template"
      modelFingerprint: "69D3A0013FB37B93FA57F41418053337"
      valueUuid: "template"
      methodExercised:
        expression: "execute(context:model,out:outputStreamWriter):void"
        throwsExceptions:
        - "com.samskivert.mustache.MustacheException"
    - type: "LOCAL_VARIABLE"
      name: "exchange"
      modelFingerprint: "4738E862E7D0C07D139C25769982363C"
      valueUuid: "exchange"
      methodExercised:
        expression: "getResponse():serverHttpResponse2"
    - type: "STATIC"
      name: "Flux.class"
      modelFingerprint: "05C9A3C8E7CC6DBE97351FC35EE0BD58"
      valueUuid: "Flux.class"
      methodExercised:
        expression: "just(data:dataBuffer):flux"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "09F9BAB2FB969FBCCFDCF32F9D3E6376"
      valueUuid: "serverHttpResponse2"
      methodExercised:
        expression: "writeWith(body:flux):mono"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "1541F35FCC67B4634BAD33F60B17DD09"
      valueUuid: "mono"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_FAILURE"
      source: "return new InputStreamReader(resource.getInputStream(), this.charset);"
      lineNumber: 113
      details: "No constructor found to create an object without any exception for\
        \ class java.io.InputStreamReader"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.reactive.result.view.MustacheView"
        parameters: []
        propertiesMap:
          charset:
            sapientType: "BASIC"
            content: !<regular>
              value: "charset1"
            valueType: "java.lang.String"
            uuid: "fieldString5"
          applicationContext:
            sapientType: "MOCK"
            valueType: "org.springframework.context.ApplicationContext"
            uuid: "applicationContext"
          compiler:
            sapientType: "MOCK"
            valueType: "com.samskivert.mustache.Mustache$Compiler"
            uuid: "fieldMustache.Compiler"
          url:
            sapientType: "BASIC"
            content: !<regular>
              value: "url1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "org.springframework.boot.web.reactive.result.view.MustacheView"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,java.lang.Object"
      uuid: "model"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.MediaType"
      uuid: "contentType"
    - sapientType: "MOCK"
      valueType: "org.springframework.web.server.ServerWebExchange"
      uuid: "exchange"
    - sapientType: "REAL"
      valueType: "org.springframework.core.ReactiveAdapterRegistry"
      uuid: "ReactiveAdapterRegistry.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.ReactiveAdapterRegistry"
        method: "getSharedInstance"
        methodParameters: []
      valueType: "org.springframework.core.ReactiveAdapterRegistry"
      uuid: "reactiveAdapterRegistry"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "url1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.web.server.ServerWebExchange"
      uuid: "exchange"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.server.reactive.ServerHttpResponse"
      uuid: "serverHttpResponse"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.server.reactive.ServerHttpResponse"
      uuid: "serverHttpResponse"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBufferFactory"
      uuid: "dataBufferFactory"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBufferFactory"
      uuid: "dataBufferFactory"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBuffer"
      uuid: "dataBuffer"
    - sapientType: "BASIC"
      content: !<regular>
        value: 256
      valueType: "int"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "inputStream"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Mustache$Compiler"
      uuid: "fieldMustache.Compiler"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Template"
      uuid: "template"
    - sapientType: "ANY"
      valueType: "java.io.InputStreamReader"
      uuid: "inputStreamReader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.http.MediaType"
      uuid: "contentType"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.nio.charset.Charset"
        method: "defaultCharset"
        methodParameters: []
      valueType: "java.nio.charset.Charset"
      uuid: "charset2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBuffer"
      uuid: "dataBuffer"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.ByteArrayOutputStream"
        parameters: []
      valueType: "java.io.OutputStream"
      uuid: "outputStream"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Template"
      uuid: "template"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,java.lang.Object"
      uuid: "model"
    - sapientType: "ANY"
      valueType: "java.io.OutputStreamWriter"
      uuid: "outputStreamWriter"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.web.server.ServerWebExchange"
      uuid: "exchange"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.server.reactive.ServerHttpResponse"
      uuid: "serverHttpResponse2"
    - sapientType: "MOCK"
      valueType: "reactor.core.publisher.Flux"
      uuid: "Flux.class"
    - sapientType: "MOCK"
      valueType: "reactor.core.publisher.Flux"
      genericValueType: "org.springframework.core.io.buffer.DataBuffer"
      uuid: "flux"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBuffer"
      uuid: "dataBuffer"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.server.reactive.ServerHttpResponse"
      uuid: "serverHttpResponse2"
    - sapientType: "MOCK"
      valueType: "reactor.core.publisher.Mono"
      genericValueType: "java.lang.Void"
      uuid: "mono"
    - sapientType: "MOCK"
      valueType: "reactor.core.publisher.Flux"
      genericValueType: "org.springframework.core.io.buffer.DataBuffer"
      uuid: "flux"
    - sapientType: "MOCK"
      valueType: "reactor.core.publisher.Mono"
      genericValueType: "java.lang.Void"
      uuid: "mono"
    branches:
    - lineNumber: 105
      expression: "resource == null"
      range: "(105,7)-(105,22)"
      evaluatedAs: false
      internalMethodName: "resolveResource"
    - lineNumber: 105
      expression: "!resource.exists()"
      range: "(105,27)-(105,44)"
      evaluatedAs: false
      internalMethodName: "resolveResource"
    - lineNumber: 81
      expression: "resource == null"
      range: "(81,7)-(81,22)"
      evaluatedAs: false
    - lineNumber: 112
      expression: "this.charset != null"
      range: "(112,7)-(112,26)"
      evaluatedAs: true
      internalMethodName: "getReader"
    - lineNumber: 119
      expression: "mediaType != null"
      range: "(119,31)-(119,47)"
      evaluatedAs: true
      internalMethodName: "getCharset"
    - lineNumber: 95
      expression: "branch expression (line 95)"
      range: "(95,1)-(95,200)"
      evaluatedAs: false
  - pathId: "path4"
    testPathName: "renderInternalWhenThisCharsetIsNullAndMediaTypeIsNullAndDefaultBranch"
    constructorSignature: "<init>() : void"
    modelFingerprint: "24AAFA34422A4AEC00708C8056849485"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "model"
      modelFingerprint: "C35D3C219B8E99DA34A0749F96873518"
      valueUuid: "model"
    - type: "INPUT"
      name: "contentType"
      modelFingerprint: "A6491D20DDBCE33FEC9D6D2C4C011F94"
      valueUuid: "contentType"
    - type: "INPUT"
      name: "exchange"
      modelFingerprint: "0628AE06C1C4B8B348F48F63FBE49813"
      valueUuid: "exchange"
    - type: "STATIC"
      name: "ReactiveAdapterRegistry.class.real"
      modelFingerprint: "7455FBF27008720B5B5014BD8E1DC88F"
      valueUuid: "ReactiveAdapterRegistry.class.real"
      methodExercised:
        expression: "getSharedInstance():reactiveAdapterRegistry"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "30FFD5382FB7FC4BC90EEEF8773578C3"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "getResource(location:string):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "9C4E8CD9E94FF629496E2491E24168ED"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean2"
    - type: "LOCAL_VARIABLE"
      name: "exchange"
      modelFingerprint: "4738E862E7D0C07D139C25769982363C"
      valueUuid: "exchange"
      methodExercised:
        expression: "getResponse():serverHttpResponse"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "DCCB891F391BA107C7DA03F3F62A8DE1"
      valueUuid: "serverHttpResponse"
      methodExercised:
        expression: "bufferFactory():dataBufferFactory"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "CEE4857B4FBB7D1608326B8424339B44"
      valueUuid: "dataBufferFactory"
      methodExercised:
        expression: "allocateBuffer(initialCapacity:uniqueUuid2):dataBuffer"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "5B5C35D79B6C52369B57922472DE393E"
      valueUuid: "resource"
      methodExercised:
        expression: "getInputStream():inputStream"
        throwsExceptions:
        - "java.io.IOException"
    - type: "FIELD"
      name: "compiler"
      modelFingerprint: "672814EFB89A84B1BA526F1D50A14A65"
      valueUuid: "fieldMustache.Compiler"
      methodExercised:
        expression: "compile(source:inputStreamReader):template"
    - type: "LOCAL_VARIABLE"
      name: "dataBuffer"
      modelFingerprint: "AA88088943E7AB8AC0B74B6863D6D754"
      valueUuid: "dataBuffer"
      methodExercised:
        expression: "asOutputStream():outputStream"
    - type: "LOCAL_VARIABLE"
      name: "template"
      modelFingerprint: "69D3A0013FB37B93FA57F41418053337"
      valueUuid: "template"
      methodExercised:
        expression: "execute(context:model,out:outputStreamWriter):void"
        throwsExceptions:
        - "com.samskivert.mustache.MustacheException"
    - type: "LOCAL_VARIABLE"
      name: "exchange"
      modelFingerprint: "4738E862E7D0C07D139C25769982363C"
      valueUuid: "exchange"
      methodExercised:
        expression: "getResponse():serverHttpResponse2"
    - type: "STATIC"
      name: "Flux.class"
      modelFingerprint: "05C9A3C8E7CC6DBE97351FC35EE0BD58"
      valueUuid: "Flux.class"
      methodExercised:
        expression: "just(data:dataBuffer):flux"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "09F9BAB2FB969FBCCFDCF32F9D3E6376"
      valueUuid: "serverHttpResponse2"
      methodExercised:
        expression: "writeWith(body:flux):mono"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "1541F35FCC67B4634BAD33F60B17DD09"
      valueUuid: "mono"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_FAILURE"
      source: "try (Writer writer = new OutputStreamWriter(dataBuffer.asOutputStream(),\
        \ charset)) {"
      lineNumber: 91
      details: "No constructor found to create an object without any exception for\
        \ class java.io.OutputStreamWriter"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.reactive.result.view.MustacheView"
        parameters: []
        propertiesMap:
          charset:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "fieldString5"
            fixed: true
          applicationContext:
            sapientType: "MOCK"
            valueType: "org.springframework.context.ApplicationContext"
            uuid: "applicationContext"
          defaultCharset:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.nio.charset.Charset"
              method: "defaultCharset"
              methodParameters: []
            valueType: "java.nio.charset.Charset"
            uuid: "charset2"
          compiler:
            sapientType: "MOCK"
            valueType: "com.samskivert.mustache.Mustache$Compiler"
            uuid: "fieldMustache.Compiler"
          url:
            sapientType: "BASIC"
            content: !<regular>
              value: "url1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "org.springframework.boot.web.reactive.result.view.MustacheView"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,java.lang.Object"
      uuid: "model"
    - sapientType: "NULL"
      valueType: "org.springframework.http.MediaType"
      uuid: "contentType"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.web.server.ServerWebExchange"
      uuid: "exchange"
    - sapientType: "REAL"
      valueType: "org.springframework.core.ReactiveAdapterRegistry"
      uuid: "ReactiveAdapterRegistry.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.ReactiveAdapterRegistry"
        method: "getSharedInstance"
        methodParameters: []
      valueType: "org.springframework.core.ReactiveAdapterRegistry"
      uuid: "reactiveAdapterRegistry"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "url1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.web.server.ServerWebExchange"
      uuid: "exchange"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.server.reactive.ServerHttpResponse"
      uuid: "serverHttpResponse"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.server.reactive.ServerHttpResponse"
      uuid: "serverHttpResponse"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBufferFactory"
      uuid: "dataBufferFactory"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBufferFactory"
      uuid: "dataBufferFactory"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBuffer"
      uuid: "dataBuffer"
    - sapientType: "BASIC"
      content: !<regular>
        value: 256
      valueType: "int"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "inputStream"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Mustache$Compiler"
      uuid: "fieldMustache.Compiler"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Template"
      uuid: "template"
    - sapientType: "ANY"
      valueType: "java.io.InputStreamReader"
      uuid: "inputStreamReader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBuffer"
      uuid: "dataBuffer"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.ByteArrayOutputStream"
        parameters: []
      valueType: "java.io.OutputStream"
      uuid: "outputStream"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Template"
      uuid: "template"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,java.lang.Object"
      uuid: "model"
    - sapientType: "ANY"
      valueType: "java.io.OutputStreamWriter"
      uuid: "outputStreamWriter"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.web.server.ServerWebExchange"
      uuid: "exchange"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.server.reactive.ServerHttpResponse"
      uuid: "serverHttpResponse2"
    - sapientType: "MOCK"
      valueType: "reactor.core.publisher.Flux"
      uuid: "Flux.class"
    - sapientType: "MOCK"
      valueType: "reactor.core.publisher.Flux"
      genericValueType: "org.springframework.core.io.buffer.DataBuffer"
      uuid: "flux"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBuffer"
      uuid: "dataBuffer"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.server.reactive.ServerHttpResponse"
      uuid: "serverHttpResponse2"
    - sapientType: "MOCK"
      valueType: "reactor.core.publisher.Mono"
      genericValueType: "java.lang.Void"
      uuid: "mono"
    - sapientType: "MOCK"
      valueType: "reactor.core.publisher.Flux"
      genericValueType: "org.springframework.core.io.buffer.DataBuffer"
      uuid: "flux"
    - sapientType: "MOCK"
      valueType: "reactor.core.publisher.Mono"
      genericValueType: "java.lang.Void"
      uuid: "mono"
    branches:
    - lineNumber: 105
      expression: "resource == null"
      range: "(105,7)-(105,22)"
      evaluatedAs: false
      internalMethodName: "resolveResource"
    - lineNumber: 105
      expression: "!resource.exists()"
      range: "(105,27)-(105,44)"
      evaluatedAs: false
      internalMethodName: "resolveResource"
    - lineNumber: 81
      expression: "resource == null"
      range: "(81,7)-(81,22)"
      evaluatedAs: false
    - lineNumber: 112
      expression: "this.charset != null"
      range: "(112,7)-(112,26)"
      evaluatedAs: false
      internalMethodName: "getReader"
    - lineNumber: 119
      expression: "mediaType != null"
      range: "(119,31)-(119,47)"
      evaluatedAs: false
      internalMethodName: "getCharset"
    - lineNumber: 95
      expression: "branch expression (line 95)"
      range: "(95,1)-(95,200)"
      evaluatedAs: false
  - pathId: "path9"
    testPathName: "renderInternalWhenDefaultBranchAndDefaultBranch"
    constructorSignature: "<init>() : void"
    modelFingerprint: "1E949B28B94FB12478347293E9124A88"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "model"
      modelFingerprint: "C35D3C219B8E99DA34A0749F96873518"
      valueUuid: "model"
    - type: "INPUT"
      name: "contentType"
      modelFingerprint: "2F62A4726CDB0DF1B646111DA4469BD8"
      valueUuid: "contentType"
    - type: "INPUT"
      name: "exchange"
      modelFingerprint: "0628AE06C1C4B8B348F48F63FBE49813"
      valueUuid: "exchange"
    - type: "STATIC"
      name: "ReactiveAdapterRegistry.class.real"
      modelFingerprint: "7455FBF27008720B5B5014BD8E1DC88F"
      valueUuid: "ReactiveAdapterRegistry.class.real"
      methodExercised:
        expression: "getSharedInstance():reactiveAdapterRegistry"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "30FFD5382FB7FC4BC90EEEF8773578C3"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "getResource(location:string):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "9C4E8CD9E94FF629496E2491E24168ED"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean2"
    - type: "LOCAL_VARIABLE"
      name: "exchange"
      modelFingerprint: "4738E862E7D0C07D139C25769982363C"
      valueUuid: "exchange"
      methodExercised:
        expression: "getResponse():serverHttpResponse"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "DCCB891F391BA107C7DA03F3F62A8DE1"
      valueUuid: "serverHttpResponse"
      methodExercised:
        expression: "bufferFactory():dataBufferFactory"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "CEE4857B4FBB7D1608326B8424339B44"
      valueUuid: "dataBufferFactory"
      methodExercised:
        expression: "allocateBuffer(initialCapacity:uniqueUuid3):dataBuffer"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "5B5C35D79B6C52369B57922472DE393E"
      valueUuid: "resource"
      methodExercised:
        expression: "getInputStream():inputStream"
        throwsExceptions:
        - "java.io.IOException"
    - type: "FIELD"
      name: "compiler"
      modelFingerprint: "9F1FB8C464E5A5040300D4D486C99EB1"
      valueUuid: "fieldMustache.Compiler"
      methodExercised:
        expression: "compile(source:inputStreamReader):template"
    - type: "LOCAL_VARIABLE"
      name: "mediaType"
      modelFingerprint: "995B3FB62DA2452F05E9C418138F2CBB"
      valueUuid: "contentType"
      methodExercised:
        expression: "getCharset():charset2"
    - type: "LOCAL_VARIABLE"
      name: "dataBuffer"
      modelFingerprint: "AA88088943E7AB8AC0B74B6863D6D754"
      valueUuid: "dataBuffer"
      methodExercised:
        expression: "asOutputStream():outputStream"
    - type: "LOCAL_VARIABLE"
      name: "template"
      modelFingerprint: "69D3A0013FB37B93FA57F41418053337"
      valueUuid: "template"
      methodExercised:
        expression: "execute(context:model,out:outputStreamWriter):void"
        throwsExceptions:
        - "com.samskivert.mustache.MustacheException"
    - type: "LOCAL_VARIABLE"
      name: "writer"
      modelFingerprint: "3F3D482EA94BE88AA8F2BFC7D8565214"
      valueUuid: "outputStreamWriter"
      methodExercised:
        expression: "flush():void2"
        throwsExceptions:
        - "java.io.IOException"
    - type: "LOCAL_VARIABLE"
      name: "writer"
      modelFingerprint: "49B2AF9C18AC6A4659100C07439A3DAA"
      valueUuid: "outputStreamWriter"
      methodExercised:
        expression: "close():void3"
        throwsExceptions:
        - "java.io.IOException"
    - type: "LOCAL_VARIABLE"
      name: "reader"
      modelFingerprint: "EDAEEF7596902AAD2CF449F81C058172"
      valueUuid: "inputStreamReader"
      methodExercised:
        expression: "close():void4"
        throwsExceptions:
        - "java.io.IOException"
    - type: "LOCAL_VARIABLE"
      name: "exchange"
      modelFingerprint: "4738E862E7D0C07D139C25769982363C"
      valueUuid: "exchange"
      methodExercised:
        expression: "getResponse():serverHttpResponse2"
    - type: "STATIC"
      name: "Flux.class"
      modelFingerprint: "05C9A3C8E7CC6DBE97351FC35EE0BD58"
      valueUuid: "Flux.class"
      methodExercised:
        expression: "just(data:dataBuffer):flux"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "09F9BAB2FB969FBCCFDCF32F9D3E6376"
      valueUuid: "serverHttpResponse2"
      methodExercised:
        expression: "writeWith(body:flux):mono"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "1541F35FCC67B4634BAD33F60B17DD09"
      valueUuid: "mono"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_FAILURE"
      source: "return new InputStreamReader(resource.getInputStream(), this.charset);"
      lineNumber: 113
      details: "No constructor found to create an object without any exception for\
        \ class java.io.InputStreamReader"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.reactive.result.view.MustacheView"
        parameters: []
        propertiesMap:
          charset:
            sapientType: "BASIC"
            content: !<regular>
              value: "charset1"
            valueType: "java.lang.String"
            uuid: "fieldString5"
          applicationContext:
            sapientType: "MOCK"
            valueType: "org.springframework.context.ApplicationContext"
            uuid: "applicationContext"
          compiler:
            sapientType: "MOCK"
            valueType: "com.samskivert.mustache.Mustache$Compiler"
            uuid: "fieldMustache.Compiler"
          url:
            sapientType: "BASIC"
            content: !<regular>
              value: "url1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "org.springframework.boot.web.reactive.result.view.MustacheView"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,java.lang.Object"
      uuid: "model"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.MediaType"
      uuid: "contentType"
    - sapientType: "MOCK"
      valueType: "org.springframework.web.server.ServerWebExchange"
      uuid: "exchange"
    - sapientType: "REAL"
      valueType: "org.springframework.core.ReactiveAdapterRegistry"
      uuid: "ReactiveAdapterRegistry.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.ReactiveAdapterRegistry"
        method: "getSharedInstance"
        methodParameters: []
      valueType: "org.springframework.core.ReactiveAdapterRegistry"
      uuid: "reactiveAdapterRegistry"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "url1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.web.server.ServerWebExchange"
      uuid: "exchange"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.server.reactive.ServerHttpResponse"
      uuid: "serverHttpResponse"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.server.reactive.ServerHttpResponse"
      uuid: "serverHttpResponse"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBufferFactory"
      uuid: "dataBufferFactory"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBufferFactory"
      uuid: "dataBufferFactory"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBuffer"
      uuid: "dataBuffer"
    - sapientType: "BASIC"
      content: !<regular>
        value: 256
      valueType: "int"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "inputStream"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Mustache$Compiler"
      uuid: "fieldMustache.Compiler"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Template"
      uuid: "template"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.InputStreamReader"
        parameters:
        - name: "in"
          value:
            sapientType: "INPUT_STREAM"
            content: !<inputStream>
              values: []
            valueType: "java.io.InputStream"
            uuid: "inputStream"
        - name: "charsetName"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "charset1"
            valueType: "java.lang.String"
            uuid: "fieldString5"
      valueType: "java.io.InputStreamReader"
      uuid: "inputStreamReader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.http.MediaType"
      uuid: "contentType"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.nio.charset.Charset"
        method: "defaultCharset"
        methodParameters: []
      valueType: "java.nio.charset.Charset"
      uuid: "charset2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBuffer"
      uuid: "dataBuffer"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.ByteArrayOutputStream"
        parameters: []
      valueType: "java.io.OutputStream"
      uuid: "outputStream"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Template"
      uuid: "template"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,java.lang.Object"
      uuid: "model"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.OutputStreamWriter"
        parameters:
        - name: "out"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.ByteArrayOutputStream"
              parameters: []
            valueType: "java.io.OutputStream"
            uuid: "outputStream"
        - name: "cs"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.nio.charset.Charset"
              method: "defaultCharset"
              methodParameters: []
            valueType: "java.nio.charset.Charset"
            uuid: "charset2"
      valueType: "java.io.OutputStreamWriter"
      uuid: "outputStreamWriter"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.OutputStreamWriter"
        parameters:
        - name: "out"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.ByteArrayOutputStream"
              parameters: []
            valueType: "java.io.OutputStream"
            uuid: "outputStream"
        - name: "cs"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.nio.charset.Charset"
              method: "defaultCharset"
              methodParameters: []
            valueType: "java.nio.charset.Charset"
            uuid: "charset2"
      valueType: "java.io.OutputStreamWriter"
      uuid: "outputStreamWriter"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.OutputStreamWriter"
        parameters:
        - name: "out"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.ByteArrayOutputStream"
              parameters: []
            valueType: "java.io.OutputStream"
            uuid: "outputStream"
        - name: "cs"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.nio.charset.Charset"
              method: "defaultCharset"
              methodParameters: []
            valueType: "java.nio.charset.Charset"
            uuid: "charset2"
      valueType: "java.io.OutputStreamWriter"
      uuid: "outputStreamWriter"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.InputStreamReader"
        parameters:
        - name: "in"
          value:
            sapientType: "INPUT_STREAM"
            content: !<inputStream>
              values: []
            valueType: "java.io.InputStream"
            uuid: "inputStream"
        - name: "charsetName"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "charset1"
            valueType: "java.lang.String"
            uuid: "fieldString5"
      valueType: "java.io.InputStreamReader"
      uuid: "inputStreamReader"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.web.server.ServerWebExchange"
      uuid: "exchange"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.server.reactive.ServerHttpResponse"
      uuid: "serverHttpResponse2"
    - sapientType: "MOCK"
      valueType: "reactor.core.publisher.Flux"
      uuid: "Flux.class"
    - sapientType: "MOCK"
      valueType: "reactor.core.publisher.Flux"
      genericValueType: "org.springframework.core.io.buffer.DataBuffer"
      uuid: "flux"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBuffer"
      uuid: "dataBuffer"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.server.reactive.ServerHttpResponse"
      uuid: "serverHttpResponse2"
    - sapientType: "MOCK"
      valueType: "reactor.core.publisher.Mono"
      genericValueType: "java.lang.Void"
      uuid: "mono"
    - sapientType: "MOCK"
      valueType: "reactor.core.publisher.Flux"
      genericValueType: "org.springframework.core.io.buffer.DataBuffer"
      uuid: "flux"
    - sapientType: "MOCK"
      valueType: "reactor.core.publisher.Mono"
      genericValueType: "java.lang.Void"
      uuid: "mono"
    branches:
    - lineNumber: 105
      expression: "resource == null"
      range: "(105,7)-(105,22)"
      evaluatedAs: false
      internalMethodName: "resolveResource"
    - lineNumber: 105
      expression: "!resource.exists()"
      range: "(105,27)-(105,44)"
      evaluatedAs: false
      internalMethodName: "resolveResource"
    - lineNumber: 81
      expression: "resource == null"
      range: "(81,7)-(81,22)"
      evaluatedAs: false
    - lineNumber: 112
      expression: "this.charset != null"
      range: "(112,7)-(112,26)"
      evaluatedAs: true
      internalMethodName: "getReader"
    - lineNumber: 119
      expression: "mediaType != null"
      range: "(119,31)-(119,47)"
      evaluatedAs: true
      internalMethodName: "getCharset"
    - lineNumber: 91
      expression: "branch expression (line 91)"
      range: "(91,1)-(91,200)"
      evaluatedAs: true
    - lineNumber: 95
      expression: "branch expression (line 95)"
      range: "(95,1)-(95,200)"
      evaluatedAs: false
    catchBlockExercised:
      idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Throwable"
  - pathId: "path15"
    testPathName: "renderInternalWhenCaughtException"
    constructorSignature: "<init>() : void"
    modelFingerprint: "E9F2F5202D482F05DBBCFF6229489E30"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "model"
      modelFingerprint: "C35D3C219B8E99DA34A0749F96873518"
      valueUuid: "model"
    - type: "INPUT"
      name: "contentType"
      modelFingerprint: "2F62A4726CDB0DF1B646111DA4469BD8"
      valueUuid: "contentType"
    - type: "INPUT"
      name: "exchange"
      modelFingerprint: "0628AE06C1C4B8B348F48F63FBE49813"
      valueUuid: "exchange"
    - type: "STATIC"
      name: "ReactiveAdapterRegistry.class.real"
      modelFingerprint: "7455FBF27008720B5B5014BD8E1DC88F"
      valueUuid: "ReactiveAdapterRegistry.class.real"
      methodExercised:
        expression: "getSharedInstance():reactiveAdapterRegistry"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "30FFD5382FB7FC4BC90EEEF8773578C3"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "getResource(location:string):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "9C4E8CD9E94FF629496E2491E24168ED"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean2"
    - type: "LOCAL_VARIABLE"
      name: "exchange"
      modelFingerprint: "4738E862E7D0C07D139C25769982363C"
      valueUuid: "exchange"
      methodExercised:
        expression: "getResponse():serverHttpResponse"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "DCCB891F391BA107C7DA03F3F62A8DE1"
      valueUuid: "serverHttpResponse"
      methodExercised:
        expression: "bufferFactory():dataBufferFactory"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "CEE4857B4FBB7D1608326B8424339B44"
      valueUuid: "dataBufferFactory"
      methodExercised:
        expression: "allocateBuffer(initialCapacity:uniqueUuid4):dataBuffer"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "5B5C35D79B6C52369B57922472DE393E"
      valueUuid: "resource"
      methodExercised:
        expression: "getInputStream():inputStream"
        throwsExceptions:
        - "java.io.IOException"
    - type: "FIELD"
      name: "compiler"
      modelFingerprint: "9F1FB8C464E5A5040300D4D486C99EB1"
      valueUuid: "fieldMustache.Compiler"
      methodExercised:
        expression: "compile(source:inputStreamReader):template"
    - type: "LOCAL_VARIABLE"
      name: "mediaType"
      modelFingerprint: "995B3FB62DA2452F05E9C418138F2CBB"
      valueUuid: "contentType"
      methodExercised:
        expression: "getCharset():charset2"
    - type: "LOCAL_VARIABLE"
      name: "dataBuffer"
      modelFingerprint: "AA88088943E7AB8AC0B74B6863D6D754"
      valueUuid: "dataBuffer"
      methodExercised:
        expression: "asOutputStream():outputStream"
    - type: "LOCAL_VARIABLE"
      name: "template"
      modelFingerprint: "69D3A0013FB37B93FA57F41418053337"
      valueUuid: "template"
      methodExercised:
        expression: "execute(context:model,out:outputStreamWriter):void"
        throwsExceptions:
        - "com.samskivert.mustache.MustacheException"
    - type: "LOCAL_VARIABLE"
      name: "writer"
      modelFingerprint: "3F3D482EA94BE88AA8F2BFC7D8565214"
      valueUuid: "outputStreamWriter"
      methodExercised:
        expression: "flush():void2"
        throwsExceptions:
        - "java.io.IOException"
    - type: "LOCAL_VARIABLE"
      name: "writer"
      modelFingerprint: "49B2AF9C18AC6A4659100C07439A3DAA"
      valueUuid: "outputStreamWriter"
      methodExercised:
        expression: "close():void3"
        throwsExceptions:
        - "java.io.IOException"
    - type: "LOCAL_VARIABLE"
      name: "reader"
      modelFingerprint: "EDAEEF7596902AAD2CF449F81C058172"
      valueUuid: "inputStreamReader"
      methodExercised:
        expression: "close():void4"
        throwsExceptions:
        - "java.io.IOException"
    - type: "STATIC"
      name: "DataBufferUtils.class"
      modelFingerprint: "1125B0A7A2713AA745B07B2D9493297A"
      valueUuid: "DataBufferUtils.class"
      methodExercised:
        expression: "release(dataBuffer:dataBuffer):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "Mono.class"
      modelFingerprint: "40F7C7F21108E140EA02E529526F94AE"
      valueUuid: "Mono.class"
      methodExercised:
        expression: "error(error:exception):mono"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "1541F35FCC67B4634BAD33F60B17DD09"
      valueUuid: "mono"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_FAILURE"
      source: "return new InputStreamReader(resource.getInputStream(), this.charset);"
      lineNumber: 113
      details: "No constructor found to create an object without any exception for\
        \ class java.io.InputStreamReader"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.reactive.result.view.MustacheView"
        parameters: []
        propertiesMap:
          charset:
            sapientType: "BASIC"
            content: !<regular>
              value: "charset1"
            valueType: "java.lang.String"
            uuid: "fieldString5"
          applicationContext:
            sapientType: "MOCK"
            valueType: "org.springframework.context.ApplicationContext"
            uuid: "applicationContext"
          compiler:
            sapientType: "MOCK"
            valueType: "com.samskivert.mustache.Mustache$Compiler"
            uuid: "fieldMustache.Compiler"
          url:
            sapientType: "BASIC"
            content: !<regular>
              value: "url1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "org.springframework.boot.web.reactive.result.view.MustacheView"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,java.lang.Object"
      uuid: "model"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.MediaType"
      uuid: "contentType"
    - sapientType: "MOCK"
      valueType: "org.springframework.web.server.ServerWebExchange"
      uuid: "exchange"
    - sapientType: "REAL"
      valueType: "org.springframework.core.ReactiveAdapterRegistry"
      uuid: "ReactiveAdapterRegistry.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.ReactiveAdapterRegistry"
        method: "getSharedInstance"
        methodParameters: []
      valueType: "org.springframework.core.ReactiveAdapterRegistry"
      uuid: "reactiveAdapterRegistry"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "url1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.web.server.ServerWebExchange"
      uuid: "exchange"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.server.reactive.ServerHttpResponse"
      uuid: "serverHttpResponse"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.server.reactive.ServerHttpResponse"
      uuid: "serverHttpResponse"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBufferFactory"
      uuid: "dataBufferFactory"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBufferFactory"
      uuid: "dataBufferFactory"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBuffer"
      uuid: "dataBuffer"
    - sapientType: "BASIC"
      content: !<regular>
        value: 256
      valueType: "int"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "inputStream"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Mustache$Compiler"
      uuid: "fieldMustache.Compiler"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Template"
      uuid: "template"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.InputStreamReader"
        parameters:
        - name: "in"
          value:
            sapientType: "INPUT_STREAM"
            content: !<inputStream>
              values: []
            valueType: "java.io.InputStream"
            uuid: "inputStream"
        - name: "charsetName"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "charset1"
            valueType: "java.lang.String"
            uuid: "fieldString5"
      valueType: "java.io.InputStreamReader"
      uuid: "inputStreamReader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.http.MediaType"
      uuid: "contentType"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.nio.charset.Charset"
        method: "defaultCharset"
        methodParameters: []
      valueType: "java.nio.charset.Charset"
      uuid: "charset2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBuffer"
      uuid: "dataBuffer"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.ByteArrayOutputStream"
        parameters: []
      valueType: "java.io.OutputStream"
      uuid: "outputStream"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Template"
      uuid: "template"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,java.lang.Object"
      uuid: "model"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.OutputStreamWriter"
        parameters:
        - name: "out"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.ByteArrayOutputStream"
              parameters: []
            valueType: "java.io.OutputStream"
            uuid: "outputStream"
        - name: "cs"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.nio.charset.Charset"
              method: "defaultCharset"
              methodParameters: []
            valueType: "java.nio.charset.Charset"
            uuid: "charset2"
      valueType: "java.io.OutputStreamWriter"
      uuid: "outputStreamWriter"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.OutputStreamWriter"
        parameters:
        - name: "out"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.ByteArrayOutputStream"
              parameters: []
            valueType: "java.io.OutputStream"
            uuid: "outputStream"
        - name: "cs"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.nio.charset.Charset"
              method: "defaultCharset"
              methodParameters: []
            valueType: "java.nio.charset.Charset"
            uuid: "charset2"
      valueType: "java.io.OutputStreamWriter"
      uuid: "outputStreamWriter"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.OutputStreamWriter"
        parameters:
        - name: "out"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.ByteArrayOutputStream"
              parameters: []
            valueType: "java.io.OutputStream"
            uuid: "outputStream"
        - name: "cs"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.nio.charset.Charset"
              method: "defaultCharset"
              methodParameters: []
            valueType: "java.nio.charset.Charset"
            uuid: "charset2"
      valueType: "java.io.OutputStreamWriter"
      uuid: "outputStreamWriter"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.InputStreamReader"
        parameters:
        - name: "in"
          value:
            sapientType: "INPUT_STREAM"
            content: !<inputStream>
              values: []
            valueType: "java.io.InputStream"
            uuid: "inputStream"
        - name: "charsetName"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "charset1"
            valueType: "java.lang.String"
            uuid: "fieldString5"
      valueType: "java.io.InputStreamReader"
      uuid: "inputStreamReader"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBufferUtils"
      uuid: "DataBufferUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBuffer"
      uuid: "dataBuffer"
    - sapientType: "MOCK"
      valueType: "reactor.core.publisher.Mono"
      uuid: "Mono.class"
    - sapientType: "MOCK"
      valueType: "reactor.core.publisher.Mono"
      genericValueType: "java.lang.Void"
      uuid: "mono"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Exception"
        parameters: []
      valueType: "java.lang.Exception"
      uuid: "exception"
    - sapientType: "MOCK"
      valueType: "reactor.core.publisher.Mono"
      genericValueType: "java.lang.Void"
      uuid: "mono"
    branches:
    - lineNumber: 105
      expression: "resource == null"
      range: "(105,7)-(105,22)"
      evaluatedAs: false
      internalMethodName: "resolveResource"
    - lineNumber: 105
      expression: "!resource.exists()"
      range: "(105,27)-(105,44)"
      evaluatedAs: false
      internalMethodName: "resolveResource"
    - lineNumber: 81
      expression: "resource == null"
      range: "(81,7)-(81,22)"
      evaluatedAs: false
    - lineNumber: 112
      expression: "this.charset != null"
      range: "(112,7)-(112,26)"
      evaluatedAs: true
      internalMethodName: "getReader"
    - lineNumber: 119
      expression: "mediaType != null"
      range: "(119,31)-(119,47)"
      evaluatedAs: true
      internalMethodName: "getCharset"
    - lineNumber: 95
      expression: "branch expression (line 95)"
      range: "(95,1)-(95,200)"
      evaluatedAs: false
    - lineNumber: 96
      expression: "catch-exception (Exception)"
      range: "(96,3)-(96,21)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path8"
    testPathName: "renderInternalWhenMediaTypeIsNullAndDefaultBranchAndDefaultBranchThrowsThrowable"
    constructorSignature: "<init>() : void"
    modelFingerprint: "8440616F584FA0DAB86C884EEEB5EA1C"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "model"
      modelFingerprint: "C35D3C219B8E99DA34A0749F96873518"
      valueUuid: "model"
    - type: "INPUT"
      name: "contentType"
      modelFingerprint: "A6491D20DDBCE33FEC9D6D2C4C011F94"
      valueUuid: "contentType"
    - type: "INPUT"
      name: "exchange"
      modelFingerprint: "0628AE06C1C4B8B348F48F63FBE49813"
      valueUuid: "exchange"
    - type: "STATIC"
      name: "ReactiveAdapterRegistry.class.real"
      modelFingerprint: "7455FBF27008720B5B5014BD8E1DC88F"
      valueUuid: "ReactiveAdapterRegistry.class.real"
      methodExercised:
        expression: "getSharedInstance():reactiveAdapterRegistry"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "30FFD5382FB7FC4BC90EEEF8773578C3"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "getResource(location:string):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "9C4E8CD9E94FF629496E2491E24168ED"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean2"
    - type: "LOCAL_VARIABLE"
      name: "exchange"
      modelFingerprint: "4738E862E7D0C07D139C25769982363C"
      valueUuid: "exchange"
      methodExercised:
        expression: "getResponse():serverHttpResponse"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "DCCB891F391BA107C7DA03F3F62A8DE1"
      valueUuid: "serverHttpResponse"
      methodExercised:
        expression: "bufferFactory():dataBufferFactory"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "CEE4857B4FBB7D1608326B8424339B44"
      valueUuid: "dataBufferFactory"
      methodExercised:
        expression: "allocateBuffer(initialCapacity:uniqueUuid5):dataBuffer"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "5B5C35D79B6C52369B57922472DE393E"
      valueUuid: "resource"
      methodExercised:
        expression: "getInputStream():inputStream"
        throwsExceptions:
        - "java.io.IOException"
    - type: "FIELD"
      name: "compiler"
      modelFingerprint: "672814EFB89A84B1BA526F1D50A14A65"
      valueUuid: "fieldMustache.Compiler"
      methodExercised:
        expression: "compile(source:inputStreamReader):template"
    - type: "LOCAL_VARIABLE"
      name: "dataBuffer"
      modelFingerprint: "AA88088943E7AB8AC0B74B6863D6D754"
      valueUuid: "dataBuffer"
      methodExercised:
        expression: "asOutputStream():outputStream"
    - type: "LOCAL_VARIABLE"
      name: "template"
      modelFingerprint: "69D3A0013FB37B93FA57F41418053337"
      valueUuid: "template"
      methodExercised:
        expression: "execute(context:model,out:outputStreamWriter):void"
        throwsExceptions:
        - "com.samskivert.mustache.MustacheException"
    - type: "LOCAL_VARIABLE"
      name: "writer"
      modelFingerprint: "3F3D482EA94BE88AA8F2BFC7D8565214"
      valueUuid: "outputStreamWriter"
      methodExercised:
        expression: "flush():void2"
        throwsExceptions:
        - "java.io.IOException"
    - type: "LOCAL_VARIABLE"
      name: "writer"
      modelFingerprint: "49B2AF9C18AC6A4659100C07439A3DAA"
      valueUuid: "outputStreamWriter"
      methodExercised:
        expression: "close():void3"
        throwsExceptions:
        - "java.io.IOException"
    - type: "LOCAL_VARIABLE"
      name: "reader"
      modelFingerprint: "F2132282430D4629EB65E43C8D5370AD"
      valueUuid: "inputStreamReader"
      methodExercised:
        expression: "close():void4"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "49E493EB56B47EDEB5C173968793BABC"
      valueUuid: "throwable"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_FAILURE"
      source: "try (Writer writer = new OutputStreamWriter(dataBuffer.asOutputStream(),\
        \ charset)) {"
      lineNumber: 91
      details: "No constructor found to create an object without any exception for\
        \ class java.io.OutputStreamWriter"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.reactive.result.view.MustacheView"
        parameters: []
        propertiesMap:
          charset:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "fieldString5"
            fixed: true
          applicationContext:
            sapientType: "MOCK"
            valueType: "org.springframework.context.ApplicationContext"
            uuid: "applicationContext"
          defaultCharset:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.nio.charset.Charset"
              method: "defaultCharset"
              methodParameters: []
            valueType: "java.nio.charset.Charset"
            uuid: "charset2"
          compiler:
            sapientType: "MOCK"
            valueType: "com.samskivert.mustache.Mustache$Compiler"
            uuid: "fieldMustache.Compiler"
          url:
            sapientType: "BASIC"
            content: !<regular>
              value: "url1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "org.springframework.boot.web.reactive.result.view.MustacheView"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,java.lang.Object"
      uuid: "model"
    - sapientType: "NULL"
      valueType: "org.springframework.http.MediaType"
      uuid: "contentType"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.web.server.ServerWebExchange"
      uuid: "exchange"
    - sapientType: "REAL"
      valueType: "org.springframework.core.ReactiveAdapterRegistry"
      uuid: "ReactiveAdapterRegistry.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.ReactiveAdapterRegistry"
        method: "getSharedInstance"
        methodParameters: []
      valueType: "org.springframework.core.ReactiveAdapterRegistry"
      uuid: "reactiveAdapterRegistry"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "url1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.web.server.ServerWebExchange"
      uuid: "exchange"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.server.reactive.ServerHttpResponse"
      uuid: "serverHttpResponse"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.server.reactive.ServerHttpResponse"
      uuid: "serverHttpResponse"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBufferFactory"
      uuid: "dataBufferFactory"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBufferFactory"
      uuid: "dataBufferFactory"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBuffer"
      uuid: "dataBuffer"
    - sapientType: "BASIC"
      content: !<regular>
        value: 256
      valueType: "int"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "inputStream"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Mustache$Compiler"
      uuid: "fieldMustache.Compiler"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Template"
      uuid: "template"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.InputStreamReader"
        parameters:
        - name: "in"
          value:
            sapientType: "INPUT_STREAM"
            content: !<inputStream>
              values: []
            valueType: "java.io.InputStream"
            uuid: "inputStream"
      valueType: "java.io.InputStreamReader"
      uuid: "inputStreamReader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.buffer.DataBuffer"
      uuid: "dataBuffer"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.ByteArrayOutputStream"
        parameters: []
      valueType: "java.io.OutputStream"
      uuid: "outputStream"
    - sapientType: "MOCK"
      valueType: "com.samskivert.mustache.Template"
      uuid: "template"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,java.lang.Object"
      uuid: "model"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.OutputStreamWriter"
        parameters:
        - name: "out"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.ByteArrayOutputStream"
              parameters: []
            valueType: "java.io.OutputStream"
            uuid: "outputStream"
        - name: "cs"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.nio.charset.Charset"
              method: "defaultCharset"
              methodParameters: []
            valueType: "java.nio.charset.Charset"
            uuid: "charset2"
      valueType: "java.io.OutputStreamWriter"
      uuid: "outputStreamWriter"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.OutputStreamWriter"
        parameters:
        - name: "out"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.ByteArrayOutputStream"
              parameters: []
            valueType: "java.io.OutputStream"
            uuid: "outputStream"
        - name: "cs"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.nio.charset.Charset"
              method: "defaultCharset"
              methodParameters: []
            valueType: "java.nio.charset.Charset"
            uuid: "charset2"
      valueType: "java.io.OutputStreamWriter"
      uuid: "outputStreamWriter"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.OutputStreamWriter"
        parameters:
        - name: "out"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.ByteArrayOutputStream"
              parameters: []
            valueType: "java.io.OutputStream"
            uuid: "outputStream"
        - name: "cs"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.nio.charset.Charset"
              method: "defaultCharset"
              methodParameters: []
            valueType: "java.nio.charset.Charset"
            uuid: "charset2"
      valueType: "java.io.OutputStreamWriter"
      uuid: "outputStreamWriter"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.InputStreamReader"
        parameters:
        - name: "in"
          value:
            sapientType: "INPUT_STREAM"
            content: !<inputStream>
              values: []
            valueType: "java.io.InputStream"
            uuid: "inputStream"
      valueType: "java.io.InputStreamReader"
      uuid: "inputStreamReader"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "throwable"
    branches:
    - lineNumber: 105
      expression: "resource == null"
      range: "(105,7)-(105,22)"
      evaluatedAs: false
      internalMethodName: "resolveResource"
    - lineNumber: 105
      expression: "!resource.exists()"
      range: "(105,27)-(105,44)"
      evaluatedAs: false
      internalMethodName: "resolveResource"
    - lineNumber: 81
      expression: "resource == null"
      range: "(81,7)-(81,22)"
      evaluatedAs: false
    - lineNumber: 112
      expression: "this.charset != null"
      range: "(112,7)-(112,26)"
      evaluatedAs: false
      internalMethodName: "getReader"
    - lineNumber: 119
      expression: "mediaType != null"
      range: "(119,31)-(119,47)"
      evaluatedAs: false
      internalMethodName: "getCharset"
    - lineNumber: 91
      expression: "branch expression (line 91)"
      range: "(91,1)-(91,200)"
      evaluatedAs: true
    - lineNumber: 88
      expression: "branch expression (line 88)"
      range: "(88,1)-(88,200)"
      evaluatedAs: false
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Throwable"
