---
modelFingerprint: "6B8BCBD04F68C155C5D9C363523D0D8B"
targetClass:
  fullClassName: "org.springframework.boot.context.config.ConfigDataImporter"
methods:
- method:
    name: "resolveAndLoad"
    sourceCodeSignature: "Map<ConfigDataResolutionResult, ConfigData> resolveAndLoad(ConfigDataActivationContext\
      \ activationContext, ConfigDataLocationResolverContext locationResolverContext,\
      \ ConfigDataLoaderContext loaderContext, List<ConfigDataLocation> locations)"
    returnType: "java.util.Map"
    genericReturnType: "org.springframework.boot.context.config.ConfigDataResolutionResult,org.springframework.boot.context.config.ConfigData"
    parameters:
    - name: "activationContext"
      type: "org.springframework.boot.context.config.ConfigDataActivationContext"
    - name: "locationResolverContext"
      type: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
    - name: "loaderContext"
      type: "org.springframework.boot.context.config.ConfigDataLoaderContext"
    - name: "locations"
      type: "java.util.List"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "org.springframework.boot.context.config.ConfigDataNotFoundException"
    - idExternalInstruction: 0
      id: 3
      catchExceptions:
      - "org.springframework.boot.context.config.ConfigDataNotFoundException"
    instructionFingerprint: "C9B2CF74E2AEB3F0E37130A2ED6E4FE3"
  paths:
  - pathId: "path7"
    testPathName: "resolveAndLoadWhenActivationContextIsNullAndLocationsIsEmptyAndILessThan0"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.config.ConfigDataNotFoundAction,org.springframework.boot.context.config.ConfigDataLocationResolvers,org.springframework.boot.context.config.ConfigDataLoaders)\
      \ : void"
    modelFingerprint: "9845B9F403DFDF7DE2DB0236BC947EF0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "D44D5486BB966BBF6FB1F279DED0D563"
      valueUuid: "target"
    - type: "INPUT"
      name: "activationContext"
      modelFingerprint: "E1D7A9BEB9D5B4FA36FAA89D3B9C9F30"
      valueUuid: "activationContext"
    - type: "INPUT"
      name: "locationResolverContext"
      modelFingerprint: "F24882B5052A4AE5BE3C3D28E529E96E"
      valueUuid: "locationResolverContext"
    - type: "INPUT"
      name: "loaderContext"
      modelFingerprint: "5911CB34B9EE0135175810B739E75ADA"
      valueUuid: "loaderContext"
    - type: "INPUT"
      name: "locations"
      modelFingerprint: "F9055DDE790E373B0B34B7718F07527B"
      valueUuid: "locations"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "671B20531C281AF1DA6B0DC57B8DB9FA"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid1):log"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "48BFC55E58130CC0B37802ABC3F8C141"
      valueUuid: "map"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigDataImporter"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "notFoundAction"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "FAIL"
            valueType: "org.springframework.boot.context.config.ConfigDataNotFoundAction"
            uuid: "notFoundAction"
        - name: "resolvers"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocationResolvers"
            uuid: "resolvers"
        - name: "loaders"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLoaders"
            uuid: "loaders"
      valueType: "org.springframework.boot.context.config.ConfigDataImporter"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.config.ConfigDataActivationContext"
      uuid: "activationContext"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "locationResolverContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLoaderContext"
      uuid: "loaderContext"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "locations"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.ConfigDataImporter"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.ConfigDataImporter"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.LinkedHashMap"
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "org.springframework.boot.context.config.ConfigDataResolutionResult,org.springframework.boot.context.config.ConfigData"
      uuid: "map"
    branches:
    - lineNumber: 85
      expression: "activationContext != null"
      range: "(85,25)-(85,49)"
      evaluatedAs: false
    - lineNumber: 97
      expression: "for-each(locations)"
      range: "(97,38)-(97,46)"
      evaluatedAs: false
      internalMethodName: "resolve"
    - lineNumber: 117
      expression: "i >= 0"
      range: "(117,39)-(117,44)"
      evaluatedAs: false
      internalMethodName: "load"
  - pathId: "path11"
    testPathName: "resolveAndLoadWhenLocationsIsEmptyAndILessThan0AndCaughtIOExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.config.ConfigDataNotFoundAction,org.springframework.boot.context.config.ConfigDataLocationResolvers,org.springframework.boot.context.config.ConfigDataLoaders)\
      \ : void"
    modelFingerprint: "DA409BB1E63778B18B871A9670C55766"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "D44D5486BB966BBF6FB1F279DED0D563"
      valueUuid: "target"
    - type: "INPUT"
      name: "activationContext"
      modelFingerprint: "E1D7A9BEB9D5B4FA36FAA89D3B9C9F30"
      valueUuid: "activationContext"
    - type: "INPUT"
      name: "locationResolverContext"
      modelFingerprint: "F24882B5052A4AE5BE3C3D28E529E96E"
      valueUuid: "locationResolverContext"
    - type: "INPUT"
      name: "loaderContext"
      modelFingerprint: "5911CB34B9EE0135175810B739E75ADA"
      valueUuid: "loaderContext"
    - type: "INPUT"
      name: "locations"
      modelFingerprint: "F9055DDE790E373B0B34B7718F07527B"
      valueUuid: "locations"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "671B20531C281AF1DA6B0DC57B8DB9FA"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid2):log"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4F05DFEBB23D67D246F9801C6D6F8436"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "DEPENDENCY_TO_THROW_EXCEPTION_NOT_FOUND"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigDataImporter"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "notFoundAction"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "FAIL"
            valueType: "org.springframework.boot.context.config.ConfigDataNotFoundAction"
            uuid: "notFoundAction"
        - name: "resolvers"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocationResolvers"
            uuid: "resolvers"
        - name: "loaders"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLoaders"
            uuid: "loaders"
      valueType: "org.springframework.boot.context.config.ConfigDataImporter"
      uuid: "target"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.config.ConfigDataActivationContext"
      uuid: "activationContext"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "locationResolverContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLoaderContext"
      uuid: "loaderContext"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "locations"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.ConfigDataImporter"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.ConfigDataImporter"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "IO error on loading imports from []"
            valueType: "java.lang.String"
            uuid: "string"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.IOException"
              parameters: []
            valueType: "java.io.IOException"
            uuid: "iOException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 85
      expression: "activationContext != null"
      range: "(85,25)-(85,49)"
      evaluatedAs: false
    - lineNumber: 97
      expression: "for-each(locations)"
      range: "(97,38)-(97,46)"
      evaluatedAs: false
      internalMethodName: "resolve"
    - lineNumber: 117
      expression: "i >= 0"
      range: "(117,39)-(117,44)"
      evaluatedAs: false
      internalMethodName: "load"
    - lineNumber: 89
      expression: "catch-exception (IOException)"
      range: "(89,3)-(89,23)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
  - pathId: "path1"
    testPathName: "resolveAndLoadWhenLoadedIsNotNull"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.config.ConfigDataNotFoundAction,org.springframework.boot.context.config.ConfigDataLocationResolvers,org.springframework.boot.context.config.ConfigDataLoaders)\
      \ : void"
    modelFingerprint: "C84FCEBA9DBCF533B3F288109FD83D70"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "883A9CAD1AE067F81B305C810A3A7BA4"
      valueUuid: "target"
    - type: "INPUT"
      name: "activationContext"
      modelFingerprint: "0B48BDA8D72461235741EC6459355E1E"
      valueUuid: "activationContext"
    - type: "INPUT"
      name: "locationResolverContext"
      modelFingerprint: "F24882B5052A4AE5BE3C3D28E529E96E"
      valueUuid: "locationResolverContext"
    - type: "INPUT"
      name: "loaderContext"
      modelFingerprint: "5911CB34B9EE0135175810B739E75ADA"
      valueUuid: "loaderContext"
    - type: "INPUT"
      name: "locations"
      modelFingerprint: "85C1DA6E7B9E286BA5DF8755563939BD"
      valueUuid: "locations"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "671B20531C281AF1DA6B0DC57B8DB9FA"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid1):log"
    - type: "LOCAL_VARIABLE"
      name: "activationContext"
      modelFingerprint: "7D29070C5F3CB21E6D67F2D5CA2726A1"
      valueUuid: "activationContext"
      methodExercised:
        expression: "getProfiles():profiles"
    - type: "FIELD"
      name: "resolvers"
      modelFingerprint: "35D8862D2FAA33BFE3435B9386910506"
      valueUuid: "resolvers"
      methodExercised:
        expression: "resolve(context:locationResolverContext,location:object,profiles:profiles):list"
    - type: "LOCAL_VARIABLE"
      name: "candidate"
      modelFingerprint: "32066A9BD4542C35E14D3CD494743359"
      valueUuid: "configDataResolutionResult"
      methodExercised:
        expression: "getLocation():configDataLocation"
    - type: "LOCAL_VARIABLE"
      name: "candidate"
      modelFingerprint: "E197F23A7D9139A2A5256A558724EA02"
      valueUuid: "configDataResolutionResult"
      methodExercised:
        expression: "getResource():configDataResource"
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "6132187B5953BF6EC79D90ABC656A3B0"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid2,arg1:configDataResource,arg2:configDataLocation):logMessage"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "8C90578D859818EC41CCE0DB97E69612"
      valueUuid: "configDataResource"
      methodExercised:
        expression: "isOptional():boolean4"
    - type: "FIELD"
      name: "loaders"
      modelFingerprint: "502F477D658C6F1CF880BA06316C0538"
      valueUuid: "loaders"
      methodExercised:
        expression: "load(context:loaderContext,resource:configDataResource):configData"
        throwsExceptions:
        - "java.io.IOException"
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "98804C70E14C1D22AB7C83BB947C89E0"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid3,arg1:configDataResource,arg2:configDataLocation):logMessage2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8DFFAED2E1A48EACB55D33064BFAE9B8"
      valueUuid: "map"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigDataImporter"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "notFoundAction"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "FAIL"
            valueType: "org.springframework.boot.context.config.ConfigDataNotFoundAction"
            uuid: "notFoundAction"
        - name: "resolvers"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocationResolvers"
            uuid: "resolvers"
        - name: "loaders"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLoaders"
            uuid: "loaders"
      valueType: "org.springframework.boot.context.config.ConfigDataImporter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataActivationContext"
      uuid: "activationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "locationResolverContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLoaderContext"
      uuid: "loaderContext"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.context.config.ConfigDataLocation"
          uuid: "object"
          collectionUuid: "locations"
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "locations"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.ConfigDataImporter"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.ConfigDataImporter"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataActivationContext"
      uuid: "activationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolvers"
      uuid: "resolvers"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.ConfigDataResolutionResult"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "locationResolverContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "object"
      collectionUuid: "locations"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResolutionResult"
      uuid: "configDataResolutionResult"
      collectionUuid: "list2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResolutionResult"
      uuid: "configDataResolutionResult"
      collectionUuid: "list2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Considering resource %s from location %s"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLoaders"
      uuid: "loaders"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigData"
      uuid: "configData"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLoaderContext"
      uuid: "loaderContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Loaded resource %s from location %s"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.LinkedHashMap"
        parameters: []
        values:
        - sapientType: "PAIR"
          content: !<pair>
            key:
              sapientType: "MOCK"
              valueType: "org.springframework.boot.context.config.ConfigDataResolutionResult"
              uuid: "configDataResolutionResult"
              collectionUuid: "list2"
            value:
              sapientType: "MOCK"
              valueType: "org.springframework.boot.context.config.ConfigData"
              uuid: "configData"
          valueType: "java.util.Map$Entry"
          genericValueType: "org.springframework.boot.context.config.ConfigDataResolutionResult,org.springframework.boot.context.config.ConfigData"
          uuid: "uniqueUuid4"
      valueType: "java.util.Map"
      genericValueType: "org.springframework.boot.context.config.ConfigDataResolutionResult,org.springframework.boot.context.config.ConfigData"
      uuid: "map"
    branches:
    - lineNumber: 85
      expression: "activationContext != null"
      range: "(85,25)-(85,49)"
      evaluatedAs: true
    - lineNumber: 97
      expression: "for-each(locations)"
      range: "(97,38)-(97,46)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 117
      expression: "i >= 0"
      range: "(117,39)-(117,44)"
      evaluatedAs: true
      internalMethodName: "load"
    - lineNumber: 122
      expression: "resource.isOptional()"
      range: "(122,8)-(122,28)"
      evaluatedAs: true
      internalMethodName: "load"
    - lineNumber: 125
      expression: "this.loaded.contains(resource)"
      range: "(125,8)-(125,37)"
      evaluatedAs: false
      internalMethodName: "load"
    - lineNumber: 133
      expression: "loaded != null"
      range: "(133,10)-(133,23)"
      evaluatedAs: true
      internalMethodName: "load"
  - pathId: "path15"
    testPathName: "resolveAndLoadWhenResourceIsNullAndILessThan0"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.config.ConfigDataNotFoundAction,org.springframework.boot.context.config.ConfigDataLocationResolvers,org.springframework.boot.context.config.ConfigDataLoaders)\
      \ : void"
    modelFingerprint: "E3B850E56C524790A9CE62D29FC52984"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "026734031D8234A4EA1C46BC664C5C4E"
      valueUuid: "target"
    - type: "INPUT"
      name: "activationContext"
      modelFingerprint: "0B48BDA8D72461235741EC6459355E1E"
      valueUuid: "activationContext"
    - type: "INPUT"
      name: "locationResolverContext"
      modelFingerprint: "F24882B5052A4AE5BE3C3D28E529E96E"
      valueUuid: "locationResolverContext"
    - type: "INPUT"
      name: "loaderContext"
      modelFingerprint: "5911CB34B9EE0135175810B739E75ADA"
      valueUuid: "loaderContext"
    - type: "INPUT"
      name: "locations"
      modelFingerprint: "B630441ACD1625CE989192C259F28F4D"
      valueUuid: "locations"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "671B20531C281AF1DA6B0DC57B8DB9FA"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid7):log"
    - type: "LOCAL_VARIABLE"
      name: "activationContext"
      modelFingerprint: "7D29070C5F3CB21E6D67F2D5CA2726A1"
      valueUuid: "activationContext"
      methodExercised:
        expression: "getProfiles():profiles"
    - type: "FIELD"
      name: "resolvers"
      modelFingerprint: "5F74BDEAD66C0D2E14686808BA66490A"
      valueUuid: "resolvers"
      methodExercised:
        expression: "resolve(context:locationResolverContext,location:object,profiles:profiles):list"
    - type: "LOCAL_VARIABLE"
      name: "notFoundException"
      modelFingerprint: "11E55406138C5759391C7937541E33AC"
      valueUuid: "configDataNotFoundException"
      methodExercised:
        expression: "withLocation(location:object):configDataResourceNotFoundException"
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "CF8FD1065B97926517C295038E555085"
      valueUuid: "object"
      methodExercised:
        expression: "isOptional():optional"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "48BFC55E58130CC0B37802ABC3F8C141"
      valueUuid: "map"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.springframework.boot.context.config.ConfigDataNotFoundAction.handle(org.apache.commons.logging.Log,org.springframework.boot.context.config.ConfigDataResourceNotFoundException)\
        \ : void"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigDataImporter"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "notFoundAction"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "FAIL"
            valueType: "org.springframework.boot.context.config.ConfigDataNotFoundAction"
            uuid: "notFoundAction"
        - name: "resolvers"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocationResolvers"
            uuid: "resolvers"
        - name: "loaders"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLoaders"
            uuid: "loaders"
      valueType: "org.springframework.boot.context.config.ConfigDataImporter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataActivationContext"
      uuid: "activationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "locationResolverContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLoaderContext"
      uuid: "loaderContext"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.context.config.ConfigDataLocation"
          uuid: "object"
          collectionUuid: "locations"
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "locations"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.ConfigDataImporter"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.ConfigDataImporter"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataActivationContext"
      uuid: "activationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolvers"
      uuid: "resolvers"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.ConfigDataResolutionResult"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "locationResolverContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "object"
      collectionUuid: "locations"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResourceNotFoundException"
      uuid: "configDataNotFoundException"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResourceNotFoundException"
      uuid: "configDataResourceNotFoundException"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "object"
      collectionUuid: "locations"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "object"
      collectionUuid: "locations"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "optional"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.LinkedHashMap"
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "org.springframework.boot.context.config.ConfigDataResolutionResult,org.springframework.boot.context.config.ConfigData"
      uuid: "map"
    branches:
    - lineNumber: 85
      expression: "activationContext != null"
      range: "(85,25)-(85,49)"
      evaluatedAs: true
    - lineNumber: 97
      expression: "for-each(locations)"
      range: "(97,38)-(97,46)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 108
      expression: "catch-exception (ConfigDataNotFoundException)"
      range: "(108,3)-(108,39)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 149
      expression: "ex instanceof ConfigDataResourceNotFoundException notFoundException"
      range: "(149,7)-(149,73)"
      evaluatedAs: true
      internalMethodName: "handle"
    - lineNumber: 156
      expression: "location.isOptional()"
      range: "(156,7)-(156,27)"
      evaluatedAs: false
      internalMethodName: "getNotFoundAction"
    - lineNumber: 156
      expression: "resource != null"
      range: "(156,33)-(156,48)"
      evaluatedAs: false
      internalMethodName: "getNotFoundAction"
    - lineNumber: 117
      expression: "i >= 0"
      range: "(117,39)-(117,44)"
      evaluatedAs: false
      internalMethodName: "load"
    catchBlockExercised:
      idExternalInstruction: 29
      id: 2
      catchExceptions:
      - "org.springframework.boot.context.config.ConfigDataNotFoundException"
  - pathId: "path8"
    testPathName: "resolveAndLoadWhenLoadedIsNotNullAndCaughtIOExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.config.ConfigDataNotFoundAction,org.springframework.boot.context.config.ConfigDataLocationResolvers,org.springframework.boot.context.config.ConfigDataLoaders)\
      \ : void"
    modelFingerprint: "4A6A1F550B16507AC9B759D8CF4D6699"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "E3D5C071CEDBE547BC0D4DC67C0E9000"
      valueUuid: "target"
    - type: "INPUT"
      name: "activationContext"
      modelFingerprint: "0B48BDA8D72461235741EC6459355E1E"
      valueUuid: "activationContext"
    - type: "INPUT"
      name: "locationResolverContext"
      modelFingerprint: "F24882B5052A4AE5BE3C3D28E529E96E"
      valueUuid: "locationResolverContext"
    - type: "INPUT"
      name: "loaderContext"
      modelFingerprint: "5911CB34B9EE0135175810B739E75ADA"
      valueUuid: "loaderContext"
    - type: "INPUT"
      name: "locations"
      modelFingerprint: "6516379B7BEC5A0F5B0077890D1946DD"
      valueUuid: "locations"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "671B20531C281AF1DA6B0DC57B8DB9FA"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid8):log"
    - type: "LOCAL_VARIABLE"
      name: "activationContext"
      modelFingerprint: "7D29070C5F3CB21E6D67F2D5CA2726A1"
      valueUuid: "activationContext"
      methodExercised:
        expression: "getProfiles():profiles"
    - type: "FIELD"
      name: "resolvers"
      modelFingerprint: "DAC4ED21E0841E0AC82C1CB13B540E68"
      valueUuid: "resolvers"
      methodExercised:
        expression: "resolve(context:locationResolverContext,location:object,profiles:profiles):list"
    - type: "LOCAL_VARIABLE"
      name: "candidate"
      modelFingerprint: "32066A9BD4542C35E14D3CD494743359"
      valueUuid: "configDataResolutionResult"
      methodExercised:
        expression: "getLocation():configDataLocation"
    - type: "LOCAL_VARIABLE"
      name: "candidate"
      modelFingerprint: "E197F23A7D9139A2A5256A558724EA02"
      valueUuid: "configDataResolutionResult"
      methodExercised:
        expression: "getResource():configDataResource"
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "6132187B5953BF6EC79D90ABC656A3B0"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid9,arg1:configDataResource,arg2:configDataLocation):logMessage"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "8C90578D859818EC41CCE0DB97E69612"
      valueUuid: "configDataResource"
      methodExercised:
        expression: "isOptional():boolean4"
    - type: "FIELD"
      name: "loaders"
      modelFingerprint: "4349E4C8F6C861D4A4AABA0D57902705"
      valueUuid: "loaders"
      methodExercised:
        expression: "load(context:loaderContext,resource:configDataResource):configData"
        throwsExceptions:
        - "java.io.IOException"
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "98804C70E14C1D22AB7C83BB947C89E0"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid10,arg1:configDataResource,arg2:configDataLocation):logMessage2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4F05DFEBB23D67D246F9801C6D6F8436"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "COLLECTION_ARRAY_WITH_CONSTRAINTS_AND_NEEDS_TO_STRING"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigDataImporter"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "notFoundAction"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "FAIL"
            valueType: "org.springframework.boot.context.config.ConfigDataNotFoundAction"
            uuid: "notFoundAction"
        - name: "resolvers"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocationResolvers"
            uuid: "resolvers"
        - name: "loaders"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLoaders"
            uuid: "loaders"
      valueType: "org.springframework.boot.context.config.ConfigDataImporter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataActivationContext"
      uuid: "activationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "locationResolverContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLoaderContext"
      uuid: "loaderContext"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.context.config.ConfigDataLocation"
          uuid: "object"
          collectionUuid: "locations"
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "locations"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.ConfigDataImporter"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.ConfigDataImporter"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataActivationContext"
      uuid: "activationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolvers"
      uuid: "resolvers"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.ConfigDataResolutionResult"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "locationResolverContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "object"
      collectionUuid: "locations"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResolutionResult"
      uuid: "configDataResolutionResult"
      collectionUuid: "list2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResolutionResult"
      uuid: "configDataResolutionResult"
      collectionUuid: "list2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Considering resource %s from location %s"
      valueType: "java.lang.String"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLoaders"
      uuid: "loaders"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigData"
      uuid: "configData"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLoaderContext"
      uuid: "loaderContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Loaded resource %s from location %s"
      valueType: "java.lang.String"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "IO error on loading imports from []"
            valueType: "java.lang.String"
            uuid: "string"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.IOException"
              parameters: []
            valueType: "java.io.IOException"
            uuid: "iOException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 85
      expression: "activationContext != null"
      range: "(85,25)-(85,49)"
      evaluatedAs: true
    - lineNumber: 97
      expression: "for-each(locations)"
      range: "(97,38)-(97,46)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 117
      expression: "i >= 0"
      range: "(117,39)-(117,44)"
      evaluatedAs: true
      internalMethodName: "load"
    - lineNumber: 122
      expression: "resource.isOptional()"
      range: "(122,8)-(122,28)"
      evaluatedAs: true
      internalMethodName: "load"
    - lineNumber: 125
      expression: "this.loaded.contains(resource)"
      range: "(125,8)-(125,37)"
      evaluatedAs: false
      internalMethodName: "load"
    - lineNumber: 133
      expression: "loaded != null"
      range: "(133,10)-(133,23)"
      evaluatedAs: true
      internalMethodName: "load"
    - lineNumber: 89
      expression: "catch-exception (IOException)"
      range: "(89,3)-(89,23)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
  - pathId: "path12"
    testPathName: "resolveAndLoadWhenResourceIsOptional"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.config.ConfigDataNotFoundAction,org.springframework.boot.context.config.ConfigDataLocationResolvers,org.springframework.boot.context.config.ConfigDataLoaders)\
      \ : void"
    modelFingerprint: "0ACBAB451CDC5E8258D7326979691B6C"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "E3D5C071CEDBE547BC0D4DC67C0E9000"
      valueUuid: "target"
    - type: "INPUT"
      name: "activationContext"
      modelFingerprint: "0B48BDA8D72461235741EC6459355E1E"
      valueUuid: "activationContext"
    - type: "INPUT"
      name: "locationResolverContext"
      modelFingerprint: "F24882B5052A4AE5BE3C3D28E529E96E"
      valueUuid: "locationResolverContext"
    - type: "INPUT"
      name: "loaderContext"
      modelFingerprint: "5911CB34B9EE0135175810B739E75ADA"
      valueUuid: "loaderContext"
    - type: "INPUT"
      name: "locations"
      modelFingerprint: "6516379B7BEC5A0F5B0077890D1946DD"
      valueUuid: "locations"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "671B20531C281AF1DA6B0DC57B8DB9FA"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid11):log"
    - type: "LOCAL_VARIABLE"
      name: "activationContext"
      modelFingerprint: "7D29070C5F3CB21E6D67F2D5CA2726A1"
      valueUuid: "activationContext"
      methodExercised:
        expression: "getProfiles():profiles"
    - type: "FIELD"
      name: "resolvers"
      modelFingerprint: "DAC4ED21E0841E0AC82C1CB13B540E68"
      valueUuid: "resolvers"
      methodExercised:
        expression: "resolve(context:locationResolverContext,location:object,profiles:profiles):list"
    - type: "LOCAL_VARIABLE"
      name: "candidate"
      modelFingerprint: "E66ADC9C7BAD6736ED43BE8E6B18DBFD"
      valueUuid: "configDataResolutionResult"
      methodExercised:
        expression: "getLocation():configDataLocation"
    - type: "LOCAL_VARIABLE"
      name: "candidate"
      modelFingerprint: "E197F23A7D9139A2A5256A558724EA02"
      valueUuid: "configDataResolutionResult"
      methodExercised:
        expression: "getResource():configDataResource"
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "3A87FE6BBDF5BE3544753AB356F650DA"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid12,arg1:configDataResource,arg2:configDataLocation):logMessage"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "8C90578D859818EC41CCE0DB97E69612"
      valueUuid: "configDataResource"
      methodExercised:
        expression: "isOptional():boolean4"
    - type: "FIELD"
      name: "loaders"
      modelFingerprint: "4349E4C8F6C861D4A4AABA0D57902705"
      valueUuid: "loaders"
      methodExercised:
        expression: "load(context:loaderContext,resource:configDataResource):configData"
        throwsExceptions:
        - "java.io.IOException"
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "D7DE66855F9103953CF7BF696F2B9C18"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid13,arg1:configDataResource,arg2:configDataLocation):logMessage2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "notFoundException"
      modelFingerprint: "11E55406138C5759391C7937541E33AC"
      valueUuid: "configDataNotFoundException"
      methodExercised:
        expression: "withLocation(location:configDataLocation):configDataResourceNotFoundException"
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "CF8FD1065B97926517C295038E555085"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "isOptional():optional"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "8C90578D859818EC41CCE0DB97E69612"
      valueUuid: "configDataResource"
      methodExercised:
        expression: "isOptional():boolean11"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8DFFAED2E1A48EACB55D33064BFAE9B8"
      valueUuid: "map"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: org.springframework.boot.context.config.ConfigDataNotFoundAction.handle(org.apache.commons.logging.Log,org.springframework.boot.context.config.ConfigDataResourceNotFoundException)\
        \ : void"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigDataImporter"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "notFoundAction"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "FAIL"
            valueType: "org.springframework.boot.context.config.ConfigDataNotFoundAction"
            uuid: "notFoundAction"
        - name: "resolvers"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocationResolvers"
            uuid: "resolvers"
        - name: "loaders"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLoaders"
            uuid: "loaders"
      valueType: "org.springframework.boot.context.config.ConfigDataImporter"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataActivationContext"
      uuid: "activationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "locationResolverContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLoaderContext"
      uuid: "loaderContext"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.context.config.ConfigDataLocation"
          uuid: "object"
          collectionUuid: "locations"
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "locations"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.ConfigDataImporter"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.ConfigDataImporter"
      uuid: "uniqueUuid11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataActivationContext"
      uuid: "activationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolvers"
      uuid: "resolvers"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.ConfigDataResolutionResult"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "locationResolverContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "object"
      collectionUuid: "locations"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResolutionResult"
      uuid: "configDataResolutionResult"
      collectionUuid: "list2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResolutionResult"
      uuid: "configDataResolutionResult"
      collectionUuid: "list2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Considering resource %s from location %s"
      valueType: "java.lang.String"
      uuid: "uniqueUuid12"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLoaders"
      uuid: "loaders"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigData"
      uuid: "configData"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLoaderContext"
      uuid: "loaderContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Loaded resource %s from location %s"
      valueType: "java.lang.String"
      uuid: "uniqueUuid13"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResourceNotFoundException"
      uuid: "configDataNotFoundException"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResourceNotFoundException"
      uuid: "configDataResourceNotFoundException"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "optional"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean11"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.LinkedHashMap"
        parameters: []
        values:
        - sapientType: "PAIR"
          content: !<pair>
            key:
              sapientType: "MOCK"
              valueType: "org.springframework.boot.context.config.ConfigDataResolutionResult"
              uuid: "configDataResolutionResult"
              collectionUuid: "list2"
            value:
              sapientType: "MOCK"
              valueType: "org.springframework.boot.context.config.ConfigData"
              uuid: "configData"
          valueType: "java.util.Map$Entry"
          genericValueType: "org.springframework.boot.context.config.ConfigDataResolutionResult,org.springframework.boot.context.config.ConfigData"
          uuid: "uniqueUuid14"
      valueType: "java.util.Map"
      genericValueType: "org.springframework.boot.context.config.ConfigDataResolutionResult,org.springframework.boot.context.config.ConfigData"
      uuid: "map"
    branches:
    - lineNumber: 85
      expression: "activationContext != null"
      range: "(85,25)-(85,49)"
      evaluatedAs: true
    - lineNumber: 97
      expression: "for-each(locations)"
      range: "(97,38)-(97,46)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 117
      expression: "i >= 0"
      range: "(117,39)-(117,44)"
      evaluatedAs: true
      internalMethodName: "load"
    - lineNumber: 122
      expression: "resource.isOptional()"
      range: "(122,8)-(122,28)"
      evaluatedAs: true
      internalMethodName: "load"
    - lineNumber: 125
      expression: "this.loaded.contains(resource)"
      range: "(125,8)-(125,37)"
      evaluatedAs: false
      internalMethodName: "load"
    - lineNumber: 133
      expression: "loaded != null"
      range: "(133,10)-(133,23)"
      evaluatedAs: true
      internalMethodName: "load"
    - lineNumber: 140
      expression: "catch-exception (ConfigDataNotFoundException)"
      range: "(140,5)-(140,41)"
      evaluatedAs: true
      internalMethodName: "load"
    - lineNumber: 149
      expression: "ex instanceof ConfigDataResourceNotFoundException notFoundException"
      range: "(149,7)-(149,73)"
      evaluatedAs: true
      internalMethodName: "handle"
    - lineNumber: 156
      expression: "location.isOptional()"
      range: "(156,7)-(156,27)"
      evaluatedAs: false
      internalMethodName: "getNotFoundAction"
    - lineNumber: 156
      expression: "resource != null"
      range: "(156,33)-(156,48)"
      evaluatedAs: true
      internalMethodName: "getNotFoundAction"
    - lineNumber: 156
      expression: "resource.isOptional()"
      range: "(156,53)-(156,73)"
      evaluatedAs: true
      internalMethodName: "getNotFoundAction"
    catchBlockExercised:
      idExternalInstruction: 26
      id: 3
      catchExceptions:
      - "org.springframework.boot.context.config.ConfigDataNotFoundException"
- method:
    name: "getLoadedLocations"
    sourceCodeSignature: "Set<ConfigDataLocation> getLoadedLocations()"
    returnType: "java.util.Set"
    genericReturnType: "org.springframework.boot.context.config.ConfigDataLocation"
    instructionFingerprint: "BB0AC1DB2952A724A9C040B1F9320F72"
  paths:
  - pathId: "path1"
    testPathName: "getLoadedLocationsTest"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.config.ConfigDataNotFoundAction,org.springframework.boot.context.config.ConfigDataLocationResolvers,org.springframework.boot.context.config.ConfigDataLoaders)\
      \ : void"
    modelFingerprint: "1F82A02EB23B88C4DC0A35B693FBAFA2"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "getOptionalLocations"
    sourceCodeSignature: "Set<ConfigDataLocation> getOptionalLocations()"
    returnType: "java.util.Set"
    genericReturnType: "org.springframework.boot.context.config.ConfigDataLocation"
    instructionFingerprint: "80A271780423A00A0E7A4C86D87AE815"
  paths:
  - pathId: "path1"
    testPathName: "getOptionalLocationsTest"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.config.ConfigDataNotFoundAction,org.springframework.boot.context.config.ConfigDataLocationResolvers,org.springframework.boot.context.config.ConfigDataLoaders)\
      \ : void"
    modelFingerprint: "1F82A02EB23B88C4DC0A35B693FBAFA2"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
