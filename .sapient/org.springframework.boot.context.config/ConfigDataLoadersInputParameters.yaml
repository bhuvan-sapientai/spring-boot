---
modelFingerprint: "B0B46C5118D82947D5A2FE9672500668"
targetClass:
  fullClassName: "org.springframework.boot.context.config.ConfigDataLoaders"
methods:
- method:
    name: "load"
    sourceCodeSignature: "<R extends ConfigDataResource> ConfigData load(ConfigDataLoaderContext\
      \ context, R resource)"
    returnType: "org.springframework.boot.context.config.ConfigData"
    throwsExceptions:
    - "java.io.IOException"
    parameters:
    - name: "context"
      type: "org.springframework.boot.context.config.ConfigDataLoaderContext"
    - name: "resource"
      type: "org.springframework.boot.context.config.ConfigDataResource"
    instructionFingerprint: "E1974FB83ED59F14FE1C2E67C0CC4DB8"
  paths:
  - pathId: "path2"
    testPathName: "loadWhenCandidateNotIsLoadableContextResourceAndResultIsNullThrowsNullPointerException"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.ConfigurableBootstrapContext,org.springframework.core.io.support.SpringFactoriesLoader)\
      \ : void"
    modelFingerprint: "D2BCF8F088A184E8E5238A02AEFF125A"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "2A4A01ACF575A47C453F72E3671B01BC"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "006A2A1ABE79FF07EAE48D2AB79FE9EA"
      valueUuid: "context"
    - type: "INPUT"
      name: "resource"
      modelFingerprint: "48845B248A662C8DA904EF60719919DB"
      valueUuid: "resource"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "3F4B9E2393D5ADB3CFB4007C91A566C4"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid1):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.ArgumentResolver.class"
      modelFingerprint: "C3728A89157FE5CAA8FB5BE09D0F3B44"
      valueUuid: "SpringFactoriesLoader.ArgumentResolver.class"
      methodExercised:
        expression: "of(type:uniqueUuid2,value:logFactory):springFactoriesLoader.ArgumentResolver"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "argumentResolver"
      modelFingerprint: "8814639EF3A863A40BE3EFDF97223994"
      valueUuid: "springFactoriesLoader.ArgumentResolver"
      methodExercised:
        expression: "and(type:uniqueUuid3,value:bootstrapContext):springFactoriesLoader.ArgumentResolver2"
    - type: "LOCAL_VARIABLE"
      name: "argumentResolver"
      modelFingerprint: "62F1225961CFBA0EEE5B836D3B094278"
      valueUuid: "springFactoriesLoader.ArgumentResolver2"
      methodExercised:
        expression: "and(type:uniqueUuid4,value:bootstrapContext):springFactoriesLoader.ArgumentResolver3"
    - type: "LOCAL_VARIABLE"
      name: "argumentResolver"
      modelFingerprint: "81962DFBF44687191399A90E725ADF8C"
      valueUuid: "springFactoriesLoader.ArgumentResolver3"
      methodExercised:
        expression: "and(type:uniqueUuid5,value:bootstrapContext):springFactoriesLoader.ArgumentResolver4"
    - type: "LOCAL_VARIABLE"
      name: "argumentResolver"
      modelFingerprint: "48F0C3526389247854EE54319F595BE6"
      valueUuid: "springFactoriesLoader.ArgumentResolver4"
      methodExercised:
        expression: "andSupplied(type:uniqueUuid6,valueSupplier:uniqueUuid7):springFactoriesLoader.ArgumentResolver5"
    - type: "LOCAL_VARIABLE"
      name: "candidate"
      modelFingerprint: "3EDA2F6A38263F8CBC1ECBE65A1A811B"
      valueUuid: "configDataLoader"
      methodExercised:
        expression: "isLoadable(context:context,resource:resource):boolean2"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "6D5FB5022FA0F8747855BBB24780A9DB"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid8,messageSupplier:uniqueUuid9):void"
        staticAccess: true
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "BD7EA2B9159F825C506C796216F758B7"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "of(supplier:uniqueUuid10):logMessage"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loader"
      modelFingerprint: "4C98330A5C89964BF62D72C2C772A8AE"
      valueUuid: "configDataLoader2"
      methodExercised:
        expression: "load(context:context,resource:resource):uniqueUuid11"
        throwsExceptions:
        - "java.io.IOException"
        - "org.springframework.boot.context.config.ConfigDataResourceNotFoundException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "085DC12750BAC37E63C370C4A90AE3FA"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "NO_CONSTRUCTOR_PATH_WITHOUT_EXCEPTION"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigDataLoaders"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "bootstrapContext"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ConfigurableBootstrapContext"
            uuid: "bootstrapContext"
        - name: "springFactoriesLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
            uuid: "springFactoriesLoader"
      valueType: "org.springframework.boot.context.config.ConfigDataLoaders"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLoaderContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "resource"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.ConfigDataLoaders"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.ConfigDataLoaders"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver"
      uuid: "SpringFactoriesLoader.ArgumentResolver.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver"
      uuid: "springFactoriesLoader.ArgumentResolver"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.logging.DeferredLogFactory"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver"
      uuid: "springFactoriesLoader.ArgumentResolver"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver"
      uuid: "springFactoriesLoader.ArgumentResolver2"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.ConfigurableBootstrapContext"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.ConfigurableBootstrapContext"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ConfigurableBootstrapContext"
      uuid: "bootstrapContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver"
      uuid: "springFactoriesLoader.ArgumentResolver2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver"
      uuid: "springFactoriesLoader.ArgumentResolver3"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.BootstrapContext"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.BootstrapContext"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ConfigurableBootstrapContext"
      uuid: "bootstrapContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver"
      uuid: "springFactoriesLoader.ArgumentResolver3"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver"
      uuid: "springFactoriesLoader.ArgumentResolver4"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.BootstrapRegistry"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.BootstrapRegistry"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ConfigurableBootstrapContext"
      uuid: "bootstrapContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver"
      uuid: "springFactoriesLoader.ArgumentResolver4"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver"
      uuid: "springFactoriesLoader.ArgumentResolver5"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.apache.commons.logging.Log"
      valueType: "java.lang.Class"
      genericValueType: "org.apache.commons.logging.Log"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      uuid: "uniqueUuid7"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLoader"
      genericValueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataLoader"
      collectionUuid: "fieldList"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLoaderContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "resource"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid9"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "? extends java.lang.CharSequence"
      uuid: "uniqueUuid10"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.config.ConfigDataLoader"
      genericValueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataLoader2"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "uniqueUuid11"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLoaderContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "resource"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.NullPointerException"
        parameters: []
      valueType: "java.lang.NullPointerException"
      uuid: "expectedResult"
    branches:
    - lineNumber: 102
      expression: "i < this.loaders.size()"
      range: "(102,19)-(102,41)"
      evaluatedAs: true
      internalMethodName: "getLoader"
    - lineNumber: 104
      expression: "this.resourceTypes.get(i).isInstance(resource)"
      range: "(104,8)-(104,53)"
      evaluatedAs: true
      internalMethodName: "getLoader"
    - lineNumber: 105
      expression: "candidate.isLoadable(context, resource)"
      range: "(105,9)-(105,47)"
      evaluatedAs: false
      internalMethodName: "getLoader"
    - lineNumber: 114
      expression: "result != null"
      range: "(114,16)-(114,29)"
      evaluatedAs: false
      internalMethodName: "getLoader"
  - pathId: "path1"
    testPathName: "loadWhenResultIsNotNull"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.ConfigurableBootstrapContext,org.springframework.core.io.support.SpringFactoriesLoader)\
      \ : void"
    modelFingerprint: "9DA67F6C4071AEA4372463596373F718"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "2A4A01ACF575A47C453F72E3671B01BC"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "006A2A1ABE79FF07EAE48D2AB79FE9EA"
      valueUuid: "context"
    - type: "INPUT"
      name: "resource"
      modelFingerprint: "48845B248A662C8DA904EF60719919DB"
      valueUuid: "resource"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "3F4B9E2393D5ADB3CFB4007C91A566C4"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid12):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.ArgumentResolver.class"
      modelFingerprint: "C3728A89157FE5CAA8FB5BE09D0F3B44"
      valueUuid: "SpringFactoriesLoader.ArgumentResolver.class"
      methodExercised:
        expression: "of(type:uniqueUuid13,value:logFactory):springFactoriesLoader.ArgumentResolver"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "argumentResolver"
      modelFingerprint: "8814639EF3A863A40BE3EFDF97223994"
      valueUuid: "springFactoriesLoader.ArgumentResolver"
      methodExercised:
        expression: "and(type:uniqueUuid14,value:bootstrapContext):springFactoriesLoader.ArgumentResolver2"
    - type: "LOCAL_VARIABLE"
      name: "argumentResolver"
      modelFingerprint: "62F1225961CFBA0EEE5B836D3B094278"
      valueUuid: "springFactoriesLoader.ArgumentResolver2"
      methodExercised:
        expression: "and(type:uniqueUuid15,value:bootstrapContext):springFactoriesLoader.ArgumentResolver3"
    - type: "LOCAL_VARIABLE"
      name: "argumentResolver"
      modelFingerprint: "81962DFBF44687191399A90E725ADF8C"
      valueUuid: "springFactoriesLoader.ArgumentResolver3"
      methodExercised:
        expression: "and(type:uniqueUuid16,value:bootstrapContext):springFactoriesLoader.ArgumentResolver4"
    - type: "LOCAL_VARIABLE"
      name: "argumentResolver"
      modelFingerprint: "48F0C3526389247854EE54319F595BE6"
      valueUuid: "springFactoriesLoader.ArgumentResolver4"
      methodExercised:
        expression: "andSupplied(type:uniqueUuid17,valueSupplier:uniqueUuid18):springFactoriesLoader.ArgumentResolver5"
    - type: "LOCAL_VARIABLE"
      name: "candidate"
      modelFingerprint: "8471E24A86DA0C15412F6236DAB7AF1E"
      valueUuid: "configDataLoader"
      methodExercised:
        expression: "isLoadable(context:context,resource:resource):boolean2"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid19,messageSupplier:uniqueUuid20):void"
        staticAccess: true
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "BD7EA2B9159F825C506C796216F758B7"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "of(supplier:uniqueUuid21):logMessage"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loader"
      modelFingerprint: "F8B71B84BD3C9303662FEF710951F382"
      valueUuid: "configDataLoader"
      methodExercised:
        expression: "load(context:context,resource:resource):configData"
        throwsExceptions:
        - "java.io.IOException"
        - "org.springframework.boot.context.config.ConfigDataResourceNotFoundException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5389DC970E5D6AEBF2B9823C031683A2"
      valueUuid: "configData"
    disabled: true
    failureReason:
      reason: "NO_CONSTRUCTOR_PATH_WITHOUT_EXCEPTION"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigDataLoaders"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "bootstrapContext"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ConfigurableBootstrapContext"
            uuid: "bootstrapContext"
        - name: "springFactoriesLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
            uuid: "springFactoriesLoader"
      valueType: "org.springframework.boot.context.config.ConfigDataLoaders"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLoaderContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "resource"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.ConfigDataLoaders"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.ConfigDataLoaders"
      uuid: "uniqueUuid12"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver"
      uuid: "SpringFactoriesLoader.ArgumentResolver.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver"
      uuid: "springFactoriesLoader.ArgumentResolver"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.logging.DeferredLogFactory"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "uniqueUuid13"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver"
      uuid: "springFactoriesLoader.ArgumentResolver"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver"
      uuid: "springFactoriesLoader.ArgumentResolver2"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.ConfigurableBootstrapContext"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.ConfigurableBootstrapContext"
      uuid: "uniqueUuid14"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ConfigurableBootstrapContext"
      uuid: "bootstrapContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver"
      uuid: "springFactoriesLoader.ArgumentResolver2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver"
      uuid: "springFactoriesLoader.ArgumentResolver3"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.BootstrapContext"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.BootstrapContext"
      uuid: "uniqueUuid15"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ConfigurableBootstrapContext"
      uuid: "bootstrapContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver"
      uuid: "springFactoriesLoader.ArgumentResolver3"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver"
      uuid: "springFactoriesLoader.ArgumentResolver4"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.BootstrapRegistry"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.BootstrapRegistry"
      uuid: "uniqueUuid16"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ConfigurableBootstrapContext"
      uuid: "bootstrapContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver"
      uuid: "springFactoriesLoader.ArgumentResolver4"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader$ArgumentResolver"
      uuid: "springFactoriesLoader.ArgumentResolver5"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.apache.commons.logging.Log"
      valueType: "java.lang.Class"
      genericValueType: "org.apache.commons.logging.Log"
      uuid: "uniqueUuid17"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      uuid: "uniqueUuid18"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLoader"
      genericValueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataLoader"
      collectionUuid: "fieldList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLoaderContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "resource"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid19"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid20"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "? extends java.lang.CharSequence"
      uuid: "uniqueUuid21"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLoader"
      genericValueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataLoader"
      collectionUuid: "fieldList"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigData"
      uuid: "configData"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLoaderContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "resource"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigData"
      uuid: "configData"
    branches:
    - lineNumber: 102
      expression: "i < this.loaders.size()"
      range: "(102,19)-(102,41)"
      evaluatedAs: true
      internalMethodName: "getLoader"
    - lineNumber: 104
      expression: "this.resourceTypes.get(i).isInstance(resource)"
      range: "(104,8)-(104,53)"
      evaluatedAs: true
      internalMethodName: "getLoader"
    - lineNumber: 105
      expression: "candidate.isLoadable(context, resource)"
      range: "(105,9)-(105,47)"
      evaluatedAs: true
      internalMethodName: "getLoader"
    - lineNumber: 106
      expression: "result != null"
      range: "(106,10)-(106,23)"
      evaluatedAs: false
      internalMethodName: "getLoader"
    - lineNumber: 114
      expression: "result != null"
      range: "(114,16)-(114,29)"
      evaluatedAs: true
      internalMethodName: "getLoader"
