---
modelFingerprint: "8E0C9745D9D12253E1B153ECBAABA8CA"
targetClass:
  fullClassName: "org.springframework.boot.context.config.StandardConfigDataResource"
methods:
- method:
    name: "getReference"
    sourceCodeSignature: "StandardConfigDataReference getReference()"
    returnType: "org.springframework.boot.context.config.StandardConfigDataReference"
    instructionFingerprint: "D17C85DEC15202AB32EB92E55A05AF46"
  paths:
  - pathId: "path1"
    testPathName: "getReferenceTest"
    constructorSignature: "<init>(org.springframework.boot.context.config.StandardConfigDataReference,org.springframework.core.io.Resource,boolean)\
      \ : void"
    modelFingerprint: "FD3FACBB88FDF97B809AAF15487B99D6"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "getResource"
    sourceCodeSignature: "Resource getResource()"
    returnType: "org.springframework.core.io.Resource"
    instructionFingerprint: "3278742F4F102B31C4A4A31646655DA4"
  paths:
  - pathId: "path1"
    testPathName: "getResourceTest"
    constructorSignature: "<init>(org.springframework.boot.context.config.StandardConfigDataReference,org.springframework.core.io.Resource,boolean)\
      \ : void"
    modelFingerprint: "AF491255DFA0823251A07021F596BD93"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "getProfile"
    sourceCodeSignature: "String getProfile()"
    returnType: "java.lang.String"
    instructionFingerprint: "E0D1FC38D24C8F8F7CCC019204E0D372"
  paths:
  - pathId: "path1"
    testPathName: "getProfileTest"
    constructorSignature: "<init>(org.springframework.boot.context.config.StandardConfigDataReference,org.springframework.core.io.Resource,boolean)\
      \ : void"
    modelFingerprint: "9B6821296FFAC2957CFEC14271C240F4"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "18E00770311D9F6A79E65D9CAC4EAA34"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D1DA46CD2B47C75C7E9BA77249AC8667"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:reference,message:uniqueUuid5):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "EE3EFEC8F90FF7867AB63B918B44AF57"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid6):void2"
        staticAccess: true
    - type: "FIELD"
      name: "reference"
      modelFingerprint: "AC11A5AA24A6A6EB7A00675B2CADB7D7"
      valueUuid: "reference"
      methodExercised:
        expression: "getProfile():string"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D446A609419428DDEAA49A58091F3986"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataResource"
        parameters:
        - name: "reference"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
            uuid: "reference"
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
        - name: "emptyDirectory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "emptyDirectory"
      valueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "reference"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Reference must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "reference"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProfile1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProfile1"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "isEmptyDirectory"
    sourceCodeSignature: "boolean isEmptyDirectory()"
    returnType: "boolean"
    instructionFingerprint: "9B83169AFD1DE39547AB7A7C5D1DBE26"
  paths:
  - pathId: "path1"
    testPathName: "isEmptyDirectoryWhenThisEmptyDirectory"
    constructorSignature: "<init>(org.springframework.boot.context.config.StandardConfigDataReference,org.springframework.core.io.Resource,boolean)\
      \ : void"
    modelFingerprint: "31DD1164A93735F38E98B8B6469A2E72"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
    branches:
    - lineNumber: 89
      expression: "this.emptyDirectory"
      range: "(89,10)-(89,28)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "isEmptyDirectoryWhenThisNotEmptyDirectory"
    constructorSignature: "<init>(org.springframework.boot.context.config.StandardConfigDataReference,org.springframework.core.io.Resource,boolean)\
      \ : void"
    modelFingerprint: "79F590053E5E3860BB9B99C0D1D73CF6"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
    branches:
    - lineNumber: 89
      expression: "this.emptyDirectory"
      range: "(89,10)-(89,28)"
      evaluatedAs: false
- method:
    name: "equals"
    sourceCodeSignature: "boolean equals(Object obj)"
    returnType: "boolean"
    parameters:
    - name: "obj"
      type: "java.lang.Object"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.io.IOException"
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.io.IOException"
    instructionFingerprint: "4A0C372A5BBA2E2230A4343BD1FC831C"
  paths:
  - pathId: "path1"
    testPathName: "equalsWhenThisEqualsObj"
    constructorSignature: "<init>(org.springframework.boot.context.config.StandardConfigDataReference,org.springframework.core.io.Resource,boolean)\
      \ : void"
    modelFingerprint: "95B29F38036F71FE773B098BEBB5F87D"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
    branches:
    - lineNumber: 94
      expression: "this == obj"
      range: "(94,7)-(94,17)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "equalsWhenGetClassNotEqualsObjGetClass"
    constructorSignature: "<init>(org.springframework.boot.context.config.StandardConfigDataReference,org.springframework.core.io.Resource,boolean)\
      \ : void"
    modelFingerprint: "64524430CAD1325F1BB0DF9288C2F51B"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
    branches:
    - lineNumber: 94
      expression: "this == obj"
      range: "(94,7)-(94,17)"
      evaluatedAs: false
    - lineNumber: 97
      expression: "obj == null"
      range: "(97,7)-(97,17)"
      evaluatedAs: false
    - lineNumber: 97
      expression: "getClass() != obj.getClass()"
      range: "(97,22)-(97,49)"
      evaluatedAs: true
  - pathId: "path4"
    testPathName: "equalsWhenIsSameUnderlyingResourceThisResourceOtherResource"
    constructorSignature: "<init>(org.springframework.boot.context.config.StandardConfigDataReference,org.springframework.core.io.Resource,boolean)\
      \ : void"
    modelFingerprint: "03DB840931046E8DCC29FA9ED50239B5"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
    branches:
    - lineNumber: 94
      expression: "this == obj"
      range: "(94,7)-(94,17)"
      evaluatedAs: false
    - lineNumber: 97
      expression: "obj == null"
      range: "(97,7)-(97,17)"
      evaluatedAs: false
    - lineNumber: 97
      expression: "getClass() != obj.getClass()"
      range: "(97,22)-(97,49)"
      evaluatedAs: false
    - lineNumber: 101
      expression: "this.emptyDirectory == other.emptyDirectory"
      range: "(101,11)-(101,53)"
      evaluatedAs: true
    - lineNumber: 105
      expression: "ours.equals(other)"
      range: "(105,10)-(105,27)"
      evaluatedAs: true
      internalMethodName: "isSameUnderlyingResource"
    - lineNumber: 101
      expression: "isSameUnderlyingResource(this.resource, other.resource)"
      range: "(101,59)-(101,113)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "equalsWhenIsSameUnderlyingResourceNotThisResourceOtherResource"
    constructorSignature: "<init>(org.springframework.boot.context.config.StandardConfigDataReference,org.springframework.core.io.Resource,boolean)\
      \ : void"
    modelFingerprint: "DD02767C93E7076BE6AAF13DAF9A01F5"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
    branches:
    - lineNumber: 94
      expression: "this == obj"
      range: "(94,7)-(94,17)"
      evaluatedAs: false
    - lineNumber: 97
      expression: "obj == null"
      range: "(97,7)-(97,17)"
      evaluatedAs: false
    - lineNumber: 97
      expression: "getClass() != obj.getClass()"
      range: "(97,22)-(97,49)"
      evaluatedAs: false
    - lineNumber: 101
      expression: "this.emptyDirectory == other.emptyDirectory"
      range: "(101,11)-(101,53)"
      evaluatedAs: true
    - lineNumber: 105
      expression: "ours.equals(other)"
      range: "(105,10)-(105,27)"
      evaluatedAs: false
      internalMethodName: "isSameUnderlyingResource"
    - lineNumber: 133
      expression: "resource instanceof ClassPathResource"
      range: "(133,8)-(133,44)"
      evaluatedAs: false
      internalMethodName: "getUnderlyingFile"
    - lineNumber: 133
      expression: "resource instanceof FileSystemResource"
      range: "(133,49)-(133,86)"
      evaluatedAs: false
      internalMethodName: "getUnderlyingFile"
    - lineNumber: 133
      expression: "resource instanceof FileUrlResource"
      range: "(134,9)-(134,43)"
      evaluatedAs: false
      internalMethodName: "getUnderlyingFile"
    - lineNumber: 109
      expression: "ours != null"
      range: "(109,11)-(109,22)"
      evaluatedAs: false
      internalMethodName: "isSameFile"
    - lineNumber: 105
      expression: "isSameFile(getUnderlyingFile(ours), getUnderlyingFile(other))"
      range: "(105,32)-(105,92)"
      evaluatedAs: false
      internalMethodName: "isSameUnderlyingResource"
    - lineNumber: 101
      expression: "isSameUnderlyingResource(this.resource, other.resource)"
      range: "(101,59)-(101,113)"
      evaluatedAs: false
- method:
    name: "toString"
    sourceCodeSignature: "String toString()"
    returnType: "java.lang.String"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
    instructionFingerprint: "66FE4D83857DE20D836DCEE98DDD6E48"
  paths:
  - pathId: "path1"
    testPathName: "toStringWhenThisResourceInstanceOfFileUrlResource"
    constructorSignature: "<init>(org.springframework.boot.context.config.StandardConfigDataReference,org.springframework.core.io.Resource,boolean)\
      \ : void"
    modelFingerprint: "E9CABE81278DB3B38E263CF8FAFE49B7"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "071740A884803EE1F1EC44A1816C4BA9"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "426D40352BD390A9011E1CEA24496052"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:reference,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D53D26A5C84B130C73892F3C06091528"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "FIELD"
      name: "resource"
      modelFingerprint: "F9CAEB3B5389939685D0439E1EC4D0F4"
      valueUuid: "resource"
      methodExercised:
        expression: "getFile():file"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "12AEBDE651554335DD04A7B575A30C4C"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataResource"
        parameters:
        - name: "reference"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
            uuid: "reference"
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.FileUrlResource"
            uuid: "resource"
        - name: "emptyDirectory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "emptyDirectory"
      valueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "reference"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Reference must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.FileUrlResource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.FileUrlResource"
      uuid: "resource"
    - sapientType: "MOCK"
      valueType: "java.io.File"
      uuid: "file"
      nameForMock: "file"
    - sapientType: "BASIC"
      content: !<regular>
        value: "file [file]"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 120
      expression: "this.resource instanceof FileSystemResource"
      range: "(120,7)-(120,49)"
      evaluatedAs: false
    - lineNumber: 120
      expression: "this.resource instanceof FileUrlResource"
      range: "(120,54)-(120,93)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "toStringWhenThisResourceNotInstanceOfFileUrlResource"
    constructorSignature: "<init>(org.springframework.boot.context.config.StandardConfigDataReference,org.springframework.core.io.Resource,boolean)\
      \ : void"
    modelFingerprint: "49E479895C4294C47D73F1A5F2ED0388"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "41434B5DCD93B22D2CB84FEC947FB5E7"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "426D40352BD390A9011E1CEA24496052"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:reference,message:uniqueUuid21):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "2F32BAFAAF02ED7294F84BC52807C8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid22):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "24F7A06863C3CD28237E711D2F85DE16"
      valueUuid: "string"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataResource"
        parameters:
        - name: "reference"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
            uuid: "reference"
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
            nameForMock: "resource"
        - name: "emptyDirectory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "emptyDirectory"
      valueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "reference"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Reference must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid21"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
      nameForMock: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid22"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource"
      valueType: "java.lang.String"
      uuid: "string"
    branches:
    - lineNumber: 120
      expression: "this.resource instanceof FileSystemResource"
      range: "(120,7)-(120,49)"
      evaluatedAs: false
    - lineNumber: 120
      expression: "this.resource instanceof FileUrlResource"
      range: "(120,54)-(120,93)"
      evaluatedAs: false
  - pathId: "path4"
    testPathName: "toStringWhenThisResourceInstanceOfFileUrlResourceAndCaughtIOException"
    constructorSignature: "<init>(org.springframework.boot.context.config.StandardConfigDataReference,org.springframework.core.io.Resource,boolean)\
      \ : void"
    modelFingerprint: "F1EC03FB610B9D595556CFFB6C701825"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "F2BE8353E0D4334332C858C39E7880B5"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "426D40352BD390A9011E1CEA24496052"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:reference,message:uniqueUuid23):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "CDF9AB577BA7FBFCCC528F3A3450664F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid24):void2"
        staticAccess: true
    - type: "FIELD"
      name: "resource"
      modelFingerprint: "A859C96AD759507BF98EE5EDDA0DF4FB"
      valueUuid: "resource"
      methodExercised:
        expression: "getFile():file"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "24F7A06863C3CD28237E711D2F85DE16"
      valueUuid: "string2"
    disabled: true
    failureReason:
      reason: "CLASS_TYPE_COULD_NOT_BE_MOCKED_AND_NEEDS_TO_STRING"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataResource"
        parameters:
        - name: "reference"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
            uuid: "reference"
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.FileUrlResource"
            uuid: "resource"
            nameForMock: "resource"
        - name: "emptyDirectory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "emptyDirectory"
      valueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "reference"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Reference must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid23"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.FileUrlResource"
      uuid: "resource"
      nameForMock: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid24"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.FileUrlResource"
      uuid: "resource"
      nameForMock: "resource"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
      nameForMock: "file"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource"
      valueType: "java.lang.String"
      uuid: "string2"
    branches:
    - lineNumber: 120
      expression: "this.resource instanceof FileSystemResource"
      range: "(120,7)-(120,49)"
      evaluatedAs: false
    - lineNumber: 120
      expression: "this.resource instanceof FileUrlResource"
      range: "(120,54)-(120,93)"
      evaluatedAs: true
    - lineNumber: 124
      expression: "catch-exception (IOException)"
      range: "(124,4)-(124,24)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
