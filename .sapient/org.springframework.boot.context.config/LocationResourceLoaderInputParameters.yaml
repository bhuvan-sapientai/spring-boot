---
modelFingerprint: "B8B5213662C831FEB9CB15DEBF7C9311"
targetClass:
  fullClassName: "org.springframework.boot.context.config.LocationResourceLoader"
methods:
- method:
    name: "isPattern"
    sourceCodeSignature: "boolean isPattern(String location)"
    returnType: "boolean"
    parameters:
    - name: "location"
      type: "java.lang.String"
    instructionFingerprint: "865B7DD0F5AC45EC817F79FBCE1B58F8"
  paths:
  - pathId: "path1"
    testPathName: "isPatternWhenLocationContains_"
    constructorSignature: "<init>(org.springframework.core.io.ResourceLoader) : void"
    modelFingerprint: "3057703CD0F205738C23A8ECDA7143BB"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "EB6C2D19B9D341429B01DD7C19DEBD7B"
      valueUuid: "target"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "0AFFCAEEF1FD0F6EDC17C757A0141E60"
      valueUuid: "location"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "7C7056971A03D4CB857E7EF8054C7DE6"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:location):boolean1"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "*"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "*"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 65
      expression: "StringUtils.hasLength(location)"
      range: "(65,10)-(65,40)"
      evaluatedAs: true
    - lineNumber: 65
      expression: "location.contains(\\\"*\\\")"
      range: "(65,45)-(65,66)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "isPatternWhenLocationNotContains_"
    constructorSignature: "<init>(org.springframework.core.io.ResourceLoader) : void"
    modelFingerprint: "76446220748384F9E313121311FA8134"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "EB6C2D19B9D341429B01DD7C19DEBD7B"
      valueUuid: "target"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "B6387B9F3CEF19C379B39729ADDA5D1C"
      valueUuid: "location"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "343F4757C4E645C5D95B6C1E12B9BF12"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:location):boolean1"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5633A2B0C967879105766C98D64A3959"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 65
      expression: "StringUtils.hasLength(location)"
      range: "(65,10)-(65,40)"
      evaluatedAs: true
    - lineNumber: 65
      expression: "location.contains(\\\"*\\\")"
      range: "(65,45)-(65,66)"
      evaluatedAs: false
- method:
    name: "getResource"
    sourceCodeSignature: "Resource getResource(String location)"
    returnType: "org.springframework.core.io.Resource"
    parameters:
    - name: "location"
      type: "java.lang.String"
    instructionFingerprint: "D7F458A5E06004AC9ACB409403728EDD"
  paths:
  - pathId: "path1"
    testPathName: "getResourceWhenResourceUtilsNotIsUrlLocation"
    constructorSignature: "<init>(org.springframework.core.io.ResourceLoader) : void"
    modelFingerprint: "C2C062FC639A1F89AF1D9B4B66235BEA"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "CAAFE1DBE39DBF311E497FE19DEF923D"
      valueUuid: "target"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "B6387B9F3CEF19C379B39729ADDA5D1C"
      valueUuid: "location"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "5D597DFD5025E91EB14C8BE212E1C95B"
      methodExercised:
        expression: "isPattern(location:location):boolean1"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid1,messageSupplier:uniqueUuid2):void"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "03FC8839377DF12003F9CD5541FF90DA"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "cleanPath(path:location):string3"
        staticAccess: true
    - type: "STATIC"
      name: "ResourceUtils.class.real"
      modelFingerprint: "9D085D520A36129E8D1E6970AC13FA23"
      valueUuid: "ResourceUtils.class.real"
      methodExercised:
        expression: "isUrl(resourceLocation:string3):boolean2"
        staticAccess: true
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "0EF5102E8176EDF98E8C3EA393DF08C4"
      valueUuid: "resourceLoader"
      methodExercised:
        expression: "getResource(location:string4):resource"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "F38DC2F7404D21EDA2934AE5DD2E126A"
      valueUuid: "resource"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid2"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.ResourceLoader"
      uuid: "resourceLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "file:A"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    branches:
    - lineNumber: 84
      expression: "!isPattern(location)"
      range: "(84,16)-(84,35)"
      evaluatedAs: true
      internalMethodName: "validateNonPattern"
    - lineNumber: 77
      expression: "!ResourceUtils.isUrl(location)"
      range: "(77,7)-(77,36)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "getResourceWhenIsPatternLocationAndResourceUtilsIsUrlLocation"
    constructorSignature: "<init>(org.springframework.core.io.ResourceLoader) : void"
    modelFingerprint: "163D37A02DED4D5CFA0551EFD10C09B6"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "CAAFE1DBE39DBF311E497FE19DEF923D"
      valueUuid: "target"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "B6387B9F3CEF19C379B39729ADDA5D1C"
      valueUuid: "location"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "7B69AEA8A2DF7F46EBB55E4F8AA7F6DE"
      methodExercised:
        expression: "isPattern(location:location):boolean1"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "6D5FB5022FA0F8747855BBB24780A9DB"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid3,messageSupplier:uniqueUuid4):void"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "03FC8839377DF12003F9CD5541FF90DA"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "cleanPath(path:location):string3"
        staticAccess: true
    - type: "STATIC"
      name: "ResourceUtils.class"
      modelFingerprint: "3851EDC933AA5851854BE1CB9B033DC3"
      valueUuid: "ResourceUtils.class"
      methodExercised:
        expression: "isUrl(resourceLocation:string3):boolean2"
        staticAccess: true
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "63092488ED1FD92C5E062A79F63781A1"
      valueUuid: "resourceLoader"
      methodExercised:
        expression: "getResource(location:string3):resource"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "F38DC2F7404D21EDA2934AE5DD2E126A"
      valueUuid: "resource"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid4"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ResourceUtils"
      uuid: "ResourceUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.ResourceLoader"
      uuid: "resourceLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    branches:
    - lineNumber: 84
      expression: "!isPattern(location)"
      range: "(84,16)-(84,35)"
      evaluatedAs: false
      internalMethodName: "validateNonPattern"
    - lineNumber: 77
      expression: "!ResourceUtils.isUrl(location)"
      range: "(77,7)-(77,36)"
      evaluatedAs: false
- method:
    name: "getResources"
    sourceCodeSignature: "Resource[] getResources(String location, ResourceType type)"
    returnType: "org.springframework.core.io.Resource[]"
    parameters:
    - name: "location"
      type: "java.lang.String"
    - name: "type"
      type: "org.springframework.boot.context.config.LocationResourceLoader$ResourceType"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "489B7F3FF37699BFB7760D29315E6847"
  paths:
  - pathId: "path1"
    testPathName: "getResourcesWhenResourceNotExists"
    constructorSignature: "<init>(org.springframework.core.io.ResourceLoader) : void"
    modelFingerprint: "39EF053D9A35B5B6BAB6C4A94EAA2E78"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "EB6C2D19B9D341429B01DD7C19DEBD7B"
      valueUuid: "target"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "3AFB819A3AF82CB03439BE094E5D74A5"
      valueUuid: "location"
    - type: "INPUT"
      name: "type"
      modelFingerprint: "7406F0FF52E1C27DA18263F96A6C2F10"
      valueUuid: "type"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "BAA38A74B431BAF77DF4CD3F900ABB05"
      methodExercised:
        expression: "isPattern(location:location):boolean1"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean1,messageSupplier:uniqueUuid5):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid6,messageSupplier:uniqueUuid7):void2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "C46199B176FC68778215A093D81AE1A7"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "countOccurrencesOf(str:location,sub:uniqueUuid8):int1"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid9,messageSupplier:uniqueUuid10):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean3,messageSupplier:uniqueUuid11):void4"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "822706DE6AB34358ADFED1AF705581C5"
      methodExercised:
        expression: "getResource(location:string4):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C8FA174D873801F61365F0AF11CACB28"
      valueUuid: "resourceArray"
    disabled: true
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "ENUM"
      content: !<regular>
        value: "FILE"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader$ResourceType"
      uuid: "type"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid5"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid7"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: "*"
      valueType: "java.lang.String"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid10"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid11"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.core.io.Resource[]"
      uuid: "resourceArray"
    branches:
    - lineNumber: 128
      expression: "!location.startsWith(ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX)"
      range: "(128,16)-(128,85)"
      evaluatedAs: true
      internalMethodName: "validatePattern"
    - lineNumber: 130
      expression: "StringUtils.countOccurrencesOf(location, \\\"*\\\") == 1"
      range: "(130,16)-(130,65)"
      evaluatedAs: true
      internalMethodName: "validatePattern"
    - lineNumber: 132
      expression: "type != ResourceType.DIRECTORY"
      range: "(132,27)-(132,56)"
      evaluatedAs: true
      internalMethodName: "validatePattern"
    - lineNumber: 99
      expression: "!resource.exists()"
      range: "(99,7)-(99,24)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "getResourcesWhenFileNotIsDirectory"
    constructorSignature: "<init>(org.springframework.core.io.ResourceLoader) : void"
    modelFingerprint: "58CA37182103F3B59F324338EE71BEBC"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "EB6C2D19B9D341429B01DD7C19DEBD7B"
      valueUuid: "target"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "3AFB819A3AF82CB03439BE094E5D74A5"
      valueUuid: "location"
    - type: "INPUT"
      name: "type"
      modelFingerprint: "7406F0FF52E1C27DA18263F96A6C2F10"
      valueUuid: "type"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "BAA38A74B431BAF77DF4CD3F900ABB05"
      methodExercised:
        expression: "isPattern(location:location):boolean1"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean1,messageSupplier:uniqueUuid12):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid13,messageSupplier:uniqueUuid14):void2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "C46199B176FC68778215A093D81AE1A7"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "countOccurrencesOf(str:location,sub:uniqueUuid15):int1"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid16,messageSupplier:uniqueUuid17):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean3,messageSupplier:uniqueUuid18):void4"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "822706DE6AB34358ADFED1AF705581C5"
      methodExercised:
        expression: "getResource(location:string4):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean4"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "9EB762CC4FE6DBCBF31BD1EFA4F5E5E2"
      valueUuid: "resource"
      methodExercised:
        expression: "getFile():file"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C8FA174D873801F61365F0AF11CACB28"
      valueUuid: "resourceArray"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.io.File.isDirectory() : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "ENUM"
      content: !<regular>
        value: "FILE"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader$ResourceType"
      uuid: "type"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid12"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid13"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid14"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: "*"
      valueType: "java.lang.String"
      uuid: "uniqueUuid15"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid16"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid17"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid18"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.core.io.Resource[]"
      uuid: "resourceArray"
    branches:
    - lineNumber: 128
      expression: "!location.startsWith(ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX)"
      range: "(128,16)-(128,85)"
      evaluatedAs: true
      internalMethodName: "validatePattern"
    - lineNumber: 130
      expression: "StringUtils.countOccurrencesOf(location, \\\"*\\\") == 1"
      range: "(130,16)-(130,65)"
      evaluatedAs: true
      internalMethodName: "validatePattern"
    - lineNumber: 132
      expression: "type != ResourceType.DIRECTORY"
      range: "(132,27)-(132,56)"
      evaluatedAs: true
      internalMethodName: "validatePattern"
    - lineNumber: 99
      expression: "!resource.exists()"
      range: "(99,7)-(99,24)"
      evaluatedAs: false
    - lineNumber: 103
      expression: "!file.isDirectory()"
      range: "(103,7)-(103,25)"
      evaluatedAs: true
  - pathId: "path11"
    testPathName: "getResourcesWhenCaughtExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(org.springframework.core.io.ResourceLoader) : void"
    modelFingerprint: "40FCB50E09128B9777CBB3628C9E6D02"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "EB6C2D19B9D341429B01DD7C19DEBD7B"
      valueUuid: "target"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "3AFB819A3AF82CB03439BE094E5D74A5"
      valueUuid: "location"
    - type: "INPUT"
      name: "type"
      modelFingerprint: "7406F0FF52E1C27DA18263F96A6C2F10"
      valueUuid: "type"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "BAA38A74B431BAF77DF4CD3F900ABB05"
      methodExercised:
        expression: "isPattern(location:location):boolean1"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean1,messageSupplier:uniqueUuid19):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid20,messageSupplier:uniqueUuid21):void2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "C46199B176FC68778215A093D81AE1A7"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "countOccurrencesOf(str:location,sub:uniqueUuid22):int1"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid23,messageSupplier:uniqueUuid24):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean3,messageSupplier:uniqueUuid25):void4"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "822706DE6AB34358ADFED1AF705581C5"
      methodExercised:
        expression: "getResource(location:string4):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean4"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "9EB762CC4FE6DBCBF31BD1EFA4F5E5E2"
      valueUuid: "resource"
      methodExercised:
        expression: "getFile():file"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "6A624C31AC15C93C21FEF06ADE270942"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "ENUM"
      content: !<regular>
        value: "FILE"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader$ResourceType"
      uuid: "type"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid19"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid20"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid21"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: "*"
      valueType: "java.lang.String"
      uuid: "uniqueUuid22"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid23"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid24"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid25"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "message1"
            valueType: "java.lang.String"
            uuid: "string6"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Exception"
              parameters: []
            valueType: "java.lang.Exception"
            uuid: "exception"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 128
      expression: "!location.startsWith(ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX)"
      range: "(128,16)-(128,85)"
      evaluatedAs: true
      internalMethodName: "validatePattern"
    - lineNumber: 130
      expression: "StringUtils.countOccurrencesOf(location, \\\"*\\\") == 1"
      range: "(130,16)-(130,65)"
      evaluatedAs: true
      internalMethodName: "validatePattern"
    - lineNumber: 132
      expression: "type != ResourceType.DIRECTORY"
      range: "(132,27)-(132,56)"
      evaluatedAs: true
      internalMethodName: "validatePattern"
    - lineNumber: 99
      expression: "!resource.exists()"
      range: "(99,7)-(99,24)"
      evaluatedAs: false
    - lineNumber: 141
      expression: "catch-exception (Exception)"
      range: "(141,3)-(141,21)"
      evaluatedAs: true
      internalMethodName: "getFile"
    catchBlockExercised:
      idExternalInstruction: 46
      id: 1
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path6"
    testPathName: "getResourcesWhenSubDirectoriesIsNotNullAndTypeEqualsResourceTypeDIRECTORY"
    constructorSignature: "<init>(org.springframework.core.io.ResourceLoader) : void"
    modelFingerprint: "1A456E0428B05CF7BDB126DDB79615AE"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "EB6C2D19B9D341429B01DD7C19DEBD7B"
      valueUuid: "target"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "3AFB819A3AF82CB03439BE094E5D74A5"
      valueUuid: "location"
    - type: "INPUT"
      name: "type"
      modelFingerprint: "7406F0FF52E1C27DA18263F96A6C2F10"
      valueUuid: "type"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "BAA38A74B431BAF77DF4CD3F900ABB05"
      methodExercised:
        expression: "isPattern(location:location):boolean1"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean1,messageSupplier:uniqueUuid26):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid27,messageSupplier:uniqueUuid28):void2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "C46199B176FC68778215A093D81AE1A7"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "countOccurrencesOf(str:location,sub:uniqueUuid29):int1"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "6D5FB5022FA0F8747855BBB24780A9DB"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid30,messageSupplier:uniqueUuid31):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean3,messageSupplier:uniqueUuid32):void4"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "822706DE6AB34358ADFED1AF705581C5"
      methodExercised:
        expression: "getResource(location:string3):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean4"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "9EB762CC4FE6DBCBF31BD1EFA4F5E5E2"
      valueUuid: "resource"
      methodExercised:
        expression: "getFile():file"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "02BE7CA35A143C71333BD0E9B444171E"
      valueUuid: "objectArray"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.io.File.isDirectory() : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "ENUM"
      content: !<regular>
        value: "FILE"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader$ResourceType"
      uuid: "type"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid26"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid27"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid28"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: "*"
      valueType: "java.lang.String"
      uuid: "uniqueUuid29"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid30"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid31"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid32"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.core.io.Resource[]"
      uuid: "objectArray"
      collectionUuid: "list"
      explicitCastNeeded: true
    branches:
    - lineNumber: 128
      expression: "!location.startsWith(ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX)"
      range: "(128,16)-(128,85)"
      evaluatedAs: true
      internalMethodName: "validatePattern"
    - lineNumber: 130
      expression: "StringUtils.countOccurrencesOf(location, \\\"*\\\") == 1"
      range: "(130,16)-(130,65)"
      evaluatedAs: false
      internalMethodName: "validatePattern"
    - lineNumber: 132
      expression: "type != ResourceType.DIRECTORY"
      range: "(132,27)-(132,56)"
      evaluatedAs: false
      internalMethodName: "validatePattern"
    - lineNumber: 99
      expression: "!resource.exists()"
      range: "(99,7)-(99,24)"
      evaluatedAs: false
    - lineNumber: 103
      expression: "!file.isDirectory()"
      range: "(103,7)-(103,25)"
      evaluatedAs: false
    - lineNumber: 107
      expression: "subDirectories == null"
      range: "(107,7)-(107,28)"
      evaluatedAs: false
    - lineNumber: 111
      expression: "type == ResourceType.DIRECTORY"
      range: "(111,7)-(111,36)"
      evaluatedAs: true
  - pathId: "path7"
    testPathName: "getResourcesWhenTypeNotEqualsResourceTypeDIRECTORYAndSubDirectoriesIsEmpty"
    constructorSignature: "<init>(org.springframework.core.io.ResourceLoader) : void"
    modelFingerprint: "B1262FB2F7850D4D25C43B0393EEE898"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "EB6C2D19B9D341429B01DD7C19DEBD7B"
      valueUuid: "target"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "3AFB819A3AF82CB03439BE094E5D74A5"
      valueUuid: "location"
    - type: "INPUT"
      name: "type"
      modelFingerprint: "7406F0FF52E1C27DA18263F96A6C2F10"
      valueUuid: "type"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "BAA38A74B431BAF77DF4CD3F900ABB05"
      methodExercised:
        expression: "isPattern(location:location):boolean1"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean1,messageSupplier:uniqueUuid33):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "6D5FB5022FA0F8747855BBB24780A9DB"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid34,messageSupplier:uniqueUuid35):void2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "C46199B176FC68778215A093D81AE1A7"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "countOccurrencesOf(str:location,sub:uniqueUuid36):int1"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid37,messageSupplier:uniqueUuid38):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean3,messageSupplier:uniqueUuid39):void4"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "822706DE6AB34358ADFED1AF705581C5"
      methodExercised:
        expression: "getResource(location:string4):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean4"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "9EB762CC4FE6DBCBF31BD1EFA4F5E5E2"
      valueUuid: "resource"
      methodExercised:
        expression: "getFile():file"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C8FA174D873801F61365F0AF11CACB28"
      valueUuid: "objectArray"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.io.File.isDirectory() : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "ENUM"
      content: !<regular>
        value: "FILE"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader$ResourceType"
      uuid: "type"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid33"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid34"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid35"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: "*"
      valueType: "java.lang.String"
      uuid: "uniqueUuid36"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid37"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid38"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid39"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.core.io.Resource[]"
      uuid: "objectArray"
      collectionUuid: "arrayList"
    branches:
    - lineNumber: 128
      expression: "!location.startsWith(ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX)"
      range: "(128,16)-(128,85)"
      evaluatedAs: false
      internalMethodName: "validatePattern"
    - lineNumber: 130
      expression: "StringUtils.countOccurrencesOf(location, \\\"*\\\") == 1"
      range: "(130,16)-(130,65)"
      evaluatedAs: true
      internalMethodName: "validatePattern"
    - lineNumber: 132
      expression: "type != ResourceType.DIRECTORY"
      range: "(132,27)-(132,56)"
      evaluatedAs: true
      internalMethodName: "validatePattern"
    - lineNumber: 99
      expression: "!resource.exists()"
      range: "(99,7)-(99,24)"
      evaluatedAs: false
    - lineNumber: 103
      expression: "!file.isDirectory()"
      range: "(103,7)-(103,25)"
      evaluatedAs: false
    - lineNumber: 107
      expression: "subDirectories == null"
      range: "(107,7)-(107,28)"
      evaluatedAs: false
    - lineNumber: 111
      expression: "type == ResourceType.DIRECTORY"
      range: "(111,7)-(111,36)"
      evaluatedAs: false
    - lineNumber: 116
      expression: "for-each(subDirectories)"
      range: "(116,28)-(116,41)"
      evaluatedAs: false
  - pathId: "path3"
    testPathName: "getResourcesWhenFilesIsNotNull"
    constructorSignature: "<init>(org.springframework.core.io.ResourceLoader) : void"
    modelFingerprint: "C5B748A48DC1426F066647D0D78F1924"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "EB6C2D19B9D341429B01DD7C19DEBD7B"
      valueUuid: "target"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "3AFB819A3AF82CB03439BE094E5D74A5"
      valueUuid: "location"
    - type: "INPUT"
      name: "type"
      modelFingerprint: "7406F0FF52E1C27DA18263F96A6C2F10"
      valueUuid: "type"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "BAA38A74B431BAF77DF4CD3F900ABB05"
      methodExercised:
        expression: "isPattern(location:location):boolean1"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean1,messageSupplier:uniqueUuid40):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid41,messageSupplier:uniqueUuid42):void2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "C46199B176FC68778215A093D81AE1A7"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "countOccurrencesOf(str:location,sub:uniqueUuid43):int1"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid44,messageSupplier:uniqueUuid45):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean3,messageSupplier:uniqueUuid46):void4"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "822706DE6AB34358ADFED1AF705581C5"
      methodExercised:
        expression: "getResource(location:string4):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean4"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "9EB762CC4FE6DBCBF31BD1EFA4F5E5E2"
      valueUuid: "resource"
      methodExercised:
        expression: "getFile():file"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C8FA174D873801F61365F0AF11CACB28"
      valueUuid: "objectArray"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.io.File.isDirectory() : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "ENUM"
      content: !<regular>
        value: "FILE"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader$ResourceType"
      uuid: "type"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid40"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid41"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid42"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: "*"
      valueType: "java.lang.String"
      uuid: "uniqueUuid43"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid44"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid45"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid46"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.core.io.Resource[]"
      uuid: "objectArray"
      collectionUuid: "arrayList"
    branches:
    - lineNumber: 128
      expression: "!location.startsWith(ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX)"
      range: "(128,16)-(128,85)"
      evaluatedAs: true
      internalMethodName: "validatePattern"
    - lineNumber: 130
      expression: "StringUtils.countOccurrencesOf(location, \\\"*\\\") == 1"
      range: "(130,16)-(130,65)"
      evaluatedAs: true
      internalMethodName: "validatePattern"
    - lineNumber: 132
      expression: "type != ResourceType.DIRECTORY"
      range: "(132,27)-(132,56)"
      evaluatedAs: true
      internalMethodName: "validatePattern"
    - lineNumber: 99
      expression: "!resource.exists()"
      range: "(99,7)-(99,24)"
      evaluatedAs: false
    - lineNumber: 103
      expression: "!file.isDirectory()"
      range: "(103,7)-(103,25)"
      evaluatedAs: false
    - lineNumber: 107
      expression: "subDirectories == null"
      range: "(107,7)-(107,28)"
      evaluatedAs: false
    - lineNumber: 111
      expression: "type == ResourceType.DIRECTORY"
      range: "(111,7)-(111,36)"
      evaluatedAs: false
    - lineNumber: 116
      expression: "for-each(subDirectories)"
      range: "(116,28)-(116,41)"
      evaluatedAs: true
    - lineNumber: 118
      expression: "files != null"
      range: "(118,8)-(118,20)"
      evaluatedAs: true
