---
modelFingerprint: "AC598046600A78BDE79A9F8F0317977E"
targetClass:
  fullClassName: "org.springframework.boot.context.config.ConfigData"
methods:
- method:
    name: "getPropertySources"
    sourceCodeSignature: "List<PropertySource<?>> getPropertySources()"
    returnType: "java.util.List"
    genericReturnType: "org.springframework.core.env.PropertySource<?>"
    instructionFingerprint: "7CB24862E95CA88AA30FB1F986F2609C"
  paths:
  - pathId: "path1"
    testPathName: "getPropertySourcesTest"
    constructorSignature: "<init>(java.util.Collection<? extends org.springframework.core.env.PropertySource<?>>,org.springframework.boot.context.config.ConfigData$PropertySourceOptions)\
      \ : void"
    modelFingerprint: "1C7241ADD7F5702C16A2F25409BC360C"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "getOptions"
    sourceCodeSignature: "Options getOptions(PropertySource<?> propertySource)"
    returnType: "org.springframework.boot.context.config.ConfigData$Options"
    parameters:
    - name: "propertySource"
      type: "org.springframework.core.env.PropertySource"
    instructionFingerprint: "FD730EB043BCA01AE25478FF9E0E5AB2"
  paths:
  - pathId: "path1"
    testPathName: "getOptionsWhenOptionsIsNotNull"
    constructorSignature: "<init>(java.util.Collection<? extends org.springframework.core.env.PropertySource<?>>,org.springframework.boot.context.config.ConfigData$PropertySourceOptions)\
      \ : void"
    modelFingerprint: "08CC5C360D88E30FE01B594B0E5560BE"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "9303E5522950F1C82029F256813A743D"
      valueUuid: "target"
    - type: "INPUT"
      name: "propertySource"
      modelFingerprint: "8D41EB31E94DAD6D526360152B35D702"
      valueUuid: "propertySource"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B59C7B485665C95F21EB4BC3EED3B12"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:propertySources,message:uniqueUuid3):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "BC2AA1C8B8E044A0ADCB11FC89B8E06D"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:propertySourceOptions,message:uniqueUuid4):void4"
        staticAccess: true
    - type: "FIELD"
      name: "propertySourceOptions"
      modelFingerprint: "FABC7F804D5290EB81953CFF807AA690"
      valueUuid: "propertySourceOptions"
      methodExercised:
        expression: "get(propertySource:propertySource):configData.Options2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "EEA08A2C9D9B840FEBCD6D208AB9FEA3"
      valueUuid: "configData.Options2"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigData"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Collection"
            genericValueType: "? extends org.springframework.core.env.PropertySource<?>"
            uuid: "propertySources"
        - name: "propertySourceOptions"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigData$PropertySourceOptions"
            uuid: "propertySourceOptions"
      valueType: "org.springframework.boot.context.config.ConfigData"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "? extends org.springframework.core.env.PropertySource<?>"
      uuid: "propertySources"
    - sapientType: "BASIC"
      content: !<regular>
        value: "PropertySources must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigData$PropertySourceOptions"
      uuid: "propertySourceOptions"
    - sapientType: "BASIC"
      content: !<regular>
        value: "PropertySourceOptions must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigData$PropertySourceOptions"
      uuid: "propertySourceOptions"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigData$Options"
      uuid: "configData.Options2"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigData$Options"
      uuid: "configData.Options2"
    branches:
    - lineNumber: 99
      expression: "options != null"
      range: "(99,11)-(99,25)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "getOptionsWhenOptionsIsNull"
    constructorSignature: "<init>(java.util.Collection<? extends org.springframework.core.env.PropertySource<?>>,org.springframework.boot.context.config.ConfigData$PropertySourceOptions)\
      \ : void"
    modelFingerprint: "7BD8B4A22CA69A40573A27E45512C4CB"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "9303E5522950F1C82029F256813A743D"
      valueUuid: "target"
    - type: "INPUT"
      name: "propertySource"
      modelFingerprint: "8D41EB31E94DAD6D526360152B35D702"
      valueUuid: "propertySource"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B59C7B485665C95F21EB4BC3EED3B12"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:propertySources,message:uniqueUuid5):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "BC2AA1C8B8E044A0ADCB11FC89B8E06D"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:propertySourceOptions,message:uniqueUuid6):void4"
        staticAccess: true
    - type: "FIELD"
      name: "propertySourceOptions"
      modelFingerprint: "0D286130E04702B598C182886361AF91"
      valueUuid: "propertySourceOptions"
      methodExercised:
        expression: "get(propertySource:propertySource):configData.Options2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "62ABD3633241352DAA8DFEF1EE110026"
      valueUuid: "configData.Options3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigData"
        parameters:
        - name: "propertySources"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Collection"
            genericValueType: "? extends org.springframework.core.env.PropertySource<?>"
            uuid: "propertySources"
        - name: "propertySourceOptions"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigData$PropertySourceOptions"
            uuid: "propertySourceOptions"
      valueType: "org.springframework.boot.context.config.ConfigData"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "? extends org.springframework.core.env.PropertySource<?>"
      uuid: "propertySources"
    - sapientType: "BASIC"
      content: !<regular>
        value: "PropertySources must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigData$PropertySourceOptions"
      uuid: "propertySourceOptions"
    - sapientType: "BASIC"
      content: !<regular>
        value: "PropertySourceOptions must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigData$PropertySourceOptions"
      uuid: "propertySourceOptions"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.config.ConfigData$Options"
      uuid: "configData.Options2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "OBJECT"
      content: !<static_field_return>
        target: "org.springframework.boot.context.config.ConfigData$Options"
        fieldName: "NONE"
      valueType: "org.springframework.boot.context.config.ConfigData$Options"
      uuid: "configData.Options3"
    branches:
    - lineNumber: 99
      expression: "options != null"
      range: "(99,11)-(99,25)"
      evaluatedAs: false
