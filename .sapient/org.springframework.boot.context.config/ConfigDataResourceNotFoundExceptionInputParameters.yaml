---
modelFingerprint: "FF9289749F0B9664844448EFD5DA2DD2"
targetClass:
  fullClassName: "org.springframework.boot.context.config.ConfigDataResourceNotFoundException"
methods:
- method:
    name: "getResource"
    sourceCodeSignature: "ConfigDataResource getResource()"
    returnType: "org.springframework.boot.context.config.ConfigDataResource"
    instructionFingerprint: "00DF111282E4CCDA848F6D39D1B1A51E"
  paths:
  - pathId: "path1"
    testPathName: "getResourceTest"
    constructorSignature: "<init>(org.springframework.boot.context.config.ConfigDataResource,java.lang.Throwable)\
      \ : void"
    modelFingerprint: "B7FF1D5482C17EFB95ABE4DA896D425E"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
    calledSomeStaticInternalMethod: true
- method:
    name: "getLocation"
    sourceCodeSignature: "ConfigDataLocation getLocation()"
    returnType: "org.springframework.boot.context.config.ConfigDataLocation"
    instructionFingerprint: "EDAAE51B769561EB9940BA79DA30CE9E"
  paths:
  - pathId: "path1"
    testPathName: "getLocationTest"
    constructorSignature: "<init>(org.springframework.boot.context.config.ConfigDataResource,java.lang.Throwable)\
      \ : void"
    modelFingerprint: "6455C8D23C354FAC387C8AE2DC69B7D3"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
    calledSomeStaticInternalMethod: true
- method:
    name: "getOrigin"
    sourceCodeSignature: "Origin getOrigin()"
    returnType: "org.springframework.boot.origin.Origin"
    instructionFingerprint: "190C3C140F95851B2D0034BBEFF17D2A"
  paths:
  - pathId: "path1"
    testPathName: "getOriginTest"
    constructorSignature: "<init>(org.springframework.boot.context.config.ConfigDataResource,java.lang.Throwable)\
      \ : void"
    modelFingerprint: "E9301D729FAA010C0C9AE5B910476F7F"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "ABCD8743829C99A0EBD8F68D1372B41A"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C9CB8CF89899A8F92FA11EE3052BE708"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid3):void"
        staticAccess: true
    - type: "STATIC"
      name: "Origin.class"
      modelFingerprint: "27EB3EF075090F1D688FFDC4E9D173D0"
      valueUuid: "Origin.class"
      methodExercised:
        expression: "from(source:uniqueUuid4):origin"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5692B041B63EBC5E48D608049DCE404F"
      valueUuid: "origin"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigDataResourceNotFoundException"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataResource"
            uuid: "resource"
            nameForMock: "resource"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Throwable"
              parameters: []
            valueType: "java.lang.Throwable"
            uuid: "cause"
      valueType: "org.springframework.boot.context.config.ConfigDataResourceNotFoundException"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "resource"
      nameForMock: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "Origin.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "origin"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "uniqueUuid4"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "origin"
    calledSomeStaticInternalMethod: true
- method:
    name: "getReferenceDescription"
    sourceCodeSignature: "String getReferenceDescription()"
    returnType: "java.lang.String"
    instructionFingerprint: "188C302A79E477F3CF5349872D7D1A4E"
  paths:
  - pathId: "path1"
    testPathName: "getReferenceDescriptionWhenLocationIsNull"
    constructorSignature: "<init>(org.springframework.boot.context.config.ConfigDataResource,java.lang.Throwable)\
      \ : void"
    modelFingerprint: "B6E23B703EFD208F48AF0F6D5EBD62B3"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "ABCD8743829C99A0EBD8F68D1372B41A"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C9CB8CF89899A8F92FA11EE3052BE708"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid5):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "89EBD605F98904C331C2AC687D31BEF9"
      valueUuid: "string3"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigDataResourceNotFoundException"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataResource"
            uuid: "resource"
            nameForMock: "resource"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Throwable"
              parameters: []
            valueType: "java.lang.Throwable"
            uuid: "cause"
      valueType: "org.springframework.boot.context.config.ConfigDataResourceNotFoundException"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "resource"
      nameForMock: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource 'null'"
      valueType: "java.lang.String"
      uuid: "string3"
    branches:
    - lineNumber: 106
      expression: "location != null"
      range: "(106,7)-(106,22)"
      evaluatedAs: false
      internalMethodName: "getReferenceDescription"
    calledSomeStaticInternalMethod: true
- method:
    name: "withLocation"
    sourceCodeSignature: "ConfigDataResourceNotFoundException withLocation(ConfigDataLocation\
      \ location)"
    returnType: "org.springframework.boot.context.config.ConfigDataResourceNotFoundException"
    parameters:
    - name: "location"
      type: "org.springframework.boot.context.config.ConfigDataLocation"
    instructionFingerprint: "0A519E5BD54E8EB9F802FE5D5F6F5E17"
  paths:
  - pathId: "path1"
    testPathName: "withLocationWhenLocationIsNotNull"
    constructorSignature: "<init>(org.springframework.boot.context.config.ConfigDataResource,java.lang.Throwable)\
      \ : void"
    modelFingerprint: "7847D28C6B54713E3DE833FFC650FCA8"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "ABCD8743829C99A0EBD8F68D1372B41A"
      valueUuid: "target"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "6B0C45E6FFB6764C84898E62EF2696B3"
      valueUuid: "location"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C9CB8CF89899A8F92FA11EE3052BE708"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid6):void"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "292187B28C310A0C3679C0B3C1D2FF98"
      methodExercised:
        expression: "getCause():throwable"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C9CB8CF89899A8F92FA11EE3052BE708"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid7):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "6EE4A60539DBFD91B4419FBFAAEBFA63"
      valueUuid: "configDataResourceNotFoundException3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigDataResourceNotFoundException"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataResource"
            uuid: "resource"
            nameForMock: "resource"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Throwable"
              parameters: []
            valueType: "java.lang.Throwable"
            uuid: "cause"
      valueType: "org.springframework.boot.context.config.ConfigDataResourceNotFoundException"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
      nameForMock: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "resource"
      nameForMock: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "throwable"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "resource"
      nameForMock: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigDataResourceNotFoundException"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataResource"
            uuid: "resource"
            nameForMock: "resource"
        - name: "location"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "location"
            nameForMock: "location"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Throwable"
              parameters: []
            valueType: "java.lang.Throwable"
            uuid: "throwable"
      valueType: "org.springframework.boot.context.config.ConfigDataResourceNotFoundException"
      uuid: "configDataResourceNotFoundException3"
      fixed: true
    branches:
    - lineNumber: 106
      expression: "location != null"
      range: "(106,7)-(106,22)"
      evaluatedAs: true
      internalMethodName: "getReferenceDescription"
    calledSomeStaticInternalMethod: true
- method:
    name: "throwIfDoesNotExist"
    sourceCodeSignature: "void throwIfDoesNotExist(ConfigDataResource resource, Path\
      \ pathToCheck)"
    returnType: "void"
    parameters:
    - name: "resource"
      type: "org.springframework.boot.context.config.ConfigDataResource"
    - name: "pathToCheck"
      type: "java.nio.file.Path"
    instructionFingerprint: "92F155D05994AB64544F0210140F8A43"
  paths:
  - pathId: "path2"
    testPathName: "throwIfDoesNotExistWhenExists"
    modelFingerprint: "C13E0791CA461D45CFAAF2552CA9A5C8"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "resource"
      modelFingerprint: "48845B248A662C8DA904EF60719919DB"
      valueUuid: "resource"
    - type: "INPUT"
      name: "pathToCheck"
      modelFingerprint: "D71E1A1F323796A462C1E30D95415EDA"
      valueUuid: "pathToCheck"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.nio.file.Files.exists(java.nio.file.Path,java.nio.file.LinkOption[])\
        \ : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "resource"
    - sapientType: "MOCK"
      valueType: "java.nio.file.Path"
      uuid: "pathToCheck"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 143
      expression: "!exists"
      range: "(143,7)-(143,13)"
      evaluatedAs: false
      internalMethodName: "throwIfDoesNotExist"
    calledSomeStaticInternalMethod: true
  - pathId: "path1"
    testPathName: "throwIfDoesNotExistWhenLocationIsNullThrowsConfigDataResourceNotFoundException"
    modelFingerprint: "884F70B74ACEA77E4AA0FD3F07ADD04C"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "resource"
      modelFingerprint: "48845B248A662C8DA904EF60719919DB"
      valueUuid: "resource"
    - type: "INPUT"
      name: "pathToCheck"
      modelFingerprint: "D71E1A1F323796A462C1E30D95415EDA"
      valueUuid: "pathToCheck"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C9CB8CF89899A8F92FA11EE3052BE708"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid8):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "232E27D88A5E2BA3241F350787635DDB"
      valueUuid: "configDataResourceNotFoundException"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.nio.file.Files.exists(java.nio.file.Path,java.nio.file.LinkOption[])\
        \ : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "resource"
      nameForMock: "resource"
    - sapientType: "MOCK"
      valueType: "java.nio.file.Path"
      uuid: "pathToCheck"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "resource"
      nameForMock: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigDataResourceNotFoundException"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataResource"
            uuid: "resource"
            nameForMock: "resource"
      valueType: "org.springframework.boot.context.config.ConfigDataResourceNotFoundException"
      uuid: "configDataResourceNotFoundException"
      fixed: true
    branches:
    - lineNumber: 143
      expression: "!exists"
      range: "(143,7)-(143,13)"
      evaluatedAs: true
      internalMethodName: "throwIfDoesNotExist"
    - lineNumber: 106
      expression: "location != null"
      range: "(106,7)-(106,22)"
      evaluatedAs: false
      internalMethodName: "getReferenceDescription"
    calledSomeStaticInternalMethod: true
- method:
    name: "throwIfDoesNotExist"
    sourceCodeSignature: "void throwIfDoesNotExist(ConfigDataResource resource, File\
      \ fileToCheck)"
    returnType: "void"
    parameters:
    - name: "resource"
      type: "org.springframework.boot.context.config.ConfigDataResource"
    - name: "fileToCheck"
      type: "java.io.File"
    instructionFingerprint: "D571A1040C910EED62086FB7B0EB15FB"
  paths:
  - pathId: "path2"
    testPathName: "throwIfDoesNotExist1WhenExists"
    modelFingerprint: "0648C23475C4052903785F3EF02019FE"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "resource"
      modelFingerprint: "48845B248A662C8DA904EF60719919DB"
      valueUuid: "resource"
    - type: "INPUT"
      name: "fileToCheck"
      modelFingerprint: "860E903AE70B6D48C7DDC4E08175DCA4"
      valueUuid: "fileToCheck"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.io.File.exists() : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "resource"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "fileToCheck-pathname"
      valueType: "java.io.File"
      uuid: "fileToCheck"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 143
      expression: "!exists"
      range: "(143,7)-(143,13)"
      evaluatedAs: false
      internalMethodName: "throwIfDoesNotExist"
    calledSomeStaticInternalMethod: true
  - pathId: "path1"
    testPathName: "throwIfDoesNotExist1WhenLocationIsNullThrowsConfigDataResourceNotFoundException"
    modelFingerprint: "09FBD0EFF7C9D950874C26FF145525E4"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "resource"
      modelFingerprint: "48845B248A662C8DA904EF60719919DB"
      valueUuid: "resource"
    - type: "INPUT"
      name: "fileToCheck"
      modelFingerprint: "36AACA42F98911CAD198419C880DDA7D"
      valueUuid: "fileToCheck"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C9CB8CF89899A8F92FA11EE3052BE708"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid1):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "232E27D88A5E2BA3241F350787635DDB"
      valueUuid: "configDataResourceNotFoundException"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "resource"
      nameForMock: "resource"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "fileToCheck-pathname"
      valueType: "java.io.File"
      uuid: "fileToCheck"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "resource"
      nameForMock: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigDataResourceNotFoundException"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataResource"
            uuid: "resource"
            nameForMock: "resource"
      valueType: "org.springframework.boot.context.config.ConfigDataResourceNotFoundException"
      uuid: "configDataResourceNotFoundException"
      fixed: true
    branches:
    - lineNumber: 143
      expression: "!exists"
      range: "(143,7)-(143,13)"
      evaluatedAs: true
      internalMethodName: "throwIfDoesNotExist"
    - lineNumber: 106
      expression: "location != null"
      range: "(106,7)-(106,22)"
      evaluatedAs: false
      internalMethodName: "getReferenceDescription"
    calledSomeStaticInternalMethod: true
- method:
    name: "throwIfDoesNotExist"
    sourceCodeSignature: "void throwIfDoesNotExist(ConfigDataResource resource, Resource\
      \ resourceToCheck)"
    returnType: "void"
    parameters:
    - name: "resource"
      type: "org.springframework.boot.context.config.ConfigDataResource"
    - name: "resourceToCheck"
      type: "org.springframework.core.io.Resource"
    instructionFingerprint: "64BD698C1399246B2F8532A903C683E1"
  paths:
  - pathId: "path2"
    testPathName: "throwIfDoesNotExist2WhenExists"
    modelFingerprint: "A1B8921A239E66CD38B7539721F6BCD7"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "resource"
      modelFingerprint: "48845B248A662C8DA904EF60719919DB"
      valueUuid: "resource"
    - type: "INPUT"
      name: "resourceToCheck"
      modelFingerprint: "76E4A60BC3BD12E9088558B4F6C4DF05"
      valueUuid: "resourceToCheck"
    - type: "LOCAL_VARIABLE"
      name: "resourceToCheck"
      modelFingerprint: "2176E7ED703E01C731D8EB0757B1DBD4"
      valueUuid: "resourceToCheck"
      methodExercised:
        expression: "exists():boolean1"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "resource"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resourceToCheck"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resourceToCheck"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 143
      expression: "!exists"
      range: "(143,7)-(143,13)"
      evaluatedAs: false
      internalMethodName: "throwIfDoesNotExist"
    calledSomeStaticInternalMethod: true
  - pathId: "path1"
    testPathName: "throwIfDoesNotExist2WhenLocationIsNullThrowsConfigDataResourceNotFoundException"
    modelFingerprint: "58EC436B8FC1181B23332C58AAD397B2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "resource"
      modelFingerprint: "48845B248A662C8DA904EF60719919DB"
      valueUuid: "resource"
    - type: "INPUT"
      name: "resourceToCheck"
      modelFingerprint: "76E4A60BC3BD12E9088558B4F6C4DF05"
      valueUuid: "resourceToCheck"
    - type: "LOCAL_VARIABLE"
      name: "resourceToCheck"
      modelFingerprint: "CD82756CE227B3795F9AA3B8CF4323D4"
      valueUuid: "resourceToCheck"
      methodExercised:
        expression: "exists():boolean1"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C9CB8CF89899A8F92FA11EE3052BE708"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:resource,message:uniqueUuid10):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "232E27D88A5E2BA3241F350787635DDB"
      valueUuid: "configDataResourceNotFoundException"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "resource"
      nameForMock: "resource"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resourceToCheck"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resourceToCheck"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "resource"
      nameForMock: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Resource must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigDataResourceNotFoundException"
        parameters:
        - name: "resource"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataResource"
            uuid: "resource"
            nameForMock: "resource"
      valueType: "org.springframework.boot.context.config.ConfigDataResourceNotFoundException"
      uuid: "configDataResourceNotFoundException"
      fixed: true
    branches:
    - lineNumber: 143
      expression: "!exists"
      range: "(143,7)-(143,13)"
      evaluatedAs: true
      internalMethodName: "throwIfDoesNotExist"
    - lineNumber: 106
      expression: "location != null"
      range: "(106,7)-(106,22)"
      evaluatedAs: false
      internalMethodName: "getReferenceDescription"
    calledSomeStaticInternalMethod: true
