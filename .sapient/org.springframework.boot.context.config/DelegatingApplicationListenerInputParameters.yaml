---
modelFingerprint: "F19214F688C43C8AAA27F6747A2CEE86"
targetClass:
  fullClassName: "org.springframework.boot.context.config.DelegatingApplicationListener"
methods:
- method:
    name: "onApplicationEvent"
    sourceCodeSignature: "void onApplicationEvent(ApplicationEvent event)"
    returnType: "void"
    parameters:
    - name: "event"
      type: "org.springframework.context.ApplicationEvent"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "356C2A63929FCAAD85219E7B990B2FF1"
  paths:
  - pathId: "path1"
    testPathName: "onApplicationEventWhenDelegatesIsEmpty"
    constructorSignature: "<init>() : void"
    modelFingerprint: "D52648E48661A80129584203AE78F69D"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "event"
      modelFingerprint: "F6D716A99FC84C245CDB02AD47EC850F"
      valueUuid: "event"
    - type: "LOCAL_VARIABLE"
      name: "preparedEvent"
      modelFingerprint: "8917BC4FEE2F3022A98DAB8FAF2197B5"
      valueUuid: "event"
      methodExercised:
        expression: "getEnvironment():environment"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.DelegatingApplicationListener"
        parameters: []
      valueType: "org.springframework.boot.context.config.DelegatingApplicationListener"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
        parameters:
        - name: "bootstrapContext"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ConfigurableBootstrapContext"
            uuid: "event-bootstrapContext"
        - name: "application"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.SpringApplication"
            uuid: "event-application"
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "event-args"
        - name: "environment"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.core.env.ConfigurableEnvironment"
            uuid: "environment"
            fixed: true
      valueType: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
      uuid: "event"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
        parameters:
        - name: "bootstrapContext"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ConfigurableBootstrapContext"
            uuid: "event-bootstrapContext"
        - name: "application"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.SpringApplication"
            uuid: "event-application"
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "event-args"
        - name: "environment"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.core.env.ConfigurableEnvironment"
            uuid: "environment"
            fixed: true
      valueType: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
      uuid: "event"
    - sapientType: "NULL"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 59
      expression: "event instanceof ApplicationEnvironmentPreparedEvent preparedEvent"
      range: "(59,7)-(59,72)"
      evaluatedAs: true
    - lineNumber: 76
      expression: "environment == null"
      range: "(76,7)-(76,25)"
      evaluatedAs: true
      internalMethodName: "getListeners"
    - lineNumber: 61
      expression: "delegates.isEmpty()"
      range: "(61,8)-(61,26)"
      evaluatedAs: true
  - pathId: "path6"
    testPathName: "onApplicationEventWhenCaughtExceptionThrowsApplicationContextException"
    constructorSignature: "<init>() : void"
    modelFingerprint: "2036D583D4F5444BF2D593B09379ADE2"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "event"
      modelFingerprint: "F2DF357A1BE2AA3010912B31D7133C88"
      valueUuid: "event"
    - type: "LOCAL_VARIABLE"
      name: "preparedEvent"
      modelFingerprint: "78076DE4E95D179B34C105C3BEFFCDB6"
      valueUuid: "event"
      methodExercised:
        expression: "getEnvironment():environment"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "CD820180A71E88E714E5ACB8EB210C22"
      valueUuid: "environment"
      methodExercised:
        expression: "getProperty(key:uniqueUuid1):string"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "7B623EE582A0C2E878E2D18F466E3DE6"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:string):boolean2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "4C881470A4BD6795E378674CDDE5C8D4"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "commaDelimitedListToSet(str:string):set"
        staticAccess: true
    - type: "STATIC"
      name: "ClassUtils.class.real"
      modelFingerprint: "70484AD192BDA84A12E8618883BD7800"
      valueUuid: "ClassUtils.class.real"
      methodExercised:
        expression: "getDefaultClassLoader():classLoader"
        staticAccess: true
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "1BC7F9B78AC1F654FB333E4E9F7C6140"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "forName(name:object,classLoader:classLoader):class"
        throwsExceptions:
        - "java.lang.ClassNotFoundException"
        - "java.lang.LinkageError"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "24E17C0B58A8F2E1EF01BFCBA7DDD6C7"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isAssignable(superType:uniqueUuid2,subType:class,messageSupplier:uniqueUuid3):void"
        staticAccess: true
    - type: "STATIC"
      name: "BeanUtils.class"
      modelFingerprint: "1A4117B350DC59357F6351A35CDDEC84"
      valueUuid: "BeanUtils.class"
      methodExercised:
        expression: "instantiateClass(clazz:class):object2"
        throwsExceptions:
        - "org.springframework.beans.BeanInstantiationException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "1F3B7239A4A1855E1667BD5F5ED4F728"
      valueUuid: "applicationContextException"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.DelegatingApplicationListener"
        parameters: []
      valueType: "org.springframework.boot.context.config.DelegatingApplicationListener"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
        parameters:
        - name: "bootstrapContext"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ConfigurableBootstrapContext"
            uuid: "event-bootstrapContext"
        - name: "application"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.SpringApplication"
            uuid: "event-application"
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "event-args"
        - name: "environment"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.ConfigurableEnvironment"
            uuid: "environment"
      valueType: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
      uuid: "event"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
        parameters:
        - name: "bootstrapContext"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ConfigurableBootstrapContext"
            uuid: "event-bootstrapContext"
        - name: "application"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.SpringApplication"
            uuid: "event-application"
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "event-args"
        - name: "environment"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.ConfigurableEnvironment"
            uuid: "environment"
      valueType: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "context.listener.classes"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashSet"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "B"
          valueType: "java.lang.String"
          uuid: "object"
          collectionUuid: "set"
      valueType: "java.util.Set"
      genericValueType: "java.lang.String"
      uuid: "set"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ClassUtils"
        method: "getDefaultClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "object"
      collectionUuid: "set"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ClassUtils"
        method: "getDefaultClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.context.ApplicationListener"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.context.ApplicationListener"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid3"
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.BeanUtils"
      uuid: "BeanUtils.class"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.RuntimeException"
        parameters: []
      valueType: "java.lang.RuntimeException"
      uuid: "object2"
      explicitCastNeeded: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "org.springframework.context.ApplicationContextException"
        parameters:
        - name: "msg"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Failed to load context listener class [B]"
            valueType: "java.lang.String"
            uuid: "string2"
        - name: "cause"
          value:
            sapientType: "EXCEPTION"
            content: !<new>
              target: "java.lang.RuntimeException"
              parameters: []
            valueType: "java.lang.RuntimeException"
            uuid: "object2"
            explicitCastNeeded: true
      valueType: "org.springframework.context.ApplicationContextException"
      uuid: "applicationContextException"
      fixed: true
    branches:
    - lineNumber: 59
      expression: "event instanceof ApplicationEnvironmentPreparedEvent preparedEvent"
      range: "(59,7)-(59,72)"
      evaluatedAs: true
    - lineNumber: 76
      expression: "environment == null"
      range: "(76,7)-(76,25)"
      evaluatedAs: false
      internalMethodName: "getListeners"
    - lineNumber: 81
      expression: "StringUtils.hasLength(classNames)"
      range: "(81,7)-(81,39)"
      evaluatedAs: true
      internalMethodName: "getListeners"
    - lineNumber: 82
      expression: "for-each(StringUtils.commaDelimitedListToSet(classNames))"
      range: "(82,28)-(82,74)"
      evaluatedAs: true
      internalMethodName: "getListeners"
    - lineNumber: 89
      expression: "catch-exception (Exception)"
      range: "(89,5)-(89,23)"
      evaluatedAs: true
      internalMethodName: "getListeners"
    catchBlockExercised:
      idExternalInstruction: 13
      id: 1
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path2"
    testPathName: "onApplicationEventWhenThisMulticasterIsNotNull"
    constructorSignature: "<init>() : void"
    modelFingerprint: "E122E91A12FAFD2CE90BE4A0C70FE9CC"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "event"
      modelFingerprint: "559DBC3C433759CA51FF1CB21D4CED7F"
      valueUuid: "event"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "CD820180A71E88E714E5ACB8EB210C22"
      valueUuid: "environment"
      methodExercised:
        expression: "getProperty(key:uniqueUuid1):string"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "7B623EE582A0C2E878E2D18F466E3DE6"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:string):boolean2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "129F20E7C4B489B6818E758183137BF4"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "commaDelimitedListToSet(str:string):set"
        staticAccess: true
    - type: "STATIC"
      name: "ClassUtils.class.real"
      modelFingerprint: "70484AD192BDA84A12E8618883BD7800"
      valueUuid: "ClassUtils.class.real"
      methodExercised:
        expression: "getDefaultClassLoader():classLoader"
        staticAccess: true
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "B014E9E703A63E6114AE69357B4F38FA"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "forName(name:object,classLoader:classLoader):class"
        throwsExceptions:
        - "java.lang.ClassNotFoundException"
        - "java.lang.LinkageError"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "24E17C0B58A8F2E1EF01BFCBA7DDD6C7"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isAssignable(superType:uniqueUuid2,subType:class,messageSupplier:uniqueUuid3):void"
        staticAccess: true
    - type: "STATIC"
      name: "BeanUtils.class"
      modelFingerprint: "38240253C2AD3EDBDAEF5848879B2391"
      valueUuid: "BeanUtils.class"
      methodExercised:
        expression: "instantiateClass(clazz:class):object2"
        throwsExceptions:
        - "org.springframework.beans.BeanInstantiationException"
        staticAccess: true
    - type: "STATIC"
      name: "AnnotationAwareOrderComparator.class"
      modelFingerprint: "FAA064456B2B7E89C793FD073FD073D3"
      valueUuid: "AnnotationAwareOrderComparator.class"
      methodExercised:
        expression: "sort(list:arrayList):void2"
        staticAccess: true
    - type: "FIELD"
      name: "multicaster"
      modelFingerprint: "269B1F3B6C7935996AB9E3BC845A1264"
      valueUuid: "simpleApplicationEventMulticaster"
      methodExercised:
        expression: "addApplicationListener(listener:object2):void3"
    - type: "FIELD"
      name: "multicaster"
      modelFingerprint: "36998B8980B9C0F04F1568595F146F01"
      valueUuid: "simpleApplicationEventMulticaster"
      methodExercised:
        expression: "multicastEvent(event:event):void4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.DelegatingApplicationListener"
        parameters: []
        propertiesMap:
          multicaster:
            sapientType: "MOCK"
            valueType: "org.springframework.context.event.SimpleApplicationEventMulticaster"
            uuid: "simpleApplicationEventMulticaster"
            fixed: true
      valueType: "org.springframework.boot.context.config.DelegatingApplicationListener"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
        parameters:
        - name: "bootstrapContext"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ConfigurableBootstrapContext"
            uuid: "event-bootstrapContext"
        - name: "application"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.SpringApplication"
            uuid: "event-application"
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "event-args"
        - name: "environment"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.ConfigurableEnvironment"
            uuid: "environment"
      valueType: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "context.listener.classes"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashSet"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "return_of_commaDelimitedListToSetItem1"
          valueType: "java.lang.String"
          uuid: "object"
          collectionUuid: "set"
      valueType: "java.util.Set"
      genericValueType: "java.lang.String"
      uuid: "set"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ClassUtils"
        method: "getDefaultClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_commaDelimitedListToSetItem1"
      valueType: "java.lang.String"
      uuid: "object"
      collectionUuid: "set"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.util.ClassUtils"
        method: "getDefaultClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.context.ApplicationListener"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.context.ApplicationListener"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid3"
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.BeanUtils"
      uuid: "BeanUtils.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationListener"
      uuid: "object2"
      collectionUuid: "arrayList"
      explicitCastNeeded: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.annotation.AnnotationAwareOrderComparator"
      uuid: "AnnotationAwareOrderComparator.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.context.ApplicationListener"
          uuid: "object2"
          explicitCastNeeded: true
      valueType: "java.util.List"
      genericValueType: "org.springframework.context.ApplicationListener<org.springframework.context.ApplicationEvent>"
      uuid: "arrayList"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.event.SimpleApplicationEventMulticaster"
      uuid: "simpleApplicationEventMulticaster"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationListener"
      uuid: "object2"
      collectionUuid: "arrayList"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.context.event.SimpleApplicationEventMulticaster"
      uuid: "simpleApplicationEventMulticaster"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
        parameters:
        - name: "bootstrapContext"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ConfigurableBootstrapContext"
            uuid: "event-bootstrapContext"
        - name: "application"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.SpringApplication"
            uuid: "event-application"
        - name: "args"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "event-args"
        - name: "environment"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.env.ConfigurableEnvironment"
            uuid: "environment"
      valueType: "org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent"
      uuid: "event"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 59
      expression: "event instanceof ApplicationEnvironmentPreparedEvent preparedEvent"
      range: "(59,7)-(59,72)"
      evaluatedAs: true
    - lineNumber: 76
      expression: "environment == null"
      range: "(76,7)-(76,25)"
      evaluatedAs: false
      internalMethodName: "getListeners"
    - lineNumber: 81
      expression: "StringUtils.hasLength(classNames)"
      range: "(81,7)-(81,39)"
      evaluatedAs: true
      internalMethodName: "getListeners"
    - lineNumber: 82
      expression: "for-each(StringUtils.commaDelimitedListToSet(classNames))"
      range: "(82,28)-(82,74)"
      evaluatedAs: true
      internalMethodName: "getListeners"
    - lineNumber: 61
      expression: "delegates.isEmpty()"
      range: "(61,8)-(61,26)"
      evaluatedAs: false
    - lineNumber: 65
      expression: "for-each(delegates)"
      range: "(65,58)-(65,66)"
      evaluatedAs: true
    - lineNumber: 69
      expression: "this.multicaster != null"
      range: "(69,7)-(69,30)"
      evaluatedAs: true
- method:
    name: "setOrder"
    sourceCodeSignature: "void setOrder(int order)"
    returnType: "void"
    parameters:
    - name: "order"
      type: "int"
    instructionFingerprint: "F88C98C2D7593841680C2CA0FECB4028"
  paths:
  - pathId: "path1"
    testPathName: "setOrderTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "508F327E707578A7601DD6859FED6F5D"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "getOrder"
    sourceCodeSignature: "int getOrder()"
    returnType: "int"
    instructionFingerprint: "342D4E4F854A43E567A525BCBCDEA20C"
  paths:
  - pathId: "path1"
    testPathName: "getOrderTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "950510E7803AD5B65C26B3CD5AAAE188"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
