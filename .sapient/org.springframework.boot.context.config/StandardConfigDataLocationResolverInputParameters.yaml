---
modelFingerprint: "0D930FF141E21607EC60DAF9F1948C30"
targetClass:
  fullClassName: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
methods:
- method:
    name: "getOrder"
    sourceCodeSignature: "int getOrder()"
    returnType: "int"
    instructionFingerprint: "B3FE1F447F1436B3B1DD16C4601C95C8"
  paths:
  - pathId: "path1"
    testPathName: "getOrderTest"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "129C1E7FA0AFCDDCE1BECC1311A240A9"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "isResolvable"
    sourceCodeSignature: "boolean isResolvable(ConfigDataLocationResolverContext context,\
      \ ConfigDataLocation location)"
    returnType: "boolean"
    parameters:
    - name: "context"
      type: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
    - name: "location"
      type: "org.springframework.boot.context.config.ConfigDataLocation"
    instructionFingerprint: "0F7DB8325821D7E8DD5A605DA2BE878F"
  paths:
  - pathId: "path1"
    testPathName: "isResolvableTest"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "30922EA39BA385B5ECB3FCAA90F63527"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "6B0C45E6FFB6764C84898E62EF2696B3"
      valueUuid: "location"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid9):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid10,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid12,target:uniqueUuid13):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "C592C3A24850588E03CC8C49683336A2"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid15,messageSupplier:uniqueUuid16):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid11"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid12"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid13"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid14"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid15"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid16"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "resolve"
    sourceCodeSignature: "List<StandardConfigDataResource> resolve(ConfigDataLocationResolverContext\
      \ context, ConfigDataLocation location)"
    returnType: "java.util.List"
    genericReturnType: "org.springframework.boot.context.config.StandardConfigDataResource"
    throwsExceptions:
    - "org.springframework.boot.context.config.ConfigDataNotFoundException"
    parameters:
    - name: "context"
      type: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
    - name: "location"
      type: "org.springframework.boot.context.config.ConfigDataLocation"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.RuntimeException"
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.RuntimeException"
    instructionFingerprint: "EAEF6F3D1FF270B9F339F01E626C1FCB"
  paths:
  - pathId: "path33"
    testPathName: "resolveWhenIsDirectoryResourceLocationAndThisConfigNamesIsEmptyAndCaughtRuntimeExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "7BF69243416AE5C9137124E47999DD29"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "E27975AA314F1EE81E6AE4F6783773CE"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid17):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid18,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid20,target:uniqueUuid21):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid23,messageSupplier:uniqueUuid24):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid25):string2"
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "A3A8416E579D6FE19C9194D669AEE25F"
      valueUuid: "context"
      methodExercised:
        expression: "getParent():configDataResource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "2D67FE2470F21C9A479C86B9D87EAE9A"
      valueUuid: "configDataResource"
      methodExercised:
        expression: "getReference():standardConfigDataReference"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "7A2934A83869C5D4376A3053C15157D4"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8609BB84690B9E77D20DBA5361AF76FD"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid17"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid18"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid19"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid20"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid21"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid22"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid23"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid24"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
      nameForMock: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid25"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "message1"
            valueType: "java.lang.String"
            uuid: "string6"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.RuntimeException"
              parameters: []
            valueType: "java.lang.RuntimeException"
            uuid: "runtimeException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 127
      expression: "for-each(configDataLocations)"
      range: "(127,48)-(127,66)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 173
      expression: "parent instanceof StandardConfigDataResource resource"
      range: "(173,7)-(173,59)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: true
      internalMethodName: "isDirectory"
    - lineNumber: 137
      expression: "isDirectory(resourceLocation)"
      range: "(137,8)-(137,36)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 192
      expression: "for-each(this.configNames)"
      range: "(192,22)-(192,37)"
      evaluatedAs: false
      internalMethodName: "getReferencesForDirectory"
    - lineNumber: 142
      expression: "catch-exception (RuntimeException)"
      range: "(142,3)-(142,28)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    catchBlockExercised:
      idExternalInstruction: 30
      id: 1
      catchExceptions:
      - "java.lang.RuntimeException"
  - pathId: "path34"
    testPathName: "resolveWhenResourceLocationEndsWith_AndIsDirectoryResourceLocationAndThisConfigNamesIsEmptyAThrowsIllegalStateException"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "090A5BEF9AB8B8E0EED8CBDA46ED5D86"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "E27975AA314F1EE81E6AE4F6783773CE"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid26):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid27,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid29,target:uniqueUuid30):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid32,messageSupplier:uniqueUuid33):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid34):string2"
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "8C79A2DC321F85FAEBBCA6E417AF2498"
      valueUuid: "context"
      methodExercised:
        expression: "getParent():configDataResource"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8609BB84690B9E77D20DBA5361AF76FD"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid26"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid27"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid28"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid29"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid30"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid31"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid32"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid33"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
      nameForMock: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid34"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "message1"
            valueType: "java.lang.String"
            uuid: "string3"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.RuntimeException"
              parameters: []
            valueType: "java.lang.RuntimeException"
            uuid: "runtimeException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 127
      expression: "for-each(configDataLocations)"
      range: "(127,48)-(127,66)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 173
      expression: "parent instanceof StandardConfigDataResource resource"
      range: "(173,7)-(173,59)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: true
      internalMethodName: "isDirectory"
    - lineNumber: 137
      expression: "isDirectory(resourceLocation)"
      range: "(137,8)-(137,36)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 192
      expression: "for-each(this.configNames)"
      range: "(192,22)-(192,37)"
      evaluatedAs: false
      internalMethodName: "getReferencesForDirectory"
    - lineNumber: 142
      expression: "catch-exception (RuntimeException)"
      range: "(142,3)-(142,28)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    catchBlockExercised:
      idExternalInstruction: 30
      id: 1
      catchExceptions:
      - "java.lang.RuntimeException"
  - pathId: "path30"
    testPathName: "resolveWhenThisPropertySourceLoadersIsEmptyAndCaughtRuntimeExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "42417BCE3A92073499A717DDCA812B25"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid35):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid36,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid38,target:uniqueUuid39):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid41,messageSupplier:uniqueUuid42):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid43):string2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8609BB84690B9E77D20DBA5361AF76FD"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid35"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid36"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid37"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid38"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid39"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid40"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid41"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid42"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
      nameForMock: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid43"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "message1"
            valueType: "java.lang.String"
            uuid: "string5"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.RuntimeException"
              parameters: []
            valueType: "java.lang.RuntimeException"
            uuid: "runtimeException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 127
      expression: "for-each(configDataLocations)"
      range: "(127,48)-(127,66)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(File.separator)"
      range: "(248,44)-(248,84)"
      evaluatedAs: true
      internalMethodName: "isDirectory"
    - lineNumber: 137
      expression: "isDirectory(resourceLocation)"
      range: "(137,8)-(137,36)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 192
      expression: "for-each(this.configNames)"
      range: "(192,22)-(192,37)"
      evaluatedAs: true
      internalMethodName: "getReferencesForDirectory"
    - lineNumber: 203
      expression: "for-each(this.propertySourceLoaders)"
      range: "(203,52)-(203,77)"
      evaluatedAs: false
      internalMethodName: "getReferencesForConfigName"
    - lineNumber: 142
      expression: "catch-exception (RuntimeException)"
      range: "(142,3)-(142,28)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    catchBlockExercised:
      idExternalInstruction: 30
      id: 1
      catchExceptions:
      - "java.lang.RuntimeException"
  - pathId: "path27"
    testPathName: "resolveWhenReferencesIsEmptyAndResolvedIsEmptyAndReferencesIsEmpty"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "377664BD146893E05727022035446318"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "E27975AA314F1EE81E6AE4F6783773CE"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid44):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid45,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid47,target:uniqueUuid48):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid50,messageSupplier:uniqueUuid51):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid52):string2"
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "A3A8416E579D6FE19C9194D669AEE25F"
      valueUuid: "context"
      methodExercised:
        expression: "getParent():configDataResource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "2D67FE2470F21C9A479C86B9D87EAE9A"
      valueUuid: "configDataResource"
      methodExercised:
        expression: "getReference():standardConfigDataReference"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "7A2934A83869C5D4376A3053C15157D4"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0B2E30F4A7104A4946F5D72DFBEDF005"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid44"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid45"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid46"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid47"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid48"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid49"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid50"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid51"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid52"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "arrayList"
    branches:
    - lineNumber: 127
      expression: "for-each(configDataLocations)"
      range: "(127,48)-(127,66)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 173
      expression: "parent instanceof StandardConfigDataResource resource"
      range: "(173,7)-(173,59)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: true
      internalMethodName: "isDirectory"
    - lineNumber: 137
      expression: "isDirectory(resourceLocation)"
      range: "(137,8)-(137,36)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 192
      expression: "for-each(this.configNames)"
      range: "(192,22)-(192,37)"
      evaluatedAs: false
      internalMethodName: "getReferencesForDirectory"
    - lineNumber: 253
      expression: "for-each(references)"
      range: "(253,48)-(253,57)"
      evaluatedAs: false
      internalMethodName: "resolve"
    - lineNumber: 256
      expression: "resolved.isEmpty()"
      range: "(256,7)-(256,24)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 265
      expression: "for-each(references)"
      range: "(265,48)-(265,57)"
      evaluatedAs: false
      internalMethodName: "resolveEmptyDirectories"
  - pathId: "path28"
    testPathName: "resolveWhenThisConfigNamesIsEmptyAndReferencesIsEmptyAndResolvedIsEmptyAndReferencesIsEmpty"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "7DECC5512489BA0B38C15926B7AF753A"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "E27975AA314F1EE81E6AE4F6783773CE"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid53):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid54,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid56,target:uniqueUuid57):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid59,messageSupplier:uniqueUuid60):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid61):string2"
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "8C79A2DC321F85FAEBBCA6E417AF2498"
      valueUuid: "context"
      methodExercised:
        expression: "getParent():configDataResource"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0B2E30F4A7104A4946F5D72DFBEDF005"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid53"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid54"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid55"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid56"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid57"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid58"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid59"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid60"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid61"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "arrayList"
    branches:
    - lineNumber: 127
      expression: "for-each(configDataLocations)"
      range: "(127,48)-(127,66)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 173
      expression: "parent instanceof StandardConfigDataResource resource"
      range: "(173,7)-(173,59)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: true
      internalMethodName: "isDirectory"
    - lineNumber: 137
      expression: "isDirectory(resourceLocation)"
      range: "(137,8)-(137,36)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 192
      expression: "for-each(this.configNames)"
      range: "(192,22)-(192,37)"
      evaluatedAs: false
      internalMethodName: "getReferencesForDirectory"
    - lineNumber: 253
      expression: "for-each(references)"
      range: "(253,48)-(253,57)"
      evaluatedAs: false
      internalMethodName: "resolve"
    - lineNumber: 256
      expression: "resolved.isEmpty()"
      range: "(256,7)-(256,24)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 265
      expression: "for-each(references)"
      range: "(265,48)-(265,57)"
      evaluatedAs: false
      internalMethodName: "resolveEmptyDirectories"
  - pathId: "path19"
    testPathName: "resolveWhenStringUtilsNotEndsWithIgnoreCaseFileFileExtensionAndExtensionIsNullAndConfigDataLThrowsIllegalStateException"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "ABD57E1B75AA07FEBC8C6A61FD7A82AD"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid62):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid63,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid65,target:uniqueUuid66):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid68,messageSupplier:uniqueUuid69):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid70):string2"
    - type: "LOCAL_VARIABLE"
      name: "loader"
      modelFingerprint: "59890511608BA3E4B3CBC6D6B2CD235E"
      valueUuid: "object2"
      methodExercised:
        expression: "getFileExtensions():stringArray2"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "1061E3A8998F01722AF520B750478C6E"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWithIgnoreCase(str:string6,suffix:string7):boolean8"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "C78D902E08116733215C7579B7680694"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "isOptional():boolean10"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8609BB84690B9E77D20DBA5361AF76FD"
      valueUuid: "illegalStateException2"
    disabled: true
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid62"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid63"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid64"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid65"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid66"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid67"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid68"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid69"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
      nameForMock: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid70"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "object2"
      collectionUuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
      nameForMock: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean10"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "message1"
            valueType: "java.lang.String"
            uuid: "string9"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.RuntimeException"
              parameters: []
            valueType: "java.lang.RuntimeException"
            uuid: "runtimeException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException2"
      fixed: true
    branches:
    - lineNumber: 127
      expression: "for-each(configDataLocations)"
      range: "(127,48)-(127,66)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(File.separator)"
      range: "(248,44)-(248,84)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 137
      expression: "isDirectory(resourceLocation)"
      range: "(137,8)-(137,36)"
      evaluatedAs: false
      internalMethodName: "getReferences"
    - lineNumber: 219
      expression: "extensionHintLocation"
      range: "(219,7)-(219,27)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 222
      expression: "for-each(this.propertySourceLoaders)"
      range: "(222,52)-(222,77)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 239
      expression: "for-each(loader.getFileExtensions())"
      range: "(239,31)-(239,56)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 240
      expression: "StringUtils.endsWithIgnoreCase(file, fileExtension)"
      range: "(240,8)-(240,58)"
      evaluatedAs: false
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 224
      expression: "extension != null"
      range: "(224,8)-(224,24)"
      evaluatedAs: false
      internalMethodName: "getReferencesForFile"
    - lineNumber: 231
      expression: "configDataLocation.isOptional()"
      range: "(231,7)-(231,37)"
      evaluatedAs: false
      internalMethodName: "getReferencesForFile"
  - pathId: "path1"
    testPathName: "resolveWhenReferencesNotContainsReferenceAndReferencesIsEmptyAndResolvedIsEmptyAndReferencesIsEmpty"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "07F2EAE18C7D421EA62EEB96A132476C"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid71):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid72,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid74,target:uniqueUuid75):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid77,messageSupplier:uniqueUuid78):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid79):string2"
    - type: "LOCAL_VARIABLE"
      name: "propertySourceLoader"
      modelFingerprint: "59890511608BA3E4B3CBC6D6B2CD235E"
      valueUuid: "object2"
      methodExercised:
        expression: "getFileExtensions():stringArray2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0B2E30F4A7104A4946F5D72DFBEDF005"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Deque.addFirst(org.springframework.boot.context.config.StandardConfigDataReference)\
        \ : void"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid71"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid72"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid73"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid74"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid75"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid76"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid77"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid78"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid79"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "object2"
      collectionUuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "arrayList"
    branches:
    - lineNumber: 127
      expression: "for-each(configDataLocations)"
      range: "(127,48)-(127,66)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(File.separator)"
      range: "(248,44)-(248,84)"
      evaluatedAs: true
      internalMethodName: "isDirectory"
    - lineNumber: 137
      expression: "isDirectory(resourceLocation)"
      range: "(137,8)-(137,36)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 192
      expression: "for-each(this.configNames)"
      range: "(192,22)-(192,37)"
      evaluatedAs: true
      internalMethodName: "getReferencesForDirectory"
    - lineNumber: 203
      expression: "for-each(this.propertySourceLoaders)"
      range: "(203,52)-(203,77)"
      evaluatedAs: true
      internalMethodName: "getReferencesForConfigName"
    - lineNumber: 204
      expression: "for-each(propertySourceLoader.getFileExtensions())"
      range: "(204,28)-(204,67)"
      evaluatedAs: true
      internalMethodName: "getReferencesForConfigName"
    - lineNumber: 207
      expression: "!references.contains(reference)"
      range: "(207,9)-(207,39)"
      evaluatedAs: true
      internalMethodName: "getReferencesForConfigName"
    - lineNumber: 253
      expression: "for-each(references)"
      range: "(253,48)-(253,57)"
      evaluatedAs: false
      internalMethodName: "resolve"
    - lineNumber: 256
      expression: "resolved.isEmpty()"
      range: "(256,7)-(256,24)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 265
      expression: "for-each(references)"
      range: "(265,48)-(265,57)"
      evaluatedAs: false
      internalMethodName: "resolveEmptyDirectories"
  - pathId: "path17"
    testPathName: "resolveWhenStringUtilsEndsWithIgnoreCaseFileFileExtensionAndExtensionIsNullAndConfigDataLocationIsOptionalAndReferences"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "FAE91D997CB3B4FD9DDE5C05A9290FFB"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid80):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid81,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid83,target:uniqueUuid84):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid86,messageSupplier:uniqueUuid87):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid88):string2"
    - type: "LOCAL_VARIABLE"
      name: "loader"
      modelFingerprint: "59890511608BA3E4B3CBC6D6B2CD235E"
      valueUuid: "object2"
      methodExercised:
        expression: "getFileExtensions():stringArray2"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "7DD1F1A7206794F634C525D09ACFBE23"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWithIgnoreCase(str:string6,suffix:string7):boolean8"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "C78D902E08116733215C7579B7680694"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "isOptional():boolean10"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0B2E30F4A7104A4946F5D72DFBEDF005"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid80"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid81"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid82"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid83"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid84"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid85"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid86"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid87"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid88"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "object2"
      collectionUuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean10"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "arrayList"
    branches:
    - lineNumber: 127
      expression: "for-each(configDataLocations)"
      range: "(127,48)-(127,66)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(File.separator)"
      range: "(248,44)-(248,84)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 137
      expression: "isDirectory(resourceLocation)"
      range: "(137,8)-(137,36)"
      evaluatedAs: false
      internalMethodName: "getReferences"
    - lineNumber: 219
      expression: "extensionHintLocation"
      range: "(219,7)-(219,27)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 222
      expression: "for-each(this.propertySourceLoaders)"
      range: "(222,52)-(222,77)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 239
      expression: "for-each(loader.getFileExtensions())"
      range: "(239,31)-(239,56)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 240
      expression: "StringUtils.endsWithIgnoreCase(file, fileExtension)"
      range: "(240,8)-(240,58)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 224
      expression: "extension != null"
      range: "(224,8)-(224,24)"
      evaluatedAs: false
      internalMethodName: "getReferencesForFile"
    - lineNumber: 231
      expression: "configDataLocation.isOptional()"
      range: "(231,7)-(231,37)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 253
      expression: "for-each(references)"
      range: "(253,48)-(253,57)"
      evaluatedAs: false
      internalMethodName: "resolve"
    - lineNumber: 256
      expression: "resolved.isEmpty()"
      range: "(256,7)-(256,24)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 265
      expression: "for-each(references)"
      range: "(265,48)-(265,57)"
      evaluatedAs: false
      internalMethodName: "resolveEmptyDirectories"
  - pathId: "path11"
    testPathName: "resolveWhenReferenceNotIsSkippableAndResolvedNotIsEmpty"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "1A81E6CA2F9A21D2D0DBA8B67C104ECE"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid89):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid90,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid92,target:uniqueUuid93):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid95,messageSupplier:uniqueUuid96):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid97):string2"
    - type: "LOCAL_VARIABLE"
      name: "loader"
      modelFingerprint: "59890511608BA3E4B3CBC6D6B2CD235E"
      valueUuid: "object2"
      methodExercised:
        expression: "getFileExtensions():stringArray2"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "1061E3A8998F01722AF520B750478C6E"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWithIgnoreCase(str:string6,suffix:string7):boolean8"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "47FE0349BB9A09F900845972B3FB6BE6"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string9"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "137C3888C517EBF0BE9C7F622D975B09"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string9):boolean11"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "47FE0349BB9A09F900845972B3FB6BE6"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string10"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "B40070C228BF86F0E4B38B738ECB852E"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResource(location:string10):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean12"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "3A8C408A802597B2EDBCEE5D0A447921"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "isSkippable():boolean13"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "08E99974DE763B1BFB1F51FE67418872"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "if (!this.resourceLoader.isPattern(reference.getResourceLocation()))\
        \ {"
      lineNumber: 300
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: reference - Method: getResourceLocation"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid89"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid90"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid91"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid92"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid93"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid94"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid95"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid96"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid97"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "object2"
      collectionUuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid104"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid105"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid106"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean11"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid104"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid105"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid106"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid104"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid105"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid106"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean13"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.context.config.StandardConfigDataResource"
            parameters:
            - name: "reference"
              value:
                sapientType: "OBJECT"
                content: !<new>
                  target: "org.springframework.boot.context.config.StandardConfigDataReference"
                  parameters:
                  - name: "configDataLocation"
                    value:
                      sapientType: "MOCK"
                      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
                      uuid: "configDataLocation"
                  - name: "directory"
                    value:
                      sapientType: "NULL"
                      valueType: "java.lang.String"
                  - name: "root"
                    value:
                      sapientType: "BASIC"
                      content: !<regular>
                        value: "root1"
                      valueType: "java.lang.String"
                      uuid: "string8"
                  - name: "profile"
                    value:
                      sapientType: "BASIC"
                      content: !<regular>
                        value: "profile1"
                      valueType: "java.lang.String"
                  - name: "extension"
                    value:
                      sapientType: "NULL"
                      valueType: "java.lang.String"
                  - name: "propertySourceLoader"
                    value:
                      sapientType: "MOCK"
                      valueType: "org.springframework.boot.env.PropertySourceLoader"
                      uuid: "object2"
                      collectionUuid: "list"
                valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
                uuid: "standardConfigDataReference"
                collectionUuid: "linkedHashSet"
            - name: "resource"
              value:
                sapientType: "MOCK"
                valueType: "org.springframework.core.io.Resource"
                uuid: "resource"
          valueType: "org.springframework.boot.context.config.StandardConfigDataResource"
          uuid: "standardConfigDataResource"
          fixed: true
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "arrayList"
    branches:
    - lineNumber: 127
      expression: "for-each(configDataLocations)"
      range: "(127,48)-(127,66)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(File.separator)"
      range: "(248,44)-(248,84)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 137
      expression: "isDirectory(resourceLocation)"
      range: "(137,8)-(137,36)"
      evaluatedAs: false
      internalMethodName: "getReferences"
    - lineNumber: 219
      expression: "extensionHintLocation"
      range: "(219,7)-(219,27)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 222
      expression: "for-each(this.propertySourceLoaders)"
      range: "(222,52)-(222,77)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 239
      expression: "for-each(loader.getFileExtensions())"
      range: "(239,31)-(239,56)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 240
      expression: "StringUtils.endsWithIgnoreCase(file, fileExtension)"
      range: "(240,8)-(240,58)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 224
      expression: "extension != null"
      range: "(224,8)-(224,24)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 227
      expression: "!extensionHintLocation"
      range: "(227,17)-(227,38)"
      evaluatedAs: false
      internalMethodName: "getReferencesForFile"
    - lineNumber: 253
      expression: "for-each(references)"
      range: "(253,48)-(253,57)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 300
      expression: "!this.resourceLoader.isPattern(reference.getResourceLocation())"
      range: "(300,7)-(300,69)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 308
      expression: "!resource.exists()"
      range: "(308,7)-(308,24)"
      evaluatedAs: true
      internalMethodName: "resolveNonPattern"
    - lineNumber: 308
      expression: "reference.isSkippable()"
      range: "(308,29)-(308,51)"
      evaluatedAs: false
      internalMethodName: "resolveNonPattern"
    - lineNumber: 256
      expression: "resolved.isEmpty()"
      range: "(256,7)-(256,24)"
      evaluatedAs: false
      internalMethodName: "resolve"
  - pathId: "path14"
    testPathName: "resolveWhenResourceNotExistsAndReferenceNotIsSkippableAndResolvedNotIsEmpty"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "24DDDBD9A169747FB574A21CC3D42224"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid107):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid108,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid110,target:uniqueUuid111):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid113,messageSupplier:uniqueUuid114):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid115):string2"
    - type: "LOCAL_VARIABLE"
      name: "loader"
      modelFingerprint: "59890511608BA3E4B3CBC6D6B2CD235E"
      valueUuid: "object2"
      methodExercised:
        expression: "getFileExtensions():stringArray2"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "1061E3A8998F01722AF520B750478C6E"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWithIgnoreCase(str:string6,suffix:string7):boolean8"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "47FE0349BB9A09F900845972B3FB6BE6"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string9"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "137C3888C517EBF0BE9C7F622D975B09"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string9):boolean11"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "47FE0349BB9A09F900845972B3FB6BE6"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string10"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "79448F63673395F295001F17FEFE350F"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResources(location:string10,type:Enum-org.springframework.boot.context.config.LocationResourceLoader$ResourceType-FILE):resourceArray"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean12"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "3A8C408A802597B2EDBCEE5D0A447921"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "isSkippable():boolean13"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "08E99974DE763B1BFB1F51FE67418872"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "if (!this.resourceLoader.isPattern(reference.getResourceLocation()))\
        \ {"
      lineNumber: 300
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: reference - Method: getResourceLocation"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid107"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid108"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid109"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid110"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid111"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid112"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid113"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid114"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid115"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "object2"
      collectionUuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid122"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid123"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid124"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean11"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid122"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid123"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid124"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.core.io.Resource[]"
      uuid: "resourceArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "ENUM"
      content: !<regular>
        value: "FILE"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader$ResourceType"
      uuid: "Enum-org.springframework.boot.context.config.LocationResourceLoader$ResourceType-FILE"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid122"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid123"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid124"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean13"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.context.config.StandardConfigDataResource"
            parameters:
            - name: "reference"
              value:
                sapientType: "OBJECT"
                content: !<new>
                  target: "org.springframework.boot.context.config.StandardConfigDataReference"
                  parameters:
                  - name: "configDataLocation"
                    value:
                      sapientType: "MOCK"
                      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
                      uuid: "configDataLocation"
                  - name: "directory"
                    value:
                      sapientType: "NULL"
                      valueType: "java.lang.String"
                  - name: "root"
                    value:
                      sapientType: "BASIC"
                      content: !<regular>
                        value: "root1"
                      valueType: "java.lang.String"
                      uuid: "string8"
                  - name: "profile"
                    value:
                      sapientType: "BASIC"
                      content: !<regular>
                        value: "profile1"
                      valueType: "java.lang.String"
                  - name: "extension"
                    value:
                      sapientType: "NULL"
                      valueType: "java.lang.String"
                  - name: "propertySourceLoader"
                    value:
                      sapientType: "MOCK"
                      valueType: "org.springframework.boot.env.PropertySourceLoader"
                      uuid: "object2"
                      collectionUuid: "list"
                valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
                uuid: "standardConfigDataReference"
                collectionUuid: "linkedHashSet"
            - name: "resource"
              value:
                sapientType: "MOCK"
                valueType: "org.springframework.core.io.Resource"
                uuid: "resource"
          valueType: "org.springframework.boot.context.config.StandardConfigDataResource"
          uuid: "standardConfigDataResource"
          fixed: true
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "arrayList"
    branches:
    - lineNumber: 127
      expression: "for-each(configDataLocations)"
      range: "(127,48)-(127,66)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(File.separator)"
      range: "(248,44)-(248,84)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 137
      expression: "isDirectory(resourceLocation)"
      range: "(137,8)-(137,36)"
      evaluatedAs: false
      internalMethodName: "getReferences"
    - lineNumber: 219
      expression: "extensionHintLocation"
      range: "(219,7)-(219,27)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 222
      expression: "for-each(this.propertySourceLoaders)"
      range: "(222,52)-(222,77)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 239
      expression: "for-each(loader.getFileExtensions())"
      range: "(239,31)-(239,56)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 240
      expression: "StringUtils.endsWithIgnoreCase(file, fileExtension)"
      range: "(240,8)-(240,58)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 224
      expression: "extension != null"
      range: "(224,8)-(224,24)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 227
      expression: "!extensionHintLocation"
      range: "(227,17)-(227,38)"
      evaluatedAs: false
      internalMethodName: "getReferencesForFile"
    - lineNumber: 253
      expression: "for-each(references)"
      range: "(253,48)-(253,57)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 300
      expression: "!this.resourceLoader.isPattern(reference.getResourceLocation())"
      range: "(300,7)-(300,69)"
      evaluatedAs: false
      internalMethodName: "resolve"
    - lineNumber: 317
      expression: "for-each(this.resourceLoader.getResources(reference.getResourceLocation(),\
        \ ResourceType.FILE))"
      range: "(317,28)-(317,111)"
      evaluatedAs: true
      internalMethodName: "resolvePattern"
    - lineNumber: 318
      expression: "!resource.exists()"
      range: "(318,8)-(318,25)"
      evaluatedAs: true
      internalMethodName: "resolvePattern"
    - lineNumber: 318
      expression: "reference.isSkippable()"
      range: "(318,30)-(318,52)"
      evaluatedAs: false
      internalMethodName: "resolvePattern"
    - lineNumber: 256
      expression: "resolved.isEmpty()"
      range: "(256,7)-(256,24)"
      evaluatedAs: false
      internalMethodName: "resolve"
  - pathId: "path13"
    testPathName: "resolveWhenResolvedIsEmptyAndReferencesIsNotEmptyAndReferenceGetDirectoryIsNull"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "5CF47406913637233B0E2E11B808A49C"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid125):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid126,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid128,target:uniqueUuid129):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid131,messageSupplier:uniqueUuid132):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid133):string2"
    - type: "LOCAL_VARIABLE"
      name: "loader"
      modelFingerprint: "59890511608BA3E4B3CBC6D6B2CD235E"
      valueUuid: "object2"
      methodExercised:
        expression: "getFileExtensions():stringArray2"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "1061E3A8998F01722AF520B750478C6E"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWithIgnoreCase(str:string6,suffix:string7):boolean8"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "47FE0349BB9A09F900845972B3FB6BE6"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string9"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "137C3888C517EBF0BE9C7F622D975B09"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string9):boolean11"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "47FE0349BB9A09F900845972B3FB6BE6"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string10"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "79448F63673395F295001F17FEFE350F"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResources(location:string10,type:Enum-org.springframework.boot.context.config.LocationResourceLoader$ResourceType-FILE):resourceArray"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean12"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "3A8C408A802597B2EDBCEE5D0A447921"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "isSkippable():boolean13"
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "BD640ED98E358C0E062A9E5A4278425B"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid143,arg1:standardConfigDataReference):logMessage"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "00075EDEF5C083BAFA9EA259DA2533FD"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getDirectory():string11"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0B2E30F4A7104A4946F5D72DFBEDF005"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "if (!this.resourceLoader.isPattern(reference.getResourceLocation()))\
        \ {"
      lineNumber: 300
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: reference - Method: getResourceLocation"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid125"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid126"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid127"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid128"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid129"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid130"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid131"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid132"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid133"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "object2"
      collectionUuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid147"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid148"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid149"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean11"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid147"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid148"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid149"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.core.io.Resource[]"
      uuid: "resourceArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "ENUM"
      content: !<regular>
        value: "FILE"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader$ResourceType"
      uuid: "Enum-org.springframework.boot.context.config.LocationResourceLoader$ResourceType-FILE"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid147"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid148"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid149"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean13"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Skipping missing resource %s"
      valueType: "java.lang.String"
      uuid: "uniqueUuid143"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid147"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid148"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid149"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid147"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid148"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid149"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string11"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "arrayList"
    branches:
    - lineNumber: 127
      expression: "for-each(configDataLocations)"
      range: "(127,48)-(127,66)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(File.separator)"
      range: "(248,44)-(248,84)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 137
      expression: "isDirectory(resourceLocation)"
      range: "(137,8)-(137,36)"
      evaluatedAs: false
      internalMethodName: "getReferences"
    - lineNumber: 219
      expression: "extensionHintLocation"
      range: "(219,7)-(219,27)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 222
      expression: "for-each(this.propertySourceLoaders)"
      range: "(222,52)-(222,77)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 239
      expression: "for-each(loader.getFileExtensions())"
      range: "(239,31)-(239,56)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 240
      expression: "StringUtils.endsWithIgnoreCase(file, fileExtension)"
      range: "(240,8)-(240,58)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 224
      expression: "extension != null"
      range: "(224,8)-(224,24)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 227
      expression: "!extensionHintLocation"
      range: "(227,17)-(227,38)"
      evaluatedAs: false
      internalMethodName: "getReferencesForFile"
    - lineNumber: 253
      expression: "for-each(references)"
      range: "(253,48)-(253,57)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 300
      expression: "!this.resourceLoader.isPattern(reference.getResourceLocation())"
      range: "(300,7)-(300,69)"
      evaluatedAs: false
      internalMethodName: "resolve"
    - lineNumber: 317
      expression: "for-each(this.resourceLoader.getResources(reference.getResourceLocation(),\
        \ ResourceType.FILE))"
      range: "(317,28)-(317,111)"
      evaluatedAs: true
      internalMethodName: "resolvePattern"
    - lineNumber: 318
      expression: "!resource.exists()"
      range: "(318,8)-(318,25)"
      evaluatedAs: true
      internalMethodName: "resolvePattern"
    - lineNumber: 318
      expression: "reference.isSkippable()"
      range: "(318,30)-(318,52)"
      evaluatedAs: true
      internalMethodName: "resolvePattern"
    - lineNumber: 256
      expression: "resolved.isEmpty()"
      range: "(256,7)-(256,24)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 265
      expression: "for-each(references)"
      range: "(265,48)-(265,57)"
      evaluatedAs: true
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 266
      expression: "reference.getDirectory() != null"
      range: "(266,8)-(266,39)"
      evaluatedAs: false
      internalMethodName: "resolveEmptyDirectories"
  - pathId: "path4"
    testPathName: "resolveWhenResourceNotExists"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "5FDCEEA0D2D69AC682C0B6F5BD02F29E"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid150):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid151,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid153,target:uniqueUuid154):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid156,messageSupplier:uniqueUuid157):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid158):string2"
    - type: "LOCAL_VARIABLE"
      name: "loader"
      modelFingerprint: "59890511608BA3E4B3CBC6D6B2CD235E"
      valueUuid: "object2"
      methodExercised:
        expression: "getFileExtensions():stringArray2"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "1061E3A8998F01722AF520B750478C6E"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWithIgnoreCase(str:string6,suffix:string7):boolean8"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "47FE0349BB9A09F900845972B3FB6BE6"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string9"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "137C3888C517EBF0BE9C7F622D975B09"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string9):boolean11"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "47FE0349BB9A09F900845972B3FB6BE6"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string10"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "B40070C228BF86F0E4B38B738ECB852E"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResource(location:string10):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean12"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "3A8C408A802597B2EDBCEE5D0A447921"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "isSkippable():boolean13"
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "BD640ED98E358C0E062A9E5A4278425B"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid168,arg1:standardConfigDataReference):logMessage"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "58026D5B2873C401895C81BEE44E529E"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getDirectory():string11"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "47FE0349BB9A09F900845972B3FB6BE6"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string12"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "137C3888C517EBF0BE9C7F622D975B09"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string12):boolean18"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "58026D5B2873C401895C81BEE44E529E"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getDirectory():string13"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "B40070C228BF86F0E4B38B738ECB852E"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResource(location:string13):resource2"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource2"
      methodExercised:
        expression: "exists():boolean20"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0B2E30F4A7104A4946F5D72DFBEDF005"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "if (!this.resourceLoader.isPattern(reference.getResourceLocation()))\
        \ {"
      lineNumber: 300
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: reference - Method: getResourceLocation"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid150"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid151"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid152"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid153"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid154"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid155"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid156"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid157"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid158"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "object2"
      collectionUuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid178"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid179"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid180"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean11"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid178"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid179"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid180"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid178"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid179"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid180"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean13"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Skipping missing resource %s"
      valueType: "java.lang.String"
      uuid: "uniqueUuid168"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid178"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid179"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid180"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid178"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid179"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid180"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid178"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid179"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid180"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean18"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid178"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid179"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid180"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string13"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string13"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean20"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "arrayList"
    branches:
    - lineNumber: 127
      expression: "for-each(configDataLocations)"
      range: "(127,48)-(127,66)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(File.separator)"
      range: "(248,44)-(248,84)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 137
      expression: "isDirectory(resourceLocation)"
      range: "(137,8)-(137,36)"
      evaluatedAs: false
      internalMethodName: "getReferences"
    - lineNumber: 219
      expression: "extensionHintLocation"
      range: "(219,7)-(219,27)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 222
      expression: "for-each(this.propertySourceLoaders)"
      range: "(222,52)-(222,77)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 239
      expression: "for-each(loader.getFileExtensions())"
      range: "(239,31)-(239,56)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 240
      expression: "StringUtils.endsWithIgnoreCase(file, fileExtension)"
      range: "(240,8)-(240,58)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 224
      expression: "extension != null"
      range: "(224,8)-(224,24)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 227
      expression: "!extensionHintLocation"
      range: "(227,17)-(227,38)"
      evaluatedAs: false
      internalMethodName: "getReferencesForFile"
    - lineNumber: 253
      expression: "for-each(references)"
      range: "(253,48)-(253,57)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 300
      expression: "!this.resourceLoader.isPattern(reference.getResourceLocation())"
      range: "(300,7)-(300,69)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 308
      expression: "!resource.exists()"
      range: "(308,7)-(308,24)"
      evaluatedAs: true
      internalMethodName: "resolveNonPattern"
    - lineNumber: 308
      expression: "reference.isSkippable()"
      range: "(308,29)-(308,51)"
      evaluatedAs: true
      internalMethodName: "resolveNonPattern"
    - lineNumber: 256
      expression: "resolved.isEmpty()"
      range: "(256,7)-(256,24)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 265
      expression: "for-each(references)"
      range: "(265,48)-(265,57)"
      evaluatedAs: true
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 266
      expression: "reference.getDirectory() != null"
      range: "(266,8)-(266,39)"
      evaluatedAs: true
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 274
      expression: "!this.resourceLoader.isPattern(reference.getResourceLocation())"
      range: "(274,7)-(274,69)"
      evaluatedAs: true
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 282
      expression: "resource instanceof ClassPathResource"
      range: "(282,11)-(282,47)"
      evaluatedAs: false
      internalMethodName: "resolveNonPatternEmptyDirectories"
    - lineNumber: 282
      expression: "!resource.exists()"
      range: "(282,52)-(282,69)"
      evaluatedAs: true
      internalMethodName: "resolveNonPatternEmptyDirectories"
  - pathId: "path5"
    testPathName: "resolveWhenResourceExists"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "0195F6723C69A5238C9888302E5A4885"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid181):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid182,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid184,target:uniqueUuid185):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid187,messageSupplier:uniqueUuid188):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid189):string2"
    - type: "LOCAL_VARIABLE"
      name: "loader"
      modelFingerprint: "59890511608BA3E4B3CBC6D6B2CD235E"
      valueUuid: "object2"
      methodExercised:
        expression: "getFileExtensions():stringArray2"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "1061E3A8998F01722AF520B750478C6E"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWithIgnoreCase(str:string6,suffix:string7):boolean8"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "47FE0349BB9A09F900845972B3FB6BE6"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string9"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "137C3888C517EBF0BE9C7F622D975B09"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string9):boolean11"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "47FE0349BB9A09F900845972B3FB6BE6"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string10"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "B40070C228BF86F0E4B38B738ECB852E"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResource(location:string10):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean12"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "3A8C408A802597B2EDBCEE5D0A447921"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "isSkippable():boolean13"
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "BD640ED98E358C0E062A9E5A4278425B"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid199,arg1:standardConfigDataReference):logMessage"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "58026D5B2873C401895C81BEE44E529E"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getDirectory():string11"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "47FE0349BB9A09F900845972B3FB6BE6"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string12"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "137C3888C517EBF0BE9C7F622D975B09"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string12):boolean18"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "58026D5B2873C401895C81BEE44E529E"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getDirectory():string13"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "B40070C228BF86F0E4B38B738ECB852E"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResource(location:string13):resource2"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource2"
      methodExercised:
        expression: "exists():boolean20"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "26A140ED38CEB184E14CA3084244341A"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "if (!this.resourceLoader.isPattern(reference.getResourceLocation()))\
        \ {"
      lineNumber: 300
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: reference - Method: getResourceLocation"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid181"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid182"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid183"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid184"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid185"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid186"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid187"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid188"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid189"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "object2"
      collectionUuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid209"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid210"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid211"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean11"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid209"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid210"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid211"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid209"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid210"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid211"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean13"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Skipping missing resource %s"
      valueType: "java.lang.String"
      uuid: "uniqueUuid199"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid209"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid210"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid211"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid209"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid210"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid211"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid209"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid210"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid211"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean18"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid209"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid210"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid211"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string13"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string13"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean20"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.context.config.StandardConfigDataResource"
            parameters:
            - name: "reference"
              value:
                sapientType: "OBJECT"
                content: !<new>
                  target: "org.springframework.boot.context.config.StandardConfigDataReference"
                  parameters:
                  - name: "configDataLocation"
                    value:
                      sapientType: "MOCK"
                      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
                      uuid: "configDataLocation"
                  - name: "directory"
                    value:
                      sapientType: "NULL"
                      valueType: "java.lang.String"
                  - name: "root"
                    value:
                      sapientType: "BASIC"
                      content: !<regular>
                        value: "root1"
                      valueType: "java.lang.String"
                      uuid: "string8"
                  - name: "profile"
                    value:
                      sapientType: "BASIC"
                      content: !<regular>
                        value: "profile1"
                      valueType: "java.lang.String"
                  - name: "extension"
                    value:
                      sapientType: "NULL"
                      valueType: "java.lang.String"
                  - name: "propertySourceLoader"
                    value:
                      sapientType: "MOCK"
                      valueType: "org.springframework.boot.env.PropertySourceLoader"
                      uuid: "object2"
                      collectionUuid: "list"
                valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
                uuid: "standardConfigDataReference"
                collectionUuid: "linkedHashSet"
            - name: "resource"
              value:
                sapientType: "MOCK"
                valueType: "org.springframework.core.io.Resource"
                uuid: "resource2"
            - name: "emptyDirectory"
              value:
                sapientType: "BASIC"
                content: !<regular>
                  value: true
                valueType: "boolean"
                fixed: true
          valueType: "org.springframework.boot.context.config.StandardConfigDataResource"
          uuid: "standardConfigDataResource"
          fixed: true
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "arrayList"
    branches:
    - lineNumber: 127
      expression: "for-each(configDataLocations)"
      range: "(127,48)-(127,66)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(File.separator)"
      range: "(248,44)-(248,84)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 137
      expression: "isDirectory(resourceLocation)"
      range: "(137,8)-(137,36)"
      evaluatedAs: false
      internalMethodName: "getReferences"
    - lineNumber: 219
      expression: "extensionHintLocation"
      range: "(219,7)-(219,27)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 222
      expression: "for-each(this.propertySourceLoaders)"
      range: "(222,52)-(222,77)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 239
      expression: "for-each(loader.getFileExtensions())"
      range: "(239,31)-(239,56)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 240
      expression: "StringUtils.endsWithIgnoreCase(file, fileExtension)"
      range: "(240,8)-(240,58)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 224
      expression: "extension != null"
      range: "(224,8)-(224,24)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 227
      expression: "!extensionHintLocation"
      range: "(227,17)-(227,38)"
      evaluatedAs: false
      internalMethodName: "getReferencesForFile"
    - lineNumber: 253
      expression: "for-each(references)"
      range: "(253,48)-(253,57)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 300
      expression: "!this.resourceLoader.isPattern(reference.getResourceLocation())"
      range: "(300,7)-(300,69)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 308
      expression: "!resource.exists()"
      range: "(308,7)-(308,24)"
      evaluatedAs: true
      internalMethodName: "resolveNonPattern"
    - lineNumber: 308
      expression: "reference.isSkippable()"
      range: "(308,29)-(308,51)"
      evaluatedAs: true
      internalMethodName: "resolveNonPattern"
    - lineNumber: 256
      expression: "resolved.isEmpty()"
      range: "(256,7)-(256,24)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 265
      expression: "for-each(references)"
      range: "(265,48)-(265,57)"
      evaluatedAs: true
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 266
      expression: "reference.getDirectory() != null"
      range: "(266,8)-(266,39)"
      evaluatedAs: true
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 274
      expression: "!this.resourceLoader.isPattern(reference.getResourceLocation())"
      range: "(274,7)-(274,69)"
      evaluatedAs: true
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 282
      expression: "resource instanceof ClassPathResource"
      range: "(282,11)-(282,47)"
      evaluatedAs: false
      internalMethodName: "resolveNonPatternEmptyDirectories"
    - lineNumber: 282
      expression: "!resource.exists()"
      range: "(282,52)-(282,69)"
      evaluatedAs: false
      internalMethodName: "resolveNonPatternEmptyDirectories"
  - pathId: "path7"
    testPathName: "resolveWhenObjectUtilsIsEmptySubdirectoriesThrowsConfigDataLocationNotFoundException"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "1AAFB15525F02E1A718D3645B181C9CE"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid212):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid213,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid215,target:uniqueUuid216):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid218,messageSupplier:uniqueUuid219):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid220):string2"
    - type: "LOCAL_VARIABLE"
      name: "loader"
      modelFingerprint: "59890511608BA3E4B3CBC6D6B2CD235E"
      valueUuid: "object2"
      methodExercised:
        expression: "getFileExtensions():stringArray2"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "1061E3A8998F01722AF520B750478C6E"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWithIgnoreCase(str:string6,suffix:string7):boolean8"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "47FE0349BB9A09F900845972B3FB6BE6"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string9"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "137C3888C517EBF0BE9C7F622D975B09"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string9):boolean11"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "47FE0349BB9A09F900845972B3FB6BE6"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string10"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "B40070C228BF86F0E4B38B738ECB852E"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResource(location:string10):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean12"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "3A8C408A802597B2EDBCEE5D0A447921"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "isSkippable():boolean13"
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "BD640ED98E358C0E062A9E5A4278425B"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid230,arg1:standardConfigDataReference):logMessage"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "58026D5B2873C401895C81BEE44E529E"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getDirectory():string11"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "47FE0349BB9A09F900845972B3FB6BE6"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string12"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "137C3888C517EBF0BE9C7F622D975B09"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string12):boolean18"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "58026D5B2873C401895C81BEE44E529E"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getDirectory():string13"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "DA7700B84E60ED2F766C9EF87E16F6CA"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResources(location:string13,type:Enum-org.springframework.boot.context.config.LocationResourceLoader$ResourceType-DIRECTORY):resourceArray"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "21218BD63818E1C3C66DBBD09B46A0AA"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getConfigDataLocation():configDataLocation2"
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "2F2BACFD16C3AA3E46A8DCA9F703456F"
      valueUuid: "configDataLocation2"
      methodExercised:
        expression: "isOptional():boolean19"
    - type: "STATIC"
      name: "ObjectUtils.class"
      modelFingerprint: "CE35DFADFB3210A873EB091539B829B8"
      valueUuid: "ObjectUtils.class"
      methodExercised:
        expression: "isEmpty(array:resourceArray):boolean20"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "3248812A33847C7CF820B580DE9F0188"
      valueUuid: "configDataLocationNotFoundException"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "if (!this.resourceLoader.isPattern(reference.getResourceLocation()))\
        \ {"
      lineNumber: 300
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: reference - Method: getResourceLocation"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid212"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid213"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid214"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid215"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid216"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid217"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid218"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid219"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid220"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "object2"
      collectionUuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid243"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid244"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid245"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean11"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid243"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid244"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid245"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid243"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid244"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid245"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean13"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Skipping missing resource %s"
      valueType: "java.lang.String"
      uuid: "uniqueUuid230"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid243"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid244"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid245"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid243"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid244"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid245"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid243"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid244"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid245"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean18"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid243"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid244"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid245"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string13"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.core.io.Resource[]"
      uuid: "resourceArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string13"
    - sapientType: "ENUM"
      content: !<regular>
        value: "DIRECTORY"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader$ResourceType"
      uuid: "Enum-org.springframework.boot.context.config.LocationResourceLoader$ResourceType-DIRECTORY"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid243"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid244"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid245"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.boot.context.config.ConfigDataLocation"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.context.config.StandardConfigDataReference"
            parameters:
            - name: "configDataLocation"
              value:
                sapientType: "MOCK"
                valueType: "org.springframework.boot.context.config.ConfigDataLocation"
                uuid: "configDataLocation"
            - name: "directory"
              value:
                sapientType: "NULL"
                valueType: "java.lang.String"
            - name: "root"
              value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "root1"
                valueType: "java.lang.String"
                uuid: "string8"
            - name: "profile"
              value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "profile1"
                valueType: "java.lang.String"
            - name: "extension"
              value:
                sapientType: "NULL"
                valueType: "java.lang.String"
            - name: "propertySourceLoader"
              value:
                sapientType: "MOCK"
                valueType: "org.springframework.boot.env.PropertySourceLoader"
                uuid: "object2"
                collectionUuid: "list"
          valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
          uuid: "standardConfigDataReference"
          collectionUuid: "linkedHashSet"
        methodParameters: []
        methodName: "getConfigDataLocation"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation2"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.boot.context.config.ConfigDataLocation"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.context.config.StandardConfigDataReference"
            parameters:
            - name: "configDataLocation"
              value:
                sapientType: "MOCK"
                valueType: "org.springframework.boot.context.config.ConfigDataLocation"
                uuid: "configDataLocation"
            - name: "directory"
              value:
                sapientType: "NULL"
                valueType: "java.lang.String"
            - name: "root"
              value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "root1"
                valueType: "java.lang.String"
                uuid: "string8"
            - name: "profile"
              value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "profile1"
                valueType: "java.lang.String"
            - name: "extension"
              value:
                sapientType: "NULL"
                valueType: "java.lang.String"
            - name: "propertySourceLoader"
              value:
                sapientType: "MOCK"
                valueType: "org.springframework.boot.env.PropertySourceLoader"
                uuid: "object2"
                collectionUuid: "list"
          valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
          uuid: "standardConfigDataReference"
          collectionUuid: "linkedHashSet"
        methodParameters: []
        methodName: "getConfigDataLocation"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean19"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ObjectUtils"
      uuid: "ObjectUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean20"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.core.io.Resource[]"
      uuid: "resourceArray"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigDataLocationNotFoundException"
        parameters:
        - name: "location"
          value:
            sapientType: "OBJECT"
            content: !<method_return_from_value>
              target: "org.springframework.boot.context.config.ConfigDataLocation"
              localVariableValue:
                sapientType: "OBJECT"
                content: !<new>
                  target: "org.springframework.boot.context.config.StandardConfigDataReference"
                  parameters:
                  - name: "configDataLocation"
                    value:
                      sapientType: "MOCK"
                      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
                      uuid: "configDataLocation"
                  - name: "directory"
                    value:
                      sapientType: "NULL"
                      valueType: "java.lang.String"
                  - name: "root"
                    value:
                      sapientType: "BASIC"
                      content: !<regular>
                        value: "root1"
                      valueType: "java.lang.String"
                      uuid: "string8"
                  - name: "profile"
                    value:
                      sapientType: "BASIC"
                      content: !<regular>
                        value: "profile1"
                      valueType: "java.lang.String"
                  - name: "extension"
                    value:
                      sapientType: "NULL"
                      valueType: "java.lang.String"
                  - name: "propertySourceLoader"
                    value:
                      sapientType: "MOCK"
                      valueType: "org.springframework.boot.env.PropertySourceLoader"
                      uuid: "object2"
                      collectionUuid: "list"
                valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
                uuid: "standardConfigDataReference"
                collectionUuid: "linkedHashSet"
              methodParameters: []
              methodName: "getConfigDataLocation"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation2"
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "message1"
            valueType: "java.lang.String"
            uuid: "string14"
        - name: "cause"
          value:
            sapientType: "NULL"
            valueType: "java.lang.Throwable"
            uuid: "uniqueUuid246"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationNotFoundException"
      uuid: "configDataLocationNotFoundException"
      fixed: true
    branches:
    - lineNumber: 127
      expression: "for-each(configDataLocations)"
      range: "(127,48)-(127,66)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(File.separator)"
      range: "(248,44)-(248,84)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 137
      expression: "isDirectory(resourceLocation)"
      range: "(137,8)-(137,36)"
      evaluatedAs: false
      internalMethodName: "getReferences"
    - lineNumber: 219
      expression: "extensionHintLocation"
      range: "(219,7)-(219,27)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 222
      expression: "for-each(this.propertySourceLoaders)"
      range: "(222,52)-(222,77)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 239
      expression: "for-each(loader.getFileExtensions())"
      range: "(239,31)-(239,56)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 240
      expression: "StringUtils.endsWithIgnoreCase(file, fileExtension)"
      range: "(240,8)-(240,58)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 224
      expression: "extension != null"
      range: "(224,8)-(224,24)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 227
      expression: "!extensionHintLocation"
      range: "(227,17)-(227,38)"
      evaluatedAs: false
      internalMethodName: "getReferencesForFile"
    - lineNumber: 253
      expression: "for-each(references)"
      range: "(253,48)-(253,57)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 300
      expression: "!this.resourceLoader.isPattern(reference.getResourceLocation())"
      range: "(300,7)-(300,69)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 308
      expression: "!resource.exists()"
      range: "(308,7)-(308,24)"
      evaluatedAs: true
      internalMethodName: "resolveNonPattern"
    - lineNumber: 308
      expression: "reference.isSkippable()"
      range: "(308,29)-(308,51)"
      evaluatedAs: true
      internalMethodName: "resolveNonPattern"
    - lineNumber: 256
      expression: "resolved.isEmpty()"
      range: "(256,7)-(256,24)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 265
      expression: "for-each(references)"
      range: "(265,48)-(265,57)"
      evaluatedAs: true
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 266
      expression: "reference.getDirectory() != null"
      range: "(266,8)-(266,39)"
      evaluatedAs: true
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 274
      expression: "!this.resourceLoader.isPattern(reference.getResourceLocation())"
      range: "(274,7)-(274,69)"
      evaluatedAs: false
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 289
      expression: "!location.isOptional()"
      range: "(289,7)-(289,28)"
      evaluatedAs: true
      internalMethodName: "resolvePatternEmptyDirectories"
    - lineNumber: 289
      expression: "ObjectUtils.isEmpty(subdirectories)"
      range: "(289,33)-(289,67)"
      evaluatedAs: true
      internalMethodName: "resolvePatternEmptyDirectories"
  - pathId: "path8"
    testPathName: "resolveWhenObjectUtilsNotIsEmptySubdirectories"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "D863B786AE9F4C101A2AD13DC2A5399F"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid247):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid248,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid250,target:uniqueUuid251):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid253,messageSupplier:uniqueUuid254):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid255):string2"
    - type: "LOCAL_VARIABLE"
      name: "loader"
      modelFingerprint: "59890511608BA3E4B3CBC6D6B2CD235E"
      valueUuid: "object2"
      methodExercised:
        expression: "getFileExtensions():stringArray2"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "1061E3A8998F01722AF520B750478C6E"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWithIgnoreCase(str:string6,suffix:string7):boolean8"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "47FE0349BB9A09F900845972B3FB6BE6"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string9"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "137C3888C517EBF0BE9C7F622D975B09"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string9):boolean11"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "47FE0349BB9A09F900845972B3FB6BE6"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string10"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "B40070C228BF86F0E4B38B738ECB852E"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResource(location:string10):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean12"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "3A8C408A802597B2EDBCEE5D0A447921"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "isSkippable():boolean13"
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "BD640ED98E358C0E062A9E5A4278425B"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid265,arg1:standardConfigDataReference):logMessage"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "58026D5B2873C401895C81BEE44E529E"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getDirectory():string11"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "47FE0349BB9A09F900845972B3FB6BE6"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string12"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "137C3888C517EBF0BE9C7F622D975B09"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string12):boolean18"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "58026D5B2873C401895C81BEE44E529E"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getDirectory():string13"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "DA7700B84E60ED2F766C9EF87E16F6CA"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResources(location:string13,type:Enum-org.springframework.boot.context.config.LocationResourceLoader$ResourceType-DIRECTORY):resourceArray"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "21218BD63818E1C3C66DBBD09B46A0AA"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getConfigDataLocation():configDataLocation2"
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "2F2BACFD16C3AA3E46A8DCA9F703456F"
      valueUuid: "configDataLocation2"
      methodExercised:
        expression: "isOptional():boolean19"
    - type: "STATIC"
      name: "ObjectUtils.class"
      modelFingerprint: "CE35DFADFB3210A873EB091539B829B8"
      valueUuid: "ObjectUtils.class"
      methodExercised:
        expression: "isEmpty(array:resourceArray):boolean20"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5B4A067A99D5812A120D5FD0EE735C95"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "if (!this.resourceLoader.isPattern(reference.getResourceLocation()))\
        \ {"
      lineNumber: 300
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: reference - Method: getResourceLocation"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid247"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid248"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid249"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid250"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid251"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid252"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid253"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid254"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid255"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "object2"
      collectionUuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid278"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid279"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid280"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean11"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid278"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid279"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid280"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid278"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid279"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid280"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean13"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Skipping missing resource %s"
      valueType: "java.lang.String"
      uuid: "uniqueUuid265"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid278"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid279"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid280"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid278"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid279"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid280"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid278"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid279"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid280"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean18"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid278"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid279"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid280"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string13"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.core.io.Resource[]"
      uuid: "resourceArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string13"
    - sapientType: "ENUM"
      content: !<regular>
        value: "DIRECTORY"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader$ResourceType"
      uuid: "Enum-org.springframework.boot.context.config.LocationResourceLoader$ResourceType-DIRECTORY"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid278"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid279"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid280"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object2"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.boot.context.config.ConfigDataLocation"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.context.config.StandardConfigDataReference"
            parameters:
            - name: "configDataLocation"
              value:
                sapientType: "MOCK"
                valueType: "org.springframework.boot.context.config.ConfigDataLocation"
                uuid: "configDataLocation"
            - name: "directory"
              value:
                sapientType: "NULL"
                valueType: "java.lang.String"
            - name: "root"
              value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "root1"
                valueType: "java.lang.String"
                uuid: "string8"
            - name: "profile"
              value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "profile1"
                valueType: "java.lang.String"
            - name: "extension"
              value:
                sapientType: "NULL"
                valueType: "java.lang.String"
            - name: "propertySourceLoader"
              value:
                sapientType: "MOCK"
                valueType: "org.springframework.boot.env.PropertySourceLoader"
                uuid: "object2"
                collectionUuid: "list"
          valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
          uuid: "standardConfigDataReference"
          collectionUuid: "linkedHashSet"
        methodParameters: []
        methodName: "getConfigDataLocation"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation2"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.boot.context.config.ConfigDataLocation"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.context.config.StandardConfigDataReference"
            parameters:
            - name: "configDataLocation"
              value:
                sapientType: "MOCK"
                valueType: "org.springframework.boot.context.config.ConfigDataLocation"
                uuid: "configDataLocation"
            - name: "directory"
              value:
                sapientType: "NULL"
                valueType: "java.lang.String"
            - name: "root"
              value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "root1"
                valueType: "java.lang.String"
                uuid: "string8"
            - name: "profile"
              value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "profile1"
                valueType: "java.lang.String"
            - name: "extension"
              value:
                sapientType: "NULL"
                valueType: "java.lang.String"
            - name: "propertySourceLoader"
              value:
                sapientType: "MOCK"
                valueType: "org.springframework.boot.env.PropertySourceLoader"
                uuid: "object2"
                collectionUuid: "list"
          valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
          uuid: "standardConfigDataReference"
          collectionUuid: "linkedHashSet"
        methodParameters: []
        methodName: "getConfigDataLocation"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean19"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ObjectUtils"
      uuid: "ObjectUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean20"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.core.io.Resource[]"
      uuid: "resourceArray"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "arrayList"
    branches:
    - lineNumber: 127
      expression: "for-each(configDataLocations)"
      range: "(127,48)-(127,66)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(File.separator)"
      range: "(248,44)-(248,84)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 137
      expression: "isDirectory(resourceLocation)"
      range: "(137,8)-(137,36)"
      evaluatedAs: false
      internalMethodName: "getReferences"
    - lineNumber: 219
      expression: "extensionHintLocation"
      range: "(219,7)-(219,27)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 222
      expression: "for-each(this.propertySourceLoaders)"
      range: "(222,52)-(222,77)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 239
      expression: "for-each(loader.getFileExtensions())"
      range: "(239,31)-(239,56)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 240
      expression: "StringUtils.endsWithIgnoreCase(file, fileExtension)"
      range: "(240,8)-(240,58)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 224
      expression: "extension != null"
      range: "(224,8)-(224,24)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 227
      expression: "!extensionHintLocation"
      range: "(227,17)-(227,38)"
      evaluatedAs: false
      internalMethodName: "getReferencesForFile"
    - lineNumber: 253
      expression: "for-each(references)"
      range: "(253,48)-(253,57)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 300
      expression: "!this.resourceLoader.isPattern(reference.getResourceLocation())"
      range: "(300,7)-(300,69)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 308
      expression: "!resource.exists()"
      range: "(308,7)-(308,24)"
      evaluatedAs: true
      internalMethodName: "resolveNonPattern"
    - lineNumber: 308
      expression: "reference.isSkippable()"
      range: "(308,29)-(308,51)"
      evaluatedAs: true
      internalMethodName: "resolveNonPattern"
    - lineNumber: 256
      expression: "resolved.isEmpty()"
      range: "(256,7)-(256,24)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 265
      expression: "for-each(references)"
      range: "(265,48)-(265,57)"
      evaluatedAs: true
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 266
      expression: "reference.getDirectory() != null"
      range: "(266,8)-(266,39)"
      evaluatedAs: true
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 274
      expression: "!this.resourceLoader.isPattern(reference.getResourceLocation())"
      range: "(274,7)-(274,69)"
      evaluatedAs: false
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 289
      expression: "!location.isOptional()"
      range: "(289,7)-(289,28)"
      evaluatedAs: true
      internalMethodName: "resolvePatternEmptyDirectories"
    - lineNumber: 289
      expression: "ObjectUtils.isEmpty(subdirectories)"
      range: "(289,33)-(289,67)"
      evaluatedAs: false
      internalMethodName: "resolvePatternEmptyDirectories"
- method:
    name: "resolveProfileSpecific"
    sourceCodeSignature: "List<StandardConfigDataResource> resolveProfileSpecific(ConfigDataLocationResolverContext\
      \ context, ConfigDataLocation location, Profiles profiles)"
    returnType: "java.util.List"
    genericReturnType: "org.springframework.boot.context.config.StandardConfigDataResource"
    parameters:
    - name: "context"
      type: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
    - name: "location"
      type: "org.springframework.boot.context.config.ConfigDataLocation"
    - name: "profiles"
      type: "org.springframework.boot.context.config.Profiles"
    instructionFingerprint: "DC31B3EB569BEAF82D5E78F163E6279F"
  paths:
  - pathId: "path27"
    testPathName: "resolveProfileSpecificWhenThisConfigNamesIsEmptyAndReferencesIsEmptyAndResolvedIsEmptyAndReferencesIsEmpty"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "FD1644AB2B4445BD6155F1783C9CD055"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "E27975AA314F1EE81E6AE4F6783773CE"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "INPUT"
      name: "profiles"
      modelFingerprint: "0DC8A8409C454892325FC45DB6ED709C"
      valueUuid: "profiles"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid281):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid282,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid284,target:uniqueUuid285):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid287,messageSupplier:uniqueUuid288):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "profiles"
      modelFingerprint: "786D90F4B0D3AE0A4B5E43E0D10E94DF"
      valueUuid: "profiles"
      methodExercised:
        expression: "iterator():iterator"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid289):string2"
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "A3A8416E579D6FE19C9194D669AEE25F"
      valueUuid: "context"
      methodExercised:
        expression: "getParent():configDataResource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "2D67FE2470F21C9A479C86B9D87EAE9A"
      valueUuid: "configDataResource"
      methodExercised:
        expression: "getReference():standardConfigDataReference"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "7A2934A83869C5D4376A3053C15157D4"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0B2E30F4A7104A4946F5D72DFBEDF005"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid281"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid282"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid283"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid284"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid285"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid286"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid287"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid288"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            parameters: []
            values: []
          valueType: "java.util.List"
          genericValueType: "java.lang.String"
          uuid: "iterator-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "java.lang.String"
      uuid: "iterator"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid289"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "arrayList"
    branches:
    - lineNumber: 156
      expression: "for-each(profiles)"
      range: "(156,25)-(156,32)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 157
      expression: "for-each(configDataLocations)"
      range: "(157,49)-(157,67)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 173
      expression: "parent instanceof StandardConfigDataResource resource"
      range: "(173,7)-(173,59)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: true
      internalMethodName: "isDirectory"
    - lineNumber: 183
      expression: "isDirectory(resourceLocation)"
      range: "(183,7)-(183,35)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 192
      expression: "for-each(this.configNames)"
      range: "(192,22)-(192,37)"
      evaluatedAs: false
      internalMethodName: "getReferencesForDirectory"
    - lineNumber: 253
      expression: "for-each(references)"
      range: "(253,48)-(253,57)"
      evaluatedAs: false
      internalMethodName: "resolve"
    - lineNumber: 256
      expression: "resolved.isEmpty()"
      range: "(256,7)-(256,24)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 265
      expression: "for-each(references)"
      range: "(265,48)-(265,57)"
      evaluatedAs: false
      internalMethodName: "resolveEmptyDirectories"
  - pathId: "path28"
    testPathName: "resolveProfileSpecificWhenIsDirectoryResourceLocationAndThisConfigNamesIsEmptyAndReferencesIsEmptyAndResolvedIsEmptyAnd"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "F875C024043BCB70BA24CB0894BEE2E1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "E27975AA314F1EE81E6AE4F6783773CE"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "INPUT"
      name: "profiles"
      modelFingerprint: "0DC8A8409C454892325FC45DB6ED709C"
      valueUuid: "profiles"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid290):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid291,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid293,target:uniqueUuid294):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid296,messageSupplier:uniqueUuid297):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "profiles"
      modelFingerprint: "786D90F4B0D3AE0A4B5E43E0D10E94DF"
      valueUuid: "profiles"
      methodExercised:
        expression: "iterator():iterator"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid298):string2"
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "8C79A2DC321F85FAEBBCA6E417AF2498"
      valueUuid: "context"
      methodExercised:
        expression: "getParent():configDataResource"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0B2E30F4A7104A4946F5D72DFBEDF005"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid290"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid291"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid292"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid293"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid294"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid295"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid296"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid297"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            parameters: []
            values: []
          valueType: "java.util.List"
          genericValueType: "java.lang.String"
          uuid: "iterator-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "java.lang.String"
      uuid: "iterator"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid298"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataResource"
      uuid: "configDataResource"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "arrayList"
    branches:
    - lineNumber: 156
      expression: "for-each(profiles)"
      range: "(156,25)-(156,32)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 157
      expression: "for-each(configDataLocations)"
      range: "(157,49)-(157,67)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 173
      expression: "parent instanceof StandardConfigDataResource resource"
      range: "(173,7)-(173,59)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: true
      internalMethodName: "isDirectory"
    - lineNumber: 183
      expression: "isDirectory(resourceLocation)"
      range: "(183,7)-(183,35)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 192
      expression: "for-each(this.configNames)"
      range: "(192,22)-(192,37)"
      evaluatedAs: false
      internalMethodName: "getReferencesForDirectory"
    - lineNumber: 253
      expression: "for-each(references)"
      range: "(253,48)-(253,57)"
      evaluatedAs: false
      internalMethodName: "resolve"
    - lineNumber: 256
      expression: "resolved.isEmpty()"
      range: "(256,7)-(256,24)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 265
      expression: "for-each(references)"
      range: "(265,48)-(265,57)"
      evaluatedAs: false
      internalMethodName: "resolveEmptyDirectories"
  - pathId: "path19"
    testPathName: "resolveProfileSpecificWhenStringUtilsNotEndsWithIgnoreCaseFileFileExtensionAndExtensionIsNulThrowsIllegalStateException"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "90AB1F9AD497E2FED7A8A16691D46D94"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "INPUT"
      name: "profiles"
      modelFingerprint: "0DC8A8409C454892325FC45DB6ED709C"
      valueUuid: "profiles"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid299):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid300,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid302,target:uniqueUuid303):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid305,messageSupplier:uniqueUuid306):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "profiles"
      modelFingerprint: "786D90F4B0D3AE0A4B5E43E0D10E94DF"
      valueUuid: "profiles"
      methodExercised:
        expression: "iterator():iterator"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid307):string2"
    - type: "LOCAL_VARIABLE"
      name: "loader"
      modelFingerprint: "59890511608BA3E4B3CBC6D6B2CD235E"
      valueUuid: "object3"
      methodExercised:
        expression: "getFileExtensions():stringArray2"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "1061E3A8998F01722AF520B750478C6E"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWithIgnoreCase(str:string6,suffix:string7):boolean9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "C78D902E08116733215C7579B7680694"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "isOptional():boolean11"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "102F473BAA1BBF2A1B49CA140EC5B4EF"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid299"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid300"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid301"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid302"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid303"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid304"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid305"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid306"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            parameters: []
            values: []
          valueType: "java.util.List"
          genericValueType: "java.lang.String"
          uuid: "iterator-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "java.lang.String"
      uuid: "iterator"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid307"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "object3"
      collectionUuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean9"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean11"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "File extension is not known to any PropertySourceLoader. If\
                \ the location is meant to reference a directory, it must end in '/'\
                \ or File.separator"
            valueType: "java.lang.String"
            uuid: "uniqueUuid308"
            fixed: true
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 156
      expression: "for-each(profiles)"
      range: "(156,25)-(156,32)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 157
      expression: "for-each(configDataLocations)"
      range: "(157,49)-(157,67)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(File.separator)"
      range: "(248,44)-(248,84)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 183
      expression: "isDirectory(resourceLocation)"
      range: "(183,7)-(183,35)"
      evaluatedAs: false
      internalMethodName: "getReferences"
    - lineNumber: 219
      expression: "extensionHintLocation"
      range: "(219,7)-(219,27)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 222
      expression: "for-each(this.propertySourceLoaders)"
      range: "(222,52)-(222,77)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 239
      expression: "for-each(loader.getFileExtensions())"
      range: "(239,31)-(239,56)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 240
      expression: "StringUtils.endsWithIgnoreCase(file, fileExtension)"
      range: "(240,8)-(240,58)"
      evaluatedAs: false
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 224
      expression: "extension != null"
      range: "(224,8)-(224,24)"
      evaluatedAs: false
      internalMethodName: "getReferencesForFile"
    - lineNumber: 231
      expression: "configDataLocation.isOptional()"
      range: "(231,7)-(231,37)"
      evaluatedAs: false
      internalMethodName: "getReferencesForFile"
  - pathId: "path1"
    testPathName: "resolveProfileSpecificWhenReferencesNotContainsReferenceAndReferencesIsEmptyAndResolvedIsEmptyAndReferencesIsEmpty"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "6528AAEC369B37BD7967D5E650D8BAFC"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "INPUT"
      name: "profiles"
      modelFingerprint: "0DC8A8409C454892325FC45DB6ED709C"
      valueUuid: "profiles"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid309):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid310,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid312,target:uniqueUuid313):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid315,messageSupplier:uniqueUuid316):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "profiles"
      modelFingerprint: "786D90F4B0D3AE0A4B5E43E0D10E94DF"
      valueUuid: "profiles"
      methodExercised:
        expression: "iterator():iterator"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid317):string2"
    - type: "LOCAL_VARIABLE"
      name: "propertySourceLoader"
      modelFingerprint: "59890511608BA3E4B3CBC6D6B2CD235E"
      valueUuid: "object3"
      methodExercised:
        expression: "getFileExtensions():stringArray2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0B2E30F4A7104A4946F5D72DFBEDF005"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.Deque.addFirst(org.springframework.boot.context.config.StandardConfigDataReference)\
        \ : void"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid309"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid310"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid311"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid312"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid313"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid314"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid315"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid316"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            parameters: []
            values: []
          valueType: "java.util.List"
          genericValueType: "java.lang.String"
          uuid: "iterator-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "java.lang.String"
      uuid: "iterator"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid317"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "object3"
      collectionUuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "arrayList"
    branches:
    - lineNumber: 156
      expression: "for-each(profiles)"
      range: "(156,25)-(156,32)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 157
      expression: "for-each(configDataLocations)"
      range: "(157,49)-(157,67)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(File.separator)"
      range: "(248,44)-(248,84)"
      evaluatedAs: true
      internalMethodName: "isDirectory"
    - lineNumber: 183
      expression: "isDirectory(resourceLocation)"
      range: "(183,7)-(183,35)"
      evaluatedAs: true
      internalMethodName: "getReferences"
    - lineNumber: 192
      expression: "for-each(this.configNames)"
      range: "(192,22)-(192,37)"
      evaluatedAs: true
      internalMethodName: "getReferencesForDirectory"
    - lineNumber: 203
      expression: "for-each(this.propertySourceLoaders)"
      range: "(203,52)-(203,77)"
      evaluatedAs: true
      internalMethodName: "getReferencesForConfigName"
    - lineNumber: 204
      expression: "for-each(propertySourceLoader.getFileExtensions())"
      range: "(204,28)-(204,67)"
      evaluatedAs: true
      internalMethodName: "getReferencesForConfigName"
    - lineNumber: 207
      expression: "!references.contains(reference)"
      range: "(207,9)-(207,39)"
      evaluatedAs: true
      internalMethodName: "getReferencesForConfigName"
    - lineNumber: 253
      expression: "for-each(references)"
      range: "(253,48)-(253,57)"
      evaluatedAs: false
      internalMethodName: "resolve"
    - lineNumber: 256
      expression: "resolved.isEmpty()"
      range: "(256,7)-(256,24)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 265
      expression: "for-each(references)"
      range: "(265,48)-(265,57)"
      evaluatedAs: false
      internalMethodName: "resolveEmptyDirectories"
  - pathId: "path17"
    testPathName: "resolveProfileSpecificWhenConfigDataLocationIsOptionalAndReferencesIsEmptyAndResolvedIsEmptyAndReferencesIsEmpty2"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "D12135C14B6BDB00A256020432E8193D"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "INPUT"
      name: "profiles"
      modelFingerprint: "0DC8A8409C454892325FC45DB6ED709C"
      valueUuid: "profiles"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid318):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid319,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid321,target:uniqueUuid322):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid324,messageSupplier:uniqueUuid325):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "profiles"
      modelFingerprint: "786D90F4B0D3AE0A4B5E43E0D10E94DF"
      valueUuid: "profiles"
      methodExercised:
        expression: "iterator():iterator"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid326):string2"
    - type: "LOCAL_VARIABLE"
      name: "loader"
      modelFingerprint: "59890511608BA3E4B3CBC6D6B2CD235E"
      valueUuid: "object3"
      methodExercised:
        expression: "getFileExtensions():stringArray2"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "7DD1F1A7206794F634C525D09ACFBE23"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWithIgnoreCase(str:string6,suffix:string7):boolean9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "C78D902E08116733215C7579B7680694"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "isOptional():boolean11"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0B2E30F4A7104A4946F5D72DFBEDF005"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "PROVER_COULD_NOT_SOLVE_THE_PROBLEM"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid318"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid319"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid320"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid321"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid322"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid323"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid324"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid325"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            parameters: []
            values: []
          valueType: "java.util.List"
          genericValueType: "java.lang.String"
          uuid: "iterator-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "java.lang.String"
      uuid: "iterator"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid326"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "object3"
      collectionUuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean9"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean11"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "arrayList"
    branches:
    - lineNumber: 156
      expression: "for-each(profiles)"
      range: "(156,25)-(156,32)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 157
      expression: "for-each(configDataLocations)"
      range: "(157,49)-(157,67)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(File.separator)"
      range: "(248,44)-(248,84)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 183
      expression: "isDirectory(resourceLocation)"
      range: "(183,7)-(183,35)"
      evaluatedAs: false
      internalMethodName: "getReferences"
    - lineNumber: 219
      expression: "extensionHintLocation"
      range: "(219,7)-(219,27)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 222
      expression: "for-each(this.propertySourceLoaders)"
      range: "(222,52)-(222,77)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 239
      expression: "for-each(loader.getFileExtensions())"
      range: "(239,31)-(239,56)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 240
      expression: "StringUtils.endsWithIgnoreCase(file, fileExtension)"
      range: "(240,8)-(240,58)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 224
      expression: "extension != null"
      range: "(224,8)-(224,24)"
      evaluatedAs: false
      internalMethodName: "getReferencesForFile"
    - lineNumber: 231
      expression: "configDataLocation.isOptional()"
      range: "(231,7)-(231,37)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 253
      expression: "for-each(references)"
      range: "(253,48)-(253,57)"
      evaluatedAs: false
      internalMethodName: "resolve"
    - lineNumber: 256
      expression: "resolved.isEmpty()"
      range: "(256,7)-(256,24)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 265
      expression: "for-each(references)"
      range: "(265,48)-(265,57)"
      evaluatedAs: false
      internalMethodName: "resolveEmptyDirectories"
  - pathId: "path11"
    testPathName: "resolveProfileSpecificWhenReferenceNotIsSkippableAndResolvedNotIsEmpty"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "5459EBBBAD4A868556B8B4F3DADA0070"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "INPUT"
      name: "profiles"
      modelFingerprint: "0DC8A8409C454892325FC45DB6ED709C"
      valueUuid: "profiles"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid327):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid328,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid330,target:uniqueUuid331):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid333,messageSupplier:uniqueUuid334):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "profiles"
      modelFingerprint: "786D90F4B0D3AE0A4B5E43E0D10E94DF"
      valueUuid: "profiles"
      methodExercised:
        expression: "iterator():iterator"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid335):string2"
    - type: "LOCAL_VARIABLE"
      name: "loader"
      modelFingerprint: "59890511608BA3E4B3CBC6D6B2CD235E"
      valueUuid: "object3"
      methodExercised:
        expression: "getFileExtensions():stringArray2"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "1061E3A8998F01722AF520B750478C6E"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWithIgnoreCase(str:string6,suffix:string7):boolean9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "FB6A2C41B73D87F90F0A6429FEC819D4"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string9"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "137C3888C517EBF0BE9C7F622D975B09"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string9):boolean13"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "FB6A2C41B73D87F90F0A6429FEC819D4"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string10"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "B40070C228BF86F0E4B38B738ECB852E"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResource(location:string10):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean14"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "26CFCE7387A087624B035763D2D0C1A7"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "isSkippable():boolean15"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "351AAEDA28BEAD236E8033F504A9AD24"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "if (!this.resourceLoader.isPattern(reference.getResourceLocation()))\
        \ {"
      lineNumber: 300
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: reference - Method: getResourceLocation"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid327"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid328"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid329"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid330"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid331"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid332"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid333"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid334"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            parameters: []
            values: []
          valueType: "java.util.List"
          genericValueType: "java.lang.String"
          uuid: "iterator-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "java.lang.String"
      uuid: "iterator"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid335"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "object3"
      collectionUuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean9"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid340"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid341"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean13"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid340"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid341"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean14"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid340"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid341"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean15"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.context.config.StandardConfigDataResource"
            parameters:
            - name: "reference"
              value:
                sapientType: "OBJECT"
                content: !<new>
                  target: "org.springframework.boot.context.config.StandardConfigDataReference"
                  parameters:
                  - name: "configDataLocation"
                    value:
                      sapientType: "MOCK"
                      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
                      uuid: "configDataLocation"
                  - name: "directory"
                    value:
                      sapientType: "NULL"
                      valueType: "java.lang.String"
                  - name: "root"
                    value:
                      sapientType: "BASIC"
                      content: !<regular>
                        value: "root1"
                      valueType: "java.lang.String"
                      uuid: "string8"
                  - name: "profile"
                    value:
                      sapientType: "BASIC"
                      content: !<regular>
                        value: "profile1"
                      valueType: "java.lang.String"
                      uuid: "object2"
                      collectionUuid: "iterator-CollectionContent"
                  - name: "extension"
                    value:
                      sapientType: "NULL"
                      valueType: "java.lang.String"
                  - name: "propertySourceLoader"
                    value:
                      sapientType: "MOCK"
                      valueType: "org.springframework.boot.env.PropertySourceLoader"
                      uuid: "object3"
                      collectionUuid: "list"
                valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
                uuid: "standardConfigDataReference"
                collectionUuid: "linkedHashSet"
            - name: "resource"
              value:
                sapientType: "MOCK"
                valueType: "org.springframework.core.io.Resource"
                uuid: "resource"
          valueType: "org.springframework.boot.context.config.StandardConfigDataResource"
          uuid: "standardConfigDataResource"
          fixed: true
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "arrayList"
    branches:
    - lineNumber: 156
      expression: "for-each(profiles)"
      range: "(156,25)-(156,32)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 157
      expression: "for-each(configDataLocations)"
      range: "(157,49)-(157,67)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(File.separator)"
      range: "(248,44)-(248,84)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 183
      expression: "isDirectory(resourceLocation)"
      range: "(183,7)-(183,35)"
      evaluatedAs: false
      internalMethodName: "getReferences"
    - lineNumber: 219
      expression: "extensionHintLocation"
      range: "(219,7)-(219,27)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 222
      expression: "for-each(this.propertySourceLoaders)"
      range: "(222,52)-(222,77)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 239
      expression: "for-each(loader.getFileExtensions())"
      range: "(239,31)-(239,56)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 240
      expression: "StringUtils.endsWithIgnoreCase(file, fileExtension)"
      range: "(240,8)-(240,58)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 224
      expression: "extension != null"
      range: "(224,8)-(224,24)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 227
      expression: "!extensionHintLocation"
      range: "(227,17)-(227,38)"
      evaluatedAs: false
      internalMethodName: "getReferencesForFile"
    - lineNumber: 253
      expression: "for-each(references)"
      range: "(253,48)-(253,57)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 300
      expression: "!this.resourceLoader.isPattern(reference.getResourceLocation())"
      range: "(300,7)-(300,69)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 308
      expression: "!resource.exists()"
      range: "(308,7)-(308,24)"
      evaluatedAs: true
      internalMethodName: "resolveNonPattern"
    - lineNumber: 308
      expression: "reference.isSkippable()"
      range: "(308,29)-(308,51)"
      evaluatedAs: false
      internalMethodName: "resolveNonPattern"
    - lineNumber: 256
      expression: "resolved.isEmpty()"
      range: "(256,7)-(256,24)"
      evaluatedAs: false
      internalMethodName: "resolve"
  - pathId: "path14"
    testPathName: "resolveProfileSpecificWhenResourceNotExistsAndReferenceNotIsSkippableAndResolvedNotIsEmpty"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "1DD96EEDD13D5B106EC3F574A37AB0EB"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "INPUT"
      name: "profiles"
      modelFingerprint: "0DC8A8409C454892325FC45DB6ED709C"
      valueUuid: "profiles"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid342):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid343,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid345,target:uniqueUuid346):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid348,messageSupplier:uniqueUuid349):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "profiles"
      modelFingerprint: "786D90F4B0D3AE0A4B5E43E0D10E94DF"
      valueUuid: "profiles"
      methodExercised:
        expression: "iterator():iterator"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid350):string2"
    - type: "LOCAL_VARIABLE"
      name: "loader"
      modelFingerprint: "59890511608BA3E4B3CBC6D6B2CD235E"
      valueUuid: "object3"
      methodExercised:
        expression: "getFileExtensions():stringArray2"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "1061E3A8998F01722AF520B750478C6E"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWithIgnoreCase(str:string6,suffix:string7):boolean9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "FB6A2C41B73D87F90F0A6429FEC819D4"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string9"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "137C3888C517EBF0BE9C7F622D975B09"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string9):boolean13"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "FB6A2C41B73D87F90F0A6429FEC819D4"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string10"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "79448F63673395F295001F17FEFE350F"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResources(location:string10,type:Enum-org.springframework.boot.context.config.LocationResourceLoader$ResourceType-FILE):resourceArray"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean14"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "26CFCE7387A087624B035763D2D0C1A7"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "isSkippable():boolean15"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "351AAEDA28BEAD236E8033F504A9AD24"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "if (!this.resourceLoader.isPattern(reference.getResourceLocation()))\
        \ {"
      lineNumber: 300
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: reference - Method: getResourceLocation"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid342"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid343"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid344"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid345"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid346"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid347"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid348"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid349"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            parameters: []
            values: []
          valueType: "java.util.List"
          genericValueType: "java.lang.String"
          uuid: "iterator-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "java.lang.String"
      uuid: "iterator"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid350"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "object3"
      collectionUuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean9"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid355"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid356"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean13"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid355"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid356"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.core.io.Resource[]"
      uuid: "resourceArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "ENUM"
      content: !<regular>
        value: "FILE"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader$ResourceType"
      uuid: "Enum-org.springframework.boot.context.config.LocationResourceLoader$ResourceType-FILE"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean14"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid355"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid356"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean15"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.context.config.StandardConfigDataResource"
            parameters:
            - name: "reference"
              value:
                sapientType: "OBJECT"
                content: !<new>
                  target: "org.springframework.boot.context.config.StandardConfigDataReference"
                  parameters:
                  - name: "configDataLocation"
                    value:
                      sapientType: "MOCK"
                      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
                      uuid: "configDataLocation"
                  - name: "directory"
                    value:
                      sapientType: "NULL"
                      valueType: "java.lang.String"
                  - name: "root"
                    value:
                      sapientType: "BASIC"
                      content: !<regular>
                        value: "root1"
                      valueType: "java.lang.String"
                      uuid: "string8"
                  - name: "profile"
                    value:
                      sapientType: "BASIC"
                      content: !<regular>
                        value: "profile1"
                      valueType: "java.lang.String"
                      uuid: "object2"
                      collectionUuid: "iterator-CollectionContent"
                  - name: "extension"
                    value:
                      sapientType: "NULL"
                      valueType: "java.lang.String"
                  - name: "propertySourceLoader"
                    value:
                      sapientType: "MOCK"
                      valueType: "org.springframework.boot.env.PropertySourceLoader"
                      uuid: "object3"
                      collectionUuid: "list"
                valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
                uuid: "standardConfigDataReference"
                collectionUuid: "linkedHashSet"
            - name: "resource"
              value:
                sapientType: "MOCK"
                valueType: "org.springframework.core.io.Resource"
                uuid: "resource"
          valueType: "org.springframework.boot.context.config.StandardConfigDataResource"
          uuid: "standardConfigDataResource"
          fixed: true
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "arrayList"
    branches:
    - lineNumber: 156
      expression: "for-each(profiles)"
      range: "(156,25)-(156,32)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 157
      expression: "for-each(configDataLocations)"
      range: "(157,49)-(157,67)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(File.separator)"
      range: "(248,44)-(248,84)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 183
      expression: "isDirectory(resourceLocation)"
      range: "(183,7)-(183,35)"
      evaluatedAs: false
      internalMethodName: "getReferences"
    - lineNumber: 219
      expression: "extensionHintLocation"
      range: "(219,7)-(219,27)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 222
      expression: "for-each(this.propertySourceLoaders)"
      range: "(222,52)-(222,77)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 239
      expression: "for-each(loader.getFileExtensions())"
      range: "(239,31)-(239,56)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 240
      expression: "StringUtils.endsWithIgnoreCase(file, fileExtension)"
      range: "(240,8)-(240,58)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 224
      expression: "extension != null"
      range: "(224,8)-(224,24)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 227
      expression: "!extensionHintLocation"
      range: "(227,17)-(227,38)"
      evaluatedAs: false
      internalMethodName: "getReferencesForFile"
    - lineNumber: 253
      expression: "for-each(references)"
      range: "(253,48)-(253,57)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 300
      expression: "!this.resourceLoader.isPattern(reference.getResourceLocation())"
      range: "(300,7)-(300,69)"
      evaluatedAs: false
      internalMethodName: "resolve"
    - lineNumber: 317
      expression: "for-each(this.resourceLoader.getResources(reference.getResourceLocation(),\
        \ ResourceType.FILE))"
      range: "(317,28)-(317,111)"
      evaluatedAs: true
      internalMethodName: "resolvePattern"
    - lineNumber: 318
      expression: "!resource.exists()"
      range: "(318,8)-(318,25)"
      evaluatedAs: true
      internalMethodName: "resolvePattern"
    - lineNumber: 318
      expression: "reference.isSkippable()"
      range: "(318,30)-(318,52)"
      evaluatedAs: false
      internalMethodName: "resolvePattern"
    - lineNumber: 256
      expression: "resolved.isEmpty()"
      range: "(256,7)-(256,24)"
      evaluatedAs: false
      internalMethodName: "resolve"
  - pathId: "path13"
    testPathName: "resolveProfileSpecificWhenResolvedIsEmptyAndReferencesIsNotEmptyAndReferenceGetDirectoryIsNull"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "2E88083738D850D8BD733AA583BDBC72"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "INPUT"
      name: "profiles"
      modelFingerprint: "0DC8A8409C454892325FC45DB6ED709C"
      valueUuid: "profiles"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid357):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid358,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid360,target:uniqueUuid361):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid363,messageSupplier:uniqueUuid364):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "profiles"
      modelFingerprint: "786D90F4B0D3AE0A4B5E43E0D10E94DF"
      valueUuid: "profiles"
      methodExercised:
        expression: "iterator():iterator"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid365):string2"
    - type: "LOCAL_VARIABLE"
      name: "loader"
      modelFingerprint: "59890511608BA3E4B3CBC6D6B2CD235E"
      valueUuid: "object3"
      methodExercised:
        expression: "getFileExtensions():stringArray2"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "1061E3A8998F01722AF520B750478C6E"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWithIgnoreCase(str:string6,suffix:string7):boolean9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "FB6A2C41B73D87F90F0A6429FEC819D4"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string9"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "137C3888C517EBF0BE9C7F622D975B09"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string9):boolean13"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "FB6A2C41B73D87F90F0A6429FEC819D4"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string10"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "79448F63673395F295001F17FEFE350F"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResources(location:string10,type:Enum-org.springframework.boot.context.config.LocationResourceLoader$ResourceType-FILE):resourceArray"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean14"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "26CFCE7387A087624B035763D2D0C1A7"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "isSkippable():boolean15"
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "D9582022EE5AAB726BFA6A72D5FDF7FD"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid372,arg1:standardConfigDataReference):logMessage"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "E83E244395E95DCABA72B84E2D827A87"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getDirectory():string11"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0B2E30F4A7104A4946F5D72DFBEDF005"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "if (!this.resourceLoader.isPattern(reference.getResourceLocation()))\
        \ {"
      lineNumber: 300
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: reference - Method: getResourceLocation"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid357"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid358"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid359"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid360"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid361"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid362"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid363"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid364"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            parameters: []
            values: []
          valueType: "java.util.List"
          genericValueType: "java.lang.String"
          uuid: "iterator-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "java.lang.String"
      uuid: "iterator"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid365"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "object3"
      collectionUuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean9"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid375"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid376"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean13"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid375"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid376"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.core.io.Resource[]"
      uuid: "resourceArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "ENUM"
      content: !<regular>
        value: "FILE"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader$ResourceType"
      uuid: "Enum-org.springframework.boot.context.config.LocationResourceLoader$ResourceType-FILE"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean14"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid375"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid376"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean15"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Skipping missing resource %s"
      valueType: "java.lang.String"
      uuid: "uniqueUuid372"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid375"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid376"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid375"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid376"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string11"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "arrayList"
    branches:
    - lineNumber: 156
      expression: "for-each(profiles)"
      range: "(156,25)-(156,32)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 157
      expression: "for-each(configDataLocations)"
      range: "(157,49)-(157,67)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(File.separator)"
      range: "(248,44)-(248,84)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 183
      expression: "isDirectory(resourceLocation)"
      range: "(183,7)-(183,35)"
      evaluatedAs: false
      internalMethodName: "getReferences"
    - lineNumber: 219
      expression: "extensionHintLocation"
      range: "(219,7)-(219,27)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 222
      expression: "for-each(this.propertySourceLoaders)"
      range: "(222,52)-(222,77)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 239
      expression: "for-each(loader.getFileExtensions())"
      range: "(239,31)-(239,56)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 240
      expression: "StringUtils.endsWithIgnoreCase(file, fileExtension)"
      range: "(240,8)-(240,58)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 224
      expression: "extension != null"
      range: "(224,8)-(224,24)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 227
      expression: "!extensionHintLocation"
      range: "(227,17)-(227,38)"
      evaluatedAs: false
      internalMethodName: "getReferencesForFile"
    - lineNumber: 253
      expression: "for-each(references)"
      range: "(253,48)-(253,57)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 300
      expression: "!this.resourceLoader.isPattern(reference.getResourceLocation())"
      range: "(300,7)-(300,69)"
      evaluatedAs: false
      internalMethodName: "resolve"
    - lineNumber: 317
      expression: "for-each(this.resourceLoader.getResources(reference.getResourceLocation(),\
        \ ResourceType.FILE))"
      range: "(317,28)-(317,111)"
      evaluatedAs: true
      internalMethodName: "resolvePattern"
    - lineNumber: 318
      expression: "!resource.exists()"
      range: "(318,8)-(318,25)"
      evaluatedAs: true
      internalMethodName: "resolvePattern"
    - lineNumber: 318
      expression: "reference.isSkippable()"
      range: "(318,30)-(318,52)"
      evaluatedAs: true
      internalMethodName: "resolvePattern"
    - lineNumber: 256
      expression: "resolved.isEmpty()"
      range: "(256,7)-(256,24)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 265
      expression: "for-each(references)"
      range: "(265,48)-(265,57)"
      evaluatedAs: true
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 266
      expression: "reference.getDirectory() != null"
      range: "(266,8)-(266,39)"
      evaluatedAs: false
      internalMethodName: "resolveEmptyDirectories"
  - pathId: "path4"
    testPathName: "resolveProfileSpecificWhenResourceNotExists"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "6670FB7BF07CC508CDE3DF995A55F61D"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "INPUT"
      name: "profiles"
      modelFingerprint: "0DC8A8409C454892325FC45DB6ED709C"
      valueUuid: "profiles"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid377):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid378,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid380,target:uniqueUuid381):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid383,messageSupplier:uniqueUuid384):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "profiles"
      modelFingerprint: "786D90F4B0D3AE0A4B5E43E0D10E94DF"
      valueUuid: "profiles"
      methodExercised:
        expression: "iterator():iterator"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid385):string2"
    - type: "LOCAL_VARIABLE"
      name: "loader"
      modelFingerprint: "59890511608BA3E4B3CBC6D6B2CD235E"
      valueUuid: "object3"
      methodExercised:
        expression: "getFileExtensions():stringArray2"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "1061E3A8998F01722AF520B750478C6E"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWithIgnoreCase(str:string6,suffix:string7):boolean9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "FB6A2C41B73D87F90F0A6429FEC819D4"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string9"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "137C3888C517EBF0BE9C7F622D975B09"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string9):boolean13"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "FB6A2C41B73D87F90F0A6429FEC819D4"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string10"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "B40070C228BF86F0E4B38B738ECB852E"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResource(location:string10):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean14"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "26CFCE7387A087624B035763D2D0C1A7"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "isSkippable():boolean15"
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "D9582022EE5AAB726BFA6A72D5FDF7FD"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid392,arg1:standardConfigDataReference):logMessage"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "58B545AA90934457B84BF865D6C13D85"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getDirectory():string11"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "FB6A2C41B73D87F90F0A6429FEC819D4"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string12"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "137C3888C517EBF0BE9C7F622D975B09"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string12):boolean20"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "58B545AA90934457B84BF865D6C13D85"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getDirectory():string13"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "B40070C228BF86F0E4B38B738ECB852E"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResource(location:string13):resource2"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource2"
      methodExercised:
        expression: "exists():boolean22"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0B2E30F4A7104A4946F5D72DFBEDF005"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "if (!this.resourceLoader.isPattern(reference.getResourceLocation()))\
        \ {"
      lineNumber: 300
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: reference - Method: getResourceLocation"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid377"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid378"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid379"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid380"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid381"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid382"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid383"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid384"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            parameters: []
            values: []
          valueType: "java.util.List"
          genericValueType: "java.lang.String"
          uuid: "iterator-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "java.lang.String"
      uuid: "iterator"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid385"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "object3"
      collectionUuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean9"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid399"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid400"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean13"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid399"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid400"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean14"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid399"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid400"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean15"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Skipping missing resource %s"
      valueType: "java.lang.String"
      uuid: "uniqueUuid392"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid399"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid400"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid399"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid400"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid399"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid400"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean20"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid399"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid400"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string13"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string13"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean22"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "arrayList"
    branches:
    - lineNumber: 156
      expression: "for-each(profiles)"
      range: "(156,25)-(156,32)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 157
      expression: "for-each(configDataLocations)"
      range: "(157,49)-(157,67)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(File.separator)"
      range: "(248,44)-(248,84)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 183
      expression: "isDirectory(resourceLocation)"
      range: "(183,7)-(183,35)"
      evaluatedAs: false
      internalMethodName: "getReferences"
    - lineNumber: 219
      expression: "extensionHintLocation"
      range: "(219,7)-(219,27)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 222
      expression: "for-each(this.propertySourceLoaders)"
      range: "(222,52)-(222,77)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 239
      expression: "for-each(loader.getFileExtensions())"
      range: "(239,31)-(239,56)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 240
      expression: "StringUtils.endsWithIgnoreCase(file, fileExtension)"
      range: "(240,8)-(240,58)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 224
      expression: "extension != null"
      range: "(224,8)-(224,24)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 227
      expression: "!extensionHintLocation"
      range: "(227,17)-(227,38)"
      evaluatedAs: false
      internalMethodName: "getReferencesForFile"
    - lineNumber: 253
      expression: "for-each(references)"
      range: "(253,48)-(253,57)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 300
      expression: "!this.resourceLoader.isPattern(reference.getResourceLocation())"
      range: "(300,7)-(300,69)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 308
      expression: "!resource.exists()"
      range: "(308,7)-(308,24)"
      evaluatedAs: true
      internalMethodName: "resolveNonPattern"
    - lineNumber: 308
      expression: "reference.isSkippable()"
      range: "(308,29)-(308,51)"
      evaluatedAs: true
      internalMethodName: "resolveNonPattern"
    - lineNumber: 256
      expression: "resolved.isEmpty()"
      range: "(256,7)-(256,24)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 265
      expression: "for-each(references)"
      range: "(265,48)-(265,57)"
      evaluatedAs: true
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 266
      expression: "reference.getDirectory() != null"
      range: "(266,8)-(266,39)"
      evaluatedAs: true
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 274
      expression: "!this.resourceLoader.isPattern(reference.getResourceLocation())"
      range: "(274,7)-(274,69)"
      evaluatedAs: true
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 282
      expression: "resource instanceof ClassPathResource"
      range: "(282,11)-(282,47)"
      evaluatedAs: false
      internalMethodName: "resolveNonPatternEmptyDirectories"
    - lineNumber: 282
      expression: "!resource.exists()"
      range: "(282,52)-(282,69)"
      evaluatedAs: true
      internalMethodName: "resolveNonPatternEmptyDirectories"
  - pathId: "path5"
    testPathName: "resolveProfileSpecificWhenResourceExists"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "BA045B76E57F7C2DC1D0BBCEFA51C3DF"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "INPUT"
      name: "profiles"
      modelFingerprint: "0DC8A8409C454892325FC45DB6ED709C"
      valueUuid: "profiles"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid401):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid402,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid404,target:uniqueUuid405):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid407,messageSupplier:uniqueUuid408):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "profiles"
      modelFingerprint: "786D90F4B0D3AE0A4B5E43E0D10E94DF"
      valueUuid: "profiles"
      methodExercised:
        expression: "iterator():iterator"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid409):string2"
    - type: "LOCAL_VARIABLE"
      name: "loader"
      modelFingerprint: "59890511608BA3E4B3CBC6D6B2CD235E"
      valueUuid: "object3"
      methodExercised:
        expression: "getFileExtensions():stringArray2"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "1061E3A8998F01722AF520B750478C6E"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWithIgnoreCase(str:string6,suffix:string7):boolean9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "FB6A2C41B73D87F90F0A6429FEC819D4"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string9"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "137C3888C517EBF0BE9C7F622D975B09"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string9):boolean13"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "FB6A2C41B73D87F90F0A6429FEC819D4"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string10"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "B40070C228BF86F0E4B38B738ECB852E"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResource(location:string10):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean14"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "26CFCE7387A087624B035763D2D0C1A7"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "isSkippable():boolean15"
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "D9582022EE5AAB726BFA6A72D5FDF7FD"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid416,arg1:standardConfigDataReference):logMessage"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "58B545AA90934457B84BF865D6C13D85"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getDirectory():string11"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "FB6A2C41B73D87F90F0A6429FEC819D4"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string12"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "137C3888C517EBF0BE9C7F622D975B09"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string12):boolean20"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "58B545AA90934457B84BF865D6C13D85"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getDirectory():string13"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "B40070C228BF86F0E4B38B738ECB852E"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResource(location:string13):resource2"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource2"
      methodExercised:
        expression: "exists():boolean22"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "CED847DF1F2375395DA112ABFA8C13E3"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "if (!this.resourceLoader.isPattern(reference.getResourceLocation()))\
        \ {"
      lineNumber: 300
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: reference - Method: getResourceLocation"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid401"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid402"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid403"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid404"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid405"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid406"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid407"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid408"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            parameters: []
            values: []
          valueType: "java.util.List"
          genericValueType: "java.lang.String"
          uuid: "iterator-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "java.lang.String"
      uuid: "iterator"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid409"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "object3"
      collectionUuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean9"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid423"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid424"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean13"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid423"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid424"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean14"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid423"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid424"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean15"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Skipping missing resource %s"
      valueType: "java.lang.String"
      uuid: "uniqueUuid416"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid423"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid424"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid423"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid424"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid423"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid424"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean20"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid423"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid424"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string13"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string13"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean22"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.context.config.StandardConfigDataResource"
            parameters:
            - name: "reference"
              value:
                sapientType: "OBJECT"
                content: !<new>
                  target: "org.springframework.boot.context.config.StandardConfigDataReference"
                  parameters:
                  - name: "configDataLocation"
                    value:
                      sapientType: "MOCK"
                      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
                      uuid: "configDataLocation"
                  - name: "directory"
                    value:
                      sapientType: "NULL"
                      valueType: "java.lang.String"
                  - name: "root"
                    value:
                      sapientType: "BASIC"
                      content: !<regular>
                        value: "root1"
                      valueType: "java.lang.String"
                      uuid: "string8"
                  - name: "profile"
                    value:
                      sapientType: "BASIC"
                      content: !<regular>
                        value: "profile1"
                      valueType: "java.lang.String"
                      uuid: "object2"
                      collectionUuid: "iterator-CollectionContent"
                  - name: "extension"
                    value:
                      sapientType: "NULL"
                      valueType: "java.lang.String"
                  - name: "propertySourceLoader"
                    value:
                      sapientType: "MOCK"
                      valueType: "org.springframework.boot.env.PropertySourceLoader"
                      uuid: "object3"
                      collectionUuid: "list"
                valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
                uuid: "standardConfigDataReference"
                collectionUuid: "linkedHashSet"
            - name: "resource"
              value:
                sapientType: "MOCK"
                valueType: "org.springframework.core.io.Resource"
                uuid: "resource2"
            - name: "emptyDirectory"
              value:
                sapientType: "BASIC"
                content: !<regular>
                  value: true
                valueType: "boolean"
                fixed: true
          valueType: "org.springframework.boot.context.config.StandardConfigDataResource"
          uuid: "standardConfigDataResource"
          fixed: true
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "arrayList"
    branches:
    - lineNumber: 156
      expression: "for-each(profiles)"
      range: "(156,25)-(156,32)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 157
      expression: "for-each(configDataLocations)"
      range: "(157,49)-(157,67)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(File.separator)"
      range: "(248,44)-(248,84)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 183
      expression: "isDirectory(resourceLocation)"
      range: "(183,7)-(183,35)"
      evaluatedAs: false
      internalMethodName: "getReferences"
    - lineNumber: 219
      expression: "extensionHintLocation"
      range: "(219,7)-(219,27)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 222
      expression: "for-each(this.propertySourceLoaders)"
      range: "(222,52)-(222,77)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 239
      expression: "for-each(loader.getFileExtensions())"
      range: "(239,31)-(239,56)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 240
      expression: "StringUtils.endsWithIgnoreCase(file, fileExtension)"
      range: "(240,8)-(240,58)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 224
      expression: "extension != null"
      range: "(224,8)-(224,24)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 227
      expression: "!extensionHintLocation"
      range: "(227,17)-(227,38)"
      evaluatedAs: false
      internalMethodName: "getReferencesForFile"
    - lineNumber: 253
      expression: "for-each(references)"
      range: "(253,48)-(253,57)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 300
      expression: "!this.resourceLoader.isPattern(reference.getResourceLocation())"
      range: "(300,7)-(300,69)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 308
      expression: "!resource.exists()"
      range: "(308,7)-(308,24)"
      evaluatedAs: true
      internalMethodName: "resolveNonPattern"
    - lineNumber: 308
      expression: "reference.isSkippable()"
      range: "(308,29)-(308,51)"
      evaluatedAs: true
      internalMethodName: "resolveNonPattern"
    - lineNumber: 256
      expression: "resolved.isEmpty()"
      range: "(256,7)-(256,24)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 265
      expression: "for-each(references)"
      range: "(265,48)-(265,57)"
      evaluatedAs: true
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 266
      expression: "reference.getDirectory() != null"
      range: "(266,8)-(266,39)"
      evaluatedAs: true
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 274
      expression: "!this.resourceLoader.isPattern(reference.getResourceLocation())"
      range: "(274,7)-(274,69)"
      evaluatedAs: true
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 282
      expression: "resource instanceof ClassPathResource"
      range: "(282,11)-(282,47)"
      evaluatedAs: false
      internalMethodName: "resolveNonPatternEmptyDirectories"
    - lineNumber: 282
      expression: "!resource.exists()"
      range: "(282,52)-(282,69)"
      evaluatedAs: false
      internalMethodName: "resolveNonPatternEmptyDirectories"
  - pathId: "path7"
    testPathName: "resolveProfileSpecificWhenObjectUtilsIsEmptySubdirectoriesThrowsConfigDataLocationNotFoundException"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "2E371D7959B41B68C27FD61D14DE5296"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "INPUT"
      name: "profiles"
      modelFingerprint: "0DC8A8409C454892325FC45DB6ED709C"
      valueUuid: "profiles"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid425):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid426,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid428,target:uniqueUuid429):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid431,messageSupplier:uniqueUuid432):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "profiles"
      modelFingerprint: "786D90F4B0D3AE0A4B5E43E0D10E94DF"
      valueUuid: "profiles"
      methodExercised:
        expression: "iterator():iterator"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid433):string2"
    - type: "LOCAL_VARIABLE"
      name: "loader"
      modelFingerprint: "59890511608BA3E4B3CBC6D6B2CD235E"
      valueUuid: "object3"
      methodExercised:
        expression: "getFileExtensions():stringArray2"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "1061E3A8998F01722AF520B750478C6E"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWithIgnoreCase(str:string6,suffix:string7):boolean9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "FB6A2C41B73D87F90F0A6429FEC819D4"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string9"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "137C3888C517EBF0BE9C7F622D975B09"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string9):boolean13"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "FB6A2C41B73D87F90F0A6429FEC819D4"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string10"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "B40070C228BF86F0E4B38B738ECB852E"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResource(location:string10):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean14"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "26CFCE7387A087624B035763D2D0C1A7"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "isSkippable():boolean15"
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "D9582022EE5AAB726BFA6A72D5FDF7FD"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid440,arg1:standardConfigDataReference):logMessage"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "58B545AA90934457B84BF865D6C13D85"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getDirectory():string11"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "FB6A2C41B73D87F90F0A6429FEC819D4"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string12"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "137C3888C517EBF0BE9C7F622D975B09"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string12):boolean20"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "58B545AA90934457B84BF865D6C13D85"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getDirectory():string13"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "DA7700B84E60ED2F766C9EF87E16F6CA"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResources(location:string13,type:Enum-org.springframework.boot.context.config.LocationResourceLoader$ResourceType-DIRECTORY):resourceArray"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "F653116F3C54565827793F79546B4FCF"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getConfigDataLocation():configDataLocation2"
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "2206CB134164DF2DFC28C192EBFFD53D"
      valueUuid: "configDataLocation2"
      methodExercised:
        expression: "isOptional():boolean21"
    - type: "STATIC"
      name: "ObjectUtils.class"
      modelFingerprint: "CE35DFADFB3210A873EB091539B829B8"
      valueUuid: "ObjectUtils.class"
      methodExercised:
        expression: "isEmpty(array:resourceArray):boolean22"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "1A092E2B0DCE6111EF32E35EAC0054F9"
      valueUuid: "configDataLocationNotFoundException"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "if (!this.resourceLoader.isPattern(reference.getResourceLocation()))\
        \ {"
      lineNumber: 300
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: reference - Method: getResourceLocation"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid425"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid426"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid427"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid428"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid429"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid430"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid431"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid432"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            parameters: []
            values: []
          valueType: "java.util.List"
          genericValueType: "java.lang.String"
          uuid: "iterator-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "java.lang.String"
      uuid: "iterator"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid433"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "object3"
      collectionUuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean9"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid449"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid450"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean13"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid449"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid450"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean14"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid449"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid450"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean15"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Skipping missing resource %s"
      valueType: "java.lang.String"
      uuid: "uniqueUuid440"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid449"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid450"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid449"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid450"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid449"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid450"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean20"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid449"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid450"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string13"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.core.io.Resource[]"
      uuid: "resourceArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string13"
    - sapientType: "ENUM"
      content: !<regular>
        value: "DIRECTORY"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader$ResourceType"
      uuid: "Enum-org.springframework.boot.context.config.LocationResourceLoader$ResourceType-DIRECTORY"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid449"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid450"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.boot.context.config.ConfigDataLocation"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.context.config.StandardConfigDataReference"
            parameters:
            - name: "configDataLocation"
              value:
                sapientType: "MOCK"
                valueType: "org.springframework.boot.context.config.ConfigDataLocation"
                uuid: "configDataLocation"
            - name: "directory"
              value:
                sapientType: "NULL"
                valueType: "java.lang.String"
            - name: "root"
              value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "root1"
                valueType: "java.lang.String"
                uuid: "string8"
            - name: "profile"
              value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "profile1"
                valueType: "java.lang.String"
                uuid: "object2"
                collectionUuid: "iterator-CollectionContent"
            - name: "extension"
              value:
                sapientType: "NULL"
                valueType: "java.lang.String"
            - name: "propertySourceLoader"
              value:
                sapientType: "MOCK"
                valueType: "org.springframework.boot.env.PropertySourceLoader"
                uuid: "object3"
                collectionUuid: "list"
          valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
          uuid: "standardConfigDataReference"
          collectionUuid: "linkedHashSet"
        methodParameters: []
        methodName: "getConfigDataLocation"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation2"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.boot.context.config.ConfigDataLocation"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.context.config.StandardConfigDataReference"
            parameters:
            - name: "configDataLocation"
              value:
                sapientType: "MOCK"
                valueType: "org.springframework.boot.context.config.ConfigDataLocation"
                uuid: "configDataLocation"
            - name: "directory"
              value:
                sapientType: "NULL"
                valueType: "java.lang.String"
            - name: "root"
              value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "root1"
                valueType: "java.lang.String"
                uuid: "string8"
            - name: "profile"
              value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "profile1"
                valueType: "java.lang.String"
                uuid: "object2"
                collectionUuid: "iterator-CollectionContent"
            - name: "extension"
              value:
                sapientType: "NULL"
                valueType: "java.lang.String"
            - name: "propertySourceLoader"
              value:
                sapientType: "MOCK"
                valueType: "org.springframework.boot.env.PropertySourceLoader"
                uuid: "object3"
                collectionUuid: "list"
          valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
          uuid: "standardConfigDataReference"
          collectionUuid: "linkedHashSet"
        methodParameters: []
        methodName: "getConfigDataLocation"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean21"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ObjectUtils"
      uuid: "ObjectUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean22"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.core.io.Resource[]"
      uuid: "resourceArray"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigDataLocationNotFoundException"
        parameters:
        - name: "location"
          value:
            sapientType: "OBJECT"
            content: !<method_return_from_value>
              target: "org.springframework.boot.context.config.ConfigDataLocation"
              localVariableValue:
                sapientType: "OBJECT"
                content: !<new>
                  target: "org.springframework.boot.context.config.StandardConfigDataReference"
                  parameters:
                  - name: "configDataLocation"
                    value:
                      sapientType: "MOCK"
                      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
                      uuid: "configDataLocation"
                  - name: "directory"
                    value:
                      sapientType: "NULL"
                      valueType: "java.lang.String"
                  - name: "root"
                    value:
                      sapientType: "BASIC"
                      content: !<regular>
                        value: "root1"
                      valueType: "java.lang.String"
                      uuid: "string8"
                  - name: "profile"
                    value:
                      sapientType: "BASIC"
                      content: !<regular>
                        value: "profile1"
                      valueType: "java.lang.String"
                      uuid: "object2"
                      collectionUuid: "iterator-CollectionContent"
                  - name: "extension"
                    value:
                      sapientType: "NULL"
                      valueType: "java.lang.String"
                  - name: "propertySourceLoader"
                    value:
                      sapientType: "MOCK"
                      valueType: "org.springframework.boot.env.PropertySourceLoader"
                      uuid: "object3"
                      collectionUuid: "list"
                valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
                uuid: "standardConfigDataReference"
                collectionUuid: "linkedHashSet"
              methodParameters: []
              methodName: "getConfigDataLocation"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation2"
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "message1"
            valueType: "java.lang.String"
            uuid: "string14"
        - name: "cause"
          value:
            sapientType: "NULL"
            valueType: "java.lang.Throwable"
            uuid: "uniqueUuid451"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationNotFoundException"
      uuid: "configDataLocationNotFoundException"
      fixed: true
    branches:
    - lineNumber: 156
      expression: "for-each(profiles)"
      range: "(156,25)-(156,32)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 157
      expression: "for-each(configDataLocations)"
      range: "(157,49)-(157,67)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(File.separator)"
      range: "(248,44)-(248,84)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 183
      expression: "isDirectory(resourceLocation)"
      range: "(183,7)-(183,35)"
      evaluatedAs: false
      internalMethodName: "getReferences"
    - lineNumber: 219
      expression: "extensionHintLocation"
      range: "(219,7)-(219,27)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 222
      expression: "for-each(this.propertySourceLoaders)"
      range: "(222,52)-(222,77)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 239
      expression: "for-each(loader.getFileExtensions())"
      range: "(239,31)-(239,56)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 240
      expression: "StringUtils.endsWithIgnoreCase(file, fileExtension)"
      range: "(240,8)-(240,58)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 224
      expression: "extension != null"
      range: "(224,8)-(224,24)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 227
      expression: "!extensionHintLocation"
      range: "(227,17)-(227,38)"
      evaluatedAs: false
      internalMethodName: "getReferencesForFile"
    - lineNumber: 253
      expression: "for-each(references)"
      range: "(253,48)-(253,57)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 300
      expression: "!this.resourceLoader.isPattern(reference.getResourceLocation())"
      range: "(300,7)-(300,69)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 308
      expression: "!resource.exists()"
      range: "(308,7)-(308,24)"
      evaluatedAs: true
      internalMethodName: "resolveNonPattern"
    - lineNumber: 308
      expression: "reference.isSkippable()"
      range: "(308,29)-(308,51)"
      evaluatedAs: true
      internalMethodName: "resolveNonPattern"
    - lineNumber: 256
      expression: "resolved.isEmpty()"
      range: "(256,7)-(256,24)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 265
      expression: "for-each(references)"
      range: "(265,48)-(265,57)"
      evaluatedAs: true
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 266
      expression: "reference.getDirectory() != null"
      range: "(266,8)-(266,39)"
      evaluatedAs: true
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 274
      expression: "!this.resourceLoader.isPattern(reference.getResourceLocation())"
      range: "(274,7)-(274,69)"
      evaluatedAs: false
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 289
      expression: "!location.isOptional()"
      range: "(289,7)-(289,28)"
      evaluatedAs: true
      internalMethodName: "resolvePatternEmptyDirectories"
    - lineNumber: 289
      expression: "ObjectUtils.isEmpty(subdirectories)"
      range: "(289,33)-(289,67)"
      evaluatedAs: true
      internalMethodName: "resolvePatternEmptyDirectories"
  - pathId: "path8"
    testPathName: "resolveProfileSpecificWhenObjectUtilsNotIsEmptySubdirectories"
    constructorSignature: "<init>(org.springframework.boot.logging.DeferredLogFactory,org.springframework.boot.context.properties.bind.Binder,org.springframework.core.io.ResourceLoader)\
      \ : void"
    modelFingerprint: "13E18D6DC378AF9C18C690D936184891"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0BB82F42AB0698C9C0915B76B4850E4D"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "INPUT"
      name: "profiles"
      modelFingerprint: "0DC8A8409C454892325FC45DB6ED709C"
      valueUuid: "profiles"
    - type: "LOCAL_VARIABLE"
      name: "logFactory"
      modelFingerprint: "15FFFDDEC6F904A0EC11ACBFF77E6E7C"
      valueUuid: "logFactory"
      methodExercised:
        expression: "getLog(destination:uniqueUuid452):log"
    - type: "STATIC"
      name: "SpringFactoriesLoader.class"
      modelFingerprint: "A756CC75F97320782887B07CE44E14B1"
      valueUuid: "SpringFactoriesLoader.class"
      methodExercised:
        expression: "loadFactories(factoryType:uniqueUuid453,classLoader:classLoader):list"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "binder"
      modelFingerprint: "9856B3A18370EE75D26E7D1B0AE03E96"
      valueUuid: "binder"
      methodExercised:
        expression: "bind(name:uniqueUuid455,target:uniqueUuid456):bindResult"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1CBCCA18896F55684043645A3D193061"
      valueUuid: "bindResult"
      methodExercised:
        expression: "orElse(other:stringArray):object"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid458,messageSupplier:uniqueUuid459):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "E290D010114220C7BEC4FAC9A95B74FC"
      valueUuid: "location"
      methodExercised:
        expression: "split():configDataLocationArray"
    - type: "LOCAL_VARIABLE"
      name: "profiles"
      modelFingerprint: "786D90F4B0D3AE0A4B5E43E0D10E94DF"
      valueUuid: "profiles"
      methodExercised:
        expression: "iterator():iterator"
    - type: "LOCAL_VARIABLE"
      name: "configDataLocation"
      modelFingerprint: "47D21ACC0E9902C339DC40AF61B557AE"
      valueUuid: "configDataLocation"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid460):string2"
    - type: "LOCAL_VARIABLE"
      name: "loader"
      modelFingerprint: "59890511608BA3E4B3CBC6D6B2CD235E"
      valueUuid: "object3"
      methodExercised:
        expression: "getFileExtensions():stringArray2"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "1061E3A8998F01722AF520B750478C6E"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "endsWithIgnoreCase(str:string6,suffix:string7):boolean9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "FB6A2C41B73D87F90F0A6429FEC819D4"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string9"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "137C3888C517EBF0BE9C7F622D975B09"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string9):boolean13"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "FB6A2C41B73D87F90F0A6429FEC819D4"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string10"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "B40070C228BF86F0E4B38B738ECB852E"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResource(location:string10):resource"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "BDCC07A30222D59A8617A31512D1793C"
      valueUuid: "resource"
      methodExercised:
        expression: "exists():boolean14"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "26CFCE7387A087624B035763D2D0C1A7"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "isSkippable():boolean15"
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "D9582022EE5AAB726BFA6A72D5FDF7FD"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid467,arg1:standardConfigDataReference):logMessage"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "58B545AA90934457B84BF865D6C13D85"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getDirectory():string11"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "FB6A2C41B73D87F90F0A6429FEC819D4"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getResourceLocation():string12"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "137C3888C517EBF0BE9C7F622D975B09"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string12):boolean20"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "58B545AA90934457B84BF865D6C13D85"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getDirectory():string13"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "DA7700B84E60ED2F766C9EF87E16F6CA"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResources(location:string13,type:Enum-org.springframework.boot.context.config.LocationResourceLoader$ResourceType-DIRECTORY):resourceArray"
    - type: "LOCAL_VARIABLE"
      name: "reference"
      modelFingerprint: "F653116F3C54565827793F79546B4FCF"
      valueUuid: "standardConfigDataReference"
      methodExercised:
        expression: "getConfigDataLocation():configDataLocation2"
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "2206CB134164DF2DFC28C192EBFFD53D"
      valueUuid: "configDataLocation2"
      methodExercised:
        expression: "isOptional():boolean21"
    - type: "STATIC"
      name: "ObjectUtils.class"
      modelFingerprint: "CE35DFADFB3210A873EB091539B829B8"
      valueUuid: "ObjectUtils.class"
      methodExercised:
        expression: "isEmpty(array:resourceArray):boolean22"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5B4A067A99D5812A120D5FD0EE735C95"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "if (!this.resourceLoader.isPattern(reference.getResourceLocation()))\
        \ {"
      lineNumber: 300
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: reference - Method: getResourceLocation"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
        parameters:
        - name: "logFactory"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.logging.DeferredLogFactory"
            uuid: "logFactory"
        - name: "binder"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder"
            uuid: "binder"
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.DeferredLogFactory"
      uuid: "logFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "log"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
      uuid: "uniqueUuid452"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.support.SpringFactoriesLoader"
      uuid: "SpringFactoriesLoader.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "list"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.env.PropertySourceLoader"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "uniqueUuid453"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.ClassLoader"
        localVariableValue:
          sapientType: "CLASS"
          content: !<regular>
            value: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          valueType: "java.lang.Class"
          genericValueType: "org.springframework.boot.context.config.StandardConfigDataLocationResolver"
          uuid: "uniqueUuid454"
          fixed: true
        methodParameters: []
        methodName: "getClassLoader"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder"
      uuid: "binder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "BASIC"
      content: !<regular>
        value: "spring.config.name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid455"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.String[]"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.String[]"
      uuid: "uniqueUuid456"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindResult"
      uuid: "bindResult"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "application"
            valueType: "java.lang.String"
            uuid: "uniqueUuid457"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid458"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid459"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.config.ConfigDataLocation[]"
      uuid: "configDataLocationArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.Profiles"
      uuid: "profiles"
    - sapientType: "ITERATOR"
      content: !<iterator>
        collectionValue:
          sapientType: "COLLECTION"
          content: !<collection>
            parameters: []
            values: []
          valueType: "java.util.List"
          genericValueType: "java.lang.String"
          uuid: "iterator-CollectionContent"
      valueType: "java.util.Iterator"
      genericValueType: "java.lang.String"
      uuid: "iterator"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getNonPrefixedValue1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "resource:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid460"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.PropertySourceLoader"
      uuid: "object3"
      collectionUuid: "list"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean9"
    - sapientType: "BASIC"
      content: !<regular>
        value: "str1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "suffix1"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid476"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid477"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean13"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid476"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid477"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string10"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean14"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid476"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid477"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean15"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Skipping missing resource %s"
      valueType: "java.lang.String"
      uuid: "uniqueUuid467"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid476"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid477"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid476"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid477"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string11"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid476"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid477"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean20"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getResourceLocation1"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid476"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid477"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string13"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.core.io.Resource[]"
      uuid: "resourceArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getDirectory1"
      valueType: "java.lang.String"
      uuid: "string13"
    - sapientType: "ENUM"
      content: !<regular>
        value: "DIRECTORY"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader$ResourceType"
      uuid: "Enum-org.springframework.boot.context.config.LocationResourceLoader$ResourceType-DIRECTORY"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.StandardConfigDataReference"
        parameters:
        - name: "configDataLocation"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "configDataLocation"
        - name: "directory"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid476"
        - name: "root"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "root1"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "profile"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "profile1"
            valueType: "java.lang.String"
            uuid: "object2"
            collectionUuid: "iterator-CollectionContent"
        - name: "extension"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid477"
        - name: "propertySourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.env.PropertySourceLoader"
            uuid: "object3"
            collectionUuid: "list"
      valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
      uuid: "standardConfigDataReference"
      collectionUuid: "linkedHashSet"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.boot.context.config.ConfigDataLocation"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.context.config.StandardConfigDataReference"
            parameters:
            - name: "configDataLocation"
              value:
                sapientType: "MOCK"
                valueType: "org.springframework.boot.context.config.ConfigDataLocation"
                uuid: "configDataLocation"
            - name: "directory"
              value:
                sapientType: "NULL"
                valueType: "java.lang.String"
            - name: "root"
              value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "root1"
                valueType: "java.lang.String"
                uuid: "string8"
            - name: "profile"
              value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "profile1"
                valueType: "java.lang.String"
                uuid: "object2"
                collectionUuid: "iterator-CollectionContent"
            - name: "extension"
              value:
                sapientType: "NULL"
                valueType: "java.lang.String"
            - name: "propertySourceLoader"
              value:
                sapientType: "MOCK"
                valueType: "org.springframework.boot.env.PropertySourceLoader"
                uuid: "object3"
                collectionUuid: "list"
          valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
          uuid: "standardConfigDataReference"
          collectionUuid: "linkedHashSet"
        methodParameters: []
        methodName: "getConfigDataLocation"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation2"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.boot.context.config.ConfigDataLocation"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.context.config.StandardConfigDataReference"
            parameters:
            - name: "configDataLocation"
              value:
                sapientType: "MOCK"
                valueType: "org.springframework.boot.context.config.ConfigDataLocation"
                uuid: "configDataLocation"
            - name: "directory"
              value:
                sapientType: "NULL"
                valueType: "java.lang.String"
            - name: "root"
              value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "root1"
                valueType: "java.lang.String"
                uuid: "string8"
            - name: "profile"
              value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "profile1"
                valueType: "java.lang.String"
                uuid: "object2"
                collectionUuid: "iterator-CollectionContent"
            - name: "extension"
              value:
                sapientType: "NULL"
                valueType: "java.lang.String"
            - name: "propertySourceLoader"
              value:
                sapientType: "MOCK"
                valueType: "org.springframework.boot.env.PropertySourceLoader"
                uuid: "object3"
                collectionUuid: "list"
          valueType: "org.springframework.boot.context.config.StandardConfigDataReference"
          uuid: "standardConfigDataReference"
          collectionUuid: "linkedHashSet"
        methodParameters: []
        methodName: "getConfigDataLocation"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "configDataLocation2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean21"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ObjectUtils"
      uuid: "ObjectUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean22"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.core.io.Resource[]"
      uuid: "resourceArray"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.StandardConfigDataResource"
      uuid: "arrayList"
    branches:
    - lineNumber: 156
      expression: "for-each(profiles)"
      range: "(156,25)-(156,32)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 157
      expression: "for-each(configDataLocations)"
      range: "(157,49)-(157,67)"
      evaluatedAs: true
      internalMethodName: "getProfileSpecificReferences"
    - lineNumber: 168
      expression: "resourceLocation.startsWith(\\\"/\\\")"
      range: "(168,24)-(168,55)"
      evaluatedAs: false
      internalMethodName: "getResourceLocation"
    - lineNumber: 168
      expression: "URL_PREFIX.matcher(resourceLocation).matches()"
      range: "(168,60)-(168,105)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 169
      expression: "isAbsolute"
      range: "(169,7)-(169,16)"
      evaluatedAs: true
      internalMethodName: "getResourceLocation"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(\\\"/\\\")"
      range: "(248,10)-(248,39)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 248
      expression: "resourceLocation.endsWith(File.separator)"
      range: "(248,44)-(248,84)"
      evaluatedAs: false
      internalMethodName: "isDirectory"
    - lineNumber: 183
      expression: "isDirectory(resourceLocation)"
      range: "(183,7)-(183,35)"
      evaluatedAs: false
      internalMethodName: "getReferences"
    - lineNumber: 219
      expression: "extensionHintLocation"
      range: "(219,7)-(219,27)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 222
      expression: "for-each(this.propertySourceLoaders)"
      range: "(222,52)-(222,77)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 239
      expression: "for-each(loader.getFileExtensions())"
      range: "(239,31)-(239,56)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 240
      expression: "StringUtils.endsWithIgnoreCase(file, fileExtension)"
      range: "(240,8)-(240,58)"
      evaluatedAs: true
      internalMethodName: "getLoadableFileExtension"
    - lineNumber: 224
      expression: "extension != null"
      range: "(224,8)-(224,24)"
      evaluatedAs: true
      internalMethodName: "getReferencesForFile"
    - lineNumber: 227
      expression: "!extensionHintLocation"
      range: "(227,17)-(227,38)"
      evaluatedAs: false
      internalMethodName: "getReferencesForFile"
    - lineNumber: 253
      expression: "for-each(references)"
      range: "(253,48)-(253,57)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 300
      expression: "!this.resourceLoader.isPattern(reference.getResourceLocation())"
      range: "(300,7)-(300,69)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 308
      expression: "!resource.exists()"
      range: "(308,7)-(308,24)"
      evaluatedAs: true
      internalMethodName: "resolveNonPattern"
    - lineNumber: 308
      expression: "reference.isSkippable()"
      range: "(308,29)-(308,51)"
      evaluatedAs: true
      internalMethodName: "resolveNonPattern"
    - lineNumber: 256
      expression: "resolved.isEmpty()"
      range: "(256,7)-(256,24)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 265
      expression: "for-each(references)"
      range: "(265,48)-(265,57)"
      evaluatedAs: true
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 266
      expression: "reference.getDirectory() != null"
      range: "(266,8)-(266,39)"
      evaluatedAs: true
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 274
      expression: "!this.resourceLoader.isPattern(reference.getResourceLocation())"
      range: "(274,7)-(274,69)"
      evaluatedAs: false
      internalMethodName: "resolveEmptyDirectories"
    - lineNumber: 289
      expression: "!location.isOptional()"
      range: "(289,7)-(289,28)"
      evaluatedAs: true
      internalMethodName: "resolvePatternEmptyDirectories"
    - lineNumber: 289
      expression: "ObjectUtils.isEmpty(subdirectories)"
      range: "(289,33)-(289,67)"
      evaluatedAs: false
      internalMethodName: "resolvePatternEmptyDirectories"
