---
modelFingerprint: "7CA302A61B2F92C152A85333AFBEAC19"
targetClass:
  fullClassName: "org.springframework.boot.context.config.ConfigTreeConfigDataLocationResolver"
methods:
- method:
    name: "isResolvable"
    sourceCodeSignature: "boolean isResolvable(ConfigDataLocationResolverContext context,\
      \ ConfigDataLocation location)"
    returnType: "boolean"
    parameters:
    - name: "context"
      type: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
    - name: "location"
      type: "org.springframework.boot.context.config.ConfigDataLocation"
    instructionFingerprint: "C4A269CB06C74E7BA7F1268EAC2A9B2E"
  paths:
  - pathId: "path1"
    testPathName: "isResolvableWhenLocationHasPrefixPREFIX"
    constructorSignature: "<init>(org.springframework.core.io.ResourceLoader) : void"
    modelFingerprint: "F9615BFF25D4B085FDF554F7A9307F1D"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "EB6C2D19B9D341429B01DD7C19DEBD7B"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "D086EA19AF4D86C7E06CA668C946A015"
      valueUuid: "location"
      methodExercised:
        expression: "hasPrefix(prefix:uniqueUuid1):boolean1"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigTreeConfigDataLocationResolver"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.ConfigTreeConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "configtree:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    branches:
    - lineNumber: 48
      expression: "location.hasPrefix(PREFIX)"
      range: "(48,10)-(48,35)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "isResolvableWhenLocationNotHasPrefixPREFIX"
    constructorSignature: "<init>(org.springframework.core.io.ResourceLoader) : void"
    modelFingerprint: "CB5985DB6CA60DD35BC3A73263BB261D"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "EB6C2D19B9D341429B01DD7C19DEBD7B"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "581C785DC31AC2AE01E92BC465CC9534"
      valueUuid: "location"
      methodExercised:
        expression: "hasPrefix(prefix:uniqueUuid2):boolean1"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5633A2B0C967879105766C98D64A3959"
      valueUuid: "boolean1"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigTreeConfigDataLocationResolver"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.ConfigTreeConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "configtree:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
      fixed: true
    branches:
    - lineNumber: 48
      expression: "location.hasPrefix(PREFIX)"
      range: "(48,10)-(48,35)"
      evaluatedAs: false
- method:
    name: "resolve"
    sourceCodeSignature: "List<ConfigTreeConfigDataResource> resolve(ConfigDataLocationResolverContext\
      \ context, ConfigDataLocation location)"
    returnType: "java.util.List"
    genericReturnType: "org.springframework.boot.context.config.ConfigTreeConfigDataResource"
    parameters:
    - name: "context"
      type: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
    - name: "location"
      type: "org.springframework.boot.context.config.ConfigDataLocation"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
    instructionFingerprint: "FD04030397599E69E124EE87A1550814"
  paths:
  - pathId: "path1"
    testPathName: "resolveWhenThisResourceLoaderNotIsPatternLocation"
    constructorSignature: "<init>(org.springframework.core.io.ResourceLoader) : void"
    modelFingerprint: "ACD189E17D07E5EE90680CCCCBFB90C0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "EB6C2D19B9D341429B01DD7C19DEBD7B"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "22FACE08DB6A214AE47ABD0EAF94BBAC"
      valueUuid: "location"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid3):string"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "283F01945878D86DEBA8712EC3B2C2AF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean1,messageSupplier:uniqueUuid4):void"
        staticAccess: true
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "B1BE1B36376DF84517BDBE130608A08C"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string):boolean2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C9D5420A3E737436B55C9EC2F3512DFC"
      valueUuid: "list"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "if (!this.resourceLoader.isPattern(location)) {"
      lineNumber: 65
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: resourceLoader - Method: isPattern"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigTreeConfigDataLocationResolver"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.ConfigTreeConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "configtree:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid4"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.context.config.ConfigTreeConfigDataResource"
            parameters:
            - name: "path"
              value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "A"
                valueType: "java.lang.String"
                uuid: "string"
          valueType: "org.springframework.boot.context.config.ConfigTreeConfigDataResource"
          uuid: "configTreeConfigDataResource"
          fixed: true
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.ConfigTreeConfigDataResource"
      uuid: "list"
    branches:
    - lineNumber: 65
      expression: "!this.resourceLoader.isPattern(location)"
      range: "(65,7)-(65,46)"
      evaluatedAs: true
      internalMethodName: "resolve"
  - pathId: "path4"
    testPathName: "resolveWhenCaughtIOExceptionThrowsConfigDataLocationNotFoundException"
    constructorSignature: "<init>(org.springframework.core.io.ResourceLoader) : void"
    modelFingerprint: "331F81DEA34854BEC343C4BBF9D1CC19"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "EB6C2D19B9D341429B01DD7C19DEBD7B"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "22FACE08DB6A214AE47ABD0EAF94BBAC"
      valueUuid: "location"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid5):string"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "283F01945878D86DEBA8712EC3B2C2AF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean1,messageSupplier:uniqueUuid6):void"
        staticAccess: true
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "B1BE1B36376DF84517BDBE130608A08C"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string):boolean2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "7B351787198C105AC433C31639EF4078"
      valueUuid: "configDataLocationNotFoundException"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "if (!this.resourceLoader.isPattern(location)) {"
      lineNumber: 65
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: resourceLoader - Method: isPattern"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigTreeConfigDataLocationResolver"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.ConfigTreeConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "configtree:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid6"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigDataLocationNotFoundException"
        parameters:
        - name: "location"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.config.ConfigDataLocation"
            uuid: "location"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.IOException"
              parameters: []
            valueType: "java.io.IOException"
            uuid: "iOException"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationNotFoundException"
      uuid: "configDataLocationNotFoundException"
      fixed: true
    branches:
    - lineNumber: 65
      expression: "!this.resourceLoader.isPattern(location)"
      range: "(65,7)-(65,46)"
      evaluatedAs: true
      internalMethodName: "resolve"
    - lineNumber: 57
      expression: "catch-exception (IOException)"
      range: "(57,3)-(57,23)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
  - pathId: "path2"
    testPathName: "resolveWhenResourcesIsNotEmpty"
    constructorSignature: "<init>(org.springframework.core.io.ResourceLoader) : void"
    modelFingerprint: "9DFC51B5036471B168345248CB98809E"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "EB6C2D19B9D341429B01DD7C19DEBD7B"
      valueUuid: "target"
    - type: "INPUT"
      name: "context"
      modelFingerprint: "871FEFB5409D506BCB70E00622B7AF27"
      valueUuid: "context"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "D0468369DD4B40CC8AAED040112B03C7"
      valueUuid: "location"
    - type: "LOCAL_VARIABLE"
      name: "location"
      modelFingerprint: "22FACE08DB6A214AE47ABD0EAF94BBAC"
      valueUuid: "location"
      methodExercised:
        expression: "getNonPrefixedValue(prefix:uniqueUuid7):string"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "283F01945878D86DEBA8712EC3B2C2AF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean1,messageSupplier:uniqueUuid8):void"
        staticAccess: true
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "AD079F5C2C77AC3AB7A9CE27DF068826"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "isPattern(location:string):boolean2"
    - type: "FIELD"
      name: "resourceLoader"
      modelFingerprint: "42D7667614F30783DC553F61B317F27B"
      valueUuid: "locationResourceLoader"
      methodExercised:
        expression: "getResources(location:string,type:Enum-org.springframework.boot.context.config.LocationResourceLoader$ResourceType-DIRECTORY):resourceArray"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "9EB762CC4FE6DBCBF31BD1EFA4F5E5E2"
      valueUuid: "resource"
      methodExercised:
        expression: "getFile():file"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C7F048CF4D1B55FB7749546EAF2C4ED8"
      valueUuid: "arrayList"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "if (!this.resourceLoader.isPattern(location)) {"
      lineNumber: 65
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: resourceLoader - Method: isPattern"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.ConfigTreeConfigDataLocationResolver"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.ConfigTreeConfigDataLocationResolver"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocationResolverContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.config.ConfigDataLocation"
      uuid: "location"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "configtree:"
      valueType: "java.lang.String"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid8"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.config.LocationResourceLoader"
        parameters:
        - name: "resourceLoader"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.ResourceLoader"
            uuid: "resourceLoader"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader"
      uuid: "locationResourceLoader"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "MOCK"
            valueType: "org.springframework.core.io.Resource"
            uuid: "resource"
      valueType: "org.springframework.core.io.Resource[]"
      uuid: "resourceArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "ENUM"
      content: !<regular>
        value: "DIRECTORY"
      valueType: "org.springframework.boot.context.config.LocationResourceLoader$ResourceType"
      uuid: "Enum-org.springframework.boot.context.config.LocationResourceLoader$ResourceType-DIRECTORY"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.io.Resource"
      uuid: "resource"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters:
        - name: "initialCapacity"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 1
            valueType: "int"
            uuid: "int1"
        values:
        - sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.context.config.ConfigTreeConfigDataResource"
            parameters:
            - name: "path"
              value:
                sapientType: "MOCK"
                valueType: "java.nio.file.Path"
                uuid: "path"
          valueType: "org.springframework.boot.context.config.ConfigTreeConfigDataResource"
          uuid: "configTreeConfigDataResource"
          fixed: true
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.context.config.ConfigTreeConfigDataResource"
      uuid: "arrayList"
    branches:
    - lineNumber: 65
      expression: "!this.resourceLoader.isPattern(location)"
      range: "(65,7)-(65,46)"
      evaluatedAs: false
      internalMethodName: "resolve"
    - lineNumber: 70
      expression: "for-each(resources)"
      range: "(70,28)-(70,36)"
      evaluatedAs: true
      internalMethodName: "resolve"
