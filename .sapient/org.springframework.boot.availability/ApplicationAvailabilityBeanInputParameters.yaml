---
modelFingerprint: "5582D25D78A54F5B5E1B5865A8B128CB"
targetClass:
  fullClassName: "org.springframework.boot.availability.ApplicationAvailabilityBean"
methods:
- method:
    name: "getState"
    sourceCodeSignature: "<S extends AvailabilityState> S getState(Class<S> stateType,\
      \ S defaultState)"
    returnType: "org.springframework.boot.availability.AvailabilityState"
    parameters:
    - name: "stateType"
      type: "java.lang.Class"
    - name: "defaultState"
      type: "org.springframework.boot.availability.AvailabilityState"
    instructionFingerprint: "27252248D1C2F3B12CFBDFDC4AA81266"
  paths:
  - pathId: "path1"
    testPathName: "getStateWhenStateIsNotNull"
    constructorSignature: "<init>(org.apache.commons.logging.Log) : void"
    modelFingerprint: "EF17E0339345FB0D0FA4E7AA42358C93"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "CDCAA2C4468DE72582292302DB8E67AA"
      valueUuid: "target"
    - type: "INPUT"
      name: "stateType"
      modelFingerprint: "43F71249B0A4862A6A0D73F80F0C5C22"
      valueUuid: "stateType"
    - type: "INPUT"
      name: "defaultState"
      modelFingerprint: "85AEF98B874A049B35CDE38C6F12E13B"
      valueUuid: "defaultState"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "7FFDB3B4AF293F9808358F7BEA739A9D"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:stateType,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "39EF4CC0497B665E270A4A5EDD39554A"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:defaultState,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "048870D6B14F5B01770B080BC54E1D86"
      methodExercised:
        expression: "getState(stateType:stateType):availabilityState"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4F2D32C6C27E7A543CEDD1E93DCDD412"
      valueUuid: "availabilityState"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.availability.ApplicationAvailabilityBean"
        parameters:
        - name: "logger"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.apache.commons.logging.impl.NoOpLog"
              parameters: []
            valueType: "org.apache.commons.logging.impl.NoOpLog"
            uuid: "logger"
      valueType: "org.springframework.boot.availability.ApplicationAvailabilityBean"
      uuid: "target"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.availability.AvailabilityState"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "stateType"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "defaultState"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.availability.AvailabilityState"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "stateType"
    - sapientType: "BASIC"
      content: !<regular>
        value: "StateType must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "defaultState"
    - sapientType: "BASIC"
      content: !<regular>
        value: "DefaultState must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "availabilityState"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.availability.AvailabilityState"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "stateType"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "availabilityState"
    branches:
    - lineNumber: 58
      expression: "state != null"
      range: "(58,11)-(58,23)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "getStateWhenStateIsNull"
    constructorSignature: "<init>(org.apache.commons.logging.Log) : void"
    modelFingerprint: "C922DC40BE4BAB128836BEF58FF09E51"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "CDCAA2C4468DE72582292302DB8E67AA"
      valueUuid: "target"
    - type: "INPUT"
      name: "stateType"
      modelFingerprint: "43F71249B0A4862A6A0D73F80F0C5C22"
      valueUuid: "stateType"
    - type: "INPUT"
      name: "defaultState"
      modelFingerprint: "85AEF98B874A049B35CDE38C6F12E13B"
      valueUuid: "defaultState"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "7FFDB3B4AF293F9808358F7BEA739A9D"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:stateType,message:uniqueUuid3):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "39EF4CC0497B665E270A4A5EDD39554A"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:defaultState,message:uniqueUuid4):void2"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "D228E5559F6ABCAD491D9761CBF44B7D"
      methodExercised:
        expression: "getState(stateType:stateType):availabilityState"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "EE57C2EF75BD3D98FE6E7C1003CF0DF4"
      valueUuid: "defaultState"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.availability.ApplicationAvailabilityBean"
        parameters:
        - name: "logger"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.apache.commons.logging.impl.NoOpLog"
              parameters: []
            valueType: "org.apache.commons.logging.impl.NoOpLog"
            uuid: "logger"
      valueType: "org.springframework.boot.availability.ApplicationAvailabilityBean"
      uuid: "target"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.availability.AvailabilityState"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "stateType"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "defaultState"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.availability.AvailabilityState"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "stateType"
    - sapientType: "BASIC"
      content: !<regular>
        value: "StateType must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "defaultState"
    - sapientType: "BASIC"
      content: !<regular>
        value: "DefaultState must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "NULL"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "availabilityState"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.availability.AvailabilityState"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "stateType"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "defaultState"
    branches:
    - lineNumber: 58
      expression: "state != null"
      range: "(58,11)-(58,23)"
      evaluatedAs: false
- method:
    name: "getState"
    sourceCodeSignature: "<S extends AvailabilityState> S getState(Class<S> stateType)"
    returnType: "org.springframework.boot.availability.AvailabilityState"
    parameters:
    - name: "stateType"
      type: "java.lang.Class"
    instructionFingerprint: "F1B11B2C98BACD78F5B96FD62A6BBF6F"
  paths:
  - pathId: "path1"
    testPathName: "getState1WhenEventIsNull"
    constructorSignature: "<init>(org.apache.commons.logging.Log) : void"
    modelFingerprint: "EF2160967FF4A6D9DB1A3FBB19BB970F"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "CDCAA2C4468DE72582292302DB8E67AA"
      valueUuid: "target"
    - type: "INPUT"
      name: "stateType"
      modelFingerprint: "43F71249B0A4862A6A0D73F80F0C5C22"
      valueUuid: "stateType"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B9BEFD3647329BCAC1C038C1ADB258FE"
      valueUuid: "availabilityState"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.availability.ApplicationAvailabilityBean"
        parameters:
        - name: "logger"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.apache.commons.logging.impl.NoOpLog"
              parameters: []
            valueType: "org.apache.commons.logging.impl.NoOpLog"
            uuid: "logger"
      valueType: "org.springframework.boot.availability.ApplicationAvailabilityBean"
      uuid: "target"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.availability.AvailabilityState"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "stateType"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "availabilityState"
      fixed: true
    branches:
    - lineNumber: 64
      expression: "event != null"
      range: "(64,11)-(64,23)"
      evaluatedAs: false
- method:
    name: "getLastChangeEvent"
    sourceCodeSignature: "<S extends AvailabilityState> AvailabilityChangeEvent<S>\
      \ getLastChangeEvent(Class<S> stateType)"
    returnType: "org.springframework.boot.availability.AvailabilityChangeEvent"
    parameters:
    - name: "stateType"
      type: "java.lang.Class"
    instructionFingerprint: "BD41936CD82A34963CF6DA56282EC4C1"
  paths:
  - pathId: "path1"
    testPathName: "getLastChangeEventTest"
    constructorSignature: "<init>(org.apache.commons.logging.Log) : void"
    modelFingerprint: "0D0847535DC7939394C58ECFF28C88DB"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "CDCAA2C4468DE72582292302DB8E67AA"
      valueUuid: "target"
    - type: "INPUT"
      name: "stateType"
      modelFingerprint: "43F71249B0A4862A6A0D73F80F0C5C22"
      valueUuid: "stateType"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "03B8D75DD30328AC088A82D977BEB210"
      valueUuid: "availabilityChangeEvent"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.availability.ApplicationAvailabilityBean"
        parameters:
        - name: "logger"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.apache.commons.logging.impl.NoOpLog"
              parameters: []
            valueType: "org.apache.commons.logging.impl.NoOpLog"
            uuid: "logger"
      valueType: "org.springframework.boot.availability.ApplicationAvailabilityBean"
      uuid: "target"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.availability.AvailabilityState"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "stateType"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.availability.AvailabilityChangeEvent"
      genericValueType: "?"
      uuid: "availabilityChangeEvent"
      collectionUuid: "concurrentHashMap"
- method:
    name: "onApplicationEvent"
    sourceCodeSignature: "void onApplicationEvent(AvailabilityChangeEvent<?> event)"
    returnType: "void"
    parameters:
    - name: "event"
      type: "org.springframework.boot.availability.AvailabilityChangeEvent"
    instructionFingerprint: "3C10DAD22C23BD6E9603E815D2A7A5FA"
  paths:
  - pathId: "path1"
    testPathName: "onApplicationEventWhenSourceInstanceOfApplicationEventPublisher"
    constructorSignature: "<init>(org.apache.commons.logging.Log) : void"
    modelFingerprint: "B9D4E56789232C06D767531A94663D06"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "CDCAA2C4468DE72582292302DB8E67AA"
      valueUuid: "target"
    - type: "INPUT"
      name: "event"
      modelFingerprint: "A5B6331741E138649B14CCBE18B368BA"
      valueUuid: "event"
    - type: "LOCAL_VARIABLE"
      name: "event"
      modelFingerprint: "7867D15B6A9445EB8DDA66EADF2094DA"
      valueUuid: "event"
      methodExercised:
        expression: "getState():availabilityState"
    - type: "LOCAL_VARIABLE"
      name: "event"
      modelFingerprint: "7867D15B6A9445EB8DDA66EADF2094DA"
      valueUuid: "event"
      methodExercised:
        expression: "getState():availabilityState2"
    - type: "LOCAL_VARIABLE"
      name: "event"
      modelFingerprint: "7B6176DFEE4FB4E1216BBAA5BFAA7C96"
      valueUuid: "event"
      methodExercised:
        expression: "getSource():object"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.availability.ApplicationAvailabilityBean"
        parameters:
        - name: "logger"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.apache.commons.logging.impl.NoOpLog"
              parameters: []
            valueType: "org.apache.commons.logging.impl.NoOpLog"
            uuid: "logger"
      valueType: "org.springframework.boot.availability.ApplicationAvailabilityBean"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityChangeEvent"
      genericValueType: "?"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityChangeEvent"
      genericValueType: "?"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "availabilityState"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityChangeEvent"
      genericValueType: "?"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "availabilityState2"
      nameForMock: "availabilityState2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityChangeEvent"
      genericValueType: "?"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationEventPublisher"
      uuid: "object"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 101
      expression: "state instanceof Enum"
      range: "(101,20)-(101,40)"
      evaluatedAs: false
      internalMethodName: "getStateType"
    - lineNumber: 76
      expression: "this.logger.isDebugEnabled()"
      range: "(76,7)-(76,34)"
      evaluatedAs: true
    - lineNumber: 86
      expression: "lastChangeEvent != null"
      range: "(86,19)-(86,41)"
      evaluatedAs: false
      internalMethodName: "getLogMessage"
    - lineNumber: 93
      expression: "source == null"
      range: "(93,7)-(93,20)"
      evaluatedAs: false
      internalMethodName: "getSourceDescription"
    - lineNumber: 93
      expression: "source instanceof ApplicationEventPublisher"
      range: "(93,25)-(93,67)"
      evaluatedAs: true
      internalMethodName: "getSourceDescription"
  - pathId: "path2"
    testPathName: "onApplicationEventWhenSourceInstanceOfThrowable"
    constructorSignature: "<init>(org.apache.commons.logging.Log) : void"
    modelFingerprint: "1786F77F721FE2A5750E0FEB03A6B5CC"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "B0F57165A6EFC377D89C37DCA1DD2BC1"
      valueUuid: "target"
    - type: "INPUT"
      name: "event"
      modelFingerprint: "A5B6331741E138649B14CCBE18B368BA"
      valueUuid: "event"
    - type: "LOCAL_VARIABLE"
      name: "event"
      modelFingerprint: "7867D15B6A9445EB8DDA66EADF2094DA"
      valueUuid: "event"
      methodExercised:
        expression: "getState():availabilityState"
    - type: "LOCAL_VARIABLE"
      name: "event"
      modelFingerprint: "7867D15B6A9445EB8DDA66EADF2094DA"
      valueUuid: "event"
      methodExercised:
        expression: "getState():availabilityState2"
    - type: "LOCAL_VARIABLE"
      name: "event"
      modelFingerprint: "1E0379D88B1E5A3C745E8EEFC600AC1F"
      valueUuid: "event"
      methodExercised:
        expression: "getSource():object"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.availability.ApplicationAvailabilityBean"
        parameters:
        - name: "logger"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.apache.commons.logging.impl.NoOpLog"
              parameters: []
            valueType: "org.apache.commons.logging.impl.NoOpLog"
            uuid: "logger"
      valueType: "org.springframework.boot.availability.ApplicationAvailabilityBean"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityChangeEvent"
      genericValueType: "?"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityChangeEvent"
      genericValueType: "?"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "availabilityState"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityChangeEvent"
      genericValueType: "?"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "availabilityState2"
      nameForMock: "availabilityState2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityChangeEvent"
      genericValueType: "?"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "java.lang.Throwable"
      uuid: "object"
      nameForMock: "object"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 101
      expression: "state instanceof Enum"
      range: "(101,20)-(101,40)"
      evaluatedAs: false
      internalMethodName: "getStateType"
    - lineNumber: 76
      expression: "this.logger.isDebugEnabled()"
      range: "(76,7)-(76,34)"
      evaluatedAs: true
    - lineNumber: 86
      expression: "lastChangeEvent != null"
      range: "(86,19)-(86,41)"
      evaluatedAs: false
      internalMethodName: "getLogMessage"
    - lineNumber: 93
      expression: "source == null"
      range: "(93,7)-(93,20)"
      evaluatedAs: false
      internalMethodName: "getSourceDescription"
    - lineNumber: 93
      expression: "source instanceof ApplicationEventPublisher"
      range: "(93,25)-(93,67)"
      evaluatedAs: false
      internalMethodName: "getSourceDescription"
    - lineNumber: 96
      expression: "source instanceof Throwable"
      range: "(96,19)-(96,45)"
      evaluatedAs: true
      internalMethodName: "getSourceDescription"
  - pathId: "path3"
    testPathName: "onApplicationEventWhenSourceNotInstanceOfThrowable"
    constructorSignature: "<init>(org.apache.commons.logging.Log) : void"
    modelFingerprint: "2BD106C32C79B7AB6D9BB268F9A13D89"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "CDCAA2C4468DE72582292302DB8E67AA"
      valueUuid: "target"
    - type: "INPUT"
      name: "event"
      modelFingerprint: "A5B6331741E138649B14CCBE18B368BA"
      valueUuid: "event"
    - type: "LOCAL_VARIABLE"
      name: "event"
      modelFingerprint: "7867D15B6A9445EB8DDA66EADF2094DA"
      valueUuid: "event"
      methodExercised:
        expression: "getState():availabilityState"
    - type: "LOCAL_VARIABLE"
      name: "event"
      modelFingerprint: "7867D15B6A9445EB8DDA66EADF2094DA"
      valueUuid: "event"
      methodExercised:
        expression: "getState():availabilityState2"
    - type: "LOCAL_VARIABLE"
      name: "event"
      modelFingerprint: "E064E8C867CD3993320870FF0376AF31"
      valueUuid: "event"
      methodExercised:
        expression: "getSource():object"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.availability.ApplicationAvailabilityBean"
        parameters:
        - name: "logger"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.apache.commons.logging.impl.NoOpLog"
              parameters: []
            valueType: "org.apache.commons.logging.impl.NoOpLog"
            uuid: "logger"
      valueType: "org.springframework.boot.availability.ApplicationAvailabilityBean"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityChangeEvent"
      genericValueType: "?"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityChangeEvent"
      genericValueType: "?"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "availabilityState"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityChangeEvent"
      genericValueType: "?"
      uuid: "event"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "availabilityState2"
      nameForMock: "availabilityState2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityChangeEvent"
      genericValueType: "?"
      uuid: "event"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 101
      expression: "state instanceof Enum"
      range: "(101,20)-(101,40)"
      evaluatedAs: false
      internalMethodName: "getStateType"
    - lineNumber: 76
      expression: "this.logger.isDebugEnabled()"
      range: "(76,7)-(76,34)"
      evaluatedAs: true
    - lineNumber: 86
      expression: "lastChangeEvent != null"
      range: "(86,19)-(86,41)"
      evaluatedAs: false
      internalMethodName: "getLogMessage"
    - lineNumber: 93
      expression: "source == null"
      range: "(93,7)-(93,20)"
      evaluatedAs: false
      internalMethodName: "getSourceDescription"
    - lineNumber: 93
      expression: "source instanceof ApplicationEventPublisher"
      range: "(93,25)-(93,67)"
      evaluatedAs: false
      internalMethodName: "getSourceDescription"
    - lineNumber: 96
      expression: "source instanceof Throwable"
      range: "(96,19)-(96,45)"
      evaluatedAs: false
      internalMethodName: "getSourceDescription"
