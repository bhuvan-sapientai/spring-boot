---
modelFingerprint: "6519472075CC58E6D6F9B8355A78A883"
targetClass:
  fullClassName: "org.springframework.boot.availability.AvailabilityChangeEvent"
methods:
- method:
    name: "getState"
    sourceCodeSignature: "S getState()"
    returnType: "org.springframework.boot.availability.AvailabilityState"
    instructionFingerprint: "C11665DDB5AB3BC007CD0F62F3522683"
  paths:
  - pathId: "path1"
    testPathName: "getStateTest"
    constructorSignature: "<init>(java.lang.Object,org.springframework.boot.availability.AvailabilityState)\
      \ : void"
    modelFingerprint: "0C25361DF0D463FA5AB54C616CBB46B2"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "5AD5E64FF35BB9249D48B924D3F0E9CF"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "75504B09AA7ADF31F9393DEE89868EAF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:state,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "ResolvableType.class"
      modelFingerprint: "8EBB7FE225E4A4BE7C4F7FE14646983A"
      valueUuid: "ResolvableType.class"
      methodExercised:
        expression: "forInstance(instance:state):resolvableType"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "EE57C2EF75BD3D98FE6E7C1003CF0DF4"
      valueUuid: "state"
    disabled: false
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_UNSOLVABLE"
      source: "* Return the changed availability state."
      lineNumber: 49
      details: "Method java.lang.System::currentTimeMillis has a unrepeatable behavior"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.availability.AvailabilityChangeEvent"
        parameters:
        - name: "source"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "source"
        - name: "state"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.availability.AvailabilityState"
            uuid: "state"
      valueType: "org.springframework.boot.availability.AvailabilityChangeEvent"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "state"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Payload must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "ResolvableType.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "state"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "state"
- method:
    name: "getResolvableType"
    sourceCodeSignature: "ResolvableType getResolvableType()"
    returnType: "org.springframework.core.ResolvableType"
    instructionFingerprint: "0EB37F7E66C88E4547E9603255A019C0"
  paths:
  - pathId: "path1"
    testPathName: "getResolvableTypeWhenStateNotInstanceOfEnum"
    constructorSignature: "<init>(java.lang.Object,org.springframework.boot.availability.AvailabilityState)\
      \ : void"
    modelFingerprint: "3F002DB7C7CAF360E25F902F951763F6"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "5AD5E64FF35BB9249D48B924D3F0E9CF"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "75504B09AA7ADF31F9393DEE89868EAF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:state,message:uniqueUuid2):void"
        staticAccess: true
    - type: "STATIC"
      name: "ResolvableType.class"
      modelFingerprint: "8EBB7FE225E4A4BE7C4F7FE14646983A"
      valueUuid: "ResolvableType.class"
      methodExercised:
        expression: "forInstance(instance:state):resolvableType"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "537E7995718E6DEE41C11F64248EF589"
      methodExercised:
        expression: "getState():availabilityState"
    - type: "STATIC"
      name: "ResolvableType.class"
      modelFingerprint: "5B394A49B3F3954BBD28B6B12C925E5B"
      valueUuid: "ResolvableType.class"
      methodExercised:
        expression: "forClassWithGenerics(clazz:uniqueUuid3,generics:classArray):resolvableType2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "29E95F4710407678FB7C4DBF7C0DA79F"
      valueUuid: "resolvableType2"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_UNSOLVABLE"
      source: "* Return the changed availability state."
      lineNumber: 49
      details: "Method java.lang.System::currentTimeMillis has a unrepeatable behavior"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.availability.AvailabilityChangeEvent"
        parameters:
        - name: "source"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "source"
        - name: "state"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.availability.AvailabilityState"
            uuid: "state"
      valueType: "org.springframework.boot.availability.AvailabilityChangeEvent"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "state"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Payload must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "ResolvableType.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "state"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "availabilityState"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "ResolvableType.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType2"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.availability.AvailabilityChangeEvent"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.availability.AvailabilityChangeEvent"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "CLASS"
            content: !<regular>
              value: "org.springframework.boot.availability.AvailabilityState"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "class"
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "classArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType2"
    branches:
    - lineNumber: 63
      expression: "state instanceof Enum"
      range: "(63,7)-(63,27)"
      evaluatedAs: false
      internalMethodName: "getStateType"
- method:
    name: "publish"
    sourceCodeSignature: "<S extends AvailabilityState> void publish(ApplicationContext\
      \ context, S state)"
    returnType: "void"
    parameters:
    - name: "context"
      type: "org.springframework.context.ApplicationContext"
    - name: "state"
      type: "org.springframework.boot.availability.AvailabilityState"
    instructionFingerprint: "C21E554661FCAA9FCEB436E3ED34A1EA"
  paths:
  - pathId: "path1"
    testPathName: "publishTest"
    modelFingerprint: "1231332297426D0417961A9CAAC58BF9"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "context"
      modelFingerprint: "6596023CDCF1B2D399C9B8A5AE1D7BBD"
      valueUuid: "context"
    - type: "INPUT"
      name: "state"
      modelFingerprint: "FBFA7A7EA48DA2050F188703209C02FA"
      valueUuid: "state"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "3A3FC09E6C2A98E6CD44A9076B3E3E5B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:context,message:uniqueUuid4):void"
        staticAccess: true
    - type: "STATIC"
      name: "AvailabilityChangeEvent.class"
      modelFingerprint: "551729B04986DC4E6C801CB21C65E797"
      valueUuid: "AvailabilityChangeEvent.class"
      methodExercised:
        expression: "publish(publisher:context,source:context,state:state):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "state"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "context"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Context must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityChangeEvent"
      uuid: "AvailabilityChangeEvent.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "state"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "publish"
    sourceCodeSignature: "<S extends AvailabilityState> void publish(ApplicationEventPublisher\
      \ publisher, Object source, S state)"
    returnType: "void"
    parameters:
    - name: "publisher"
      type: "org.springframework.context.ApplicationEventPublisher"
    - name: "source"
      type: "java.lang.Object"
    - name: "state"
      type: "org.springframework.boot.availability.AvailabilityState"
    instructionFingerprint: "0F2AB2BF9ED47C4C617FCEE7B66350DD"
  paths:
  - pathId: "path1"
    testPathName: "publish1Test"
    modelFingerprint: "148295AA22FB440C0DB889215593828F"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "publisher"
      modelFingerprint: "E6C22CB7C1CC6B32F8CF04975905F68C"
      valueUuid: "publisher"
    - type: "INPUT"
      name: "source"
      modelFingerprint: "15807D8829DAD06E1E69045860E44740"
      valueUuid: "source"
    - type: "INPUT"
      name: "state"
      modelFingerprint: "FBFA7A7EA48DA2050F188703209C02FA"
      valueUuid: "state"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "67C79579C038802B77E520D0522DF297"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:publisher,message:uniqueUuid5):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "75504B09AA7ADF31F9393DEE89868EAF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:state,message:uniqueUuid6):void2"
        staticAccess: true
    - type: "STATIC"
      name: "ResolvableType.class"
      modelFingerprint: "8EBB7FE225E4A4BE7C4F7FE14646983A"
      valueUuid: "ResolvableType.class"
      methodExercised:
        expression: "forInstance(instance:state):resolvableType"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "publisher"
      modelFingerprint: "599DD8B95659F9D6239E8E0B55E481BF"
      valueUuid: "publisher"
      methodExercised:
        expression: "publishEvent(event:availabilityChangeEvent):void3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_UNSOLVABLE"
      source: "* Return the changed availability state."
      lineNumber: 49
      details: "Method java.lang.System::currentTimeMillis has a unrepeatable behavior"
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationEventPublisher"
      uuid: "publisher"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "source"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "state"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationEventPublisher"
      uuid: "publisher"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Publisher must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "state"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Payload must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "ResolvableType.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.availability.AvailabilityState"
      uuid: "state"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationEventPublisher"
      uuid: "publisher"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.boot.availability.AvailabilityChangeEvent"
      uuid: "availabilityChangeEvent"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
