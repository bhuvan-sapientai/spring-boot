---
modelFingerprint: "64E15A9A7CF549BBB66043DE26E54D12"
targetClass:
  fullClassName: "org.springframework.boot.system.ApplicationPid"
methods:
- method:
    name: "equals"
    sourceCodeSignature: "boolean equals(Object obj)"
    returnType: "boolean"
    parameters:
    - name: "obj"
      type: "java.lang.Object"
    instructionFingerprint: "BF5AC2B0EFA6426D170EA5CE4513A99D"
  paths:
  - pathId: "path1"
    testPathName: "equalsWhenObjEqualsThis"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "A710901F24F004CF98B35370FE232B7F"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
    branches:
    - lineNumber: 62
      expression: "obj == this"
      range: "(62,7)-(62,17)"
      evaluatedAs: true
  - pathId: "path4"
    testPathName: "equalsWhenObjNotInstanceOfApplicationPid"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "4B151158E0E19E49FD07EF1F41B770A7"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
    branches:
    - lineNumber: 62
      expression: "obj == this"
      range: "(62,7)-(62,17)"
      evaluatedAs: false
    - lineNumber: 65
      expression: "obj instanceof ApplicationPid other"
      range: "(65,7)-(65,41)"
      evaluatedAs: false
  - pathId: "path2"
    testPathName: "equalsWhenObjectUtilsNullSafeEqualsThisPidOtherPid"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "E3A386217298A2478F1521FA52350102"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
    branches:
    - lineNumber: 62
      expression: "obj == this"
      range: "(62,7)-(62,17)"
      evaluatedAs: false
    - lineNumber: 65
      expression: "obj instanceof ApplicationPid other"
      range: "(65,7)-(65,41)"
      evaluatedAs: true
    - lineNumber: 66
      expression: "ObjectUtils.nullSafeEquals(this.pid, other.pid)"
      range: "(66,11)-(66,57)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "equalsWhenObjectUtilsNotNullSafeEqualsThisPidOtherPid"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "7C625529A08786A8D6D88ECCFC3141C2"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
    branches:
    - lineNumber: 62
      expression: "obj == this"
      range: "(62,7)-(62,17)"
      evaluatedAs: false
    - lineNumber: 65
      expression: "obj instanceof ApplicationPid other"
      range: "(65,7)-(65,41)"
      evaluatedAs: true
    - lineNumber: 66
      expression: "ObjectUtils.nullSafeEquals(this.pid, other.pid)"
      range: "(66,11)-(66,57)"
      evaluatedAs: false
- method:
    name: "toString"
    sourceCodeSignature: "String toString()"
    returnType: "java.lang.String"
    instructionFingerprint: "AB6951FF65438885BA910306D285F81D"
  paths:
  - pathId: "path1"
    testPathName: "toStringWhenThisPidIsNotNull"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "12050EC06B0D95C13F21601AC68AE399"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "B19D36AB1C0C04387BE4823880EF0799"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0DEED040A2DD1DEBA16D9E6A6D46CFAD"
      valueUuid: "pid"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationPid"
        parameters:
        - name: "pid"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pid1"
            valueType: "java.lang.String"
            uuid: "pid"
      valueType: "org.springframework.boot.system.ApplicationPid"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "pid1"
      valueType: "java.lang.String"
      uuid: "pid"
    branches:
    - lineNumber: 78
      expression: "this.pid != null"
      range: "(78,11)-(78,26)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "toStringWhenThisPidIsNull"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "1E1182508725FBB82694834BEFC49FA6"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0CA569E846D07E4F647A501FADFABE97"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "24E1820E05DC0FEF4B399386D6A9D9D3"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationPid"
        parameters:
        - name: "pid"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "pid"
            fixed: true
      valueType: "org.springframework.boot.system.ApplicationPid"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "???"
      valueType: "java.lang.String"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 78
      expression: "this.pid != null"
      range: "(78,11)-(78,26)"
      evaluatedAs: false
- method:
    name: "write"
    sourceCodeSignature: "void write(File file)"
    returnType: "void"
    throwsExceptions:
    - "java.io.IOException"
    parameters:
    - name: "file"
      type: "java.io.File"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Throwable"
    - idExternalInstruction: 0
      id: 3
      catchExceptions:
      - "java.lang.Throwable"
    - idExternalInstruction: 0
      id: 4
      catchExceptions:
      - "java.lang.UnsupportedOperationException"
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.UnsupportedOperationException"
    instructionFingerprint: "2904AFF21C69F449548CF7082C32536D"
  paths:
  - pathId: "path5"
    testPathName: "writeWhenFileExistsAndFileNotCanWriteThrowsFileNotFoundException"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "6F4DAF1C5F94E91937AFAC59BAB9A857"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0CA569E846D07E4F647A501FADFABE97"
      valueUuid: "target"
    - type: "INPUT"
      name: "file"
      modelFingerprint: "573E9C6E9A2C61AEE8E25895B1D7E37D"
      valueUuid: "file"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "535B712A2F06D43FBFF3122F9164E1A0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid1,message:uniqueUuid2):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "270D1A84E83AC94B0241EDFA613D2E5E"
      valueUuid: "fileNotFoundException"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.io.File.getParentFile() : java.io.File"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationPid"
        parameters:
        - name: "pid"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "pid"
            fixed: true
      valueType: "org.springframework.boot.system.ApplicationPid"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
      nameForMock: "file"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "No PID available"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.io.FileNotFoundException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "file (permission denied)"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.io.FileNotFoundException"
      uuid: "fileNotFoundException"
      fixed: true
    branches:
    - lineNumber: 88
      expression: "this.pid != null"
      range: "(88,16)-(88,31)"
      evaluatedAs: false
    - lineNumber: 100
      expression: "parent != null"
      range: "(100,7)-(100,20)"
      evaluatedAs: false
      internalMethodName: "createParentDirectory"
    - lineNumber: 90
      expression: "file.exists()"
      range: "(90,7)-(90,19)"
      evaluatedAs: true
    - lineNumber: 106
      expression: "!file.canWrite()"
      range: "(106,7)-(106,22)"
      evaluatedAs: true
      internalMethodName: "assertCanOverwrite"
  - pathId: "path8"
    testPathName: "writeWhenFileNotExistsAndDefaultBranchThrowsThrowable"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "002B7F8DD3676C6EB6ED34C82B4B5552"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0CA569E846D07E4F647A501FADFABE97"
      valueUuid: "target"
    - type: "INPUT"
      name: "file"
      modelFingerprint: "573E9C6E9A2C61AEE8E25895B1D7E37D"
      valueUuid: "file"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "535B712A2F06D43FBFF3122F9164E1A0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid3,message:uniqueUuid4):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "writer"
      modelFingerprint: "46DD50A953FA8C3EB57683774E1502F4"
      valueUuid: "fileWriter"
      methodExercised:
        expression: "append(csq:pid):writer"
        throwsExceptions:
        - "java.io.IOException"
    - type: "LOCAL_VARIABLE"
      name: "writer"
      modelFingerprint: "C191DE9658418BE347CF7467661238C1"
      valueUuid: "fileWriter"
      methodExercised:
        expression: "close():void2"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "49E493EB56B47EDEB5C173968793BABC"
      valueUuid: "throwable"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.io.File.getParentFile() : java.io.File"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationPid"
        parameters:
        - name: "pid"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "pid"
            fixed: true
      valueType: "org.springframework.boot.system.ApplicationPid"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "No PID available"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.FileWriter"
        parameters:
        - name: "file"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.File"
              parameters:
              - name: "pathname"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "pathname1"
                  valueType: "java.lang.String"
                  uuid: "file-pathname"
            valueType: "java.io.File"
            uuid: "file"
      valueType: "java.io.FileWriter"
      uuid: "fileWriter"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.Writer"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "java.io.FileWriter"
            parameters:
            - name: "file"
              value:
                sapientType: "OBJECT"
                content: !<new>
                  target: "java.io.File"
                  parameters:
                  - name: "pathname"
                    value:
                      sapientType: "BASIC"
                      content: !<regular>
                        value: "pathname1"
                      valueType: "java.lang.String"
                      uuid: "file-pathname"
                valueType: "java.io.File"
                uuid: "file"
          valueType: "java.io.FileWriter"
          uuid: "fileWriter"
          fixed: true
        methodParameters:
        - name: "csq"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "pid"
            fixed: true
        methodName: "append"
      valueType: "java.io.Writer"
      uuid: "writer"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "pid"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.FileWriter"
        parameters:
        - name: "file"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.File"
              parameters:
              - name: "pathname"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "pathname1"
                  valueType: "java.lang.String"
                  uuid: "file-pathname"
            valueType: "java.io.File"
            uuid: "file"
      valueType: "java.io.FileWriter"
      uuid: "fileWriter"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "throwable"
    branches:
    - lineNumber: 88
      expression: "this.pid != null"
      range: "(88,16)-(88,31)"
      evaluatedAs: false
    - lineNumber: 100
      expression: "parent != null"
      range: "(100,7)-(100,20)"
      evaluatedAs: false
      internalMethodName: "createParentDirectory"
    - lineNumber: 90
      expression: "file.exists()"
      range: "(90,7)-(90,19)"
      evaluatedAs: false
    - lineNumber: 93
      expression: "branch expression (line 93)"
      range: "(93,1)-(93,200)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Throwable"
  - pathId: "path1"
    testPathName: "writeWhenCanWritePosixFileFile"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "B64204E3E97BE87F3E55FA629AF05C3C"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "B19D36AB1C0C04387BE4823880EF0799"
      valueUuid: "target"
    - type: "INPUT"
      name: "file"
      modelFingerprint: "573E9C6E9A2C61AEE8E25895B1D7E37D"
      valueUuid: "file"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "3E469FB1484A73C0C4DEF4D3CB096C46"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "state(expression:uniqueUuid5,message:uniqueUuid6):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.io.File.getParentFile() : java.io.File"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationPid"
        parameters:
        - name: "pid"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pid1"
            valueType: "java.lang.String"
            uuid: "pid"
      valueType: "org.springframework.boot.system.ApplicationPid"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "No PID available"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 88
      expression: "this.pid != null"
      range: "(88,16)-(88,31)"
      evaluatedAs: true
    - lineNumber: 100
      expression: "parent != null"
      range: "(100,7)-(100,20)"
      evaluatedAs: true
      internalMethodName: "createParentDirectory"
    - lineNumber: 90
      expression: "file.exists()"
      range: "(90,7)-(90,19)"
      evaluatedAs: true
    - lineNumber: 106
      expression: "!file.canWrite()"
      range: "(106,7)-(106,22)"
      evaluatedAs: false
      internalMethodName: "assertCanOverwrite"
    - lineNumber: 114
      expression: "for-each(WRITE_PERMISSIONS)"
      range: "(114,42)-(114,58)"
      evaluatedAs: true
      internalMethodName: "canWritePosixFile"
    - lineNumber: 115
      expression: "permissions.contains(permission)"
      range: "(115,9)-(115,40)"
      evaluatedAs: true
      internalMethodName: "canWritePosixFile"
    - lineNumber: 106
      expression: "!canWritePosixFile(file)"
      range: "(106,27)-(106,50)"
      evaluatedAs: false
      internalMethodName: "assertCanOverwrite"
  - pathId: "path2"
    testPathName: "writeWhenCanWritePosixFileNotFileThrowsFileNotFoundException"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "522A722EF66D7F717DF22A61AC81CEAF"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "B19D36AB1C0C04387BE4823880EF0799"
      valueUuid: "target"
    - type: "INPUT"
      name: "file"
      modelFingerprint: "573E9C6E9A2C61AEE8E25895B1D7E37D"
      valueUuid: "file"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "3E469FB1484A73C0C4DEF4D3CB096C46"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "state(expression:uniqueUuid7,message:uniqueUuid8):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "270D1A84E83AC94B0241EDFA613D2E5E"
      valueUuid: "fileNotFoundException"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.io.File.getParentFile() : java.io.File"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationPid"
        parameters:
        - name: "pid"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pid1"
            valueType: "java.lang.String"
            uuid: "pid"
      valueType: "org.springframework.boot.system.ApplicationPid"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
      nameForMock: "file"
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "No PID available"
      valueType: "java.lang.String"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.io.FileNotFoundException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "file (permission denied)"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.io.FileNotFoundException"
      uuid: "fileNotFoundException"
      fixed: true
    branches:
    - lineNumber: 88
      expression: "this.pid != null"
      range: "(88,16)-(88,31)"
      evaluatedAs: true
    - lineNumber: 100
      expression: "parent != null"
      range: "(100,7)-(100,20)"
      evaluatedAs: true
      internalMethodName: "createParentDirectory"
    - lineNumber: 90
      expression: "file.exists()"
      range: "(90,7)-(90,19)"
      evaluatedAs: true
    - lineNumber: 106
      expression: "!file.canWrite()"
      range: "(106,7)-(106,22)"
      evaluatedAs: false
      internalMethodName: "assertCanOverwrite"
    - lineNumber: 114
      expression: "for-each(WRITE_PERMISSIONS)"
      range: "(114,42)-(114,58)"
      evaluatedAs: true
      internalMethodName: "canWritePosixFile"
    - lineNumber: 115
      expression: "permissions.contains(permission)"
      range: "(115,9)-(115,40)"
      evaluatedAs: false
      internalMethodName: "canWritePosixFile"
    - lineNumber: 106
      expression: "!canWritePosixFile(file)"
      range: "(106,27)-(106,50)"
      evaluatedAs: true
      internalMethodName: "assertCanOverwrite"
  - pathId: "path9"
    testPathName: "writeWhenCaughtUnsupportedOperationExceptionAndCanWritePosixFileFile"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "9A3FEF1F076279CA4D3EC5A90E60577F"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "B19D36AB1C0C04387BE4823880EF0799"
      valueUuid: "target"
    - type: "INPUT"
      name: "file"
      modelFingerprint: "573E9C6E9A2C61AEE8E25895B1D7E37D"
      valueUuid: "file"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "3E469FB1484A73C0C4DEF4D3CB096C46"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "state(expression:uniqueUuid9,message:uniqueUuid10):void"
        staticAccess: true
    - type: "STATIC"
      name: "Files.class"
      modelFingerprint: "3CABC2BF8084DC31F7510B7BFF964107"
      valueUuid: "Files.class"
      methodExercised:
        expression: "getPosixFilePermissions(path:path,options:linkOptionArray):set"
        throwsExceptions:
        - "java.io.IOException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.io.File.getParentFile() : java.io.File"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationPid"
        parameters:
        - name: "pid"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pid1"
            valueType: "java.lang.String"
            uuid: "pid"
      valueType: "org.springframework.boot.system.ApplicationPid"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "No PID available"
      valueType: "java.lang.String"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.nio.file.Files"
      uuid: "Files.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashSet"
        parameters: []
        values:
        - sapientType: "ENUM"
          content: !<regular>
            value: "OWNER_WRITE"
          valueType: "java.nio.file.attribute.PosixFilePermission"
          uuid: "Enum-java.nio.file.attribute.PosixFilePermission-OWNER_WRITE"
      valueType: "java.util.Set"
      genericValueType: "java.nio.file.attribute.PosixFilePermission"
      uuid: "set"
    - sapientType: "MOCK"
      valueType: "java.nio.file.Path"
      uuid: "path"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.nio.file.LinkOption[]"
      uuid: "linkOptionArray"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 88
      expression: "this.pid != null"
      range: "(88,16)-(88,31)"
      evaluatedAs: true
    - lineNumber: 100
      expression: "parent != null"
      range: "(100,7)-(100,20)"
      evaluatedAs: true
      internalMethodName: "createParentDirectory"
    - lineNumber: 90
      expression: "file.exists()"
      range: "(90,7)-(90,19)"
      evaluatedAs: true
    - lineNumber: 106
      expression: "!file.canWrite()"
      range: "(106,7)-(106,22)"
      evaluatedAs: false
      internalMethodName: "assertCanOverwrite"
    - lineNumber: 114
      expression: "for-each(WRITE_PERMISSIONS)"
      range: "(114,42)-(114,58)"
      evaluatedAs: true
      internalMethodName: "canWritePosixFile"
    - lineNumber: 115
      expression: "permissions.contains(permission)"
      range: "(115,9)-(115,40)"
      evaluatedAs: true
      internalMethodName: "canWritePosixFile"
    - lineNumber: 121
      expression: "catch-exception (UnsupportedOperationException)"
      range: "(121,3)-(121,41)"
      evaluatedAs: true
      internalMethodName: "canWritePosixFile"
    - lineNumber: 106
      expression: "!canWritePosixFile(file)"
      range: "(106,27)-(106,50)"
      evaluatedAs: false
      internalMethodName: "assertCanOverwrite"
    catchBlockExercised:
      idExternalInstruction: 7
      id: 4
      catchExceptions:
      - "java.lang.UnsupportedOperationException"
