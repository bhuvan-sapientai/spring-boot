---
modelFingerprint: "C13D660284261B772A42F661C5C0FBCD"
targetClass:
  fullClassName: "org.springframework.boot.system.ApplicationTemp"
methods:
- method:
    name: "toString"
    sourceCodeSignature: "String toString()"
    returnType: "java.lang.String"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
    instructionFingerprint: "8BBC67A0D09F3BAC3F1B9395A44E5BD9"
  paths:
  - pathId: "path1"
    testPathName: "toStringTest"
    constructorSignature: "<init>(java.lang.Class<?>) : void"
    modelFingerprint: "B5B1DCF1FBF049C581A1E542459B89EA"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "501595FA02918CF4FBAF6372B029B2B4"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "27FE9BA49D5360D6941B091D6C74984D"
      methodExercised:
        expression: "getDir():file"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D446A609419428DDEAA49A58091F3986"
      valueUuid: "string"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.io.File.getAbsolutePath() : java.lang.String"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationTemp"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationTemp"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.File"
        parameters:
        - name: "pathname"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "pathname1"
            valueType: "java.lang.String"
            uuid: "file-pathname"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string"
- method:
    name: "getDir"
    sourceCodeSignature: "File getDir()"
    returnType: "java.io.File"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
    instructionFingerprint: "44E16A86759233E541B6000EBCBDE1AE"
  paths:
  - pathId: "path9"
    testPathName: "getDirWhenCaughtExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.Class<?>) : void"
    modelFingerprint: "BA5A14997D93CD63DEF3312C4049300B"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "501595FA02918CF4FBAF6372B029B2B4"
      valueUuid: "target"
    - type: "STATIC"
      name: "MessageDigest.class"
      modelFingerprint: "145DB78BC6CCF77A0295730E62751A34"
      valueUuid: "MessageDigest.class"
      methodExercised:
        expression: "getInstance(algorithm:uniqueUuid1):messageDigest"
        throwsExceptions:
        - "java.security.NoSuchAlgorithmException"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "home"
      modelFingerprint: "867E2852B9480A0BB2E7AD696E13B075"
      valueUuid: "applicationHome"
      methodExercised:
        expression: "getSource():file"
    - type: "LOCAL_VARIABLE"
      name: "home"
      modelFingerprint: "55389C3EE2CF5568E627981661FE2903"
      valueUuid: "applicationHome"
      methodExercised:
        expression: "getDir():file2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "826102AAEC6A149FF64CA9F695E3D6AF"
      valueUuid: "illegalStateException"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "update(digest, home.getSource());"
      lineNumber: 145
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: home - Method: getSource"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationTemp"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationTemp"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "java.security.MessageDigest"
      uuid: "MessageDigest.class"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.security.MessageDigest"
        method: "getInstance"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "SHA-1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid2"
            fixed: true
      valueType: "java.security.MessageDigest"
      uuid: "messageDigest"
    - sapientType: "BASIC"
      content: !<regular>
        value: "SHA-1"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationHome"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationHome"
      uuid: "applicationHome"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.system.ApplicationHome"
            parameters:
            - name: "sourceClass"
              value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "sourceClass"
          valueType: "org.springframework.boot.system.ApplicationHome"
          uuid: "applicationHome"
          fixed: true
        methodParameters: []
        methodName: "getSource"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationHome"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationHome"
      uuid: "applicationHome"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.system.ApplicationHome"
            parameters:
            - name: "sourceClass"
              value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "sourceClass"
          valueType: "org.springframework.boot.system.ApplicationHome"
          uuid: "applicationHome"
          fixed: true
        methodParameters: []
        methodName: "getDir"
      valueType: "java.io.File"
      uuid: "file2"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Exception"
              parameters: []
            valueType: "java.lang.Exception"
            uuid: "exception"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 96
      expression: "this.path == null"
      range: "(96,7)-(96,23)"
      evaluatedAs: true
      internalMethodName: "getPath"
    - lineNumber: 99
      expression: "this.path == null"
      range: "(99,9)-(99,25)"
      evaluatedAs: true
      internalMethodName: "getPath"
    - lineNumber: 160
      expression: "source != null"
      range: "(160,7)-(160,20)"
      evaluatedAs: true
      internalMethodName: "update"
    - lineNumber: 166
      expression: "source instanceof File file"
      range: "(166,7)-(166,33)"
      evaluatedAs: true
      internalMethodName: "getUpdateSourceBytes"
    - lineNumber: 154
      expression: "catch-exception (Exception)"
      range: "(154,3)-(154,21)"
      evaluatedAs: true
      internalMethodName: "generateHash"
    catchBlockExercised:
      idExternalInstruction: 22
      id: 2
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path2"
    testPathName: "getDirWhenFileSystemSupportedFileAttributeViewsContainsPosix"
    constructorSignature: "<init>(java.lang.Class<?>) : void"
    modelFingerprint: "3772265E36BA282AE6AB3F95D5398829"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "501595FA02918CF4FBAF6372B029B2B4"
      valueUuid: "target"
    - type: "LOCAL_VARIABLE"
      name: "home"
      modelFingerprint: "867E2852B9480A0BB2E7AD696E13B075"
      valueUuid: "applicationHome"
      methodExercised:
        expression: "getSource():file"
    - type: "LOCAL_VARIABLE"
      name: "home"
      modelFingerprint: "55389C3EE2CF5568E627981661FE2903"
      valueUuid: "applicationHome"
      methodExercised:
        expression: "getDir():file2"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "23E92368816CF41F579A1D2B61D574D1"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:string14):boolean8"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D56980AC9CD3C0C02BC41E1A49E17D89"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean8,message:uniqueUuid3):void9"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean9,messageSupplier:uniqueUuid4):void10"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean10,messageSupplier:uniqueUuid5):void11"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "70D61EB3C05855471B4E70EE41C1EB20"
      valueUuid: "file3"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "update(digest, home.getSource());"
      lineNumber: 145
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: home - Method: getSource"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationTemp"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationTemp"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationHome"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationHome"
      uuid: "applicationHome"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.system.ApplicationHome"
            parameters:
            - name: "sourceClass"
              value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "sourceClass"
          valueType: "org.springframework.boot.system.ApplicationHome"
          uuid: "applicationHome"
          fixed: true
        methodParameters: []
        methodName: "getSource"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationHome"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationHome"
      uuid: "applicationHome"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.system.ApplicationHome"
            parameters:
            - name: "sourceClass"
              value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "sourceClass"
          valueType: "org.springframework.boot.system.ApplicationHome"
          uuid: "applicationHome"
          fixed: true
        methodParameters: []
        methodName: "getDir"
      valueType: "java.io.File"
      uuid: "file2"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "E"
      valueType: "java.lang.String"
      uuid: "string14"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "No 'java.io.tmpdir' property set"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean9"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid4"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean10"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid5"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<method_return_from_value>
            target: "java.nio.file.Path"
            localVariableValue:
              sapientType: "OBJECT"
              content: !<static_method_return>
                target: "java.nio.file.Paths"
                method: "get"
                methodParameters:
                - value:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "E"
                    valueType: "java.lang.String"
                    uuid: "string14"
                - value:
                    sapientType: "ARRAY"
                    content: !<array>
                      values: {}
                    valueType: "java.lang.String[]"
                    uuid: "stringArray"
              valueType: "java.nio.file.Path"
              uuid: "path"
            methodParameters:
            - value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "CF227A74CBB3471A6228495F554CA05042C3D3BB"
                valueType: "java.lang.String"
                uuid: "string13"
            methodName: "resolve"
          valueType: "java.nio.file.Path"
          uuid: "path2"
        methodParameters: []
        methodName: "toFile"
      valueType: "java.io.File"
      uuid: "file3"
    branches:
    - lineNumber: 96
      expression: "this.path == null"
      range: "(96,7)-(96,23)"
      evaluatedAs: true
      internalMethodName: "getPath"
    - lineNumber: 99
      expression: "this.path == null"
      range: "(99,9)-(99,25)"
      evaluatedAs: true
      internalMethodName: "getPath"
    - lineNumber: 160
      expression: "source != null"
      range: "(160,7)-(160,20)"
      evaluatedAs: true
      internalMethodName: "update"
    - lineNumber: 166
      expression: "source instanceof File file"
      range: "(166,7)-(166,33)"
      evaluatedAs: true
      internalMethodName: "getUpdateSourceBytes"
    - lineNumber: 113
      expression: "!Files.exists(path)"
      range: "(113,8)-(113,26)"
      evaluatedAs: true
      internalMethodName: "createDirectory"
    - lineNumber: 124
      expression: "!fileSystem.supportedFileAttributeViews().contains(\\\"posix\\\"\
        )"
      range: "(124,7)-(124,65)"
      evaluatedAs: false
      internalMethodName: "getFileAttributes"
  - pathId: "path10"
    testPathName: "getDirWhenCaughtIOExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.Class<?>) : void"
    modelFingerprint: "9451461020E896F7F3B393A65F4E1AB4"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "501595FA02918CF4FBAF6372B029B2B4"
      valueUuid: "target"
    - type: "LOCAL_VARIABLE"
      name: "home"
      modelFingerprint: "867E2852B9480A0BB2E7AD696E13B075"
      valueUuid: "applicationHome"
      methodExercised:
        expression: "getSource():file"
    - type: "LOCAL_VARIABLE"
      name: "home"
      modelFingerprint: "55389C3EE2CF5568E627981661FE2903"
      valueUuid: "applicationHome"
      methodExercised:
        expression: "getDir():file2"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "D246E7716687CDA656330B7EF1470B21"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:string9):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "55AF10A57478A8B8575FC9565D11DD77"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean3,message:uniqueUuid6):void4"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean4,messageSupplier:uniqueUuid7):void5"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean5,messageSupplier:uniqueUuid8):void6"
        staticAccess: true
    - type: "STATIC"
      name: "Files.class"
      modelFingerprint: "CB6593DF4E9F943BC6FCC8778F0FD252"
      valueUuid: "Files.class"
      methodExercised:
        expression: "createDirectory(dir:path2,attrs:fileAttributeArray):path3"
        throwsExceptions:
        - "java.io.IOException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C61BDC8AFB4EAE2985A2607B4F5FCDB4"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "update(digest, home.getSource());"
      lineNumber: 145
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: home - Method: getSource"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationTemp"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationTemp"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationHome"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationHome"
      uuid: "applicationHome"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.system.ApplicationHome"
            parameters:
            - name: "sourceClass"
              value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "sourceClass"
          valueType: "org.springframework.boot.system.ApplicationHome"
          uuid: "applicationHome"
          fixed: true
        methodParameters: []
        methodName: "getSource"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationHome"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationHome"
      uuid: "applicationHome"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.system.ApplicationHome"
            parameters:
            - name: "sourceClass"
              value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "sourceClass"
          valueType: "org.springframework.boot.system.ApplicationHome"
          uuid: "applicationHome"
          fixed: true
        methodParameters: []
        methodName: "getDir"
      valueType: "java.io.File"
      uuid: "file2"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "No 'java.io.tmpdir' property set"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid7"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void6"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid8"
    - sapientType: "MOCK"
      valueType: "java.nio.file.Files"
      uuid: "Files.class"
    - sapientType: "MOCK"
      valueType: "java.nio.file.Path"
      uuid: "path3"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.nio.file.Path"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.nio.file.Paths"
            method: "get"
            methodParameters:
            - value:
                sapientType: "BASIC"
                content: !<regular>
                  value: ""
                valueType: "java.lang.String"
                uuid: "string9"
            - value:
                sapientType: "ARRAY"
                content: !<array>
                  values: {}
                valueType: "java.lang.String[]"
                uuid: "stringArray"
          valueType: "java.nio.file.Path"
          uuid: "path"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "DA39A3EE5E6B4B0D3255BFEF95601890AFD80709"
            valueType: "java.lang.String"
            uuid: "string8"
        methodName: "resolve"
      valueType: "java.nio.file.Path"
      uuid: "path2"
      nameForMock: "path2"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.nio.file.attribute.FileAttribute[]"
      uuid: "fileAttributeArray"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Unable to create application temp directory path2"
            valueType: "java.lang.String"
            uuid: "string10"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.IOException"
              parameters: []
            valueType: "java.io.IOException"
            uuid: "iOException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 96
      expression: "this.path == null"
      range: "(96,7)-(96,23)"
      evaluatedAs: true
      internalMethodName: "getPath"
    - lineNumber: 99
      expression: "this.path == null"
      range: "(99,9)-(99,25)"
      evaluatedAs: true
      internalMethodName: "getPath"
    - lineNumber: 160
      expression: "source != null"
      range: "(160,7)-(160,20)"
      evaluatedAs: true
      internalMethodName: "update"
    - lineNumber: 166
      expression: "source instanceof File file"
      range: "(166,7)-(166,33)"
      evaluatedAs: true
      internalMethodName: "getUpdateSourceBytes"
    - lineNumber: 113
      expression: "!Files.exists(path)"
      range: "(113,8)-(113,26)"
      evaluatedAs: true
      internalMethodName: "createDirectory"
    - lineNumber: 124
      expression: "!fileSystem.supportedFileAttributeViews().contains(\\\"posix\\\"\
        )"
      range: "(124,7)-(124,65)"
      evaluatedAs: true
      internalMethodName: "getFileAttributes"
    - lineNumber: 118
      expression: "catch-exception (IOException)"
      range: "(118,3)-(118,23)"
      evaluatedAs: true
      internalMethodName: "createDirectory"
    catchBlockExercised:
      idExternalInstruction: 33
      id: 1
      catchExceptions:
      - "java.io.IOException"
- method:
    name: "getDir"
    sourceCodeSignature: "File getDir(String subDir)"
    returnType: "java.io.File"
    parameters:
    - name: "subDir"
      type: "java.lang.String"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
    instructionFingerprint: "FC22CD5604A6A20D941FF9E85563A5E8"
  paths:
  - pathId: "path13"
    testPathName: "getDir1WhenCaughtExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.Class<?>) : void"
    modelFingerprint: "B56C1F355B7B87394F04D903D9FAA5F2"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "501595FA02918CF4FBAF6372B029B2B4"
      valueUuid: "target"
    - type: "INPUT"
      name: "subDir"
      modelFingerprint: "0EED4A44BEFBF2DB01C7F53A89A1F7D7"
      valueUuid: "subDir"
    - type: "STATIC"
      name: "MessageDigest.class"
      modelFingerprint: "145DB78BC6CCF77A0295730E62751A34"
      valueUuid: "MessageDigest.class"
      methodExercised:
        expression: "getInstance(algorithm:uniqueUuid9):messageDigest"
        throwsExceptions:
        - "java.security.NoSuchAlgorithmException"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "home"
      modelFingerprint: "867E2852B9480A0BB2E7AD696E13B075"
      valueUuid: "applicationHome"
      methodExercised:
        expression: "getSource():file"
    - type: "LOCAL_VARIABLE"
      name: "home"
      modelFingerprint: "55389C3EE2CF5568E627981661FE2903"
      valueUuid: "applicationHome"
      methodExercised:
        expression: "getDir():file2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "826102AAEC6A149FF64CA9F695E3D6AF"
      valueUuid: "illegalStateException"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "update(digest, home.getSource());"
      lineNumber: 145
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: home - Method: getSource"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationTemp"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationTemp"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "subDir1"
      valueType: "java.lang.String"
      uuid: "subDir"
    - sapientType: "MOCK"
      valueType: "java.security.MessageDigest"
      uuid: "MessageDigest.class"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.security.MessageDigest"
        method: "getInstance"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "SHA-1"
            valueType: "java.lang.String"
            uuid: "uniqueUuid10"
            fixed: true
      valueType: "java.security.MessageDigest"
      uuid: "messageDigest"
    - sapientType: "BASIC"
      content: !<regular>
        value: "SHA-1"
      valueType: "java.lang.String"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationHome"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationHome"
      uuid: "applicationHome"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.system.ApplicationHome"
            parameters:
            - name: "sourceClass"
              value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "sourceClass"
          valueType: "org.springframework.boot.system.ApplicationHome"
          uuid: "applicationHome"
          fixed: true
        methodParameters: []
        methodName: "getSource"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationHome"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationHome"
      uuid: "applicationHome"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.system.ApplicationHome"
            parameters:
            - name: "sourceClass"
              value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "sourceClass"
          valueType: "org.springframework.boot.system.ApplicationHome"
          uuid: "applicationHome"
          fixed: true
        methodParameters: []
        methodName: "getDir"
      valueType: "java.io.File"
      uuid: "file2"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Exception"
              parameters: []
            valueType: "java.lang.Exception"
            uuid: "exception"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 96
      expression: "this.path == null"
      range: "(96,7)-(96,23)"
      evaluatedAs: true
      internalMethodName: "getPath"
    - lineNumber: 99
      expression: "this.path == null"
      range: "(99,9)-(99,25)"
      evaluatedAs: true
      internalMethodName: "getPath"
    - lineNumber: 160
      expression: "source != null"
      range: "(160,7)-(160,20)"
      evaluatedAs: true
      internalMethodName: "update"
    - lineNumber: 166
      expression: "source instanceof File file"
      range: "(166,7)-(166,33)"
      evaluatedAs: true
      internalMethodName: "getUpdateSourceBytes"
    - lineNumber: 154
      expression: "catch-exception (Exception)"
      range: "(154,3)-(154,21)"
      evaluatedAs: true
      internalMethodName: "generateHash"
    catchBlockExercised:
      idExternalInstruction: 22
      id: 2
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path2"
    testPathName: "getDir1WhenFileSystemSupportedFileAttributeViewsNotContainsPosix"
    constructorSignature: "<init>(java.lang.Class<?>) : void"
    modelFingerprint: "82D4A65DC53A532444D71D5D8655C835"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "501595FA02918CF4FBAF6372B029B2B4"
      valueUuid: "target"
    - type: "INPUT"
      name: "subDir"
      modelFingerprint: "0EED4A44BEFBF2DB01C7F53A89A1F7D7"
      valueUuid: "subDir"
    - type: "LOCAL_VARIABLE"
      name: "home"
      modelFingerprint: "867E2852B9480A0BB2E7AD696E13B075"
      valueUuid: "applicationHome"
      methodExercised:
        expression: "getSource():file"
    - type: "LOCAL_VARIABLE"
      name: "home"
      modelFingerprint: "55389C3EE2CF5568E627981661FE2903"
      valueUuid: "applicationHome"
      methodExercised:
        expression: "getDir():file2"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "C8E7788B41FB90ECC970D65F20AA3649"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:string14):boolean8"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D56980AC9CD3C0C02BC41E1A49E17D89"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean8,message:uniqueUuid11):void9"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean9,messageSupplier:uniqueUuid12):void10"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean10,messageSupplier:uniqueUuid13):void11"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "7F9C5724EF8AD24B910C4CF25571E646"
      valueUuid: "file3"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "update(digest, home.getSource());"
      lineNumber: 145
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: home - Method: getSource"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationTemp"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationTemp"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "subDir"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationHome"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationHome"
      uuid: "applicationHome"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.system.ApplicationHome"
            parameters:
            - name: "sourceClass"
              value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "sourceClass"
          valueType: "org.springframework.boot.system.ApplicationHome"
          uuid: "applicationHome"
          fixed: true
        methodParameters: []
        methodName: "getSource"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationHome"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationHome"
      uuid: "applicationHome"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.system.ApplicationHome"
            parameters:
            - name: "sourceClass"
              value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "sourceClass"
          valueType: "org.springframework.boot.system.ApplicationHome"
          uuid: "applicationHome"
          fixed: true
        methodParameters: []
        methodName: "getDir"
      valueType: "java.io.File"
      uuid: "file2"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "G"
      valueType: "java.lang.String"
      uuid: "string14"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "No 'java.io.tmpdir' property set"
      valueType: "java.lang.String"
      uuid: "uniqueUuid11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean9"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid12"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean10"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid13"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<method_return_from_value>
            target: "java.nio.file.Path"
            localVariableValue:
              sapientType: "OBJECT"
              content: !<method_return_from_value>
                target: "java.nio.file.Path"
                localVariableValue:
                  sapientType: "OBJECT"
                  content: !<static_method_return>
                    target: "java.nio.file.Paths"
                    method: "get"
                    methodParameters:
                    - value:
                        sapientType: "BASIC"
                        content: !<regular>
                          value: "G"
                        valueType: "java.lang.String"
                        uuid: "string14"
                    - value:
                        sapientType: "ARRAY"
                        content: !<array>
                          values: {}
                        valueType: "java.lang.String[]"
                        uuid: "stringArray"
                  valueType: "java.nio.file.Path"
                  uuid: "path"
                methodParameters:
                - value:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "48A0E79EBFEAD234B3831630A8F4CBE2E1C7B482"
                    valueType: "java.lang.String"
                    uuid: "string13"
                methodName: "resolve"
              valueType: "java.nio.file.Path"
              uuid: "path2"
            methodParameters:
            - value:
                sapientType: "BASIC"
                content: !<regular>
                  value: ""
                valueType: "java.lang.String"
                uuid: "subDir"
            methodName: "resolve"
          valueType: "java.nio.file.Path"
          uuid: "path4"
        methodParameters: []
        methodName: "toFile"
      valueType: "java.io.File"
      uuid: "file3"
    branches:
    - lineNumber: 96
      expression: "this.path == null"
      range: "(96,7)-(96,23)"
      evaluatedAs: true
      internalMethodName: "getPath"
    - lineNumber: 99
      expression: "this.path == null"
      range: "(99,9)-(99,25)"
      evaluatedAs: true
      internalMethodName: "getPath"
    - lineNumber: 160
      expression: "source != null"
      range: "(160,7)-(160,20)"
      evaluatedAs: true
      internalMethodName: "update"
    - lineNumber: 166
      expression: "source instanceof File file"
      range: "(166,7)-(166,33)"
      evaluatedAs: true
      internalMethodName: "getUpdateSourceBytes"
    - lineNumber: 113
      expression: "!Files.exists(path)"
      range: "(113,8)-(113,26)"
      evaluatedAs: true
      internalMethodName: "createDirectory"
    - lineNumber: 124
      expression: "!fileSystem.supportedFileAttributeViews().contains(\\\"posix\\\"\
        )"
      range: "(124,7)-(124,65)"
      evaluatedAs: true
      internalMethodName: "getFileAttributes"
  - pathId: "path1"
    testPathName: "getDir1WhenSourceInstanceOfFileAndFilesNotExistsPathAndFileSystemSupportedFileAttributeViewsNotContainsPosix"
    constructorSignature: "<init>(java.lang.Class<?>) : void"
    modelFingerprint: "BFC745D4FFFBD04CD525CCC1CE7A8BBA"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "501595FA02918CF4FBAF6372B029B2B4"
      valueUuid: "target"
    - type: "INPUT"
      name: "subDir"
      modelFingerprint: "6A282FF08D11FA44E0330A27CEB67F56"
      valueUuid: "subDir"
    - type: "LOCAL_VARIABLE"
      name: "home"
      modelFingerprint: "867E2852B9480A0BB2E7AD696E13B075"
      valueUuid: "applicationHome"
      methodExercised:
        expression: "getSource():file"
    - type: "LOCAL_VARIABLE"
      name: "home"
      modelFingerprint: "55389C3EE2CF5568E627981661FE2903"
      valueUuid: "applicationHome"
      methodExercised:
        expression: "getDir():file2"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "C8E7788B41FB90ECC970D65F20AA3649"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:string14):boolean8"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D56980AC9CD3C0C02BC41E1A49E17D89"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean8,message:uniqueUuid14):void9"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean9,messageSupplier:uniqueUuid15):void10"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean10,messageSupplier:uniqueUuid16):void11"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "481483DE19252D6E32BC39D01F3DE0AC"
      valueUuid: "file3"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "update(digest, home.getSource());"
      lineNumber: 145
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: home - Method: getSource"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationTemp"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationTemp"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "I"
      valueType: "java.lang.String"
      uuid: "subDir"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationHome"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationHome"
      uuid: "applicationHome"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.system.ApplicationHome"
            parameters:
            - name: "sourceClass"
              value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "sourceClass"
          valueType: "org.springframework.boot.system.ApplicationHome"
          uuid: "applicationHome"
          fixed: true
        methodParameters: []
        methodName: "getSource"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationHome"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationHome"
      uuid: "applicationHome"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.system.ApplicationHome"
            parameters:
            - name: "sourceClass"
              value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "sourceClass"
          valueType: "org.springframework.boot.system.ApplicationHome"
          uuid: "applicationHome"
          fixed: true
        methodParameters: []
        methodName: "getDir"
      valueType: "java.io.File"
      uuid: "file2"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "G"
      valueType: "java.lang.String"
      uuid: "string14"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "No 'java.io.tmpdir' property set"
      valueType: "java.lang.String"
      uuid: "uniqueUuid14"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean9"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid15"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean10"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid16"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<method_return_from_value>
            target: "java.nio.file.Path"
            localVariableValue:
              sapientType: "OBJECT"
              content: !<method_return_from_value>
                target: "java.nio.file.Path"
                localVariableValue:
                  sapientType: "OBJECT"
                  content: !<static_method_return>
                    target: "java.nio.file.Paths"
                    method: "get"
                    methodParameters:
                    - value:
                        sapientType: "BASIC"
                        content: !<regular>
                          value: "G"
                        valueType: "java.lang.String"
                        uuid: "string14"
                    - value:
                        sapientType: "ARRAY"
                        content: !<array>
                          values: {}
                        valueType: "java.lang.String[]"
                        uuid: "stringArray"
                  valueType: "java.nio.file.Path"
                  uuid: "path"
                methodParameters:
                - value:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "48A0E79EBFEAD234B3831630A8F4CBE2E1C7B482"
                    valueType: "java.lang.String"
                    uuid: "string13"
                methodName: "resolve"
              valueType: "java.nio.file.Path"
              uuid: "path2"
            methodParameters:
            - value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "I"
                valueType: "java.lang.String"
                uuid: "subDir"
            methodName: "resolve"
          valueType: "java.nio.file.Path"
          uuid: "path4"
        methodParameters: []
        methodName: "toFile"
      valueType: "java.io.File"
      uuid: "file3"
    branches:
    - lineNumber: 96
      expression: "this.path == null"
      range: "(96,7)-(96,23)"
      evaluatedAs: true
      internalMethodName: "getPath"
    - lineNumber: 99
      expression: "this.path == null"
      range: "(99,9)-(99,25)"
      evaluatedAs: true
      internalMethodName: "getPath"
    - lineNumber: 160
      expression: "source != null"
      range: "(160,7)-(160,20)"
      evaluatedAs: true
      internalMethodName: "update"
    - lineNumber: 166
      expression: "source instanceof File file"
      range: "(166,7)-(166,33)"
      evaluatedAs: true
      internalMethodName: "getUpdateSourceBytes"
    - lineNumber: 113
      expression: "!Files.exists(path)"
      range: "(113,8)-(113,26)"
      evaluatedAs: true
      internalMethodName: "createDirectory"
    - lineNumber: 124
      expression: "!fileSystem.supportedFileAttributeViews().contains(\\\"posix\\\"\
        )"
      range: "(124,7)-(124,65)"
      evaluatedAs: true
      internalMethodName: "getFileAttributes"
  - pathId: "path4"
    testPathName: "getDir1WhenFileSystemSupportedFileAttributeViewsContainsPosix"
    constructorSignature: "<init>(java.lang.Class<?>) : void"
    modelFingerprint: "5866A155B0DF53569A583EC2B8A633C2"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "501595FA02918CF4FBAF6372B029B2B4"
      valueUuid: "target"
    - type: "INPUT"
      name: "subDir"
      modelFingerprint: "7637D5CF66E283B8EDF1F97328BD7840"
      valueUuid: "subDir"
    - type: "LOCAL_VARIABLE"
      name: "home"
      modelFingerprint: "867E2852B9480A0BB2E7AD696E13B075"
      valueUuid: "applicationHome"
      methodExercised:
        expression: "getSource():file"
    - type: "LOCAL_VARIABLE"
      name: "home"
      modelFingerprint: "55389C3EE2CF5568E627981661FE2903"
      valueUuid: "applicationHome"
      methodExercised:
        expression: "getDir():file2"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "29E3081ED4F9433F801872EF24DC877D"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:string14):boolean8"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D56980AC9CD3C0C02BC41E1A49E17D89"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean8,message:uniqueUuid17):void9"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean9,messageSupplier:uniqueUuid18):void10"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean10,messageSupplier:uniqueUuid19):void11"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0727DFF65CFF30AB2BB9D733AAA866E6"
      valueUuid: "file3"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "update(digest, home.getSource());"
      lineNumber: 145
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: home - Method: getSource"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationTemp"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationTemp"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "J"
      valueType: "java.lang.String"
      uuid: "subDir"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationHome"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationHome"
      uuid: "applicationHome"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.system.ApplicationHome"
            parameters:
            - name: "sourceClass"
              value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "sourceClass"
          valueType: "org.springframework.boot.system.ApplicationHome"
          uuid: "applicationHome"
          fixed: true
        methodParameters: []
        methodName: "getSource"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationHome"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationHome"
      uuid: "applicationHome"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.system.ApplicationHome"
            parameters:
            - name: "sourceClass"
              value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "sourceClass"
          valueType: "org.springframework.boot.system.ApplicationHome"
          uuid: "applicationHome"
          fixed: true
        methodParameters: []
        methodName: "getDir"
      valueType: "java.io.File"
      uuid: "file2"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "I"
      valueType: "java.lang.String"
      uuid: "string14"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "No 'java.io.tmpdir' property set"
      valueType: "java.lang.String"
      uuid: "uniqueUuid17"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean9"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid18"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean10"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid19"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<method_return_from_value>
            target: "java.nio.file.Path"
            localVariableValue:
              sapientType: "OBJECT"
              content: !<method_return_from_value>
                target: "java.nio.file.Path"
                localVariableValue:
                  sapientType: "OBJECT"
                  content: !<static_method_return>
                    target: "java.nio.file.Paths"
                    method: "get"
                    methodParameters:
                    - value:
                        sapientType: "BASIC"
                        content: !<regular>
                          value: "I"
                        valueType: "java.lang.String"
                        uuid: "string14"
                    - value:
                        sapientType: "ARRAY"
                        content: !<array>
                          values: {}
                        valueType: "java.lang.String[]"
                        uuid: "stringArray"
                  valueType: "java.nio.file.Path"
                  uuid: "path"
                methodParameters:
                - value:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "BC83D506D801D15C24FA977D5EB9E3F48202F98E"
                    valueType: "java.lang.String"
                    uuid: "string13"
                methodName: "resolve"
              valueType: "java.nio.file.Path"
              uuid: "path2"
            methodParameters:
            - value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "J"
                valueType: "java.lang.String"
                uuid: "subDir"
            methodName: "resolve"
          valueType: "java.nio.file.Path"
          uuid: "path4"
        methodParameters: []
        methodName: "toFile"
      valueType: "java.io.File"
      uuid: "file3"
    branches:
    - lineNumber: 96
      expression: "this.path == null"
      range: "(96,7)-(96,23)"
      evaluatedAs: true
      internalMethodName: "getPath"
    - lineNumber: 99
      expression: "this.path == null"
      range: "(99,9)-(99,25)"
      evaluatedAs: true
      internalMethodName: "getPath"
    - lineNumber: 160
      expression: "source != null"
      range: "(160,7)-(160,20)"
      evaluatedAs: true
      internalMethodName: "update"
    - lineNumber: 166
      expression: "source instanceof File file"
      range: "(166,7)-(166,33)"
      evaluatedAs: true
      internalMethodName: "getUpdateSourceBytes"
    - lineNumber: 113
      expression: "!Files.exists(path)"
      range: "(113,8)-(113,26)"
      evaluatedAs: true
      internalMethodName: "createDirectory"
    - lineNumber: 124
      expression: "!fileSystem.supportedFileAttributeViews().contains(\\\"posix\\\"\
        )"
      range: "(124,7)-(124,65)"
      evaluatedAs: false
      internalMethodName: "getFileAttributes"
  - pathId: "path14"
    testPathName: "getDir1WhenCaughtIOExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.Class<?>) : void"
    modelFingerprint: "058147C65A8C7F9761B6A297A7F92CD7"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "501595FA02918CF4FBAF6372B029B2B4"
      valueUuid: "target"
    - type: "INPUT"
      name: "subDir"
      modelFingerprint: "0EED4A44BEFBF2DB01C7F53A89A1F7D7"
      valueUuid: "subDir"
    - type: "LOCAL_VARIABLE"
      name: "home"
      modelFingerprint: "867E2852B9480A0BB2E7AD696E13B075"
      valueUuid: "applicationHome"
      methodExercised:
        expression: "getSource():file"
    - type: "LOCAL_VARIABLE"
      name: "home"
      modelFingerprint: "55389C3EE2CF5568E627981661FE2903"
      valueUuid: "applicationHome"
      methodExercised:
        expression: "getDir():file2"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "D246E7716687CDA656330B7EF1470B21"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:string9):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "55AF10A57478A8B8575FC9565D11DD77"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean3,message:uniqueUuid20):void4"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean4,messageSupplier:uniqueUuid21):void5"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean5,messageSupplier:uniqueUuid22):void6"
        staticAccess: true
    - type: "STATIC"
      name: "Files.class"
      modelFingerprint: "CB6593DF4E9F943BC6FCC8778F0FD252"
      valueUuid: "Files.class"
      methodExercised:
        expression: "createDirectory(dir:path2,attrs:fileAttributeArray):path3"
        throwsExceptions:
        - "java.io.IOException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C61BDC8AFB4EAE2985A2607B4F5FCDB4"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "update(digest, home.getSource());"
      lineNumber: 145
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: home - Method: getSource"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationTemp"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationTemp"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "subDir1"
      valueType: "java.lang.String"
      uuid: "subDir"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationHome"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationHome"
      uuid: "applicationHome"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.system.ApplicationHome"
            parameters:
            - name: "sourceClass"
              value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "sourceClass"
          valueType: "org.springframework.boot.system.ApplicationHome"
          uuid: "applicationHome"
          fixed: true
        methodParameters: []
        methodName: "getSource"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationHome"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationHome"
      uuid: "applicationHome"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.system.ApplicationHome"
            parameters:
            - name: "sourceClass"
              value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "sourceClass"
          valueType: "org.springframework.boot.system.ApplicationHome"
          uuid: "applicationHome"
          fixed: true
        methodParameters: []
        methodName: "getDir"
      valueType: "java.io.File"
      uuid: "file2"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "No 'java.io.tmpdir' property set"
      valueType: "java.lang.String"
      uuid: "uniqueUuid20"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid21"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void6"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid22"
    - sapientType: "MOCK"
      valueType: "java.nio.file.Files"
      uuid: "Files.class"
    - sapientType: "MOCK"
      valueType: "java.nio.file.Path"
      uuid: "path3"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.nio.file.Path"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.nio.file.Paths"
            method: "get"
            methodParameters:
            - value:
                sapientType: "BASIC"
                content: !<regular>
                  value: ""
                valueType: "java.lang.String"
                uuid: "string9"
            - value:
                sapientType: "ARRAY"
                content: !<array>
                  values: {}
                valueType: "java.lang.String[]"
                uuid: "stringArray"
          valueType: "java.nio.file.Path"
          uuid: "path"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "DA39A3EE5E6B4B0D3255BFEF95601890AFD80709"
            valueType: "java.lang.String"
            uuid: "string8"
        methodName: "resolve"
      valueType: "java.nio.file.Path"
      uuid: "path2"
      nameForMock: "path2"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.nio.file.attribute.FileAttribute[]"
      uuid: "fileAttributeArray"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Unable to create application temp directory path2"
            valueType: "java.lang.String"
            uuid: "string10"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.IOException"
              parameters: []
            valueType: "java.io.IOException"
            uuid: "iOException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 96
      expression: "this.path == null"
      range: "(96,7)-(96,23)"
      evaluatedAs: true
      internalMethodName: "getPath"
    - lineNumber: 99
      expression: "this.path == null"
      range: "(99,9)-(99,25)"
      evaluatedAs: true
      internalMethodName: "getPath"
    - lineNumber: 160
      expression: "source != null"
      range: "(160,7)-(160,20)"
      evaluatedAs: true
      internalMethodName: "update"
    - lineNumber: 166
      expression: "source instanceof File file"
      range: "(166,7)-(166,33)"
      evaluatedAs: true
      internalMethodName: "getUpdateSourceBytes"
    - lineNumber: 113
      expression: "!Files.exists(path)"
      range: "(113,8)-(113,26)"
      evaluatedAs: true
      internalMethodName: "createDirectory"
    - lineNumber: 124
      expression: "!fileSystem.supportedFileAttributeViews().contains(\\\"posix\\\"\
        )"
      range: "(124,7)-(124,65)"
      evaluatedAs: true
      internalMethodName: "getFileAttributes"
    - lineNumber: 118
      expression: "catch-exception (IOException)"
      range: "(118,3)-(118,23)"
      evaluatedAs: true
      internalMethodName: "createDirectory"
    catchBlockExercised:
      idExternalInstruction: 33
      id: 1
      catchExceptions:
      - "java.io.IOException"
  - pathId: "path11"
    testPathName: "getDir1WhenFileSystemSupportedFileAttributeViewsNotContainsPosixAndCaughtIOExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.Class<?>) : void"
    modelFingerprint: "622C27AF6B0B7AECAE21FE510CF3F238"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "501595FA02918CF4FBAF6372B029B2B4"
      valueUuid: "target"
    - type: "INPUT"
      name: "subDir"
      modelFingerprint: "37227A5FF645F8A2EDFF2970D793F041"
      valueUuid: "subDir"
    - type: "LOCAL_VARIABLE"
      name: "home"
      modelFingerprint: "867E2852B9480A0BB2E7AD696E13B075"
      valueUuid: "applicationHome"
      methodExercised:
        expression: "getSource():file"
    - type: "LOCAL_VARIABLE"
      name: "home"
      modelFingerprint: "55389C3EE2CF5568E627981661FE2903"
      valueUuid: "applicationHome"
      methodExercised:
        expression: "getDir():file2"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "C8E7788B41FB90ECC970D65F20AA3649"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:string9):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D56980AC9CD3C0C02BC41E1A49E17D89"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean3,message:uniqueUuid23):void4"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean4,messageSupplier:uniqueUuid24):void5"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean5,messageSupplier:uniqueUuid25):void6"
        staticAccess: true
    - type: "STATIC"
      name: "Files.class"
      modelFingerprint: "5959BFC5110F1A3089558D026375712E"
      valueUuid: "Files.class"
      methodExercised:
        expression: "createDirectory(dir:path3,attrs:fileAttributeArray):path4"
        throwsExceptions:
        - "java.io.IOException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "455F906EFAD57ED9BC847362AB6542DC"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "update(digest, home.getSource());"
      lineNumber: 145
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: home - Method: getSource"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationTemp"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationTemp"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "H"
      valueType: "java.lang.String"
      uuid: "subDir"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationHome"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationHome"
      uuid: "applicationHome"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.system.ApplicationHome"
            parameters:
            - name: "sourceClass"
              value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "sourceClass"
          valueType: "org.springframework.boot.system.ApplicationHome"
          uuid: "applicationHome"
          fixed: true
        methodParameters: []
        methodName: "getSource"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationHome"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationHome"
      uuid: "applicationHome"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.system.ApplicationHome"
            parameters:
            - name: "sourceClass"
              value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "sourceClass"
          valueType: "org.springframework.boot.system.ApplicationHome"
          uuid: "applicationHome"
          fixed: true
        methodParameters: []
        methodName: "getDir"
      valueType: "java.io.File"
      uuid: "file2"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "G"
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "No 'java.io.tmpdir' property set"
      valueType: "java.lang.String"
      uuid: "uniqueUuid23"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid24"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void6"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid25"
    - sapientType: "MOCK"
      valueType: "java.nio.file.Files"
      uuid: "Files.class"
    - sapientType: "MOCK"
      valueType: "java.nio.file.Path"
      uuid: "path4"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.nio.file.Path"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<method_return_from_value>
            target: "java.nio.file.Path"
            localVariableValue:
              sapientType: "OBJECT"
              content: !<static_method_return>
                target: "java.nio.file.Paths"
                method: "get"
                methodParameters:
                - value:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "G"
                    valueType: "java.lang.String"
                    uuid: "string9"
                - value:
                    sapientType: "ARRAY"
                    content: !<array>
                      values: {}
                    valueType: "java.lang.String[]"
                    uuid: "stringArray"
              valueType: "java.nio.file.Path"
              uuid: "path"
            methodParameters:
            - value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "DA39A3EE5E6B4B0D3255BFEF95601890AFD80709"
                valueType: "java.lang.String"
                uuid: "string8"
            methodName: "resolve"
          valueType: "java.nio.file.Path"
          uuid: "path2"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "H"
            valueType: "java.lang.String"
            uuid: "subDir"
        methodName: "resolve"
      valueType: "java.nio.file.Path"
      uuid: "path3"
      nameForMock: "path3"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.nio.file.attribute.FileAttribute[]"
      uuid: "fileAttributeArray"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Unable to create application temp directory path3"
            valueType: "java.lang.String"
            uuid: "string10"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.IOException"
              parameters: []
            valueType: "java.io.IOException"
            uuid: "iOException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 96
      expression: "this.path == null"
      range: "(96,7)-(96,23)"
      evaluatedAs: true
      internalMethodName: "getPath"
    - lineNumber: 99
      expression: "this.path == null"
      range: "(99,9)-(99,25)"
      evaluatedAs: true
      internalMethodName: "getPath"
    - lineNumber: 160
      expression: "source != null"
      range: "(160,7)-(160,20)"
      evaluatedAs: true
      internalMethodName: "update"
    - lineNumber: 166
      expression: "source instanceof File file"
      range: "(166,7)-(166,33)"
      evaluatedAs: true
      internalMethodName: "getUpdateSourceBytes"
    - lineNumber: 113
      expression: "!Files.exists(path)"
      range: "(113,8)-(113,26)"
      evaluatedAs: false
      internalMethodName: "createDirectory"
    - lineNumber: 124
      expression: "!fileSystem.supportedFileAttributeViews().contains(\\\"posix\\\"\
        )"
      range: "(124,7)-(124,65)"
      evaluatedAs: true
      internalMethodName: "getFileAttributes"
    - lineNumber: 118
      expression: "catch-exception (IOException)"
      range: "(118,3)-(118,23)"
      evaluatedAs: true
      internalMethodName: "createDirectory"
    catchBlockExercised:
      idExternalInstruction: 7
      id: 1
      catchExceptions:
      - "java.io.IOException"
  - pathId: "path12"
    testPathName: "getDir1WhenFileSystemSupportedFileAttributeViewsContainsPosixAndCaughtIOExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.Class<?>) : void"
    modelFingerprint: "3E8CD0AFB644F22BCEA9C84C1AD03833"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "501595FA02918CF4FBAF6372B029B2B4"
      valueUuid: "target"
    - type: "INPUT"
      name: "subDir"
      modelFingerprint: "0EED4A44BEFBF2DB01C7F53A89A1F7D7"
      valueUuid: "subDir"
    - type: "LOCAL_VARIABLE"
      name: "home"
      modelFingerprint: "867E2852B9480A0BB2E7AD696E13B075"
      valueUuid: "applicationHome"
      methodExercised:
        expression: "getSource():file"
    - type: "LOCAL_VARIABLE"
      name: "home"
      modelFingerprint: "55389C3EE2CF5568E627981661FE2903"
      valueUuid: "applicationHome"
      methodExercised:
        expression: "getDir():file2"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "D246E7716687CDA656330B7EF1470B21"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:string9):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "55AF10A57478A8B8575FC9565D11DD77"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean3,message:uniqueUuid26):void4"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean4,messageSupplier:uniqueUuid27):void5"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean5,messageSupplier:uniqueUuid28):void6"
        staticAccess: true
    - type: "STATIC"
      name: "Files.class"
      modelFingerprint: "432EC38C7A5D0CB91E2E0DCE32996841"
      valueUuid: "Files.class"
      methodExercised:
        expression: "createDirectory(dir:path3,attrs:fileAttributeArray2):path4"
        throwsExceptions:
        - "java.io.IOException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "455F906EFAD57ED9BC847362AB6542DC"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "update(digest, home.getSource());"
      lineNumber: 145
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: home - Method: getSource"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationTemp"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationTemp"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "subDir"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationHome"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationHome"
      uuid: "applicationHome"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.system.ApplicationHome"
            parameters:
            - name: "sourceClass"
              value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "sourceClass"
          valueType: "org.springframework.boot.system.ApplicationHome"
          uuid: "applicationHome"
          fixed: true
        methodParameters: []
        methodName: "getSource"
      valueType: "java.io.File"
      uuid: "file"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.system.ApplicationHome"
        parameters:
        - name: "sourceClass"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "sourceClass"
      valueType: "org.springframework.boot.system.ApplicationHome"
      uuid: "applicationHome"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.io.File"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.system.ApplicationHome"
            parameters:
            - name: "sourceClass"
              value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "sourceClass"
          valueType: "org.springframework.boot.system.ApplicationHome"
          uuid: "applicationHome"
          fixed: true
        methodParameters: []
        methodName: "getDir"
      valueType: "java.io.File"
      uuid: "file2"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string9"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "No 'java.io.tmpdir' property set"
      valueType: "java.lang.String"
      uuid: "uniqueUuid26"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid27"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void6"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid28"
    - sapientType: "MOCK"
      valueType: "java.nio.file.Files"
      uuid: "Files.class"
    - sapientType: "MOCK"
      valueType: "java.nio.file.Path"
      uuid: "path4"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.nio.file.Path"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<method_return_from_value>
            target: "java.nio.file.Path"
            localVariableValue:
              sapientType: "OBJECT"
              content: !<static_method_return>
                target: "java.nio.file.Paths"
                method: "get"
                methodParameters:
                - value:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: ""
                    valueType: "java.lang.String"
                    uuid: "string9"
                - value:
                    sapientType: "ARRAY"
                    content: !<array>
                      values: {}
                    valueType: "java.lang.String[]"
                    uuid: "stringArray"
              valueType: "java.nio.file.Path"
              uuid: "path"
            methodParameters:
            - value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "DA39A3EE5E6B4B0D3255BFEF95601890AFD80709"
                valueType: "java.lang.String"
                uuid: "string8"
            methodName: "resolve"
          valueType: "java.nio.file.Path"
          uuid: "path2"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "subDir"
        methodName: "resolve"
      valueType: "java.nio.file.Path"
      uuid: "path3"
      nameForMock: "path3"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.nio.file.attribute.PosixFilePermissions"
              method: "asFileAttribute"
              methodParameters:
              - value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values:
                    - sapientType: "ENUM"
                      content: !<regular>
                        value: "OWNER_READ"
                      valueType: "java.nio.file.attribute.PosixFilePermission"
                      fixed: true
                    - sapientType: "ENUM"
                      content: !<regular>
                        value: "OWNER_WRITE"
                      valueType: "java.nio.file.attribute.PosixFilePermission"
                      fixed: true
                    - sapientType: "ENUM"
                      content: !<regular>
                        value: "OWNER_EXECUTE"
                      valueType: "java.nio.file.attribute.PosixFilePermission"
                      fixed: true
                  valueType: "java.util.EnumSet"
                  genericValueType: "java.nio.file.attribute.PosixFilePermission"
                  uuid: "enumSet"
            valueType: "java.nio.file.attribute.FileAttribute"
            genericValueType: "java.util.Set<java.nio.file.attribute.PosixFilePermission>"
            uuid: "fileAttribute"
      valueType: "java.nio.file.attribute.FileAttribute[]"
      genericValueType: "java.util.Set<java.nio.file.attribute.PosixFilePermission>"
      uuid: "fileAttributeArray2"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Unable to create application temp directory path3"
            valueType: "java.lang.String"
            uuid: "string10"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.IOException"
              parameters: []
            valueType: "java.io.IOException"
            uuid: "iOException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 96
      expression: "this.path == null"
      range: "(96,7)-(96,23)"
      evaluatedAs: true
      internalMethodName: "getPath"
    - lineNumber: 99
      expression: "this.path == null"
      range: "(99,9)-(99,25)"
      evaluatedAs: true
      internalMethodName: "getPath"
    - lineNumber: 160
      expression: "source != null"
      range: "(160,7)-(160,20)"
      evaluatedAs: true
      internalMethodName: "update"
    - lineNumber: 166
      expression: "source instanceof File file"
      range: "(166,7)-(166,33)"
      evaluatedAs: true
      internalMethodName: "getUpdateSourceBytes"
    - lineNumber: 113
      expression: "!Files.exists(path)"
      range: "(113,8)-(113,26)"
      evaluatedAs: false
      internalMethodName: "createDirectory"
    - lineNumber: 124
      expression: "!fileSystem.supportedFileAttributeViews().contains(\\\"posix\\\"\
        )"
      range: "(124,7)-(124,65)"
      evaluatedAs: false
      internalMethodName: "getFileAttributes"
    - lineNumber: 118
      expression: "catch-exception (IOException)"
      range: "(118,3)-(118,23)"
      evaluatedAs: true
      internalMethodName: "createDirectory"
    catchBlockExercised:
      idExternalInstruction: 7
      id: 1
      catchExceptions:
      - "java.io.IOException"
