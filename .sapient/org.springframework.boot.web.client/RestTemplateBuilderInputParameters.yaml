---
modelFingerprint: "D6774232FA6F027C5391B2F6DBA2F1B4"
targetClass:
  fullClassName: "org.springframework.boot.web.client.RestTemplateBuilder"
methods:
- method:
    name: "detectRequestFactory"
    sourceCodeSignature: "RestTemplateBuilder detectRequestFactory(boolean detectRequestFactory)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "detectRequestFactory"
      type: "boolean"
    instructionFingerprint: "181F21A0DF62A9B23D9A80E416A6D53C"
  paths:
  - pathId: "path1"
    testPathName: "detectRequestFactoryTest"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "5B2C4A31E53771F09EFF074F26E7E013"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "detectRequestFactory"
      modelFingerprint: "25DBAEA3BAA1F2D28ACACD83C4DA00E7"
      valueUuid: "detectRequestFactory"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid1):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "039C99A0A07BAB80C5D4E287F2579483"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "detectRequestFactory"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "requestFactorySettings"
          value:
            sapientType: "OBJECT"
            content: !<static_field_return>
              target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
              fieldName: "DEFAULTS"
            valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            uuid: "clientHttpRequestFactorySettings"
        - name: "detectRequestFactory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "detectRequestFactory"
        - name: "rootUri"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid2"
        - name: "messageConverters"
          value:
            sapientType: "NULL"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.converter.HttpMessageConverter<?>"
            uuid: "uniqueUuid3"
        - name: "interceptors"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
            uuid: "set"
        - name: "requestFactory"
          value:
            sapientType: "NULL"
            valueType: "java.util.function.Function"
            genericValueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings,org.springframework.http.client.ClientHttpRequestFactory"
            uuid: "uniqueUuid4"
        - name: "uriTemplateHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.util.UriTemplateHandler"
            uuid: "uniqueUuid5"
        - name: "errorHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.client.ResponseErrorHandler"
            uuid: "uniqueUuid6"
        - name: "basicAuthentication"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.boot.web.client.BasicAuthentication"
            uuid: "uniqueUuid7"
        - name: "defaultHeaders"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Map"
            genericValueType: "java.lang.String,java.util.List<java.lang.String>"
            uuid: "map"
        - name: "customizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashSet"
              parameters:
              - name: "c"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.List"
                  genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
                  uuid: "list"
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
            uuid: "set2"
        - name: "requestCustomizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
            uuid: "set3"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
      fixed: true
- method:
    name: "rootUri"
    sourceCodeSignature: "RestTemplateBuilder rootUri(String rootUri)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "rootUri"
      type: "java.lang.String"
    instructionFingerprint: "00E14121FC51C876C6B6FA34C203EB33"
  paths:
  - pathId: "path1"
    testPathName: "rootUriTest"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "576FB625E83E291B8204CEF8D4A130F0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "rootUri"
      modelFingerprint: "79CAF30A56A2895A0A787ABD4AA25F03"
      valueUuid: "rootUri"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid8):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "E6870132A4C85F27BAD97BFB4A4E16C7"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "rootUri1"
      valueType: "java.lang.String"
      uuid: "rootUri"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "requestFactorySettings"
          value:
            sapientType: "OBJECT"
            content: !<static_field_return>
              target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
              fieldName: "DEFAULTS"
            valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            uuid: "clientHttpRequestFactorySettings"
        - name: "detectRequestFactory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "int1"
            fixed: true
        - name: "rootUri"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "rootUri1"
            valueType: "java.lang.String"
            uuid: "rootUri"
        - name: "messageConverters"
          value:
            sapientType: "NULL"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.converter.HttpMessageConverter<?>"
            uuid: "uniqueUuid9"
        - name: "interceptors"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
            uuid: "set"
        - name: "requestFactory"
          value:
            sapientType: "NULL"
            valueType: "java.util.function.Function"
            genericValueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings,org.springframework.http.client.ClientHttpRequestFactory"
            uuid: "uniqueUuid10"
        - name: "uriTemplateHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.util.UriTemplateHandler"
            uuid: "uniqueUuid11"
        - name: "errorHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.client.ResponseErrorHandler"
            uuid: "uniqueUuid12"
        - name: "basicAuthentication"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.boot.web.client.BasicAuthentication"
            uuid: "uniqueUuid13"
        - name: "defaultHeaders"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Map"
            genericValueType: "java.lang.String,java.util.List<java.lang.String>"
            uuid: "map"
        - name: "customizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashSet"
              parameters:
              - name: "c"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.List"
                  genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
                  uuid: "list"
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
            uuid: "set2"
        - name: "requestCustomizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
            uuid: "set3"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
      fixed: true
- method:
    name: "messageConverters"
    sourceCodeSignature: "RestTemplateBuilder messageConverters(HttpMessageConverter<?>...\
      \ messageConverters)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "messageConverters"
      type: "org.springframework.http.converter.HttpMessageConverter[]"
    instructionFingerprint: "10286FC63834A541DC4EBBC6D24E3CE1"
  paths:
  - pathId: "path1"
    testPathName: "messageConvertersTest"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "E40B089E048861A8CD6C6192F3788126"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "messageConverters"
      modelFingerprint: "25B79ED6C0CBE047F78F8C71E113CE48"
      valueUuid: "messageConverters"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid14):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "54A785BFD234FBD42E6F1C28DD8D00E8"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:messageConverters,message:uniqueUuid15):void2"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "58C1E1E60D39F86D7D095295E6704BF1"
      methodExercised:
        expression: "messageConverters(messageConverters:list2):restTemplateBuilder2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "85AE48E1FD3D24DBAA8BB8D1044D4114"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.http.converter.HttpMessageConverter[]"
      genericValueType: "?"
      uuid: "messageConverters"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid14"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.http.converter.HttpMessageConverter[]"
      genericValueType: "?"
      uuid: "messageConverters"
    - sapientType: "BASIC"
      content: !<regular>
        value: "MessageConverters must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid15"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.http.converter.HttpMessageConverter<?>"
      uuid: "list2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
- method:
    name: "messageConverters"
    sourceCodeSignature: "RestTemplateBuilder messageConverters(Collection<? extends\
      \ HttpMessageConverter<?>> messageConverters)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "messageConverters"
      type: "java.util.Collection"
    instructionFingerprint: "646EDF3241829681FBADA8C71D7A4FA7"
  paths:
  - pathId: "path1"
    testPathName: "messageConverters1Test"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "86F3D7A7D9028EC9A39C64B69C8B33F5"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "messageConverters"
      modelFingerprint: "DD8D3614FFDBADC6913875FF371C6E39"
      valueUuid: "messageConverters"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid16):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "94693D4A47094DFC480A08694E738E37"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:messageConverters,message:uniqueUuid17):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8CB876E86EED78830FBB274CB5605AC0"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "? extends org.springframework.http.converter.HttpMessageConverter<?>"
      uuid: "messageConverters"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid16"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "? extends org.springframework.http.converter.HttpMessageConverter<?>"
      uuid: "messageConverters"
    - sapientType: "BASIC"
      content: !<regular>
        value: "MessageConverters must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid17"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "requestFactorySettings"
          value:
            sapientType: "OBJECT"
            content: !<static_field_return>
              target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
              fieldName: "DEFAULTS"
            valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            uuid: "clientHttpRequestFactorySettings"
        - name: "detectRequestFactory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "int1"
            fixed: true
        - name: "rootUri"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid18"
        - name: "messageConverters"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashSet"
              parameters:
              - name: "c"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.Collection"
                  genericValueType: "? extends org.springframework.http.converter.HttpMessageConverter<?>"
                  uuid: "messageConverters"
              values: []
            valueType: "java.util.Set"
            genericValueType: "java.lang.Object"
            uuid: "set4"
        - name: "interceptors"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
            uuid: "set"
        - name: "requestFactory"
          value:
            sapientType: "NULL"
            valueType: "java.util.function.Function"
            genericValueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings,org.springframework.http.client.ClientHttpRequestFactory"
            uuid: "uniqueUuid19"
        - name: "uriTemplateHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.util.UriTemplateHandler"
            uuid: "uniqueUuid20"
        - name: "errorHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.client.ResponseErrorHandler"
            uuid: "uniqueUuid21"
        - name: "basicAuthentication"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.boot.web.client.BasicAuthentication"
            uuid: "uniqueUuid22"
        - name: "defaultHeaders"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Map"
            genericValueType: "java.lang.String,java.util.List<java.lang.String>"
            uuid: "map"
        - name: "customizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashSet"
              parameters:
              - name: "c"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.List"
                  genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
                  uuid: "list"
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
            uuid: "set2"
        - name: "requestCustomizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
            uuid: "set3"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
      fixed: true
- method:
    name: "additionalMessageConverters"
    sourceCodeSignature: "RestTemplateBuilder additionalMessageConverters(HttpMessageConverter<?>...\
      \ messageConverters)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "messageConverters"
      type: "org.springframework.http.converter.HttpMessageConverter[]"
    instructionFingerprint: "B05203D53DDF79EF3E138D7A7F40F13F"
  paths:
  - pathId: "path1"
    testPathName: "additionalMessageConvertersTest"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "110DDAA0FE6E29949496BEB8F7FBE87B"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "messageConverters"
      modelFingerprint: "25B79ED6C0CBE047F78F8C71E113CE48"
      valueUuid: "messageConverters"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid23):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "54A785BFD234FBD42E6F1C28DD8D00E8"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:messageConverters,message:uniqueUuid24):void2"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "EA3E6E26CE7DF48F87C3C430CEA8FB60"
      methodExercised:
        expression: "additionalMessageConverters(messageConverters:list2):restTemplateBuilder2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "85AE48E1FD3D24DBAA8BB8D1044D4114"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.http.converter.HttpMessageConverter[]"
      genericValueType: "?"
      uuid: "messageConverters"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid23"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.http.converter.HttpMessageConverter[]"
      genericValueType: "?"
      uuid: "messageConverters"
    - sapientType: "BASIC"
      content: !<regular>
        value: "MessageConverters must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid24"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.http.converter.HttpMessageConverter<?>"
      uuid: "list2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
- method:
    name: "additionalMessageConverters"
    sourceCodeSignature: "RestTemplateBuilder additionalMessageConverters(Collection<?\
      \ extends HttpMessageConverter<?>> messageConverters)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "messageConverters"
      type: "java.util.Collection"
    instructionFingerprint: "AEFF1F7939EDFE97CB6CDDA5E52B4F50"
  paths:
  - pathId: "path1"
    testPathName: "additionalMessageConverters1WhenAdditionsIsNotNull"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "93D39B5DA58C2D5FE19A56364BE06231"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "messageConverters"
      modelFingerprint: "01AF5E9132B002A2ED76ABA15A85658F"
      valueUuid: "messageConverters"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid25):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "8991FB4EEA1863292CEB3324CAB2DEEC"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:messageConverters,message:uniqueUuid26):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "11FDBC0AE2DFB9959018D6161451937C"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "? extends org.springframework.http.converter.HttpMessageConverter<?>"
      uuid: "messageConverters"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid25"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "? extends org.springframework.http.converter.HttpMessageConverter<?>"
      uuid: "messageConverters"
    - sapientType: "BASIC"
      content: !<regular>
        value: "MessageConverters must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid26"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "requestFactorySettings"
          value:
            sapientType: "OBJECT"
            content: !<static_field_return>
              target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
              fieldName: "DEFAULTS"
            valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            uuid: "clientHttpRequestFactorySettings"
        - name: "detectRequestFactory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "int1"
            fixed: true
        - name: "rootUri"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid27"
        - name: "messageConverters"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.HashSet"
              parameters: []
              values:
              - sapientType: "MOCK"
                valueType: "org.springframework.http.converter.HttpMessageConverter"
                genericValueType: "?"
                uuid: "set5Item0"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.converter.HttpMessageConverter<?>"
            uuid: "set5"
        - name: "interceptors"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
            uuid: "set"
        - name: "requestFactory"
          value:
            sapientType: "NULL"
            valueType: "java.util.function.Function"
            genericValueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings,org.springframework.http.client.ClientHttpRequestFactory"
            uuid: "uniqueUuid28"
        - name: "uriTemplateHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.util.UriTemplateHandler"
            uuid: "uniqueUuid29"
        - name: "errorHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.client.ResponseErrorHandler"
            uuid: "uniqueUuid30"
        - name: "basicAuthentication"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.boot.web.client.BasicAuthentication"
            uuid: "uniqueUuid31"
        - name: "defaultHeaders"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Map"
            genericValueType: "java.lang.String,java.util.List<java.lang.String>"
            uuid: "map"
        - name: "customizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashSet"
              parameters:
              - name: "c"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.List"
                  genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
                  uuid: "list"
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
            uuid: "set2"
        - name: "requestCustomizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
            uuid: "set3"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
      fixed: true
    branches:
    - lineNumber: 692
      expression: "collection != null"
      range: "(692,40)-(692,57)"
      evaluatedAs: false
      internalMethodName: "append"
    - lineNumber: 693
      expression: "additions != null"
      range: "(693,7)-(693,23)"
      evaluatedAs: true
      internalMethodName: "append"
    calledSomeStaticInternalMethod: true
- method:
    name: "defaultMessageConverters"
    sourceCodeSignature: "RestTemplateBuilder defaultMessageConverters()"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    instructionFingerprint: "03BBF4046E11DA5672DEA5CED98D4A85"
  paths:
  - pathId: "path1"
    testPathName: "defaultMessageConvertersTest"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "D50461BD6C3133D092BCB40432ED3792"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid32):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "33B9FE00F6EF812B7B22F60F9819EBE6"
      valueUuid: "restTemplate"
      methodExercised:
        expression: "getMessageConverters():list2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8CB876E86EED78830FBB274CB5605AC0"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "copiedSetOf(new RestTemplate().getMessageConverters()), this.interceptors,\
        \ this.requestFactory,"
      lineNumber: 237
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type RestTemplate - Method: getMessageConverters"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid32"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.web.client.RestTemplate"
        parameters: []
      valueType: "org.springframework.web.client.RestTemplate"
      uuid: "restTemplate"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.http.converter.HttpMessageConverter<?>"
      uuid: "list2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "requestFactorySettings"
          value:
            sapientType: "OBJECT"
            content: !<static_field_return>
              target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
              fieldName: "DEFAULTS"
            valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            uuid: "clientHttpRequestFactorySettings"
        - name: "detectRequestFactory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "int1"
            fixed: true
        - name: "rootUri"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid33"
        - name: "messageConverters"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashSet"
              parameters:
              - name: "c"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.List"
                  genericValueType: "org.springframework.http.converter.HttpMessageConverter<?>"
                  uuid: "list2"
              values: []
            valueType: "java.util.Set"
            genericValueType: "java.lang.Object"
            uuid: "set4"
        - name: "interceptors"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
            uuid: "set"
        - name: "requestFactory"
          value:
            sapientType: "NULL"
            valueType: "java.util.function.Function"
            genericValueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings,org.springframework.http.client.ClientHttpRequestFactory"
            uuid: "uniqueUuid34"
        - name: "uriTemplateHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.util.UriTemplateHandler"
            uuid: "uniqueUuid35"
        - name: "errorHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.client.ResponseErrorHandler"
            uuid: "uniqueUuid36"
        - name: "basicAuthentication"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.boot.web.client.BasicAuthentication"
            uuid: "uniqueUuid37"
        - name: "defaultHeaders"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Map"
            genericValueType: "java.lang.String,java.util.List<java.lang.String>"
            uuid: "map"
        - name: "customizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashSet"
              parameters:
              - name: "c"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.List"
                  genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
                  uuid: "list"
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
            uuid: "set2"
        - name: "requestCustomizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
            uuid: "set3"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
      fixed: true
- method:
    name: "interceptors"
    sourceCodeSignature: "RestTemplateBuilder interceptors(ClientHttpRequestInterceptor...\
      \ interceptors)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "interceptors"
      type: "org.springframework.http.client.ClientHttpRequestInterceptor[]"
    instructionFingerprint: "BBD92E04D4BE9A650EE40633CB439803"
  paths:
  - pathId: "path1"
    testPathName: "interceptorsTest"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "C6B6C49AC67C6336D29F6F6A65087A1A"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "interceptors"
      modelFingerprint: "6B561FA15BFACB05BC6AEDBF48A00D41"
      valueUuid: "interceptors"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid38):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "6C911AD8927C1253F2DD83C8DB70BBCB"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:interceptors,message:uniqueUuid39):void2"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "F4AF9B79065574EED986B5CD421A8E40"
      methodExercised:
        expression: "interceptors(interceptors:list2):restTemplateBuilder2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "85AE48E1FD3D24DBAA8BB8D1044D4114"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.http.client.ClientHttpRequestInterceptor[]"
      uuid: "interceptors"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid38"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.http.client.ClientHttpRequestInterceptor[]"
      uuid: "interceptors"
    - sapientType: "BASIC"
      content: !<regular>
        value: "interceptors must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid39"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
      uuid: "list2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
- method:
    name: "interceptors"
    sourceCodeSignature: "RestTemplateBuilder interceptors(Collection<ClientHttpRequestInterceptor>\
      \ interceptors)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "interceptors"
      type: "java.util.Collection"
    instructionFingerprint: "4422470ECD0EB389D0F601ED37F99820"
  paths:
  - pathId: "path1"
    testPathName: "interceptors1Test"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "1A1FB13352B4CED6D9227CEC2B0B43BB"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "interceptors"
      modelFingerprint: "DAACA2FDC6E0A5CB54EEB0052F279340"
      valueUuid: "interceptors"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid40):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "CC5F364FB5DEE8D350D62B05A98EA38B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:interceptors,message:uniqueUuid41):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C61C3213F10EDDDA37B77BA7114A70A6"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
      uuid: "interceptors"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid40"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
      uuid: "interceptors"
    - sapientType: "BASIC"
      content: !<regular>
        value: "interceptors must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid41"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "requestFactorySettings"
          value:
            sapientType: "OBJECT"
            content: !<static_field_return>
              target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
              fieldName: "DEFAULTS"
            valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            uuid: "clientHttpRequestFactorySettings"
        - name: "detectRequestFactory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "int1"
            fixed: true
        - name: "rootUri"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid42"
        - name: "messageConverters"
          value:
            sapientType: "NULL"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.converter.HttpMessageConverter<?>"
            uuid: "uniqueUuid43"
        - name: "interceptors"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashSet"
              parameters:
              - name: "c"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.Collection"
                  genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
                  uuid: "interceptors"
              values: []
            valueType: "java.util.Set"
            genericValueType: "java.lang.Object"
            uuid: "set4"
        - name: "requestFactory"
          value:
            sapientType: "NULL"
            valueType: "java.util.function.Function"
            genericValueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings,org.springframework.http.client.ClientHttpRequestFactory"
            uuid: "uniqueUuid44"
        - name: "uriTemplateHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.util.UriTemplateHandler"
            uuid: "uniqueUuid45"
        - name: "errorHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.client.ResponseErrorHandler"
            uuid: "uniqueUuid46"
        - name: "basicAuthentication"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.boot.web.client.BasicAuthentication"
            uuid: "uniqueUuid47"
        - name: "defaultHeaders"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Map"
            genericValueType: "java.lang.String,java.util.List<java.lang.String>"
            uuid: "map"
        - name: "customizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashSet"
              parameters:
              - name: "c"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.List"
                  genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
                  uuid: "list"
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
            uuid: "set2"
        - name: "requestCustomizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
            uuid: "set3"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
      fixed: true
- method:
    name: "additionalInterceptors"
    sourceCodeSignature: "RestTemplateBuilder additionalInterceptors(ClientHttpRequestInterceptor...\
      \ interceptors)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "interceptors"
      type: "org.springframework.http.client.ClientHttpRequestInterceptor[]"
    instructionFingerprint: "9D4F3AE2A098401E9D746946A1835E5F"
  paths:
  - pathId: "path1"
    testPathName: "additionalInterceptorsTest"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "AED646B17C927CD5CE7A8B9C6D908963"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "interceptors"
      modelFingerprint: "6B561FA15BFACB05BC6AEDBF48A00D41"
      valueUuid: "interceptors"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid48):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "6C911AD8927C1253F2DD83C8DB70BBCB"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:interceptors,message:uniqueUuid49):void2"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "527E48636E3035830BBD6CD77700115E"
      methodExercised:
        expression: "additionalInterceptors(interceptors:list2):restTemplateBuilder2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "85AE48E1FD3D24DBAA8BB8D1044D4114"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.http.client.ClientHttpRequestInterceptor[]"
      uuid: "interceptors"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid48"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.http.client.ClientHttpRequestInterceptor[]"
      uuid: "interceptors"
    - sapientType: "BASIC"
      content: !<regular>
        value: "interceptors must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid49"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
      uuid: "list2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
- method:
    name: "additionalInterceptors"
    sourceCodeSignature: "RestTemplateBuilder additionalInterceptors(Collection<?\
      \ extends ClientHttpRequestInterceptor> interceptors)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "interceptors"
      type: "java.util.Collection"
    instructionFingerprint: "BAA833ECD5D9E35EC004D619F50B83C7"
  paths:
  - pathId: "path1"
    testPathName: "additionalInterceptors1WhenAdditionsIsNotNull"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "9DFE6EC36720123BD5649157B6DAAA2B"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "interceptors"
      modelFingerprint: "1714DB0C44CF855EB2989656D1448B9D"
      valueUuid: "interceptors"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid50):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A5F65263324E02F0DCE64B70767CAC37"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:interceptors,message:uniqueUuid51):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "CA7D7E8A98C216BB65EA4BAB867887B2"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "? extends org.springframework.http.client.ClientHttpRequestInterceptor"
      uuid: "interceptors"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid50"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "? extends org.springframework.http.client.ClientHttpRequestInterceptor"
      uuid: "interceptors"
    - sapientType: "BASIC"
      content: !<regular>
        value: "interceptors must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid51"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "requestFactorySettings"
          value:
            sapientType: "OBJECT"
            content: !<static_field_return>
              target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
              fieldName: "DEFAULTS"
            valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            uuid: "clientHttpRequestFactorySettings"
        - name: "detectRequestFactory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "int1"
            fixed: true
        - name: "rootUri"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid52"
        - name: "messageConverters"
          value:
            sapientType: "NULL"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.converter.HttpMessageConverter<?>"
            uuid: "uniqueUuid53"
        - name: "interceptors"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.HashSet"
              parameters: []
              values:
              - sapientType: "MOCK"
                valueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
                uuid: "set4Item0"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
            uuid: "set4"
        - name: "requestFactory"
          value:
            sapientType: "NULL"
            valueType: "java.util.function.Function"
            genericValueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings,org.springframework.http.client.ClientHttpRequestFactory"
            uuid: "uniqueUuid54"
        - name: "uriTemplateHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.util.UriTemplateHandler"
            uuid: "uniqueUuid55"
        - name: "errorHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.client.ResponseErrorHandler"
            uuid: "uniqueUuid56"
        - name: "basicAuthentication"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.boot.web.client.BasicAuthentication"
            uuid: "uniqueUuid57"
        - name: "defaultHeaders"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Map"
            genericValueType: "java.lang.String,java.util.List<java.lang.String>"
            uuid: "map"
        - name: "customizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashSet"
              parameters:
              - name: "c"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.List"
                  genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
                  uuid: "list"
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
            uuid: "set2"
        - name: "requestCustomizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
            uuid: "set3"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
      fixed: true
    branches:
    - lineNumber: 692
      expression: "collection != null"
      range: "(692,40)-(692,57)"
      evaluatedAs: true
      internalMethodName: "append"
    - lineNumber: 693
      expression: "additions != null"
      range: "(693,7)-(693,23)"
      evaluatedAs: true
      internalMethodName: "append"
    calledSomeStaticInternalMethod: true
- method:
    name: "requestFactory"
    sourceCodeSignature: "RestTemplateBuilder requestFactory(Class<? extends ClientHttpRequestFactory>\
      \ requestFactoryType)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "requestFactoryType"
      type: "java.lang.Class"
    instructionFingerprint: "BF7A022AA42834504A44003F745F724A"
  paths:
  - pathId: "path1"
    testPathName: "requestFactoryTest"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "9363FAD5B0F9382190CFD296ACBFB48D"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "requestFactoryType"
      modelFingerprint: "BE83E794B087224CEFD15039B1786BD0"
      valueUuid: "requestFactoryType"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid58):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C7911890F6B855AC7EE6BF30B04F6BD7"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:requestFactoryType,message:uniqueUuid59):void2"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "BDB36E96ACE5E6C6731DAB22971CB44A"
      methodExercised:
        expression: "requestFactory(requestFactoryFunction:uniqueUuid60):restTemplateBuilder2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "85AE48E1FD3D24DBAA8BB8D1044D4114"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "CLASS"
      content: !<regular>
        value: "? extends org.springframework.http.client.ClientHttpRequestFactory"
      valueType: "java.lang.Class"
      genericValueType: "? extends org.springframework.http.client.ClientHttpRequestFactory"
      uuid: "requestFactoryType"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid58"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "? extends org.springframework.http.client.ClientHttpRequestFactory"
      valueType: "java.lang.Class"
      genericValueType: "? extends org.springframework.http.client.ClientHttpRequestFactory"
      uuid: "requestFactoryType"
    - sapientType: "BASIC"
      content: !<regular>
        value: "RequestFactoryType must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid59"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
    - sapientType: "ANY"
      valueType: "java.util.function.Function"
      uuid: "uniqueUuid60"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
- method:
    name: "requestFactory"
    sourceCodeSignature: "RestTemplateBuilder requestFactory(Supplier<ClientHttpRequestFactory>\
      \ requestFactorySupplier)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "requestFactorySupplier"
      type: "java.util.function.Supplier"
    instructionFingerprint: "51B9B1933B68A5C91F5BD7C7A1E27FC6"
  paths:
  - pathId: "path1"
    testPathName: "requestFactory1Test"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "4D94FE93DB903BB85CB37AB41CA4D238"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "requestFactorySupplier"
      modelFingerprint: "799E9DE7C2F3B1E68FDDFDBB6D10EF68"
      valueUuid: "requestFactorySupplier"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid61):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "E74908D8343891BADB897397D2742AB2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:requestFactorySupplier,message:uniqueUuid62):void2"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "BDB36E96ACE5E6C6731DAB22971CB44A"
      methodExercised:
        expression: "requestFactory(requestFactoryFunction:uniqueUuid63):restTemplateBuilder2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "85AE48E1FD3D24DBAA8BB8D1044D4114"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "requestFactorySupplier"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid61"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "requestFactorySupplier"
    - sapientType: "BASIC"
      content: !<regular>
        value: "RequestFactorySupplier must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid62"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
    - sapientType: "ANY"
      valueType: "java.util.function.Function"
      uuid: "uniqueUuid63"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
- method:
    name: "requestFactory"
    sourceCodeSignature: "RestTemplateBuilder requestFactory(Function<ClientHttpRequestFactorySettings,\
      \ ClientHttpRequestFactory> requestFactoryFunction)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "requestFactoryFunction"
      type: "java.util.function.Function"
    instructionFingerprint: "2D3471B3BAE008245807FB91547DB949"
  paths:
  - pathId: "path1"
    testPathName: "requestFactory2Test"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "0E6A25430BF4F7E39C4F4E1CA3684E1E"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "requestFactoryFunction"
      modelFingerprint: "603010A9B0EF831EE0648C64860256FF"
      valueUuid: "requestFactoryFunction"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid64):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C9B1C392710BFB354F4DA21379F39A27"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:requestFactoryFunction,message:uniqueUuid65):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "9B21E5DC6BF9F34C4A23ACE2B012B992"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "java.util.function.Function"
      uuid: "requestFactoryFunction"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid64"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Function"
      uuid: "requestFactoryFunction"
    - sapientType: "BASIC"
      content: !<regular>
        value: "RequestFactoryFunction must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid65"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "requestFactorySettings"
          value:
            sapientType: "OBJECT"
            content: !<static_field_return>
              target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
              fieldName: "DEFAULTS"
            valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            uuid: "clientHttpRequestFactorySettings"
        - name: "detectRequestFactory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "int1"
            fixed: true
        - name: "rootUri"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid66"
        - name: "messageConverters"
          value:
            sapientType: "NULL"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.converter.HttpMessageConverter<?>"
            uuid: "uniqueUuid67"
        - name: "interceptors"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
            uuid: "set"
        - name: "requestFactory"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Function"
            uuid: "requestFactoryFunction"
        - name: "uriTemplateHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.util.UriTemplateHandler"
            uuid: "uniqueUuid68"
        - name: "errorHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.client.ResponseErrorHandler"
            uuid: "uniqueUuid69"
        - name: "basicAuthentication"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.boot.web.client.BasicAuthentication"
            uuid: "uniqueUuid70"
        - name: "defaultHeaders"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Map"
            genericValueType: "java.lang.String,java.util.List<java.lang.String>"
            uuid: "map"
        - name: "customizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashSet"
              parameters:
              - name: "c"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.List"
                  genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
                  uuid: "list"
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
            uuid: "set2"
        - name: "requestCustomizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
            uuid: "set3"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
      fixed: true
- method:
    name: "uriTemplateHandler"
    sourceCodeSignature: "RestTemplateBuilder uriTemplateHandler(UriTemplateHandler\
      \ uriTemplateHandler)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "uriTemplateHandler"
      type: "org.springframework.web.util.UriTemplateHandler"
    instructionFingerprint: "817D89E225C2D8157194DAB0F4F28DB0"
  paths:
  - pathId: "path1"
    testPathName: "uriTemplateHandlerTest"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "7FE62958A72CB427C16D056FDAC6C0DC"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "uriTemplateHandler"
      modelFingerprint: "B3B843D45D063D7C8BD72F8844FDBE2E"
      valueUuid: "uriTemplateHandler"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid71):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "82559866708A0AFE30BA4AF60B08F8C2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:uriTemplateHandler,message:uniqueUuid72):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "652A7E7E35AD6893BBF9C75622A040DF"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.web.util.UriTemplateHandler"
      uuid: "uriTemplateHandler"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid71"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.web.util.UriTemplateHandler"
      uuid: "uriTemplateHandler"
    - sapientType: "BASIC"
      content: !<regular>
        value: "UriTemplateHandler must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid72"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "requestFactorySettings"
          value:
            sapientType: "OBJECT"
            content: !<static_field_return>
              target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
              fieldName: "DEFAULTS"
            valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            uuid: "clientHttpRequestFactorySettings"
        - name: "detectRequestFactory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "int1"
            fixed: true
        - name: "rootUri"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid73"
        - name: "messageConverters"
          value:
            sapientType: "NULL"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.converter.HttpMessageConverter<?>"
            uuid: "uniqueUuid74"
        - name: "interceptors"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
            uuid: "set"
        - name: "requestFactory"
          value:
            sapientType: "NULL"
            valueType: "java.util.function.Function"
            genericValueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings,org.springframework.http.client.ClientHttpRequestFactory"
            uuid: "uniqueUuid75"
        - name: "uriTemplateHandler"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.web.util.UriTemplateHandler"
            uuid: "uriTemplateHandler"
        - name: "errorHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.client.ResponseErrorHandler"
            uuid: "uniqueUuid76"
        - name: "basicAuthentication"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.boot.web.client.BasicAuthentication"
            uuid: "uniqueUuid77"
        - name: "defaultHeaders"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Map"
            genericValueType: "java.lang.String,java.util.List<java.lang.String>"
            uuid: "map"
        - name: "customizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashSet"
              parameters:
              - name: "c"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.List"
                  genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
                  uuid: "list"
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
            uuid: "set2"
        - name: "requestCustomizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
            uuid: "set3"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
      fixed: true
- method:
    name: "errorHandler"
    sourceCodeSignature: "RestTemplateBuilder errorHandler(ResponseErrorHandler errorHandler)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "errorHandler"
      type: "org.springframework.web.client.ResponseErrorHandler"
    instructionFingerprint: "205E700C7D89FFAE2B2CE529E2BEACF5"
  paths:
  - pathId: "path1"
    testPathName: "errorHandlerTest"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "81ACAD776809B43CFCB45D30541EE46D"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "errorHandler"
      modelFingerprint: "4E53700B878505F63282DA853F32F05C"
      valueUuid: "errorHandler"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid78):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "8291CA996BC921702C2333AE92CB6238"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:errorHandler,message:uniqueUuid79):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "FA23B899BE7A1A7711E273A4E3E41EEA"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.web.client.ResponseErrorHandler"
      uuid: "errorHandler"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid78"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.web.client.ResponseErrorHandler"
      uuid: "errorHandler"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ErrorHandler must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid79"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "requestFactorySettings"
          value:
            sapientType: "OBJECT"
            content: !<static_field_return>
              target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
              fieldName: "DEFAULTS"
            valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            uuid: "clientHttpRequestFactorySettings"
        - name: "detectRequestFactory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "int1"
            fixed: true
        - name: "rootUri"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid80"
        - name: "messageConverters"
          value:
            sapientType: "NULL"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.converter.HttpMessageConverter<?>"
            uuid: "uniqueUuid81"
        - name: "interceptors"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
            uuid: "set"
        - name: "requestFactory"
          value:
            sapientType: "NULL"
            valueType: "java.util.function.Function"
            genericValueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings,org.springframework.http.client.ClientHttpRequestFactory"
            uuid: "uniqueUuid82"
        - name: "uriTemplateHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.util.UriTemplateHandler"
            uuid: "uniqueUuid83"
        - name: "errorHandler"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.web.client.ResponseErrorHandler"
            uuid: "errorHandler"
        - name: "basicAuthentication"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.boot.web.client.BasicAuthentication"
            uuid: "uniqueUuid84"
        - name: "defaultHeaders"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Map"
            genericValueType: "java.lang.String,java.util.List<java.lang.String>"
            uuid: "map"
        - name: "customizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashSet"
              parameters:
              - name: "c"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.List"
                  genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
                  uuid: "list"
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
            uuid: "set2"
        - name: "requestCustomizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
            uuid: "set3"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
      fixed: true
- method:
    name: "basicAuthentication"
    sourceCodeSignature: "RestTemplateBuilder basicAuthentication(String username,\
      \ String password)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "username"
      type: "java.lang.String"
    - name: "password"
      type: "java.lang.String"
    instructionFingerprint: "B676A5411C6F9B876E8904E426AE6853"
  paths:
  - pathId: "path1"
    testPathName: "basicAuthenticationTest"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "2271962A2970E98505C20BB899CB4150"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "username"
      modelFingerprint: "D7FF79CC3200ECE8901D684C8FEABFF0"
      valueUuid: "username"
    - type: "INPUT"
      name: "password"
      modelFingerprint: "57FABA1F4A3BB2CB7AD0DE4379566EA8"
      valueUuid: "password"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid85):void"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "0C0E902CFE587D11EB7BC6D18469E1F9"
      methodExercised:
        expression: "basicAuthentication(username:username,password:password,charset:uniqueUuid86):restTemplateBuilder2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "85AE48E1FD3D24DBAA8BB8D1044D4114"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "username1"
      valueType: "java.lang.String"
      uuid: "username"
    - sapientType: "BASIC"
      content: !<regular>
        value: "password1"
      valueType: "java.lang.String"
      uuid: "password"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid85"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "username1"
      valueType: "java.lang.String"
      uuid: "username"
    - sapientType: "BASIC"
      content: !<regular>
        value: "password1"
      valueType: "java.lang.String"
      uuid: "password"
    - sapientType: "NULL"
      valueType: "java.nio.charset.Charset"
      uuid: "uniqueUuid86"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
- method:
    name: "basicAuthentication"
    sourceCodeSignature: "RestTemplateBuilder basicAuthentication(String username,\
      \ String password, Charset charset)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "username"
      type: "java.lang.String"
    - name: "password"
      type: "java.lang.String"
    - name: "charset"
      type: "java.nio.charset.Charset"
    instructionFingerprint: "8E7B8E07A546EC6036264302DCC92FF0"
  paths:
  - pathId: "path1"
    testPathName: "basicAuthentication1Test"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "498657545CBD2724B02EF00723105398"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "username"
      modelFingerprint: "D7FF79CC3200ECE8901D684C8FEABFF0"
      valueUuid: "username"
    - type: "INPUT"
      name: "password"
      modelFingerprint: "57FABA1F4A3BB2CB7AD0DE4379566EA8"
      valueUuid: "password"
    - type: "INPUT"
      name: "charset"
      modelFingerprint: "95E65AA08C5BC91880965B4DA6108971"
      valueUuid: "charset"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid87):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "2919E531F1A2AC7F6BA423283A25B686"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "username1"
      valueType: "java.lang.String"
      uuid: "username"
    - sapientType: "BASIC"
      content: !<regular>
        value: "password1"
      valueType: "java.lang.String"
      uuid: "password"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.nio.charset.Charset"
        method: "defaultCharset"
        methodParameters: []
      valueType: "java.nio.charset.Charset"
      uuid: "charset"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid87"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "requestFactorySettings"
          value:
            sapientType: "OBJECT"
            content: !<static_field_return>
              target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
              fieldName: "DEFAULTS"
            valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            uuid: "clientHttpRequestFactorySettings"
        - name: "detectRequestFactory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "int1"
            fixed: true
        - name: "rootUri"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid88"
        - name: "messageConverters"
          value:
            sapientType: "NULL"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.converter.HttpMessageConverter<?>"
            uuid: "uniqueUuid89"
        - name: "interceptors"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
            uuid: "set"
        - name: "requestFactory"
          value:
            sapientType: "NULL"
            valueType: "java.util.function.Function"
            genericValueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings,org.springframework.http.client.ClientHttpRequestFactory"
            uuid: "uniqueUuid90"
        - name: "uriTemplateHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.util.UriTemplateHandler"
            uuid: "uniqueUuid91"
        - name: "errorHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.client.ResponseErrorHandler"
            uuid: "uniqueUuid92"
        - name: "basicAuthentication"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.springframework.boot.web.client.BasicAuthentication"
              parameters:
              - name: "username"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "username1"
                  valueType: "java.lang.String"
                  uuid: "username"
              - name: "password"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "password1"
                  valueType: "java.lang.String"
                  uuid: "password"
              - name: "charset"
                value:
                  sapientType: "OBJECT"
                  content: !<static_method_return>
                    target: "java.nio.charset.Charset"
                    method: "defaultCharset"
                    methodParameters: []
                  valueType: "java.nio.charset.Charset"
                  uuid: "charset"
            valueType: "org.springframework.boot.web.client.BasicAuthentication"
            uuid: "basicAuthentication"
            fixed: true
        - name: "defaultHeaders"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Map"
            genericValueType: "java.lang.String,java.util.List<java.lang.String>"
            uuid: "map"
        - name: "customizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashSet"
              parameters:
              - name: "c"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.List"
                  genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
                  uuid: "list"
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
            uuid: "set2"
        - name: "requestCustomizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
            uuid: "set3"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
      fixed: true
- method:
    name: "defaultHeader"
    sourceCodeSignature: "RestTemplateBuilder defaultHeader(String name, String...\
      \ values)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "name"
      type: "java.lang.String"
    - name: "values"
      type: "java.lang.String[]"
    instructionFingerprint: "BCB81C09A9C1BF708984DFB99F01B615"
  paths:
  - pathId: "path1"
    testPathName: "defaultHeaderWhenValuesIsNotNull"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "3F91EDBE04ABD2486C739E577F3FC845"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "A988AC490862454BD365AEAC1B6B0362"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "5457EABD11A78BB96BC94745F9A71C63"
      valueUuid: "name"
    - type: "INPUT"
      name: "values"
      modelFingerprint: "A300810FDBDDA2ACD0F1C261A6E0BE3A"
      valueUuid: "values"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "7CAB1AA39A1D25141A93F6E3CEBDBB39"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "D72E6315542EE07C003F660CE9458659"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:name,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "E0A5E9254C7925ED38F5D1F72BEC5EDC"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:values,message:uniqueUuid3):void3"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "556C684D9B0FC828057A7303BF158EA8"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "values"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Name must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "values"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Values must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "requestFactorySettings"
          value:
            sapientType: "OBJECT"
            content: !<static_field_return>
              target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
              fieldName: "DEFAULTS"
            valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            uuid: "clientHttpRequestFactorySettings"
        - name: "detectRequestFactory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "int1"
            fixed: true
        - name: "rootUri"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid4"
        - name: "messageConverters"
          value:
            sapientType: "NULL"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.converter.HttpMessageConverter<?>"
            uuid: "uniqueUuid5"
        - name: "interceptors"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
            uuid: "set"
        - name: "requestFactory"
          value:
            sapientType: "NULL"
            valueType: "java.util.function.Function"
            genericValueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings,org.springframework.http.client.ClientHttpRequestFactory"
            uuid: "uniqueUuid6"
        - name: "uriTemplateHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.util.UriTemplateHandler"
            uuid: "uniqueUuid7"
        - name: "errorHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.client.ResponseErrorHandler"
            uuid: "uniqueUuid8"
        - name: "basicAuthentication"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.boot.web.client.BasicAuthentication"
            uuid: "uniqueUuid9"
        - name: "defaultHeaders"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashMap"
              parameters:
              - name: "m"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.Map"
                  uuid: "map2"
              values:
              - sapientType: "PAIR"
                content: !<pair>
                  key:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "A"
                    valueType: "java.lang.String"
                    uuid: "name"
                  value:
                    sapientType: "COLLECTION"
                    content: !<collection>
                      parameters: []
                      values: []
                    valueType: "java.util.List"
                    genericValueType: "java.lang.Object"
                    uuid: "list3"
                valueType: "java.util.Map$Entry"
                genericValueType: "java.lang.String,java.util.List"
            valueType: "java.util.Map"
            uuid: "map3"
        - name: "customizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
            uuid: "set2"
        - name: "requestCustomizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
            uuid: "set3"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
      fixed: true
    branches:
    - lineNumber: 700
      expression: "map != null"
      range: "(700,49)-(700,59)"
      evaluatedAs: true
      internalMethodName: "append"
    - lineNumber: 701
      expression: "values != null"
      range: "(701,7)-(701,20)"
      evaluatedAs: true
      internalMethodName: "append"
    calledSomeStaticInternalMethod: true
- method:
    name: "setConnectTimeout"
    sourceCodeSignature: "RestTemplateBuilder setConnectTimeout(Duration connectTimeout)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "connectTimeout"
      type: "java.time.Duration"
    instructionFingerprint: "8B545FBDEC850B4E0DEC3DB43F2DCCE2"
  paths:
  - pathId: "path1"
    testPathName: "setConnectTimeoutTest"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "EB299A422B0119C7FBFAD6C79D342921"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "A988AC490862454BD365AEAC1B6B0362"
      valueUuid: "target"
    - type: "INPUT"
      name: "connectTimeout"
      modelFingerprint: "C4D24D98BFD43921B01861251A371257"
      valueUuid: "connectTimeout"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "7CAB1AA39A1D25141A93F6E3CEBDBB39"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid1):void"
        staticAccess: true
    - type: "FIELD"
      name: "requestFactorySettings"
      modelFingerprint: "11E8E4CE4CB626F296FC7DC08E5F9CD6"
      valueUuid: "clientHttpRequestFactorySettings"
      methodExercised:
        expression: "withConnectTimeout(connectTimeout:connectTimeout):clientHttpRequestFactorySettings2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "02B4D97468A8B21E1F270DF546F7D4A9"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.time.Duration"
        method: "ofDays"
        methodParameters:
        - name: "days"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "long"
            uuid: "connectTimeout-days"
      valueType: "java.time.Duration"
      uuid: "connectTimeout"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_field_return>
        target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
        fieldName: "DEFAULTS"
      valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
      uuid: "clientHttpRequestFactorySettings"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_field_return>
            target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            fieldName: "DEFAULTS"
          valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
          uuid: "clientHttpRequestFactorySettings"
        methodParameters:
        - name: "connectTimeout"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.time.Duration"
              method: "ofDays"
              methodParameters:
              - name: "days"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "long"
                  uuid: "connectTimeout-days"
            valueType: "java.time.Duration"
            uuid: "connectTimeout"
        methodName: "withConnectTimeout"
      valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
      uuid: "clientHttpRequestFactorySettings2"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.time.Duration"
        method: "ofDays"
        methodParameters:
        - name: "days"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "long"
            uuid: "connectTimeout-days"
      valueType: "java.time.Duration"
      uuid: "connectTimeout"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "requestFactorySettings"
          value:
            sapientType: "OBJECT"
            content: !<method_return_from_value>
              target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
              localVariableValue:
                sapientType: "OBJECT"
                content: !<static_field_return>
                  target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
                  fieldName: "DEFAULTS"
                valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
                uuid: "clientHttpRequestFactorySettings"
              methodParameters:
              - name: "connectTimeout"
                value:
                  sapientType: "OBJECT"
                  content: !<static_method_return>
                    target: "java.time.Duration"
                    method: "ofDays"
                    methodParameters:
                    - name: "days"
                      value:
                        sapientType: "BASIC"
                        content: !<regular>
                          value: 0
                        valueType: "long"
                        uuid: "connectTimeout-days"
                  valueType: "java.time.Duration"
                  uuid: "connectTimeout"
              methodName: "withConnectTimeout"
            valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            uuid: "clientHttpRequestFactorySettings2"
        - name: "detectRequestFactory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "int1"
            fixed: true
        - name: "rootUri"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid2"
        - name: "messageConverters"
          value:
            sapientType: "NULL"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.converter.HttpMessageConverter<?>"
            uuid: "uniqueUuid3"
        - name: "interceptors"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
            uuid: "set"
        - name: "requestFactory"
          value:
            sapientType: "NULL"
            valueType: "java.util.function.Function"
            genericValueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings,org.springframework.http.client.ClientHttpRequestFactory"
            uuid: "uniqueUuid4"
        - name: "uriTemplateHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.util.UriTemplateHandler"
            uuid: "uniqueUuid5"
        - name: "errorHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.client.ResponseErrorHandler"
            uuid: "uniqueUuid6"
        - name: "basicAuthentication"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.boot.web.client.BasicAuthentication"
            uuid: "uniqueUuid7"
        - name: "defaultHeaders"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Map"
            genericValueType: "java.lang.String,java.util.List<java.lang.String>"
            uuid: "map"
        - name: "customizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
            uuid: "set2"
        - name: "requestCustomizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
            uuid: "set3"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
      fixed: true
- method:
    name: "setReadTimeout"
    sourceCodeSignature: "RestTemplateBuilder setReadTimeout(Duration readTimeout)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "readTimeout"
      type: "java.time.Duration"
    instructionFingerprint: "6095EE5E994041764B2867AF19BA3A8F"
  paths:
  - pathId: "path1"
    testPathName: "setReadTimeoutTest"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "CBD7DA8952822CABF2CAE9D1DFB46F27"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "A988AC490862454BD365AEAC1B6B0362"
      valueUuid: "target"
    - type: "INPUT"
      name: "readTimeout"
      modelFingerprint: "7FEE799E44B299709A5594302F1D11CB"
      valueUuid: "readTimeout"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "7CAB1AA39A1D25141A93F6E3CEBDBB39"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid1):void"
        staticAccess: true
    - type: "FIELD"
      name: "requestFactorySettings"
      modelFingerprint: "F00DBCFE7C334921BCC8D2082F8727D6"
      valueUuid: "clientHttpRequestFactorySettings"
      methodExercised:
        expression: "withReadTimeout(readTimeout:readTimeout):clientHttpRequestFactorySettings2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "57D6C6E45342398B575414F9C5E2AE84"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.time.Duration"
        method: "ofDays"
        methodParameters:
        - name: "days"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "long"
            uuid: "readTimeout-days"
      valueType: "java.time.Duration"
      uuid: "readTimeout"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_field_return>
        target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
        fieldName: "DEFAULTS"
      valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
      uuid: "clientHttpRequestFactorySettings"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_field_return>
            target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            fieldName: "DEFAULTS"
          valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
          uuid: "clientHttpRequestFactorySettings"
        methodParameters:
        - name: "readTimeout"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.time.Duration"
              method: "ofDays"
              methodParameters:
              - name: "days"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "long"
                  uuid: "readTimeout-days"
            valueType: "java.time.Duration"
            uuid: "readTimeout"
        methodName: "withReadTimeout"
      valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
      uuid: "clientHttpRequestFactorySettings2"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.time.Duration"
        method: "ofDays"
        methodParameters:
        - name: "days"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "long"
            uuid: "readTimeout-days"
      valueType: "java.time.Duration"
      uuid: "readTimeout"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "requestFactorySettings"
          value:
            sapientType: "OBJECT"
            content: !<method_return_from_value>
              target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
              localVariableValue:
                sapientType: "OBJECT"
                content: !<static_field_return>
                  target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
                  fieldName: "DEFAULTS"
                valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
                uuid: "clientHttpRequestFactorySettings"
              methodParameters:
              - name: "readTimeout"
                value:
                  sapientType: "OBJECT"
                  content: !<static_method_return>
                    target: "java.time.Duration"
                    method: "ofDays"
                    methodParameters:
                    - name: "days"
                      value:
                        sapientType: "BASIC"
                        content: !<regular>
                          value: 0
                        valueType: "long"
                        uuid: "readTimeout-days"
                  valueType: "java.time.Duration"
                  uuid: "readTimeout"
              methodName: "withReadTimeout"
            valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            uuid: "clientHttpRequestFactorySettings2"
        - name: "detectRequestFactory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "int1"
            fixed: true
        - name: "rootUri"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid2"
        - name: "messageConverters"
          value:
            sapientType: "NULL"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.converter.HttpMessageConverter<?>"
            uuid: "uniqueUuid3"
        - name: "interceptors"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
            uuid: "set"
        - name: "requestFactory"
          value:
            sapientType: "NULL"
            valueType: "java.util.function.Function"
            genericValueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings,org.springframework.http.client.ClientHttpRequestFactory"
            uuid: "uniqueUuid4"
        - name: "uriTemplateHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.util.UriTemplateHandler"
            uuid: "uniqueUuid5"
        - name: "errorHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.client.ResponseErrorHandler"
            uuid: "uniqueUuid6"
        - name: "basicAuthentication"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.boot.web.client.BasicAuthentication"
            uuid: "uniqueUuid7"
        - name: "defaultHeaders"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Map"
            genericValueType: "java.lang.String,java.util.List<java.lang.String>"
            uuid: "map"
        - name: "customizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
            uuid: "set2"
        - name: "requestCustomizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
            uuid: "set3"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
      fixed: true
- method:
    name: "setBufferRequestBody"
    sourceCodeSignature: "RestTemplateBuilder setBufferRequestBody(boolean bufferRequestBody)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "bufferRequestBody"
      type: "boolean"
    instructionFingerprint: "248377A409DBEAA5EE00FB1B49A2C6BE"
  paths:
  - pathId: "path1"
    testPathName: "setBufferRequestBodyTest"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "5BEDED5D8B5DDE01E325C0E4C110836A"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "bufferRequestBody"
      modelFingerprint: "53E0D2370DABE15DB3729103F5C46957"
      valueUuid: "bufferRequestBody"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid116):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "F79C89A935541CDF921FE6F81B3E6F85"
      valueUuid: "targetClassObject"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "bufferRequestBody"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid116"
      fixed: true
    - sapientType: "THIS"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "targetClassObject"
      fixed: true
- method:
    name: "setSslBundle"
    sourceCodeSignature: "RestTemplateBuilder setSslBundle(SslBundle sslBundle)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "sslBundle"
      type: "org.springframework.boot.ssl.SslBundle"
    instructionFingerprint: "6D35360A7A3B46AD43DB502983B1B4D1"
  paths:
  - pathId: "path1"
    testPathName: "setSslBundleTest"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "EF1299076581DB73780E3417FB36E29A"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "sslBundle"
      modelFingerprint: "342B5E5262471CA8C6BA381A510A52AA"
      valueUuid: "sslBundle"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid117):void"
        staticAccess: true
    - type: "FIELD"
      name: "requestFactorySettings"
      modelFingerprint: "9E9D1BC89976F10ED89AA8BF411C6AF7"
      valueUuid: "clientHttpRequestFactorySettings"
      methodExercised:
        expression: "withSslBundle(sslBundle:sslBundle):clientHttpRequestFactorySettings2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B705580A08DAB0CF93054EFC1984F9D1"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "return new RestTemplateBuilder(this.requestFactorySettings.withSslBundle(sslBundle),\
        \ this.detectRequestFactory,"
      lineNumber: 463
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: requestFactorySettings - Method: withSslBundle"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid117"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_field_return>
        target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
        fieldName: "DEFAULTS"
      valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
      uuid: "clientHttpRequestFactorySettings"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_field_return>
            target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            fieldName: "DEFAULTS"
          valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
          uuid: "clientHttpRequestFactorySettings"
        methodParameters:
        - name: "sslBundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundle"
            uuid: "sslBundle"
        methodName: "withSslBundle"
      valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
      uuid: "clientHttpRequestFactorySettings2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "requestFactorySettings"
          value:
            sapientType: "OBJECT"
            content: !<method_return_from_value>
              target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
              localVariableValue:
                sapientType: "OBJECT"
                content: !<static_field_return>
                  target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
                  fieldName: "DEFAULTS"
                valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
                uuid: "clientHttpRequestFactorySettings"
              methodParameters:
              - name: "sslBundle"
                value:
                  sapientType: "MOCK"
                  valueType: "org.springframework.boot.ssl.SslBundle"
                  uuid: "sslBundle"
              methodName: "withSslBundle"
            valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            uuid: "clientHttpRequestFactorySettings2"
        - name: "detectRequestFactory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "int1"
            fixed: true
        - name: "rootUri"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid118"
        - name: "messageConverters"
          value:
            sapientType: "NULL"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.converter.HttpMessageConverter<?>"
            uuid: "uniqueUuid119"
        - name: "interceptors"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
            uuid: "set"
        - name: "requestFactory"
          value:
            sapientType: "NULL"
            valueType: "java.util.function.Function"
            genericValueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings,org.springframework.http.client.ClientHttpRequestFactory"
            uuid: "uniqueUuid120"
        - name: "uriTemplateHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.util.UriTemplateHandler"
            uuid: "uniqueUuid121"
        - name: "errorHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.client.ResponseErrorHandler"
            uuid: "uniqueUuid122"
        - name: "basicAuthentication"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.boot.web.client.BasicAuthentication"
            uuid: "uniqueUuid123"
        - name: "defaultHeaders"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Map"
            genericValueType: "java.lang.String,java.util.List<java.lang.String>"
            uuid: "map"
        - name: "customizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashSet"
              parameters:
              - name: "c"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.List"
                  genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
                  uuid: "list"
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
            uuid: "set2"
        - name: "requestCustomizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
            uuid: "set3"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
      fixed: true
- method:
    name: "customizers"
    sourceCodeSignature: "RestTemplateBuilder customizers(RestTemplateCustomizer...\
      \ customizers)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "customizers"
      type: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
    instructionFingerprint: "D34B29BB10670E5B37E1766CCFD91E08"
  paths:
  - pathId: "path1"
    testPathName: "customizersTest"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "D93E8D03B0A9F3479B19035FE4612DB5"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "customizers"
      modelFingerprint: "47696FD27EA1F4F1EDF6DE2B9E7C808A"
      valueUuid: "customizers"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers2,message:uniqueUuid124):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid125):void2"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "9001F20C4C60CCE60CDD6DB913EE3142"
      methodExercised:
        expression: "customizers(customizers:list2):restTemplateBuilder2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "85AE48E1FD3D24DBAA8BB8D1044D4114"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers2"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid124"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid125"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
      uuid: "list2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
- method:
    name: "customizers"
    sourceCodeSignature: "RestTemplateBuilder customizers(Collection<? extends RestTemplateCustomizer>\
      \ customizers)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "customizers"
      type: "java.util.Collection"
    instructionFingerprint: "577691584A21CEEFFA67F2420D4981CD"
  paths:
  - pathId: "path1"
    testPathName: "customizers1Test"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "0F95B49D8ED77989C64039918E8CC0D8"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "customizers"
      modelFingerprint: "8363708058C329C9073C81311F151752"
      valueUuid: "customizers"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers2,message:uniqueUuid126):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "D49DD3F0AECD09910E5A267C64AD634E"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid127):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "1672E4E021BAD5A76CE34A143B0A4064"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers2"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "? extends org.springframework.boot.web.client.RestTemplateCustomizer"
      uuid: "customizers"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid126"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "? extends org.springframework.boot.web.client.RestTemplateCustomizer"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid127"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "requestFactorySettings"
          value:
            sapientType: "OBJECT"
            content: !<static_field_return>
              target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
              fieldName: "DEFAULTS"
            valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            uuid: "clientHttpRequestFactorySettings"
        - name: "detectRequestFactory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "int1"
            fixed: true
        - name: "rootUri"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid128"
        - name: "messageConverters"
          value:
            sapientType: "NULL"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.converter.HttpMessageConverter<?>"
            uuid: "uniqueUuid129"
        - name: "interceptors"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
            uuid: "set"
        - name: "requestFactory"
          value:
            sapientType: "NULL"
            valueType: "java.util.function.Function"
            genericValueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings,org.springframework.http.client.ClientHttpRequestFactory"
            uuid: "uniqueUuid130"
        - name: "uriTemplateHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.util.UriTemplateHandler"
            uuid: "uniqueUuid131"
        - name: "errorHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.client.ResponseErrorHandler"
            uuid: "uniqueUuid132"
        - name: "basicAuthentication"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.boot.web.client.BasicAuthentication"
            uuid: "uniqueUuid133"
        - name: "defaultHeaders"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Map"
            genericValueType: "java.lang.String,java.util.List<java.lang.String>"
            uuid: "map"
        - name: "customizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashSet"
              parameters:
              - name: "c"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.Collection"
                  genericValueType: "? extends org.springframework.boot.web.client.RestTemplateCustomizer"
                  uuid: "customizers"
              values: []
            valueType: "java.util.Set"
            genericValueType: "java.lang.Object"
            uuid: "set4"
        - name: "requestCustomizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
            uuid: "set3"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
      fixed: true
- method:
    name: "additionalCustomizers"
    sourceCodeSignature: "RestTemplateBuilder additionalCustomizers(RestTemplateCustomizer...\
      \ customizers)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "customizers"
      type: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
    instructionFingerprint: "4A73E873C5E8EE8D7215ED1CF54F3DA6"
  paths:
  - pathId: "path1"
    testPathName: "additionalCustomizersTest"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "85BE4A58EC90391A9FB9900BCFFFFAA4"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "customizers"
      modelFingerprint: "47696FD27EA1F4F1EDF6DE2B9E7C808A"
      valueUuid: "customizers"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers2,message:uniqueUuid134):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid135):void2"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "06EE575CCFFEC4EBA05C6D1F07ED1FAC"
      methodExercised:
        expression: "additionalCustomizers(customizers:list2):restTemplateBuilder2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "85AE48E1FD3D24DBAA8BB8D1044D4114"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers2"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid134"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid135"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
      uuid: "list2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
- method:
    name: "additionalCustomizers"
    sourceCodeSignature: "RestTemplateBuilder additionalCustomizers(Collection<? extends\
      \ RestTemplateCustomizer> customizers)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "customizers"
      type: "java.util.Collection"
    instructionFingerprint: "B5803AED867282B3C92589991A3FD567"
  paths:
  - pathId: "path1"
    testPathName: "additionalCustomizers1WhenAdditionsIsNotNull"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "A3B4915F715205BED2857FBBF74573E6"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "customizers"
      modelFingerprint: "BFA3E27C711C8DF545E253EAD56B7A1F"
      valueUuid: "customizers"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers2,message:uniqueUuid136):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "8284A9EE2DCD40B667E13E5388C25E57"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid137):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "16C0D72056EA4617221520BA0F70C7AB"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers2"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "? extends org.springframework.boot.web.client.RestTemplateCustomizer"
      uuid: "customizers"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid136"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "? extends org.springframework.boot.web.client.RestTemplateCustomizer"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "RestTemplateCustomizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid137"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "requestFactorySettings"
          value:
            sapientType: "OBJECT"
            content: !<static_field_return>
              target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
              fieldName: "DEFAULTS"
            valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            uuid: "clientHttpRequestFactorySettings"
        - name: "detectRequestFactory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "int1"
            fixed: true
        - name: "rootUri"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid138"
        - name: "messageConverters"
          value:
            sapientType: "NULL"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.converter.HttpMessageConverter<?>"
            uuid: "uniqueUuid139"
        - name: "interceptors"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
            uuid: "set"
        - name: "requestFactory"
          value:
            sapientType: "NULL"
            valueType: "java.util.function.Function"
            genericValueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings,org.springframework.http.client.ClientHttpRequestFactory"
            uuid: "uniqueUuid140"
        - name: "uriTemplateHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.util.UriTemplateHandler"
            uuid: "uniqueUuid141"
        - name: "errorHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.client.ResponseErrorHandler"
            uuid: "uniqueUuid142"
        - name: "basicAuthentication"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.boot.web.client.BasicAuthentication"
            uuid: "uniqueUuid143"
        - name: "defaultHeaders"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Map"
            genericValueType: "java.lang.String,java.util.List<java.lang.String>"
            uuid: "map"
        - name: "customizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.HashSet"
              parameters: []
              values:
              - sapientType: "MOCK"
                valueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
                uuid: "set4Item0"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
            uuid: "set4"
        - name: "requestCustomizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
            uuid: "set3"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
      fixed: true
    branches:
    - lineNumber: 692
      expression: "collection != null"
      range: "(692,40)-(692,57)"
      evaluatedAs: true
      internalMethodName: "append"
    - lineNumber: 693
      expression: "additions != null"
      range: "(693,7)-(693,23)"
      evaluatedAs: true
      internalMethodName: "append"
    calledSomeStaticInternalMethod: true
- method:
    name: "requestCustomizers"
    sourceCodeSignature: "RestTemplateBuilder requestCustomizers(RestTemplateRequestCustomizer<?>...\
      \ requestCustomizers)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "requestCustomizers"
      type: "org.springframework.boot.web.client.RestTemplateRequestCustomizer[]"
    instructionFingerprint: "BF05269118702C7A0DF7CE2789C093D6"
  paths:
  - pathId: "path1"
    testPathName: "requestCustomizersTest"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "2452A85EDAABC397DA3BE8E836CD2894"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "requestCustomizers"
      modelFingerprint: "00AD17E8F522F7B94A8BFBB4062B0B74"
      valueUuid: "requestCustomizers"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid144):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "465D2D839B0DE517359155D9A12110C4"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:requestCustomizers,message:uniqueUuid145):void2"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "4A3EB2EE12CA584029BF06B5106C9B67"
      methodExercised:
        expression: "requestCustomizers(requestCustomizers:list2):restTemplateBuilder2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "85AE48E1FD3D24DBAA8BB8D1044D4114"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer[]"
      genericValueType: "?"
      uuid: "requestCustomizers"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid144"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer[]"
      genericValueType: "?"
      uuid: "requestCustomizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "RequestCustomizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid145"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
      uuid: "list2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
- method:
    name: "requestCustomizers"
    sourceCodeSignature: "RestTemplateBuilder requestCustomizers(Collection<? extends\
      \ RestTemplateRequestCustomizer<?>> requestCustomizers)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "requestCustomizers"
      type: "java.util.Collection"
    instructionFingerprint: "7416FFF3F9A3E4EAEB736E8DFCDF2075"
  paths:
  - pathId: "path1"
    testPathName: "requestCustomizers1Test"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "3866999B1A50962BEA57DD8746DB5F50"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "requestCustomizers"
      modelFingerprint: "13B8810471E0B5A3F61A70A692E0996E"
      valueUuid: "requestCustomizers"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid146):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A6F6AB46385BF22925B28919ACFCD8D6"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:requestCustomizers,message:uniqueUuid147):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4552C4C39568B1E9817156E3917E3E54"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "? extends org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
      uuid: "requestCustomizers"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid146"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "? extends org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
      uuid: "requestCustomizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "RequestCustomizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid147"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "requestFactorySettings"
          value:
            sapientType: "OBJECT"
            content: !<static_field_return>
              target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
              fieldName: "DEFAULTS"
            valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            uuid: "clientHttpRequestFactorySettings"
        - name: "detectRequestFactory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "int1"
            fixed: true
        - name: "rootUri"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid148"
        - name: "messageConverters"
          value:
            sapientType: "NULL"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.converter.HttpMessageConverter<?>"
            uuid: "uniqueUuid149"
        - name: "interceptors"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
            uuid: "set"
        - name: "requestFactory"
          value:
            sapientType: "NULL"
            valueType: "java.util.function.Function"
            genericValueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings,org.springframework.http.client.ClientHttpRequestFactory"
            uuid: "uniqueUuid150"
        - name: "uriTemplateHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.util.UriTemplateHandler"
            uuid: "uniqueUuid151"
        - name: "errorHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.client.ResponseErrorHandler"
            uuid: "uniqueUuid152"
        - name: "basicAuthentication"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.boot.web.client.BasicAuthentication"
            uuid: "uniqueUuid153"
        - name: "defaultHeaders"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Map"
            genericValueType: "java.lang.String,java.util.List<java.lang.String>"
            uuid: "map"
        - name: "customizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashSet"
              parameters:
              - name: "c"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.List"
                  genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
                  uuid: "list"
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
            uuid: "set2"
        - name: "requestCustomizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashSet"
              parameters:
              - name: "c"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.Collection"
                  genericValueType: "? extends org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
                  uuid: "requestCustomizers"
              values: []
            valueType: "java.util.Set"
            genericValueType: "java.lang.Object"
            uuid: "set4"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
      fixed: true
- method:
    name: "additionalRequestCustomizers"
    sourceCodeSignature: "RestTemplateBuilder additionalRequestCustomizers(RestTemplateRequestCustomizer<?>...\
      \ requestCustomizers)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "requestCustomizers"
      type: "org.springframework.boot.web.client.RestTemplateRequestCustomizer[]"
    instructionFingerprint: "BFCE780C595B4C2FDAE5887CCCEA8851"
  paths:
  - pathId: "path1"
    testPathName: "additionalRequestCustomizersTest"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "EA1D3B7ED5C70C03A91741A0FB0CF337"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "requestCustomizers"
      modelFingerprint: "00AD17E8F522F7B94A8BFBB4062B0B74"
      valueUuid: "requestCustomizers"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid154):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "465D2D839B0DE517359155D9A12110C4"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:requestCustomizers,message:uniqueUuid155):void2"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "528CFFDB1602C708563ED326D9830F14"
      methodExercised:
        expression: "additionalRequestCustomizers(requestCustomizers:list2):restTemplateBuilder2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "85AE48E1FD3D24DBAA8BB8D1044D4114"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer[]"
      genericValueType: "?"
      uuid: "requestCustomizers"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid154"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer[]"
      genericValueType: "?"
      uuid: "requestCustomizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "RequestCustomizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid155"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
      uuid: "list2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
- method:
    name: "additionalRequestCustomizers"
    sourceCodeSignature: "RestTemplateBuilder additionalRequestCustomizers(Collection<?\
      \ extends RestTemplateRequestCustomizer<?>> requestCustomizers)"
    returnType: "org.springframework.boot.web.client.RestTemplateBuilder"
    parameters:
    - name: "requestCustomizers"
      type: "java.util.Collection"
    instructionFingerprint: "1459A6EA066F1F03D569ECA0C5DE3510"
  paths:
  - pathId: "path1"
    testPathName: "additionalRequestCustomizers1WhenAdditionsIsNotNull"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "74BC5D338AEA36F63B819665A9FF26FB"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "requestCustomizers"
      modelFingerprint: "DD7410DFE8FDF2618FA87959F6E4A392"
      valueUuid: "requestCustomizers"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid156):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "DD6B74E8C118A4298106AD66C26561B5"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:requestCustomizers,message:uniqueUuid157):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "42DC86E0C57D5F8CCAFAA8DD4F65FEC8"
      valueUuid: "restTemplateBuilder2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "? extends org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
      uuid: "requestCustomizers"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid156"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "? extends org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
      uuid: "requestCustomizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "RequestCustomizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid157"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "requestFactorySettings"
          value:
            sapientType: "OBJECT"
            content: !<static_field_return>
              target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
              fieldName: "DEFAULTS"
            valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            uuid: "clientHttpRequestFactorySettings"
        - name: "detectRequestFactory"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "int1"
            fixed: true
        - name: "rootUri"
          value:
            sapientType: "NULL"
            valueType: "java.lang.String"
            uuid: "uniqueUuid158"
        - name: "messageConverters"
          value:
            sapientType: "NULL"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.converter.HttpMessageConverter<?>"
            uuid: "uniqueUuid159"
        - name: "interceptors"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
            uuid: "set"
        - name: "requestFactory"
          value:
            sapientType: "NULL"
            valueType: "java.util.function.Function"
            genericValueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings,org.springframework.http.client.ClientHttpRequestFactory"
            uuid: "uniqueUuid160"
        - name: "uriTemplateHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.util.UriTemplateHandler"
            uuid: "uniqueUuid161"
        - name: "errorHandler"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.web.client.ResponseErrorHandler"
            uuid: "uniqueUuid162"
        - name: "basicAuthentication"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.boot.web.client.BasicAuthentication"
            uuid: "uniqueUuid163"
        - name: "defaultHeaders"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Map"
            genericValueType: "java.lang.String,java.util.List<java.lang.String>"
            uuid: "map"
        - name: "customizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.LinkedHashSet"
              parameters:
              - name: "c"
                value:
                  sapientType: "COLLECTION"
                  content: !<collection>
                    parameters: []
                    values: []
                  valueType: "java.util.List"
                  genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
                  uuid: "list"
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
            uuid: "set2"
        - name: "requestCustomizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.HashSet"
              parameters: []
              values:
              - sapientType: "MOCK"
                valueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer"
                genericValueType: "?"
                uuid: "set5Item0"
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
            uuid: "set5"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "restTemplateBuilder2"
      fixed: true
    branches:
    - lineNumber: 692
      expression: "collection != null"
      range: "(692,40)-(692,57)"
      evaluatedAs: true
      internalMethodName: "append"
    - lineNumber: 693
      expression: "additions != null"
      range: "(693,7)-(693,23)"
      evaluatedAs: true
      internalMethodName: "append"
    calledSomeStaticInternalMethod: true
- method:
    name: "build"
    sourceCodeSignature: "RestTemplate build()"
    returnType: "org.springframework.web.client.RestTemplate"
    instructionFingerprint: "7B670C1BE36F6DD88AB59139B62D46E0"
  paths:
  - pathId: "path1"
    testPathName: "buildTest"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "303928434596560D5B0B30818A36B7E8"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid164):void"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "D12A4B02807F59E6F5381B899F9934CC"
      methodExercised:
        expression: "configure(restTemplate:restTemplate):restTemplate2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "3401DC3F3836CECC11E8A603AEF82186"
      valueUuid: "restTemplate2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid164"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.web.client.RestTemplate"
      uuid: "restTemplate2"
    - sapientType: "ANY"
      valueType: "org.springframework.web.client.RestTemplate"
      uuid: "restTemplate"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.web.client.RestTemplate"
      uuid: "restTemplate2"
- method:
    name: "build"
    sourceCodeSignature: "<T extends RestTemplate> T build(Class<T> restTemplateClass)"
    returnType: "org.springframework.web.client.RestTemplate"
    parameters:
    - name: "restTemplateClass"
      type: "java.lang.Class"
    instructionFingerprint: "DA38BC1A4DFD2E5828BD14441B9EC9B8"
  paths:
  - pathId: "path1"
    testPathName: "build1Test"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "0FB93CFFA82A490B258729C7432B5E9E"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "restTemplateClass"
      modelFingerprint: "514EEE17E7CE853BF1B6136D354CDE02"
      valueUuid: "restTemplateClass"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid165):void"
        staticAccess: true
    - type: "STATIC"
      name: "BeanUtils.class"
      modelFingerprint: "2838D9EE92DF84C7BA56331918EBF29F"
      valueUuid: "BeanUtils.class"
      methodExercised:
        expression: "instantiateClass(clazz:restTemplateClass):restTemplate"
        throwsExceptions:
        - "org.springframework.beans.BeanInstantiationException"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "076B220F76909DE9B46A8BA9BED25626"
      methodExercised:
        expression: "configure(restTemplate:restTemplate):restTemplate2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "3401DC3F3836CECC11E8A603AEF82186"
      valueUuid: "restTemplate2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.web.client.RestTemplate"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.web.client.RestTemplate"
      uuid: "restTemplateClass"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid165"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.BeanUtils"
      uuid: "BeanUtils.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.web.client.RestTemplate"
      uuid: "restTemplate"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.web.client.RestTemplate"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.web.client.RestTemplate"
      uuid: "restTemplateClass"
    - sapientType: "MOCK"
      valueType: "org.springframework.web.client.RestTemplate"
      uuid: "restTemplate2"
    - sapientType: "MOCK"
      valueType: "org.springframework.web.client.RestTemplate"
      uuid: "restTemplate"
    - sapientType: "MOCK"
      valueType: "org.springframework.web.client.RestTemplate"
      uuid: "restTemplate2"
- method:
    name: "configure"
    sourceCodeSignature: "<T extends RestTemplate> T configure(T restTemplate)"
    returnType: "org.springframework.web.client.RestTemplate"
    parameters:
    - name: "restTemplate"
      type: "org.springframework.web.client.RestTemplate"
    instructionFingerprint: "945A3D895F6D9F19CFC7669A923D6935"
  paths:
  - pathId: "path1"
    testPathName: "configureWhenThisCustomizersIsEmpty"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "C1C4A7A8550CB171AB77963C824215A4"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "INPUT"
      name: "restTemplate"
      modelFingerprint: "54E7A17A169A8287D692B3AC391F08BB"
      valueUuid: "restTemplate"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid166):void"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "ACC15997F73D82EB061D73DFE1DCDF43"
      methodExercised:
        expression: "buildRequestFactory():clientHttpRequestFactory"
    - type: "LOCAL_VARIABLE"
      name: "restTemplate"
      modelFingerprint: "CB134ABD7BE2C79426EBA3F2BE10F45A"
      valueUuid: "restTemplate"
      methodExercised:
        expression: "setRequestFactory(requestFactory:clientHttpRequestFactory):void2"
    - type: "STATIC"
      name: "CollectionUtils.class.real"
      modelFingerprint: "9A925D16240915E8042990F5764C2432"
      valueUuid: "CollectionUtils.class.real"
      methodExercised:
        expression: "isEmpty(collection:uniqueUuid167):boolean3"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "restTemplate"
      modelFingerprint: "29FCFC599DC962407DC71C8D5575C5F8"
      valueUuid: "restTemplate"
      methodExercised:
        expression: "getInterceptors():interceptors"
    - type: "STATIC"
      name: "CollectionUtils.class"
      modelFingerprint: "E56ACECEE7611C6AB90679165EE8AFCE"
      valueUuid: "CollectionUtils.class"
      methodExercised:
        expression: "isEmpty(collection:set2):boolean5"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "14D9E8ED2A9D85BAE840040327DCBD6C"
      valueUuid: "restTemplate"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.web.client.RestTemplate"
        parameters: []
        propertiesMap:
          requestFactory:
            sapientType: "MOCK"
            valueType: "org.springframework.http.client.ClientHttpRequestFactory"
            uuid: "clientHttpRequestFactory"
          interceptors:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.List"
            genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
            uuid: "interceptors"
      valueType: "org.springframework.web.client.RestTemplate"
      uuid: "restTemplate"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid166"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.http.client.ClientHttpRequestFactory"
      uuid: "clientHttpRequestFactory"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.web.client.RestTemplate"
        parameters: []
        propertiesMap:
          requestFactory:
            sapientType: "MOCK"
            valueType: "org.springframework.http.client.ClientHttpRequestFactory"
            uuid: "clientHttpRequestFactory"
          interceptors:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.List"
            genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
            uuid: "interceptors"
      valueType: "org.springframework.web.client.RestTemplate"
      uuid: "restTemplate"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.http.client.ClientHttpRequestFactory"
      uuid: "clientHttpRequestFactory"
    - sapientType: "REAL"
      valueType: "org.springframework.util.CollectionUtils"
      uuid: "CollectionUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "NULL"
      valueType: "java.util.Set"
      genericValueType: "org.springframework.http.converter.HttpMessageConverter<?>"
      uuid: "uniqueUuid167"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.web.client.RestTemplate"
        parameters: []
        propertiesMap:
          requestFactory:
            sapientType: "MOCK"
            valueType: "org.springframework.http.client.ClientHttpRequestFactory"
            uuid: "clientHttpRequestFactory"
          interceptors:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.List"
            genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
            uuid: "interceptors"
      valueType: "org.springframework.web.client.RestTemplate"
      uuid: "restTemplate"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
      uuid: "interceptors"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.CollectionUtils"
      uuid: "CollectionUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.LinkedHashSet"
        parameters:
        - name: "c"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.List"
            genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
            uuid: "list"
        values: []
      valueType: "java.util.Set"
      genericValueType: "org.springframework.boot.web.client.RestTemplateCustomizer"
      uuid: "set2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.web.client.RestTemplate"
        parameters: []
        propertiesMap:
          requestFactory:
            sapientType: "MOCK"
            valueType: "org.springframework.http.client.ClientHttpRequestFactory"
            uuid: "clientHttpRequestFactory"
          interceptors:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.List"
            genericValueType: "org.springframework.http.client.ClientHttpRequestInterceptor"
            uuid: "interceptors"
      valueType: "org.springframework.web.client.RestTemplate"
      uuid: "restTemplate"
    branches:
    - lineNumber: 628
      expression: "requestFactory != null"
      range: "(628,7)-(628,28)"
      evaluatedAs: true
    - lineNumber: 670
      expression: "this.basicAuthentication == null"
      range: "(670,7)-(670,38)"
      evaluatedAs: true
      internalMethodName: "addClientHttpRequestInitializer"
    - lineNumber: 670
      expression: "this.defaultHeaders.isEmpty()"
      range: "(670,43)-(670,71)"
      evaluatedAs: true
      internalMethodName: "addClientHttpRequestInitializer"
    - lineNumber: 670
      expression: "this.requestCustomizers.isEmpty()"
      range: "(670,76)-(670,108)"
      evaluatedAs: true
      internalMethodName: "addClientHttpRequestInitializer"
    - lineNumber: 632
      expression: "!CollectionUtils.isEmpty(this.messageConverters)"
      range: "(632,7)-(632,54)"
      evaluatedAs: false
    - lineNumber: 635
      expression: "this.uriTemplateHandler != null"
      range: "(635,7)-(635,37)"
      evaluatedAs: false
    - lineNumber: 638
      expression: "this.errorHandler != null"
      range: "(638,7)-(638,31)"
      evaluatedAs: false
    - lineNumber: 641
      expression: "this.rootUri != null"
      range: "(641,7)-(641,26)"
      evaluatedAs: false
    - lineNumber: 645
      expression: "!CollectionUtils.isEmpty(this.customizers)"
      range: "(645,7)-(645,48)"
      evaluatedAs: true
    - lineNumber: 646
      expression: "for-each(this.customizers)"
      range: "(646,45)-(646,60)"
      evaluatedAs: false
- method:
    name: "buildRequestFactory"
    sourceCodeSignature: "ClientHttpRequestFactory buildRequestFactory()"
    returnType: "org.springframework.http.client.ClientHttpRequestFactory"
    instructionFingerprint: "A410192D203E0C2CC152BA6B63A556D7"
  paths:
  - pathId: "path1"
    testPathName: "buildRequestFactoryWhenThisDetectRequestFactory"
    constructorSignature: "<init>(org.springframework.boot.web.client.RestTemplateCustomizer[])\
      \ : void"
    modelFingerprint: "5FF1A4A405A974FE4DEC0E0F902B9379"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0A3D984A542528E624A1ED6D121EFDD4"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "979C6760EA6BC7C7EB10C3967E6EB43F"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid168):void"
        staticAccess: true
    - type: "STATIC"
      name: "ClientHttpRequestFactories.class.real"
      modelFingerprint: "9D518DB625B453AC44E07F5D35922554"
      valueUuid: "ClientHttpRequestFactories.class.real"
      methodExercised:
        expression: "get(settings:clientHttpRequestFactorySettings):clientHttpRequestFactory"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "86A5E2022985F16BED93B6C8DB998B9A"
      valueUuid: "clientHttpRequestFactory"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilder"
        parameters:
        - name: "customizers"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
            uuid: "customizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.client.RestTemplateCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid168"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.boot.web.client.ClientHttpRequestFactories"
      uuid: "ClientHttpRequestFactories.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.web.client.ClientHttpRequestFactories"
        method: "get"
        methodParameters:
        - value:
            sapientType: "OBJECT"
            content: !<static_field_return>
              target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
              fieldName: "DEFAULTS"
            valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            uuid: "clientHttpRequestFactorySettings"
      valueType: "org.springframework.http.client.ClientHttpRequestFactory"
      uuid: "clientHttpRequestFactory"
    - sapientType: "OBJECT"
      content: !<static_field_return>
        target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
        fieldName: "DEFAULTS"
      valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
      uuid: "clientHttpRequestFactorySettings"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.web.client.ClientHttpRequestFactories"
        method: "get"
        methodParameters:
        - value:
            sapientType: "OBJECT"
            content: !<static_field_return>
              target: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
              fieldName: "DEFAULTS"
            valueType: "org.springframework.boot.web.client.ClientHttpRequestFactorySettings"
            uuid: "clientHttpRequestFactorySettings"
      valueType: "org.springframework.http.client.ClientHttpRequestFactory"
      uuid: "clientHttpRequestFactory"
    branches:
    - lineNumber: 660
      expression: "this.requestFactory != null"
      range: "(660,7)-(660,33)"
      evaluatedAs: false
    - lineNumber: 663
      expression: "this.detectRequestFactory"
      range: "(663,7)-(663,31)"
      evaluatedAs: true
