---
modelFingerprint: "B872D6BB7654C6D1B8EDBAE64F04364B"
targetClass:
  fullClassName: "org.springframework.boot.web.client.RestTemplateBuilderClientHttpRequestInitializer"
methods:
- method:
    name: "initialize"
    sourceCodeSignature: "void initialize(ClientHttpRequest request)"
    returnType: "void"
    parameters:
    - name: "request"
      type: "org.springframework.http.client.ClientHttpRequest"
    instructionFingerprint: "00B868E915CE28E02A200E637EBABE7D"
  paths:
  - pathId: "path1"
    testPathName: "initializeWhenThisBasicAuthenticationIsNotNull"
    constructorSignature: "<init>(org.springframework.boot.web.client.BasicAuthentication,java.util.Map<java.lang.String,java.util.List<java.lang.String>>,java.util.Set<org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>>)\
      \ : void"
    modelFingerprint: "6F0159F9CBC81B3BA44FFD2B7A21F641"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "14F588DB4EED195E3CAEEE86376F1ECE"
      valueUuid: "target"
    - type: "INPUT"
      name: "request"
      modelFingerprint: "11B4C629556EFA48B7E8118979268045"
      valueUuid: "request"
    - type: "LOCAL_VARIABLE"
      name: "request"
      modelFingerprint: "4072293D017DD8C37514281714D17A97"
      valueUuid: "request"
      methodExercised:
        expression: "getHeaders():httpHeaders"
    - type: "FIELD"
      name: "basicAuthentication"
      modelFingerprint: "3ABAEADA2D4008B30D3780770D028F07"
      valueUuid: "basicAuthentication"
      methodExercised:
        expression: "applyTo(headers:httpHeaders):void"
    - type: "LOCAL_VARIABLE"
      name: "headers"
      modelFingerprint: "0E74DD8F3C45CC13022DE9C107563E79"
      valueUuid: "httpHeaders"
      methodExercised:
        expression: "putIfAbsent(null:string,null:list):list2"
    - type: "STATIC"
      name: "LambdaSafe.class"
      modelFingerprint: "B1ED520A3D85B225023A889C8308143B"
      valueUuid: "LambdaSafe.class"
      methodExercised:
        expression: "callbacks(callbackType:uniqueUuid1,callbackInstances:requestCustomizers,argument:request,additionalArguments:objectArray):lambdaSafe.Callbacks"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "customizer"
      modelFingerprint: "35045F345F02B73F05807DC6BFB90A98"
      valueUuid: "restTemplateRequestCustomizer"
      methodExercised:
        expression: "customize(request:request):void4"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "2A91A70DB731F35C14F1E8654020F8AC"
      valueUuid: "lambdaSafe.Callbacks"
      methodExercised:
        expression: "invoke(invoker:uniqueUuid2):void3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.client.RestTemplateBuilderClientHttpRequestInitializer"
        parameters:
        - name: "basicAuthentication"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.web.client.BasicAuthentication"
            uuid: "basicAuthentication"
        - name: "defaultHeaders"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.HashMap"
              parameters: []
              values:
              - sapientType: "PAIR"
                content: !<pair>
                  key:
                    sapientType: "BASIC"
                    content: !<regular>
                      value: "defaultHeadersItem1Key1"
                    valueType: "java.lang.String"
                    uuid: "string"
                    collectionUuid: "defaultHeaders"
                  value:
                    sapientType: "COLLECTION"
                    content: !<collection>
                      parameters: []
                      values: []
                    valueType: "java.util.List"
                    genericValueType: "java.lang.String"
                    uuid: "list"
                    collectionUuid: "defaultHeaders"
                valueType: "java.util.Map$Entry"
            valueType: "java.util.Map"
            genericValueType: "java.lang.String,java.util.List<java.lang.String>"
            uuid: "defaultHeaders"
        - name: "requestCustomizers"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              parameters: []
              values: []
            valueType: "java.util.Set"
            genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
            uuid: "requestCustomizers"
      valueType: "org.springframework.boot.web.client.RestTemplateBuilderClientHttpRequestInitializer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.client.ClientHttpRequest"
      uuid: "request"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.client.ClientHttpRequest"
      uuid: "request"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "org.springframework.http.HttpHeaders"
      uuid: "httpHeaders"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.BasicAuthentication"
      uuid: "basicAuthentication"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "org.springframework.http.HttpHeaders"
      uuid: "httpHeaders"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "org.springframework.http.HttpHeaders"
      uuid: "httpHeaders"
    - sapientType: "NULL"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list2"
      collectionUuid: "httpHeaders"
    - sapientType: "BASIC"
      content: !<regular>
        value: "defaultHeadersItem1Key1"
      valueType: "java.lang.String"
      uuid: "string"
      collectionUuid: "defaultHeaders"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list"
      collectionUuid: "defaultHeaders"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.util.LambdaSafe"
      uuid: "LambdaSafe.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.util.LambdaSafe$Callbacks"
      uuid: "lambdaSafe.Callbacks"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.web.client.RestTemplateRequestCustomizer"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Set"
      genericValueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer<?>"
      uuid: "requestCustomizers"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.client.ClientHttpRequest"
      uuid: "request"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Object[]"
      uuid: "objectArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.client.RestTemplateRequestCustomizer"
      uuid: "restTemplateRequestCustomizer"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.http.client.ClientHttpRequest"
      uuid: "request"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.util.LambdaSafe$Callbacks"
      uuid: "lambdaSafe.Callbacks"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Consumer"
      uuid: "uniqueUuid2"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 55
      expression: "this.basicAuthentication != null"
      range: "(55,7)-(55,38)"
      evaluatedAs: true
