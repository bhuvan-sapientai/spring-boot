---
modelFingerprint: "60C181335755AF0DDC79CB57C473496B"
targetClass:
  fullClassName: "org.springframework.boot.env.RandomValuePropertySource"
methods:
- method:
    name: "getProperty"
    sourceCodeSignature: "Object getProperty(String name)"
    returnType: "java.lang.Object"
    parameters:
    - name: "name"
      type: "java.lang.String"
    instructionFingerprint: "C4F0738D085A76FCB042E42B2BE9629F"
  paths:
  - pathId: "path1"
    testPathName: "getPropertyWhenNameNotStartsWithPREFIX"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "C86F83F296F775CAF1852FF7B4E0F0B2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4A9B2551A7673A168E09F0C649424497"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "73FD2F6879D14623B65F7D4922D0E2E2"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4A0BE7D0089781EFFA3F43FDBBE8F682"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "C7B4406B08E1313E6E253E9BF6150647"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:random,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B5832848421B6892B8D06BE61ADCD847"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.env.RandomValuePropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name2"
      valueType: "org.springframework.boot.env.RandomValuePropertySource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.Random"
      uuid: "random"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
      fixed: true
    branches:
    - lineNumber: 85
      expression: "!name.startsWith(PREFIX)"
      range: "(85,7)-(85,30)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "getPropertyWhenTypeEqualsInt"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "A98AFE31693CDEDC0DD02A1702B6ADA7"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4A9B2551A7673A168E09F0C649424497"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "830E549ABFD5DF26F9D7351670B3FB8F"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4A0BE7D0089781EFFA3F43FDBBE8F682"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid3):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "C7B4406B08E1313E6E253E9BF6150647"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:random,message:uniqueUuid4):void2"
        staticAccess: true
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "99195767686248F7048CBCBF3DD6BA68"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid5,arg1:name):logMessage"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "C90ECC2446819F963F969087B134D1B0"
      methodExercised:
        expression: "getSource():object"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "1F944700677F9157A979D0ADEBD26691"
      valueUuid: "object"
      methodExercised:
        expression: "nextInt():int2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "F7A30A81A7B9F46FE59454616C5B7D71"
      valueUuid: "integer"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.env.RandomValuePropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name2"
      valueType: "org.springframework.boot.env.RandomValuePropertySource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "random.int"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.Random"
      uuid: "random"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Generating random property for '%s'"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "random.int"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "java.util.Random"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "java.util.Random"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.lang.Integer"
      uuid: "integer"
    branches:
    - lineNumber: 85
      expression: "!name.startsWith(PREFIX)"
      range: "(85,7)-(85,30)"
      evaluatedAs: false
    - lineNumber: 93
      expression: "type.equals(\\\"int\\\")"
      range: "(93,7)-(93,24)"
      evaluatedAs: true
      internalMethodName: "getRandomValue"
  - pathId: "path3"
    testPathName: "getPropertyWhenTypeEqualsLong"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "6847B7EEAB17496A1EAEEAF58AFBD775"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4A9B2551A7673A168E09F0C649424497"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "B04B697BE3BA37CF89AE7145FCFECC47"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4A0BE7D0089781EFFA3F43FDBBE8F682"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid6):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "C7B4406B08E1313E6E253E9BF6150647"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:random,message:uniqueUuid7):void2"
        staticAccess: true
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "DC9AAE796DB9934C37AE70507EDE3F0B"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid8,arg1:name):logMessage"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "C90ECC2446819F963F969087B134D1B0"
      methodExercised:
        expression: "getSource():object"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "F5235536412906407C35627443211E83"
      valueUuid: "object"
      methodExercised:
        expression: "nextLong():long1"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "288CB204D3AE8F2064F449D4B98645D6"
      valueUuid: "long2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.env.RandomValuePropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name2"
      valueType: "org.springframework.boot.env.RandomValuePropertySource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "random.long"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.Random"
      uuid: "random"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Generating random property for '%s'"
      valueType: "java.lang.String"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "random.long"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "java.util.Random"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "java.util.Random"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "long1"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.lang.Long"
      uuid: "long2"
    branches:
    - lineNumber: 85
      expression: "!name.startsWith(PREFIX)"
      range: "(85,7)-(85,30)"
      evaluatedAs: false
    - lineNumber: 93
      expression: "type.equals(\\\"int\\\")"
      range: "(93,7)-(93,24)"
      evaluatedAs: false
      internalMethodName: "getRandomValue"
    - lineNumber: 96
      expression: "type.equals(\\\"long\\\")"
      range: "(96,7)-(96,25)"
      evaluatedAs: true
      internalMethodName: "getRandomValue"
  - pathId: "path4"
    testPathName: "getPropertyWhenRangeIsNotNull"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "AE54014BE38CE54D30897BE4675E5F05"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "BB70C8FDC32A76DD8D42E9CE999BBED9"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "3FDB2CA4398239AE50DCCE88D3EB5AEB"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B1EC4CCCE6999270E340F19D9682E6C8"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "C7B4406B08E1313E6E253E9BF6150647"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:random,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "A147B4DB4D3FF409BB55F500F8ABAB93"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid3,arg1:name):logMessage"
        staticAccess: true
    - type: "STATIC"
      name: "RandomValuePropertySource.Range.class"
      modelFingerprint: "C645778F290E5DA4E44AF8440A3F310E"
      valueUuid: "RandomValuePropertySource.Range.class"
      methodExercised:
        expression: "of(value:string2,parse:uniqueUuid4):randomValuePropertySource.Range"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "263E29B697300BAF371B7A0BEC47C1AA"
      methodExercised:
        expression: "getSource():object"
    - type: "LOCAL_VARIABLE"
      name: "range"
      modelFingerprint: "AB266E1AB49256122CFAEF1518E31DED"
      valueUuid: "randomValuePropertySource.Range"
      methodExercised:
        expression: "getMin():number"
    - type: "LOCAL_VARIABLE"
      name: "range"
      modelFingerprint: "E64526D6BCEF82315E2886143AF1AD72"
      valueUuid: "randomValuePropertySource.Range"
      methodExercised:
        expression: "getMax():number2"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean5,messageSupplier:uniqueUuid5):void4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "CDFDC1FA7268393739BDAB9A38825FFB"
      valueUuid: "integer"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "assertPresent(first.isPresent(), range);"
      lineNumber: 125
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: first - Method: isPresent"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.env.RandomValuePropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "C"
            valueType: "java.lang.String"
            uuid: "name2"
      valueType: "org.springframework.boot.env.RandomValuePropertySource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "random.intAB"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.Random"
      uuid: "random"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Generating random property for '%s'"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "random.intAB"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.RandomValuePropertySource$Range"
      uuid: "RandomValuePropertySource.Range.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.RandomValuePropertySource$Range"
      uuid: "randomValuePropertySource.Range"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "ANY"
      valueType: "java.util.function.Function"
      uuid: "uniqueUuid4"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Random"
        parameters: []
      valueType: "java.util.Random"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.RandomValuePropertySource$Range"
      uuid: "randomValuePropertySource.Range"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "java.lang.Integer"
      uuid: "number"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.RandomValuePropertySource$Range"
      uuid: "randomValuePropertySource.Range"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "java.lang.Integer"
      uuid: "number2"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid5"
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "java.lang.Integer"
      uuid: "integer"
    branches:
    - lineNumber: 85
      expression: "!name.startsWith(PREFIX)"
      range: "(85,7)-(85,30)"
      evaluatedAs: false
    - lineNumber: 93
      expression: "type.equals(\\\"int\\\")"
      range: "(93,7)-(93,24)"
      evaluatedAs: false
      internalMethodName: "getRandomValue"
    - lineNumber: 96
      expression: "type.equals(\\\"long\\\")"
      range: "(96,7)-(96,25)"
      evaluatedAs: false
      internalMethodName: "getRandomValue"
    - lineNumber: 114
      expression: "type.startsWith(prefix)"
      range: "(114,7)-(114,29)"
      evaluatedAs: true
      internalMethodName: "getRange"
    - lineNumber: 116
      expression: "type.length() > startIndex"
      range: "(116,8)-(116,33)"
      evaluatedAs: true
      internalMethodName: "getRange"
    - lineNumber: 100
      expression: "range != null"
      range: "(100,7)-(100,19)"
      evaluatedAs: true
      internalMethodName: "getRandomValue"
  - pathId: "path5"
    testPathName: "getPropertyWhenRangeIsNullAndRangeIsNotNull"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "2882079407A198194B337FC75175CC8B"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "F46C01F4D0CEF464EA5264543753B63E"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "63F0AEB18588FDD50129913BF544F767"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B0DAFA5053C1396CE7F966C8749E6612"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "C7B4406B08E1313E6E253E9BF6150647"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:random,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "4CCAC5573F22E77904237D2BEB8B6759"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid3,arg1:name):logMessage"
        staticAccess: true
    - type: "STATIC"
      name: "RandomValuePropertySource.Range.class"
      modelFingerprint: "C645778F290E5DA4E44AF8440A3F310E"
      valueUuid: "RandomValuePropertySource.Range.class"
      methodExercised:
        expression: "of(value:string3,parse:uniqueUuid4):randomValuePropertySource.Range"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "263E29B697300BAF371B7A0BEC47C1AA"
      methodExercised:
        expression: "getSource():object"
    - type: "LOCAL_VARIABLE"
      name: "range"
      modelFingerprint: "B2F15FFE4ED615BCBF6B8223D27A2412"
      valueUuid: "randomValuePropertySource.Range"
      methodExercised:
        expression: "getMin():number"
    - type: "LOCAL_VARIABLE"
      name: "range"
      modelFingerprint: "43111E46F337D8997813BE8903B3BD96"
      valueUuid: "randomValuePropertySource.Range"
      methodExercised:
        expression: "getMax():number2"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "C5643FF157EA2719474151A09523254B"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean6,messageSupplier:uniqueUuid5):void4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "F8FA8223C372F83EE007F287E07478B6"
      valueUuid: "long4"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "assertPresent(first.isPresent(), range);"
      lineNumber: 131
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: first - Method: isPresent"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.env.RandomValuePropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "name1"
            valueType: "java.lang.String"
            uuid: "name2"
      valueType: "org.springframework.boot.env.RandomValuePropertySource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.Random"
      uuid: "random"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Generating random property for '%s'"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.RandomValuePropertySource$Range"
      uuid: "RandomValuePropertySource.Range.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.RandomValuePropertySource$Range"
      uuid: "randomValuePropertySource.Range"
    - sapientType: "BASIC"
      content: !<regular>
        value: "value1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "ANY"
      valueType: "java.util.function.Function"
      uuid: "uniqueUuid4"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.Random"
        parameters: []
      valueType: "java.util.Random"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.RandomValuePropertySource$Range"
      uuid: "randomValuePropertySource.Range"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.lang.Long"
      uuid: "number"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.RandomValuePropertySource$Range"
      uuid: "randomValuePropertySource.Range"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.lang.Long"
      uuid: "number2"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean6"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid5"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "java.lang.Long"
      uuid: "long4"
    branches:
    - lineNumber: 85
      expression: "!name.startsWith(PREFIX)"
      range: "(85,7)-(85,30)"
      evaluatedAs: false
    - lineNumber: 93
      expression: "type.equals(\\\"int\\\")"
      range: "(93,7)-(93,24)"
      evaluatedAs: false
      internalMethodName: "getRandomValue"
    - lineNumber: 96
      expression: "type.equals(\\\"long\\\")"
      range: "(96,7)-(96,25)"
      evaluatedAs: false
      internalMethodName: "getRandomValue"
    - lineNumber: 114
      expression: "type.startsWith(prefix)"
      range: "(114,7)-(114,29)"
      evaluatedAs: true
      internalMethodName: "getRange"
    - lineNumber: 116
      expression: "type.length() > startIndex"
      range: "(116,8)-(116,33)"
      evaluatedAs: true
      internalMethodName: "getRange"
    - lineNumber: 100
      expression: "range != null"
      range: "(100,7)-(100,19)"
      evaluatedAs: false
      internalMethodName: "getRandomValue"
    - lineNumber: 104
      expression: "range != null"
      range: "(104,7)-(104,19)"
      evaluatedAs: true
      internalMethodName: "getRandomValue"
  - pathId: "path6"
    testPathName: "getPropertyWhenTypeEqualsUuid"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "BC2563DC27F1B72309224AE02984C381"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "F46C01F4D0CEF464EA5264543753B63E"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "63F0AEB18588FDD50129913BF544F767"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "B0DAFA5053C1396CE7F966C8749E6612"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid21):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "C7B4406B08E1313E6E253E9BF6150647"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:random,message:uniqueUuid22):void2"
        staticAccess: true
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "4CCAC5573F22E77904237D2BEB8B6759"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid23,arg1:name):logMessage"
        staticAccess: true
    - type: "STATIC"
      name: "UUID.class"
      modelFingerprint: "653F740E9937AD204400017352019581"
      valueUuid: "UUID.class"
      methodExercised:
        expression: "randomUUID():uUID"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D446A609419428DDEAA49A58091F3986"
      valueUuid: "string4"
    disabled: true
    failureReason:
      reason: "CLASS_TYPE_COULD_NOT_BE_MOCKED_AND_NEEDS_TO_STRING"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.env.RandomValuePropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "name1"
            valueType: "java.lang.String"
            uuid: "name2"
      valueType: "org.springframework.boot.env.RandomValuePropertySource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid21"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.Random"
      uuid: "random"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid22"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Generating random property for '%s'"
      valueType: "java.lang.String"
      uuid: "uniqueUuid23"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "java.util.UUID"
      uuid: "UUID.class"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.util.UUID"
        method: "fromString"
        methodParameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "12345678-0000-abcd-1234-abcdef123456"
            valueType: "java.lang.String"
            uuid: "uniqueUuid24"
            fixed: true
      valueType: "java.util.UUID"
      uuid: "uUID"
      nameForMock: "uUID"
    - sapientType: "BASIC"
      content: !<regular>
        value: "result1"
      valueType: "java.lang.String"
      uuid: "string4"
    branches:
    - lineNumber: 85
      expression: "!name.startsWith(PREFIX)"
      range: "(85,7)-(85,30)"
      evaluatedAs: false
    - lineNumber: 93
      expression: "type.equals(\\\"int\\\")"
      range: "(93,7)-(93,24)"
      evaluatedAs: false
      internalMethodName: "getRandomValue"
    - lineNumber: 96
      expression: "type.equals(\\\"long\\\")"
      range: "(96,7)-(96,25)"
      evaluatedAs: false
      internalMethodName: "getRandomValue"
    - lineNumber: 114
      expression: "type.startsWith(prefix)"
      range: "(114,7)-(114,29)"
      evaluatedAs: true
      internalMethodName: "getRange"
    - lineNumber: 116
      expression: "type.length() > startIndex"
      range: "(116,8)-(116,33)"
      evaluatedAs: true
      internalMethodName: "getRange"
    - lineNumber: 100
      expression: "range != null"
      range: "(100,7)-(100,19)"
      evaluatedAs: false
      internalMethodName: "getRandomValue"
    - lineNumber: 104
      expression: "range != null"
      range: "(104,7)-(104,19)"
      evaluatedAs: false
      internalMethodName: "getRandomValue"
    - lineNumber: 107
      expression: "type.equals(\\\"uuid\\\")"
      range: "(107,7)-(107,25)"
      evaluatedAs: true
      internalMethodName: "getRandomValue"
  - pathId: "path9"
    testPathName: "getPropertyWhenTypeLengthNotGreaterThanStartIndexAndRangeIsNullAndRangeIsNullAndTypeNotEqualsUuid"
    constructorSignature: "<init>(java.lang.String) : void"
    modelFingerprint: "690FEAC104B0180666C4383ED5315DC6"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "8C6B5C942FD4E1F68CE3E5D6054D86EC"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "55B7A70AAD85A759A2E8ACD238E399D9"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "5C32F8E925036E353A7EEABF2A30E795"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid25):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "C7B4406B08E1313E6E253E9BF6150647"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:random,message:uniqueUuid26):void2"
        staticAccess: true
    - type: "STATIC"
      name: "LogMessage.class"
      modelFingerprint: "E9BBF6EE524603A68BB2D38BEC331576"
      valueUuid: "LogMessage.class"
      methodExercised:
        expression: "format(format:uniqueUuid27,arg1:name):logMessage"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "C90ECC2446819F963F969087B134D1B0"
      methodExercised:
        expression: "getSource():object"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "65E2403FB2277E2BFA46B3724C9C334F"
      valueUuid: "object"
      methodExercised:
        expression: "nextBytes(bytes:byteArray):void4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "CB7755B7694AA1811800BD5258BA489B"
      valueUuid: "string4"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.env.RandomValuePropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "B"
            valueType: "java.lang.String"
            uuid: "name2"
      valueType: "org.springframework.boot.env.RandomValuePropertySource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "random.intA"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid25"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.Random"
      uuid: "random"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid26"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "LogMessage.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.log.LogMessage"
      uuid: "logMessage"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Generating random property for '%s'"
      valueType: "java.lang.String"
      uuid: "uniqueUuid27"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "random.intA"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "java.util.Random"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "java.util.Random"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "byte"
            uuid: "uniqueUuid28"
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "byte"
            uuid: "uniqueUuid29"
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "byte"
            uuid: "uniqueUuid30"
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "byte"
            uuid: "uniqueUuid31"
          4:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "byte"
            uuid: "uniqueUuid32"
          5:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "byte"
            uuid: "uniqueUuid33"
          6:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "byte"
            uuid: "uniqueUuid34"
          7:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "byte"
            uuid: "uniqueUuid35"
          8:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "byte"
            uuid: "uniqueUuid36"
          9:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "byte"
            uuid: "uniqueUuid37"
          10:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "byte"
            uuid: "uniqueUuid38"
          11:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "byte"
            uuid: "uniqueUuid39"
          12:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "byte"
            uuid: "uniqueUuid40"
          13:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "byte"
            uuid: "uniqueUuid41"
          14:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "byte"
            uuid: "uniqueUuid42"
          15:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "byte"
            uuid: "uniqueUuid43"
      valueType: "byte[]"
      uuid: "byteArray"
    - sapientType: "BASIC"
      content: !<regular>
        value: "00000000000000000000000000000000"
      valueType: "java.lang.String"
      uuid: "string4"
    branches:
    - lineNumber: 85
      expression: "!name.startsWith(PREFIX)"
      range: "(85,7)-(85,30)"
      evaluatedAs: false
    - lineNumber: 93
      expression: "type.equals(\\\"int\\\")"
      range: "(93,7)-(93,24)"
      evaluatedAs: false
      internalMethodName: "getRandomValue"
    - lineNumber: 96
      expression: "type.equals(\\\"long\\\")"
      range: "(96,7)-(96,25)"
      evaluatedAs: false
      internalMethodName: "getRandomValue"
    - lineNumber: 114
      expression: "type.startsWith(prefix)"
      range: "(114,7)-(114,29)"
      evaluatedAs: true
      internalMethodName: "getRange"
    - lineNumber: 116
      expression: "type.length() > startIndex"
      range: "(116,8)-(116,33)"
      evaluatedAs: false
      internalMethodName: "getRange"
    - lineNumber: 100
      expression: "range != null"
      range: "(100,7)-(100,19)"
      evaluatedAs: false
      internalMethodName: "getRandomValue"
    - lineNumber: 104
      expression: "range != null"
      range: "(104,7)-(104,19)"
      evaluatedAs: false
      internalMethodName: "getRandomValue"
    - lineNumber: 107
      expression: "type.equals(\\\"uuid\\\")"
      range: "(107,7)-(107,25)"
      evaluatedAs: false
      internalMethodName: "getRandomValue"
- method:
    name: "addToEnvironment"
    sourceCodeSignature: "void addToEnvironment(ConfigurableEnvironment environment)"
    returnType: "void"
    parameters:
    - name: "environment"
      type: "org.springframework.core.env.ConfigurableEnvironment"
    instructionFingerprint: "BA364D57725FE9CBBCAE6E75C037BB84"
  paths:
  - pathId: "path1"
    testPathName: "addToEnvironmentTest"
    modelFingerprint: "B00DC07C0993AE27B66206CD7D6EF244"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "3F73E3E0E26E26EEEFAD4DD95D3AE3D4"
      valueUuid: "environment"
    - type: "STATIC"
      name: "RandomValuePropertySource.class"
      modelFingerprint: "07574DD26C587274778F4F13AED7B01E"
      valueUuid: "RandomValuePropertySource.class"
      methodExercised:
        expression: "addToEnvironment(environment:environment,logger:log):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.RandomValuePropertySource"
      uuid: "RandomValuePropertySource.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.apache.commons.logging.LogFactory"
        method: "getLog"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "org.springframework.boot.env.RandomValuePropertySource"
            valueType: "java.lang.Class"
            genericValueType: "org.springframework.boot.env.RandomValuePropertySource"
            uuid: "uniqueUuid44"
            fixed: true
      valueType: "org.apache.commons.logging.Log"
      uuid: "log"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "addToEnvironment"
    sourceCodeSignature: "void addToEnvironment(ConfigurableEnvironment environment,\
      \ Log logger)"
    returnType: "void"
    parameters:
    - name: "environment"
      type: "org.springframework.core.env.ConfigurableEnvironment"
    - name: "logger"
      type: "org.apache.commons.logging.Log"
    instructionFingerprint: "0813D99FAC027B269477970F1A472E55"
  paths:
  - pathId: "path1"
    testPathName: "addToEnvironment1WhenExistingIsNotNull"
    modelFingerprint: "BB98BBC788079EE90A459FF187F12AA8"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "2AB40C7309B23844284816875A86BEFD"
      valueUuid: "environment"
    - type: "INPUT"
      name: "logger"
      modelFingerprint: "367597B332319B8815E907B0EC97F97E"
      valueUuid: "logger"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "E97B1B215647A456976BAD20E92F84F8"
      valueUuid: "environment"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources"
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "66949B03E00ECC38B726EE5124A70D04"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "get(name:uniqueUuid45):propertySource"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "logger"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
    - sapientType: "BASIC"
      content: !<regular>
        value: "random"
      valueType: "java.lang.String"
      uuid: "uniqueUuid45"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 152
      expression: "existing != null"
      range: "(152,7)-(152,22)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "addToEnvironment1WhenSourcesGetStandardEnvironmentSYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAMEIsNotNull"
    modelFingerprint: "FDABA2993B4B98C79AEF7CD1471D258C"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "2AB40C7309B23844284816875A86BEFD"
      valueUuid: "environment"
    - type: "INPUT"
      name: "logger"
      modelFingerprint: "367597B332319B8815E907B0EC97F97E"
      valueUuid: "logger"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "E97B1B215647A456976BAD20E92F84F8"
      valueUuid: "environment"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources"
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "42362C28CCF3691C9379AD141D8A4D80"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "get(name:uniqueUuid46):propertySource"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "3BA4DF66C14730B1AECD5B7E2F431E42"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "hasText(text:uniqueUuid47,message:uniqueUuid48):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "C7B4406B08E1313E6E253E9BF6150647"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:random,message:uniqueUuid49):void2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "C9D254B6630DD5F803F9ECE85C3FABE4"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "get(name:uniqueUuid50):propertySource3"
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "D99DE15B99BF5F53D3F4A543C3AB9813"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "addAfter(relativePropertySourceName:uniqueUuid51,propertySource:randomValuePropertySource):void3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "logger"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "NULL"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "random"
      valueType: "java.lang.String"
      uuid: "uniqueUuid46"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "random"
      valueType: "java.lang.String"
      uuid: "uniqueUuid47"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid48"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.Random"
      uuid: "random"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid49"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "systemEnvironment"
      valueType: "java.lang.String"
      uuid: "uniqueUuid50"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "systemEnvironment"
      valueType: "java.lang.String"
      uuid: "uniqueUuid51"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.boot.env.RandomValuePropertySource"
      uuid: "randomValuePropertySource"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 152
      expression: "existing != null"
      range: "(152,7)-(152,22)"
      evaluatedAs: false
    - lineNumber: 157
      expression: "sources.get(StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME)\
        \ != null"
      range: "(157,7)-(157,86)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "addToEnvironment1WhenSourcesGetStandardEnvironmentSYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAMEIsNull"
    modelFingerprint: "A54565E260CFED5FB75851A3F079EF11"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "2AB40C7309B23844284816875A86BEFD"
      valueUuid: "environment"
    - type: "INPUT"
      name: "logger"
      modelFingerprint: "367597B332319B8815E907B0EC97F97E"
      valueUuid: "logger"
    - type: "LOCAL_VARIABLE"
      name: "environment"
      modelFingerprint: "E97B1B215647A456976BAD20E92F84F8"
      valueUuid: "environment"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources"
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "42362C28CCF3691C9379AD141D8A4D80"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "get(name:uniqueUuid53):propertySource"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "3BA4DF66C14730B1AECD5B7E2F431E42"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "hasText(text:uniqueUuid54,message:uniqueUuid55):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "C7B4406B08E1313E6E253E9BF6150647"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:random,message:uniqueUuid56):void2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "FA718607C865DECF23CD5AF3395B05E5"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "get(name:uniqueUuid57):propertySource3"
    - type: "LOCAL_VARIABLE"
      name: "sources"
      modelFingerprint: "A0A102A14844920F5391D2269D4BCC66"
      valueUuid: "mutablePropertySources"
      methodExercised:
        expression: "addLast(propertySource:randomValuePropertySource):void3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.apache.commons.logging.impl.NoOpLog"
        parameters: []
      valueType: "org.apache.commons.logging.impl.NoOpLog"
      uuid: "logger"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "NULL"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "random"
      valueType: "java.lang.String"
      uuid: "uniqueUuid53"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "random"
      valueType: "java.lang.String"
      uuid: "uniqueUuid54"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid55"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.Random"
      uuid: "random"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid56"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "NULL"
      valueType: "org.springframework.core.env.PropertySource"
      genericValueType: "?"
      uuid: "propertySource3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "systemEnvironment"
      valueType: "java.lang.String"
      uuid: "uniqueUuid57"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.springframework.boot.env.RandomValuePropertySource"
      uuid: "randomValuePropertySource"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 152
      expression: "existing != null"
      range: "(152,7)-(152,22)"
      evaluatedAs: false
    - lineNumber: 157
      expression: "sources.get(StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME)\
        \ != null"
      range: "(157,7)-(157,86)"
      evaluatedAs: false
