---
modelFingerprint: "6ED7FC98C3132D52639D3C117C7336A2"
targetClass:
  fullClassName: "org.springframework.boot.env.ConfigTreePropertySource"
methods:
- method:
    name: "getPropertyNames"
    sourceCodeSignature: "String[] getPropertyNames()"
    returnType: "java.lang.String[]"
    instructionFingerprint: "5C804C6E0AEC33A6F77747E3B4C158AE"
  paths:
  - pathId: "path1"
    testPathName: "getPropertyNamesTest"
    constructorSignature: "<init>(java.lang.String,java.nio.file.Path,org.springframework.boot.env.ConfigTreePropertySource$Option[])\
      \ : void"
    modelFingerprint: "7D0CC4F6201EA9518B9C57903A58D402"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "6EDBC0370A5093B2C52E6FA5BEBA428B"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4A0BE7D0089781EFFA3F43FDBBE8F682"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "0D5949666A0A942C8C1498C560D05300"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:sourceDirectory,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4789AC3D4848892E719FE7E6F3A8A629"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean1,messageSupplier:uniqueUuid3):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4789AC3D4848892E719FE7E6F3A8A629"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean2,messageSupplier:uniqueUuid4):void4"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "2BF57DD4BED7BBF8D480A601C3B7E06C"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "toStringArray(collection:set):stringArray"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "92E08B324330B60007F4DAD81DF69045"
      valueUuid: "object"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.EnumSet.copyOf(java.util.List<org.springframework.boot.env.ConfigTreePropertySource$Option>)\
        \ : java.util.EnumSet"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.env.ConfigTreePropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name"
        - name: "sourceDirectory"
          value:
            sapientType: "MOCK"
            valueType: "java.nio.file.Path"
            uuid: "sourceDirectory"
        - name: "options"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.env.ConfigTreePropertySource$Option[]"
            uuid: "options"
      valueType: "org.springframework.boot.env.ConfigTreePropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.nio.file.Path"
      uuid: "sourceDirectory"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid3"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid4"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Set"
      genericValueType: "java.lang.String"
      uuid: "set"
      collectionUuid: "map"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "object"
      collectionUuid: "stringArray"
      explicitCastNeeded: true
- method:
    name: "getProperty"
    sourceCodeSignature: "Value getProperty(String name)"
    returnType: "org.springframework.boot.env.ConfigTreePropertySource$Value"
    parameters:
    - name: "name"
      type: "java.lang.String"
    instructionFingerprint: "E60E665D476FF4F18F8F6D755ECA99D5"
  paths:
  - pathId: "path1"
    testPathName: "getProperty1WhenPropertyFileIsNotNull"
    constructorSignature: "<init>(java.lang.String,java.nio.file.Path,org.springframework.boot.env.ConfigTreePropertySource$Option[])\
      \ : void"
    modelFingerprint: "18259FDEA37AF0FCE666C5A17DD26275"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "6EDBC0370A5093B2C52E6FA5BEBA428B"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "63F0AEB18588FDD50129913BF544F767"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4A0BE7D0089781EFFA3F43FDBBE8F682"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid5):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "0D5949666A0A942C8C1498C560D05300"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:sourceDirectory,message:uniqueUuid6):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4789AC3D4848892E719FE7E6F3A8A629"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean1,messageSupplier:uniqueUuid7):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4789AC3D4848892E719FE7E6F3A8A629"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean2,messageSupplier:uniqueUuid8):void4"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "22A8409D9EC7A94AC8A6E28FE152353E"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "toStringArray(collection:set):stringArray"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C03A1F9ECB403A698B60963C7FB2FEAF"
      valueUuid: "configTreePropertySource.PropertyFileContent"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.EnumSet.copyOf(java.util.List<org.springframework.boot.env.ConfigTreePropertySource$Option>)\
        \ : java.util.EnumSet"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.env.ConfigTreePropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "sourceDirectory"
          value:
            sapientType: "MOCK"
            valueType: "java.nio.file.Path"
            uuid: "sourceDirectory"
        - name: "options"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.env.ConfigTreePropertySource$Option[]"
            uuid: "options"
      valueType: "org.springframework.boot.env.ConfigTreePropertySource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.nio.file.Path"
      uuid: "sourceDirectory"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid7"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid8"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashSet"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "collectionItem1"
          valueType: "java.lang.String"
          uuid: "setItem0"
      valueType: "java.util.Set"
      genericValueType: "java.lang.String"
      uuid: "set"
      collectionUuid: "map"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.env.ConfigTreePropertySource$PropertyFileContent"
      uuid: "configTreePropertySource.PropertyFileContent"
    branches:
    - lineNumber: 122
      expression: "propertyFile != null"
      range: "(122,11)-(122,30)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "getProperty1WhenPropertyFileIsNull"
    constructorSignature: "<init>(java.lang.String,java.nio.file.Path,org.springframework.boot.env.ConfigTreePropertySource$Option[])\
      \ : void"
    modelFingerprint: "C9C10AD7D116E8432062FDA1D4215002"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "6EDBC0370A5093B2C52E6FA5BEBA428B"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "63F0AEB18588FDD50129913BF544F767"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4A0BE7D0089781EFFA3F43FDBBE8F682"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid9):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "0D5949666A0A942C8C1498C560D05300"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:sourceDirectory,message:uniqueUuid10):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4789AC3D4848892E719FE7E6F3A8A629"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean1,messageSupplier:uniqueUuid11):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4789AC3D4848892E719FE7E6F3A8A629"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean2,messageSupplier:uniqueUuid12):void4"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "22A8409D9EC7A94AC8A6E28FE152353E"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "toStringArray(collection:set):stringArray"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "96A7C5D8C61881590B376A95986E9DBB"
      valueUuid: "configTreePropertySource.Value"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.EnumSet.copyOf(java.util.List<org.springframework.boot.env.ConfigTreePropertySource$Option>)\
        \ : java.util.EnumSet"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.env.ConfigTreePropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "sourceDirectory"
          value:
            sapientType: "MOCK"
            valueType: "java.nio.file.Path"
            uuid: "sourceDirectory"
        - name: "options"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.env.ConfigTreePropertySource$Option[]"
            uuid: "options"
      valueType: "org.springframework.boot.env.ConfigTreePropertySource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.nio.file.Path"
      uuid: "sourceDirectory"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid11"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid12"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashSet"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "collectionItem1"
          valueType: "java.lang.String"
          uuid: "setItem0"
      valueType: "java.util.Set"
      genericValueType: "java.lang.String"
      uuid: "set"
      collectionUuid: "map"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.env.ConfigTreePropertySource$Value"
      uuid: "configTreePropertySource.Value"
      fixed: true
    branches:
    - lineNumber: 122
      expression: "propertyFile != null"
      range: "(122,11)-(122,30)"
      evaluatedAs: false
- method:
    name: "getOrigin"
    sourceCodeSignature: "Origin getOrigin(String name)"
    returnType: "org.springframework.boot.origin.Origin"
    parameters:
    - name: "name"
      type: "java.lang.String"
    instructionFingerprint: "EA6499D8AC83438B298DDCBD522D39E7"
  paths:
  - pathId: "path1"
    testPathName: "getOriginWhenPropertyFileIsNotNull"
    constructorSignature: "<init>(java.lang.String,java.nio.file.Path,org.springframework.boot.env.ConfigTreePropertySource$Option[])\
      \ : void"
    modelFingerprint: "E7F7416FEABECAB1FF6754207F9FDAE8"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "6EDBC0370A5093B2C52E6FA5BEBA428B"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "63F0AEB18588FDD50129913BF544F767"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4A0BE7D0089781EFFA3F43FDBBE8F682"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid13):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "0D5949666A0A942C8C1498C560D05300"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:sourceDirectory,message:uniqueUuid14):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4789AC3D4848892E719FE7E6F3A8A629"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean1,messageSupplier:uniqueUuid15):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4789AC3D4848892E719FE7E6F3A8A629"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean2,messageSupplier:uniqueUuid16):void4"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "22A8409D9EC7A94AC8A6E28FE152353E"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "toStringArray(collection:set):stringArray"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5692B041B63EBC5E48D608049DCE404F"
      valueUuid: "origin"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.EnumSet.copyOf(java.util.List<org.springframework.boot.env.ConfigTreePropertySource$Option>)\
        \ : java.util.EnumSet"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.env.ConfigTreePropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "sourceDirectory"
          value:
            sapientType: "MOCK"
            valueType: "java.nio.file.Path"
            uuid: "sourceDirectory"
        - name: "options"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.env.ConfigTreePropertySource$Option[]"
            uuid: "options"
      valueType: "org.springframework.boot.env.ConfigTreePropertySource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid13"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.nio.file.Path"
      uuid: "sourceDirectory"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid14"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid15"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid16"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashSet"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "collectionItem1"
          valueType: "java.lang.String"
          uuid: "setItem0"
      valueType: "java.util.Set"
      genericValueType: "java.lang.String"
      uuid: "set"
      collectionUuid: "map"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "origin"
    branches:
    - lineNumber: 128
      expression: "propertyFile != null"
      range: "(128,11)-(128,30)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "getOriginWhenPropertyFileIsNull"
    constructorSignature: "<init>(java.lang.String,java.nio.file.Path,org.springframework.boot.env.ConfigTreePropertySource$Option[])\
      \ : void"
    modelFingerprint: "6A0060B0E685250863D5AB639EFE240D"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "6EDBC0370A5093B2C52E6FA5BEBA428B"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "63F0AEB18588FDD50129913BF544F767"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4A0BE7D0089781EFFA3F43FDBBE8F682"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name2,message:uniqueUuid17):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "0D5949666A0A942C8C1498C560D05300"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:sourceDirectory,message:uniqueUuid18):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4789AC3D4848892E719FE7E6F3A8A629"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean1,messageSupplier:uniqueUuid19):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4789AC3D4848892E719FE7E6F3A8A629"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean2,messageSupplier:uniqueUuid20):void4"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "22A8409D9EC7A94AC8A6E28FE152353E"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "toStringArray(collection:set):stringArray"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0214C9C5D06299F998DBB148236EA3F2"
      valueUuid: "origin"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.EnumSet.copyOf(java.util.List<org.springframework.boot.env.ConfigTreePropertySource$Option>)\
        \ : java.util.EnumSet"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.env.ConfigTreePropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "sourceDirectory"
          value:
            sapientType: "MOCK"
            valueType: "java.nio.file.Path"
            uuid: "sourceDirectory"
        - name: "options"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.env.ConfigTreePropertySource$Option[]"
            uuid: "options"
      valueType: "org.springframework.boot.env.ConfigTreePropertySource"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid17"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.nio.file.Path"
      uuid: "sourceDirectory"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid18"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid19"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid20"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashSet"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "collectionItem1"
          valueType: "java.lang.String"
          uuid: "setItem0"
      valueType: "java.util.Set"
      genericValueType: "java.lang.String"
      uuid: "set"
      collectionUuid: "map"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.origin.Origin"
      uuid: "origin"
      fixed: true
    branches:
    - lineNumber: 128
      expression: "propertyFile != null"
      range: "(128,11)-(128,30)"
      evaluatedAs: false
- method:
    name: "isImmutable"
    sourceCodeSignature: "boolean isImmutable()"
    returnType: "boolean"
    instructionFingerprint: "F589E8B5D4C1954F65F9450F12FCF7EB"
  paths:
  - pathId: "path1"
    testPathName: "isImmutableWhenThisOptionsNotContainsOptionALWAYS_READ"
    constructorSignature: "<init>(java.lang.String,java.nio.file.Path,org.springframework.boot.env.ConfigTreePropertySource$Option[])\
      \ : void"
    modelFingerprint: "A9451C5CEBE97740485A80591946CCBA"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "6EDBC0370A5093B2C52E6FA5BEBA428B"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4A0BE7D0089781EFFA3F43FDBBE8F682"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name,message:uniqueUuid21):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "0D5949666A0A942C8C1498C560D05300"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:sourceDirectory,message:uniqueUuid22):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4789AC3D4848892E719FE7E6F3A8A629"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean1,messageSupplier:uniqueUuid23):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4789AC3D4848892E719FE7E6F3A8A629"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean2,messageSupplier:uniqueUuid24):void4"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "2BF57DD4BED7BBF8D480A601C3B7E06C"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "toStringArray(collection:set):stringArray"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.EnumSet.copyOf(java.util.List<org.springframework.boot.env.ConfigTreePropertySource$Option>)\
        \ : java.util.EnumSet"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.env.ConfigTreePropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name"
        - name: "sourceDirectory"
          value:
            sapientType: "MOCK"
            valueType: "java.nio.file.Path"
            uuid: "sourceDirectory"
        - name: "options"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.env.ConfigTreePropertySource$Option[]"
            uuid: "options"
      valueType: "org.springframework.boot.env.ConfigTreePropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid21"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.nio.file.Path"
      uuid: "sourceDirectory"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid22"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid23"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid24"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Set"
      genericValueType: "java.lang.String"
      uuid: "set"
      collectionUuid: "map"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 133
      expression: "!this.options.contains(Option.ALWAYS_READ)"
      range: "(133,10)-(133,51)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "isImmutableWhenThisOptionsContainsOptionALWAYS_READ"
    constructorSignature: "<init>(java.lang.String,java.nio.file.Path,org.springframework.boot.env.ConfigTreePropertySource$Option[])\
      \ : void"
    modelFingerprint: "132F7FCAE55DCA692391C93481F83CC6"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "6EDBC0370A5093B2C52E6FA5BEBA428B"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4A0BE7D0089781EFFA3F43FDBBE8F682"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasText(text:name,message:uniqueUuid25):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "0D5949666A0A942C8C1498C560D05300"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:sourceDirectory,message:uniqueUuid26):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4789AC3D4848892E719FE7E6F3A8A629"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean1,messageSupplier:uniqueUuid27):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4789AC3D4848892E719FE7E6F3A8A629"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isTrue(expression:boolean2,messageSupplier:uniqueUuid28):void4"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "2BF57DD4BED7BBF8D480A601C3B7E06C"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "toStringArray(collection:set):stringArray"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5633A2B0C967879105766C98D64A3959"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.EnumSet.copyOf(java.util.List<org.springframework.boot.env.ConfigTreePropertySource$Option>)\
        \ : java.util.EnumSet"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.env.ConfigTreePropertySource"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name"
        - name: "sourceDirectory"
          value:
            sapientType: "MOCK"
            valueType: "java.nio.file.Path"
            uuid: "sourceDirectory"
        - name: "options"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.env.ConfigTreePropertySource$Option[]"
            uuid: "options"
      valueType: "org.springframework.boot.env.ConfigTreePropertySource"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source name must contain at least one character"
      valueType: "java.lang.String"
      uuid: "uniqueUuid25"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.nio.file.Path"
      uuid: "sourceDirectory"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Property source must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid26"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid27"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid28"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Set"
      genericValueType: "java.lang.String"
      uuid: "set"
      collectionUuid: "map"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 133
      expression: "!this.options.contains(Option.ALWAYS_READ)"
      range: "(133,10)-(133,51)"
      evaluatedAs: false
