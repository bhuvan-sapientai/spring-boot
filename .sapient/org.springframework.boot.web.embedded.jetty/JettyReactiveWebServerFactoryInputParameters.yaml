---
modelFingerprint: "F3F80972EAAF534A6AB13E5B14FC5215"
targetClass:
  fullClassName: "org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactory"
methods:
- method:
    name: "setUseForwardHeaders"
    sourceCodeSignature: "void setUseForwardHeaders(boolean useForwardHeaders)"
    returnType: "void"
    parameters:
    - name: "useForwardHeaders"
      type: "boolean"
    instructionFingerprint: "F73A56C7419C7966712F0ADD8F9504F9"
  paths:
  - pathId: "path1"
    testPathName: "setUseForwardHeadersTest"
    constructorSignature: "<init>(int) : void"
    modelFingerprint: "40443FED6294934A9F01F1164709A93B"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "setAcceptors"
    sourceCodeSignature: "void setAcceptors(int acceptors)"
    returnType: "void"
    parameters:
    - name: "acceptors"
      type: "int"
    instructionFingerprint: "637BE46155E44A1CC9831ABD415BFA12"
  paths:
  - pathId: "path1"
    testPathName: "setAcceptorsTest"
    constructorSignature: "<init>(int) : void"
    modelFingerprint: "10B89DB9B4E57349AABD215BB2292A4E"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "getWebServer"
    sourceCodeSignature: "WebServer getWebServer(HttpHandler httpHandler)"
    returnType: "org.springframework.boot.web.server.WebServer"
    parameters:
    - name: "httpHandler"
      type: "org.springframework.http.server.reactive.HttpHandler"
    instructionFingerprint: "1D2F2EED3131EF252BB2D1A03B49D0FF"
  paths:
  - pathId: "path1"
    testPathName: "getWebServerWhenGetPortGreaterThanOrEqualsTo0"
    constructorSignature: "<init>(int) : void"
    modelFingerprint: "5AFDCC55967DD707D1AFAC026E2B122C"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "D891B7CD133573AAD7982A1EB65D7E87"
      valueUuid: "target"
    - type: "INPUT"
      name: "httpHandler"
      modelFingerprint: "54ADB25CEDDDFBF94C6420F7A69C5FBC"
      valueUuid: "httpHandler"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "76BE215207722FAD67CE2773252C8937"
      methodExercised:
        expression: "createJettyServer(servlet:jettyHttpHandlerAdapter):server"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4DCC866FF5193E9DFA1C3DE3E68CD3B5"
      valueUuid: "jettyWebServer"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactory"
        parameters:
        - name: "port"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 1
            valueType: "int"
            uuid: "port"
      valueType: "org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactory"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.server.reactive.HttpHandler"
      uuid: "httpHandler"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.server.Server"
      uuid: "server"
    - sapientType: "ANY"
      valueType: "org.springframework.http.server.reactive.JettyHttpHandlerAdapter"
      uuid: "jettyHttpHandlerAdapter"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.JettyWebServer"
        parameters:
        - name: "server"
          value:
            sapientType: "MOCK"
            valueType: "org.eclipse.jetty.server.Server"
            uuid: "server"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "uniqueUuid1"
            fixed: true
      valueType: "org.springframework.boot.web.embedded.jetty.JettyWebServer"
      uuid: "jettyWebServer"
      fixed: true
    branches:
    - lineNumber: 115
      expression: "getPort() >= 0"
      range: "(115,37)-(115,50)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "getWebServerWhenGetPortLessThan0"
    constructorSignature: "<init>(int) : void"
    modelFingerprint: "DDBB2D036BB0B2D714602F72EABFDD14"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "F20B1B2E42F3BD76B8B1A75528BEF332"
      valueUuid: "target"
    - type: "INPUT"
      name: "httpHandler"
      modelFingerprint: "54ADB25CEDDDFBF94C6420F7A69C5FBC"
      valueUuid: "httpHandler"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "76BE215207722FAD67CE2773252C8937"
      methodExercised:
        expression: "createJettyServer(servlet:jettyHttpHandlerAdapter):server"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4DCC866FF5193E9DFA1C3DE3E68CD3B5"
      valueUuid: "jettyWebServer"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactory"
        parameters:
        - name: "port"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: -1
            valueType: "int"
            uuid: "port"
      valueType: "org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactory"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.server.reactive.HttpHandler"
      uuid: "httpHandler"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.server.Server"
      uuid: "server"
    - sapientType: "ANY"
      valueType: "org.springframework.http.server.reactive.JettyHttpHandlerAdapter"
      uuid: "jettyHttpHandlerAdapter"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.JettyWebServer"
        parameters:
        - name: "server"
          value:
            sapientType: "MOCK"
            valueType: "org.eclipse.jetty.server.Server"
            uuid: "server"
        - name: "autoStart"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "uniqueUuid2"
            fixed: true
      valueType: "org.springframework.boot.web.embedded.jetty.JettyWebServer"
      uuid: "jettyWebServer"
      fixed: true
    branches:
    - lineNumber: 115
      expression: "getPort() >= 0"
      range: "(115,37)-(115,50)"
      evaluatedAs: false
- method:
    name: "addServerCustomizers"
    sourceCodeSignature: "void addServerCustomizers(JettyServerCustomizer... customizers)"
    returnType: "void"
    parameters:
    - name: "customizers"
      type: "org.springframework.boot.web.embedded.jetty.JettyServerCustomizer[]"
    instructionFingerprint: "3E6182AA1E2593A03930784EA9D60420"
  paths:
  - pathId: "path1"
    testPathName: "addServerCustomizersTest"
    constructorSignature: "<init>(int) : void"
    modelFingerprint: "8B12192C278A2A3CE7DFCBE4F2AAB429"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "7C52F4C60272E21E0DAF74FEB8CBA6AB"
      valueUuid: "target"
    - type: "INPUT"
      name: "customizers"
      modelFingerprint: "F35CEC64C7DA67FFB7B614D343D41378"
      valueUuid: "customizers"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "F41A7591FFFB0AB035C4780DA2A256B6"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid3):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactory"
        parameters:
        - name: "port"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "port"
      valueType: "org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactory"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.embedded.jetty.JettyServerCustomizer[]"
      uuid: "customizers"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.web.embedded.jetty.JettyServerCustomizer[]"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "setMaxConnections"
    sourceCodeSignature: "void setMaxConnections(int maxConnections)"
    returnType: "void"
    parameters:
    - name: "maxConnections"
      type: "int"
    instructionFingerprint: "6259A62068C53C3AB09B48A9482C0679"
  paths:
  - pathId: "path1"
    testPathName: "setMaxConnectionsTest"
    constructorSignature: "<init>(int) : void"
    modelFingerprint: "F32FE122C8E928344304E39D0DDB0B8F"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "setServerCustomizers"
    sourceCodeSignature: "void setServerCustomizers(Collection<? extends JettyServerCustomizer>\
      \ customizers)"
    returnType: "void"
    parameters:
    - name: "customizers"
      type: "java.util.Collection"
    instructionFingerprint: "2A7A08E674CFF9F605C852D6B74BCDC5"
  paths:
  - pathId: "path1"
    testPathName: "setServerCustomizersTest"
    constructorSignature: "<init>(int) : void"
    modelFingerprint: "8241A811697247CF10C4B9A4BE0C281E"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "7C52F4C60272E21E0DAF74FEB8CBA6AB"
      valueUuid: "target"
    - type: "INPUT"
      name: "customizers"
      modelFingerprint: "92AF2353460B58CB0ED2FBFC201E8F34"
      valueUuid: "customizers"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "E23D8D5B46745AB3EEBEF6A78114D234"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:customizers,message:uniqueUuid4):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactory"
        parameters:
        - name: "port"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "port"
      valueType: "org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactory"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "? extends org.springframework.boot.web.embedded.jetty.JettyServerCustomizer"
      uuid: "customizers"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "? extends org.springframework.boot.web.embedded.jetty.JettyServerCustomizer"
      uuid: "customizers"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Customizers must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "getServerCustomizers"
    sourceCodeSignature: "Collection<JettyServerCustomizer> getServerCustomizers()"
    returnType: "java.util.Collection"
    genericReturnType: "org.springframework.boot.web.embedded.jetty.JettyServerCustomizer"
    instructionFingerprint: "0B080027785FBE52C019A5650868CB0C"
  paths:
  - pathId: "path1"
    testPathName: "getServerCustomizersTest"
    constructorSignature: "<init>(int) : void"
    modelFingerprint: "62E55C6AA7BBE4638ECB007BD290E0EE"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "7C52F4C60272E21E0DAF74FEB8CBA6AB"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "AD81440BCEAA61840CDBCAC82CB484AC"
      valueUuid: "linkedHashSet2"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactory"
        parameters:
        - name: "port"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 0
            valueType: "int"
            uuid: "port"
      valueType: "org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactory"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.LinkedHashSet"
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "org.springframework.boot.web.embedded.jetty.JettyServerCustomizer"
      uuid: "linkedHashSet2"
- method:
    name: "getThreadPool"
    sourceCodeSignature: "ThreadPool getThreadPool()"
    returnType: "org.eclipse.jetty.util.thread.ThreadPool"
    instructionFingerprint: "A4CAB44551564A42F9B9FF5EFEB77814"
  paths:
  - pathId: "path1"
    testPathName: "getThreadPoolTest"
    constructorSignature: "<init>(int) : void"
    modelFingerprint: "B5831889BED38BB8E3F512562F7A0ECA"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "setThreadPool"
    sourceCodeSignature: "void setThreadPool(ThreadPool threadPool)"
    returnType: "void"
    parameters:
    - name: "threadPool"
      type: "org.eclipse.jetty.util.thread.ThreadPool"
    instructionFingerprint: "A5A580AB3AEB24102B898E781A552DE7"
  paths:
  - pathId: "path1"
    testPathName: "setThreadPoolTest"
    constructorSignature: "<init>(int) : void"
    modelFingerprint: "B9D5201492F53FBBFD3B53BAB3E7EBA0"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "setSelectors"
    sourceCodeSignature: "void setSelectors(int selectors)"
    returnType: "void"
    parameters:
    - name: "selectors"
      type: "int"
    instructionFingerprint: "C031A1E8DFF6D9BB9B8ED74EFB577BD1"
  paths:
  - pathId: "path1"
    testPathName: "setSelectorsTest"
    constructorSignature: "<init>(int) : void"
    modelFingerprint: "A636F25A492E762E95370C363216035E"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "setResourceFactory"
    sourceCodeSignature: "void setResourceFactory(JettyResourceFactory resourceFactory)"
    returnType: "void"
    parameters:
    - name: "resourceFactory"
      type: "org.springframework.http.client.reactive.JettyResourceFactory"
    instructionFingerprint: "2B98B2CBF1C1119BEA86C93D078BC4CC"
  paths:
  - pathId: "path1"
    testPathName: "setResourceFactoryTest"
    constructorSignature: "<init>(int) : void"
    modelFingerprint: "A0190E901F635C9E691400535934E4BD"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "getResourceFactory"
    sourceCodeSignature: "JettyResourceFactory getResourceFactory()"
    returnType: "org.springframework.http.client.reactive.JettyResourceFactory"
    instructionFingerprint: "9E5210A7E8BCA6F34D97AD9E14C3472E"
  paths:
  - pathId: "path1"
    testPathName: "getResourceFactoryTest"
    constructorSignature: "<init>(int) : void"
    modelFingerprint: "A53EFF6F4368B495F8930214A1FBCAE0"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "createJettyServer"
    sourceCodeSignature: "Server createJettyServer(JettyHttpHandlerAdapter servlet)"
    returnType: "org.eclipse.jetty.server.Server"
    parameters:
    - name: "servlet"
      type: "org.springframework.http.server.reactive.JettyHttpHandlerAdapter"
    instructionFingerprint: "ADCD7DD3DBC11D1A2CDD53729C7D9F83"
  paths:
  - pathId: "path1"
    testPathName: "createJettyServerWhenGetShutdownEqualsShutdownGRACEFUL"
    constructorSignature: "<init>(int) : void"
    modelFingerprint: "8FB3AD95E8E01D306AC2DA961A7E3C84"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "14A594E0F363410859E7A697AA11DF31"
      valueUuid: "target"
    - type: "INPUT"
      name: "servlet"
      modelFingerprint: "2737F04B2E20725DCB013721E697E68F"
      valueUuid: "servlet"
    - type: "LOCAL_VARIABLE"
      name: "httpConfiguration"
      modelFingerprint: "DC4143981881B87E3004D98BD009067F"
      valueUuid: "httpConfiguration"
      methodExercised:
        expression: "setSendServerVersion(sendServerVersion:uniqueUuid5):void"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "465C4DC2AB9F4684891C4D36EA819FC3"
      valueUuid: "http2"
      methodExercised:
        expression: "isEnabled():enabled"
    - type: "LOCAL_VARIABLE"
      name: "connector"
      modelFingerprint: "283C3946EA1E6E6043D707005F215AFC"
      valueUuid: "serverConnector"
      methodExercised:
        expression: "setHost(host:string):void2"
    - type: "LOCAL_VARIABLE"
      name: "connector"
      modelFingerprint: "24138EAAB8C789C6C0CEEB8FEF231245"
      valueUuid: "serverConnector"
      methodExercised:
        expression: "setPort(port:int6):void3"
    - type: "LOCAL_VARIABLE"
      name: "server"
      modelFingerprint: "FFB0C5E841D9EBD9A73C6F5CF325E056"
      valueUuid: "server"
      methodExercised:
        expression: "addConnector(connector:serverConnector):void4"
    - type: "LOCAL_VARIABLE"
      name: "server"
      modelFingerprint: "439B889F3963B0F3B178CA8EA525F57A"
      valueUuid: "server"
      methodExercised:
        expression: "setStopTimeout(stopTimeout:uniqueUuid6):void5"
    - type: "LOCAL_VARIABLE"
      name: "servletHolder"
      modelFingerprint: "C3EEFC1D2B0CE72D42D906D7ECB1936A"
      valueUuid: "servletHolder"
      methodExercised:
        expression: "setAsyncSupported(suspendable:uniqueUuid7):void6"
    - type: "LOCAL_VARIABLE"
      name: "contextHandler"
      modelFingerprint: "3E7BCE79E2E77D8D3DAC0CA6906E865B"
      valueUuid: "servletContextHandler"
      methodExercised:
        expression: "addServlet(servlet:servletHolder,pathSpec:uniqueUuid8):void7"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "DFF8BCBE23C0F60E28B1C6278E0B8402"
      valueUuid: "compression"
      methodExercised:
        expression: "getEnabled():enabled2"
    - type: "STATIC"
      name: "JettyHandlerWrappers.class"
      modelFingerprint: "360537BDE54FFF9EFF4ECC6B4D75E80E"
      valueUuid: "JettyHandlerWrappers.class"
      methodExercised:
        expression: "createGzipHandlerWrapper(compression:compression):handler.Wrapper"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "wrapper"
      modelFingerprint: "37A1F90798221B95E95F429C58BC6E68"
      valueUuid: "handler.Wrapper"
      methodExercised:
        expression: "setHandler(handler:servletContextHandler):void8"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "A91647CB447119BB97CB86EA51675C61"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasText(str:string2):boolean5"
        staticAccess: true
    - type: "STATIC"
      name: "JettyHandlerWrappers.class"
      modelFingerprint: "58864B1CFC500EB27709272A4C88B30A"
      valueUuid: "JettyHandlerWrappers.class"
      methodExercised:
        expression: "createServerHeaderHandlerWrapper(header:string2):handler.Wrapper2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "wrapper"
      modelFingerprint: "227934907780ADEEC245906719C0B49E"
      valueUuid: "handler.Wrapper2"
      methodExercised:
        expression: "setHandler(handler:handler.Wrapper):void9"
    - type: "LOCAL_VARIABLE"
      name: "server"
      modelFingerprint: "88F2A896BF459BAA4FC135ABDC34B0B1"
      valueUuid: "server"
      methodExercised:
        expression: "setHandler(handler:handler.Wrapper2):void10"
    - type: "STATIC"
      name: "Ssl.class"
      modelFingerprint: "BB955C7AD5A7C21C536977E57745A4D0"
      valueUuid: "Ssl.class"
      methodExercised:
        expression: "isEnabled(ssl:ssl):boolean6"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "3709689234DD9DFE8A794E13877C6889"
      valueUuid: "ssl"
      methodExercised:
        expression: "getClientAuth():clientAuth"
    - type: "STATIC"
      name: "WebServerSslBundle.class"
      modelFingerprint: "D1767D56D737768EC2D5BFA9A32FEAD6"
      valueUuid: "WebServerSslBundle.class"
      methodExercised:
        expression: "get(ssl:fieldSsl,sslBundles:fieldSslBundles):sslBundle"
        throwsExceptions:
        - "org.springframework.boot.ssl.NoSuchSslBundleException"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "680EB6F5770D9B029E5B7B0E54992F9E"
      valueUuid: "sslServerCustomizer"
      methodExercised:
        expression: "customize(server:server):void12"
    - type: "LOCAL_VARIABLE"
      name: "server"
      modelFingerprint: "C38E0E7F899C4B76C947EB49FF458E10"
      valueUuid: "server"
      methodExercised:
        expression: "getHandler():handler"
    - type: "LOCAL_VARIABLE"
      name: "statisticsHandler"
      modelFingerprint: "ABE57B92BA5A5D61EE74FD4B0AD7ACE0"
      valueUuid: "statisticsHandler"
      methodExercised:
        expression: "setHandler(handler:handler):void13"
    - type: "LOCAL_VARIABLE"
      name: "server"
      modelFingerprint: "C8147D22433BD4C6F86A4CC9FB3AF497"
      valueUuid: "server"
      methodExercised:
        expression: "setHandler(handler:statisticsHandler):void14"
    - type: "LOCAL_VARIABLE"
      name: "server"
      modelFingerprint: "4934B35F75661D5F196954D58D0FF09B"
      valueUuid: "server"
      methodExercised:
        expression: "setAttribute(name:string4,attribute:uniqueUuid15):object"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "83B6F2949825B3DB69B3BC8FAB4B6EC2"
      valueUuid: "server"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "connector.setHost(address.getHostString());"
      lineNumber: 231
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: address - Method: getHostString"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactory"
        parameters:
        - name: "port"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: 2
            valueType: "int"
            uuid: "port"
        propertiesMap:
          address:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.net.InetAddress"
              method: "getLoopbackAddress"
              methodParameters: []
            valueType: "java.net.InetAddress"
            uuid: "inetAddress"
          http2:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.springframework.boot.web.server.Http2"
              parameters: []
              propertiesMap:
                enabled:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: true
                  valueType: "boolean"
                  uuid: "enabled"
            valueType: "org.springframework.boot.web.server.Http2"
            uuid: "http2"
          compression:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.springframework.boot.web.server.Compression"
              parameters: []
              propertiesMap:
                enabled:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: true
                  valueType: "boolean"
                  uuid: "enabled2"
            valueType: "org.springframework.boot.web.server.Compression"
            uuid: "compression"
          ssl:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.springframework.boot.web.server.Ssl"
              parameters: []
              propertiesMap:
                clientAuth:
                  sapientType: "ENUM"
                  content: !<regular>
                    value: "NONE"
                  valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
                  uuid: "clientAuth"
            valueType: "org.springframework.boot.web.server.Ssl"
            uuid: "ssl"
          serverHeader:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "string2"
          shutdown:
            sapientType: "ENUM"
            content: !<regular>
              value: "GRACEFUL"
            valueType: "org.springframework.boot.web.server.Shutdown"
            uuid: "shutdown"
      valueType: "org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactory"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.http.server.reactive.JettyHttpHandlerAdapter"
      uuid: "servlet"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.HttpConfiguration"
        parameters: []
      valueType: "org.eclipse.jetty.server.HttpConfiguration"
      uuid: "httpConfiguration"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.server.Http2"
        parameters: []
        propertiesMap:
          enabled:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "enabled"
      valueType: "org.springframework.boot.web.server.Http2"
      uuid: "http2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "enabled"
    - sapientType: "ANY"
      valueType: "org.eclipse.jetty.server.ServerConnector"
      uuid: "serverConnector"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "host1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "ANY"
      valueType: "org.eclipse.jetty.server.ServerConnector"
      uuid: "serverConnector"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int6"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.Server"
        parameters:
        - name: "pool"
          value:
            sapientType: "NULL"
            valueType: "org.eclipse.jetty.util.thread.ThreadPool"
            uuid: "fieldThreadPool"
      valueType: "org.eclipse.jetty.server.Server"
      uuid: "server"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.eclipse.jetty.server.ServerConnector"
      uuid: "serverConnector"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.Server"
        parameters:
        - name: "pool"
          value:
            sapientType: "NULL"
            valueType: "org.eclipse.jetty.util.thread.ThreadPool"
            uuid: "fieldThreadPool"
      valueType: "org.eclipse.jetty.server.Server"
      uuid: "server"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "long"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.eclipse.jetty.ee10.servlet.ServletHolder"
      uuid: "servletHolder"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void6"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.eclipse.jetty.ee10.servlet.ServletContextHandler"
      uuid: "servletContextHandler"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void7"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.eclipse.jetty.ee10.servlet.ServletHolder"
      uuid: "servletHolder"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "/"
      valueType: "java.lang.String"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.server.Compression"
        parameters: []
        propertiesMap:
          enabled:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "enabled2"
      valueType: "org.springframework.boot.web.server.Compression"
      uuid: "compression"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "enabled2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.embedded.jetty.JettyHandlerWrappers"
      uuid: "JettyHandlerWrappers.class"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.server.Handler$Wrapper"
      uuid: "handler.Wrapper"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.server.Compression"
        parameters: []
        propertiesMap:
          enabled:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "enabled2"
      valueType: "org.springframework.boot.web.server.Compression"
      uuid: "compression"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.server.Handler$Wrapper"
      uuid: "handler.Wrapper"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void8"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.eclipse.jetty.ee10.servlet.ServletContextHandler"
      uuid: "servletContextHandler"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.embedded.jetty.JettyHandlerWrappers"
      uuid: "JettyHandlerWrappers.class"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.server.Handler$Wrapper"
      uuid: "handler.Wrapper2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.server.Handler$Wrapper"
      uuid: "handler.Wrapper2"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.server.Handler$Wrapper"
      uuid: "handler.Wrapper"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.Server"
        parameters:
        - name: "pool"
          value:
            sapientType: "NULL"
            valueType: "org.eclipse.jetty.util.thread.ThreadPool"
            uuid: "fieldThreadPool"
      valueType: "org.eclipse.jetty.server.Server"
      uuid: "server"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.server.Handler$Wrapper"
      uuid: "handler.Wrapper2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.server.Ssl"
      uuid: "Ssl.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean6"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.server.Ssl"
        parameters: []
        propertiesMap:
          clientAuth:
            sapientType: "ENUM"
            content: !<regular>
              value: "NONE"
            valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
            uuid: "clientAuth"
      valueType: "org.springframework.boot.web.server.Ssl"
      uuid: "ssl"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.server.Ssl"
        parameters: []
        propertiesMap:
          clientAuth:
            sapientType: "ENUM"
            content: !<regular>
              value: "NONE"
            valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
            uuid: "clientAuth"
      valueType: "org.springframework.boot.web.server.Ssl"
      uuid: "ssl"
    - sapientType: "ENUM"
      content: !<regular>
        value: "NONE"
      valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
      uuid: "clientAuth"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.web.server.WebServerSslBundle"
      uuid: "WebServerSslBundle.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.web.server.Ssl"
      uuid: "fieldSsl"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.ssl.SslBundles"
      uuid: "fieldSslBundles"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer"
        parameters:
        - name: "http2"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.springframework.boot.web.server.Http2"
              parameters: []
              propertiesMap:
                enabled:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: true
                  valueType: "boolean"
                  uuid: "enabled"
            valueType: "org.springframework.boot.web.server.Http2"
            uuid: "http2"
        - name: "address"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.net.InetSocketAddress"
              parameters:
              - name: "addr"
                value:
                  sapientType: "OBJECT"
                  content: !<static_method_return>
                    target: "java.net.InetAddress"
                    method: "getLoopbackAddress"
                    methodParameters: []
                  valueType: "java.net.InetAddress"
                  uuid: "inetAddress"
              - name: "port"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 2
                  valueType: "int"
                  uuid: "int5"
            valueType: "java.net.InetSocketAddress"
            uuid: "inetSocketAddress"
            fixed: true
        - name: "clientAuth"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "NONE"
            valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
            uuid: "clientAuth"
        - name: "sslBundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundle"
            uuid: "sslBundle"
      valueType: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer"
      uuid: "sslServerCustomizer"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void12"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.Server"
        parameters:
        - name: "pool"
          value:
            sapientType: "NULL"
            valueType: "org.eclipse.jetty.util.thread.ThreadPool"
            uuid: "fieldThreadPool"
      valueType: "org.eclipse.jetty.server.Server"
      uuid: "server"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.Server"
        parameters:
        - name: "pool"
          value:
            sapientType: "NULL"
            valueType: "org.eclipse.jetty.util.thread.ThreadPool"
            uuid: "fieldThreadPool"
      valueType: "org.eclipse.jetty.server.Server"
      uuid: "server"
      fixed: true
    - sapientType: "NULL"
      valueType: "org.eclipse.jetty.server.Handler"
      uuid: "handler"
    - sapientType: "ANY"
      valueType: "org.eclipse.jetty.server.handler.StatisticsHandler"
      uuid: "statisticsHandler"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void13"
      fixed: true
    - sapientType: "NULL"
      valueType: "org.eclipse.jetty.server.Handler"
      uuid: "handler"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.Server"
        parameters:
        - name: "pool"
          value:
            sapientType: "NULL"
            valueType: "org.eclipse.jetty.util.thread.ThreadPool"
            uuid: "fieldThreadPool"
      valueType: "org.eclipse.jetty.server.Server"
      uuid: "server"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void14"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.eclipse.jetty.server.handler.StatisticsHandler"
      uuid: "statisticsHandler"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.Server"
        parameters:
        - name: "pool"
          value:
            sapientType: "NULL"
            valueType: "org.eclipse.jetty.util.thread.ThreadPool"
            uuid: "fieldThreadPool"
      valueType: "org.eclipse.jetty.server.Server"
      uuid: "server"
      fixed: true
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.web.server.WebServerFactory"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactory"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.web.embedded.jetty.JettyReactiveWebServerFactory"
      uuid: "uniqueUuid15"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.Server"
        parameters:
        - name: "pool"
          value:
            sapientType: "NULL"
            valueType: "org.eclipse.jetty.util.thread.ThreadPool"
            uuid: "fieldThreadPool"
      valueType: "org.eclipse.jetty.server.Server"
      uuid: "server"
      fixed: true
    branches:
    - lineNumber: 217
      expression: "getHttp2() != null"
      range: "(217,7)-(217,24)"
      evaluatedAs: true
      internalMethodName: "createConnector"
    - lineNumber: 217
      expression: "getHttp2().isEnabled()"
      range: "(217,29)-(217,50)"
      evaluatedAs: true
      internalMethodName: "createConnector"
    - lineNumber: 222
      expression: "resourceFactory != null"
      range: "(222,7)-(222,29)"
      evaluatedAs: false
      internalMethodName: "createConnector"
    - lineNumber: 237
      expression: "getCompression() != null"
      range: "(237,7)-(237,30)"
      evaluatedAs: true
      internalMethodName: "addHandlerWrappers"
    - lineNumber: 237
      expression: "getCompression().getEnabled()"
      range: "(237,35)-(237,63)"
      evaluatedAs: true
      internalMethodName: "addHandlerWrappers"
    - lineNumber: 240
      expression: "StringUtils.hasText(getServerHeader())"
      range: "(240,7)-(240,44)"
      evaluatedAs: true
      internalMethodName: "addHandlerWrappers"
    - lineNumber: 191
      expression: "this.maxConnections > -1"
      range: "(191,7)-(191,30)"
      evaluatedAs: false
    - lineNumber: 194
      expression: "Ssl.isEnabled(getSsl())"
      range: "(194,7)-(194,29)"
      evaluatedAs: true
    - lineNumber: 197
      expression: "for-each(getServerCustomizers())"
      range: "(197,43)-(197,64)"
      evaluatedAs: false
    - lineNumber: 200
      expression: "this.useForwardHeaders"
      range: "(200,7)-(200,28)"
      evaluatedAs: false
    - lineNumber: 203
      expression: "getShutdown() == Shutdown.GRACEFUL"
      range: "(203,7)-(203,40)"
      evaluatedAs: true
