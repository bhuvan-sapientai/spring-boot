---
modelFingerprint: "87882EF4A85B8D1B978F0D45F468DB81"
targetClass:
  fullClassName: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer"
methods:
- method:
    name: "customize"
    sourceCodeSignature: "void customize(Server server)"
    returnType: "void"
    parameters:
    - name: "server"
      type: "org.eclipse.jetty.server.Server"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.IllegalStateException"
    instructionFingerprint: "FEFB3E93A4447FD2C94E4F4F205E684F"
  paths:
  - pathId: "path1"
    testPathName: "customizeWhenThisHttp2NotIsEnabled"
    constructorSignature: "<init>(org.springframework.boot.web.server.Http2,java.net.InetSocketAddress,org.springframework.boot.web.server.Ssl$ClientAuth,org.springframework.boot.ssl.SslBundle)\
      \ : void"
    modelFingerprint: "751BFD62C7C0304D4077834C785E9E8E"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "D153DCDBF8BA0684FAC9C2F2375E7137"
      valueUuid: "target"
    - type: "INPUT"
      name: "server"
      modelFingerprint: "5D5094FC70BFFD09334166E6ED20CD66"
      valueUuid: "server"
    - type: "LOCAL_VARIABLE"
      name: "sslContextFactory"
      modelFingerprint: "26D3B42F8D95C757D6867BAB9B4173DD"
      valueUuid: "sslContextFactory.Server"
      methodExercised:
        expression: "setEndpointIdentificationAlgorithm(endpointIdentificationAlgorithm:uniqueUuid1):void"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "566AB7845F31B1C3D8F87E97E3F88894"
      methodExercised:
        expression: "configureSsl(factory:sslContextFactory.Server,clientAuth:clientAuth):void2"
    - type: "LOCAL_VARIABLE"
      name: "config"
      modelFingerprint: "DC4143981881B87E3004D98BD009067F"
      valueUuid: "httpConfiguration"
      methodExercised:
        expression: "setSendServerVersion(sendServerVersion:uniqueUuid2):void3"
    - type: "LOCAL_VARIABLE"
      name: "config"
      modelFingerprint: "EF7A2596489C656F8B733BEA8B46EB51"
      valueUuid: "httpConfiguration"
      methodExercised:
        expression: "setSecureScheme(secureScheme:uniqueUuid3):void4"
    - type: "LOCAL_VARIABLE"
      name: "config"
      modelFingerprint: "8CA0BF61CFFB85D5714FE403FCD7653D"
      valueUuid: "httpConfiguration"
      methodExercised:
        expression: "setSecurePort(securePort:int1):void5"
    - type: "LOCAL_VARIABLE"
      name: "config"
      modelFingerprint: "B2F0EFFCC0E51A8EF881222E5F8D4ED7"
      valueUuid: "httpConfiguration"
      methodExercised:
        expression: "addCustomizer(customizer:secureRequestCustomizer):void6"
    - type: "FIELD"
      name: "http2"
      modelFingerprint: "2F1EEB8B81C9678D9F31ECFEDE9FF084"
      valueUuid: "http2"
      methodExercised:
        expression: "isEnabled():enabled"
    - type: "FIELD"
      name: "sslBundle"
      modelFingerprint: "2A807357E906B038925C6DE76D96C899"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getKey():sslBundleKey"
    - type: "LOCAL_VARIABLE"
      name: "connector"
      modelFingerprint: "FDFDDE9C459A6AC95BAF0D3AFDBE6FF0"
      valueUuid: "sslServerCustomizer.SslValidatingServerConnector"
      methodExercised:
        expression: "setPort(port:int2):void7"
    - type: "LOCAL_VARIABLE"
      name: "connector"
      modelFingerprint: "17FBF1707333F0DB39882A74710ED1C4"
      valueUuid: "sslServerCustomizer.SslValidatingServerConnector"
      methodExercised:
        expression: "setHost(host:string2):void8"
    - type: "LOCAL_VARIABLE"
      name: "server"
      modelFingerprint: "0DEA8A50D46CC9377E5C5267C442A45D"
      valueUuid: "server"
      methodExercised:
        expression: "setConnectors(connectors:connectorArray):void9"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "sslContextFactory.setEndpointIdentificationAlgorithm(null);"
      lineNumber: 73
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: sslContextFactory - Method: setEndpointIdentificationAlgorithm"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer"
        parameters:
        - name: "http2"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.springframework.boot.web.server.Http2"
              parameters: []
              propertiesMap:
                enabled:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: false
                  valueType: "boolean"
                  uuid: "enabled"
            valueType: "org.springframework.boot.web.server.Http2"
            uuid: "http2"
        - name: "address"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.net.InetSocketAddress"
              parameters:
              - name: "port"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "int"
                  uuid: "address-port"
            valueType: "java.net.InetSocketAddress"
            uuid: "address"
        - name: "clientAuth"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "NONE"
            valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
            uuid: "clientAuth"
        - name: "sslBundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundle"
            uuid: "sslBundle"
      valueType: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.server.Server"
      uuid: "server"
    - sapientType: "ANY"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "sslContextFactory.Server"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid1"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "sslContextFactory.Server"
      fixed: true
    - sapientType: "ENUM"
      content: !<regular>
        value: "NONE"
      valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
      uuid: "clientAuth"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.HttpConfiguration"
        parameters: []
      valueType: "org.eclipse.jetty.server.HttpConfiguration"
      uuid: "httpConfiguration"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.HttpConfiguration"
        parameters: []
      valueType: "org.eclipse.jetty.server.HttpConfiguration"
      uuid: "httpConfiguration"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "https"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.HttpConfiguration"
        parameters: []
      valueType: "org.eclipse.jetty.server.HttpConfiguration"
      uuid: "httpConfiguration"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int1"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.HttpConfiguration"
        parameters: []
      valueType: "org.eclipse.jetty.server.HttpConfiguration"
      uuid: "httpConfiguration"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void6"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.eclipse.jetty.server.SecureRequestCustomizer"
      uuid: "secureRequestCustomizer"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.server.Http2"
        parameters: []
        propertiesMap:
          enabled:
            sapientType: "BASIC"
            content: !<regular>
              value: false
            valueType: "boolean"
            uuid: "enabled"
      valueType: "org.springframework.boot.web.server.Http2"
      uuid: "http2"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "enabled"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer$SslValidatingServerConnector"
        parameters:
        - name: "key"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundleKey"
            uuid: "sslBundleKey"
        - name: "sslContextFactory"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
              parameters: []
            valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
            uuid: "sslContextFactory.Server"
            fixed: true
        - name: "server"
          value:
            sapientType: "MOCK"
            valueType: "org.eclipse.jetty.server.Server"
            uuid: "server"
        - name: "sslConnectionFactory"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.eclipse.jetty.server.SslConnectionFactory"
              parameters:
              - name: "factory"
                value:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                    parameters: []
                  valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                  uuid: "sslContextFactory.Server"
                  fixed: true
              - name: "nextProtocol"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "HTTP/1.1"
                  valueType: "java.lang.String"
                  uuid: "string"
            valueType: "org.eclipse.jetty.server.SslConnectionFactory"
            uuid: "sslConnectionFactory"
            fixed: true
        - name: "connectionFactory"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.eclipse.jetty.server.HttpConnectionFactory"
              parameters:
              - name: "config"
                value:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.server.HttpConfiguration"
                    parameters: []
                  valueType: "org.eclipse.jetty.server.HttpConfiguration"
                  uuid: "httpConfiguration"
                  fixed: true
            valueType: "org.eclipse.jetty.server.HttpConnectionFactory"
            uuid: "httpConnectionFactory"
            fixed: true
      valueType: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer$SslValidatingServerConnector"
      uuid: "sslServerCustomizer.SslValidatingServerConnector"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void7"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer$SslValidatingServerConnector"
        parameters:
        - name: "key"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundleKey"
            uuid: "sslBundleKey"
        - name: "sslContextFactory"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
              parameters: []
            valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
            uuid: "sslContextFactory.Server"
            fixed: true
        - name: "server"
          value:
            sapientType: "MOCK"
            valueType: "org.eclipse.jetty.server.Server"
            uuid: "server"
        - name: "sslConnectionFactory"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.eclipse.jetty.server.SslConnectionFactory"
              parameters:
              - name: "factory"
                value:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                    parameters: []
                  valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                  uuid: "sslContextFactory.Server"
                  fixed: true
              - name: "nextProtocol"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "HTTP/1.1"
                  valueType: "java.lang.String"
                  uuid: "string"
            valueType: "org.eclipse.jetty.server.SslConnectionFactory"
            uuid: "sslConnectionFactory"
            fixed: true
        - name: "connectionFactory"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.eclipse.jetty.server.HttpConnectionFactory"
              parameters:
              - name: "config"
                value:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.server.HttpConfiguration"
                    parameters: []
                  valueType: "org.eclipse.jetty.server.HttpConfiguration"
                  uuid: "httpConfiguration"
                  fixed: true
            valueType: "org.eclipse.jetty.server.HttpConnectionFactory"
            uuid: "httpConnectionFactory"
            fixed: true
      valueType: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer$SslValidatingServerConnector"
      uuid: "sslServerCustomizer.SslValidatingServerConnector"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void8"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "host1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.server.Server"
      uuid: "server"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer$SslValidatingServerConnector"
              parameters:
              - name: "key"
                value:
                  sapientType: "MOCK"
                  valueType: "org.springframework.boot.ssl.SslBundleKey"
                  uuid: "sslBundleKey"
              - name: "sslContextFactory"
                value:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                    parameters: []
                  valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                  uuid: "sslContextFactory.Server"
                  fixed: true
              - name: "server"
                value:
                  sapientType: "MOCK"
                  valueType: "org.eclipse.jetty.server.Server"
                  uuid: "server"
              - name: "sslConnectionFactory"
                value:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.server.SslConnectionFactory"
                    parameters:
                    - name: "factory"
                      value:
                        sapientType: "OBJECT"
                        content: !<new>
                          target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                          parameters: []
                        valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                        uuid: "sslContextFactory.Server"
                        fixed: true
                    - name: "nextProtocol"
                      value:
                        sapientType: "BASIC"
                        content: !<regular>
                          value: "HTTP/1.1"
                        valueType: "java.lang.String"
                        uuid: "string"
                  valueType: "org.eclipse.jetty.server.SslConnectionFactory"
                  uuid: "sslConnectionFactory"
                  fixed: true
              - name: "connectionFactory"
                value:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.server.HttpConnectionFactory"
                    parameters:
                    - name: "config"
                      value:
                        sapientType: "OBJECT"
                        content: !<new>
                          target: "org.eclipse.jetty.server.HttpConfiguration"
                          parameters: []
                        valueType: "org.eclipse.jetty.server.HttpConfiguration"
                        uuid: "httpConfiguration"
                        fixed: true
                  valueType: "org.eclipse.jetty.server.HttpConnectionFactory"
                  uuid: "httpConnectionFactory"
                  fixed: true
            valueType: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer$SslValidatingServerConnector"
            uuid: "sslServerCustomizer.SslValidatingServerConnector"
            fixed: true
      valueType: "org.eclipse.jetty.server.Connector[]"
      uuid: "connectorArray"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 93
      expression: "this.http2 == null"
      range: "(93,7)-(93,24)"
      evaluatedAs: false
      internalMethodName: "createServerConnector"
    - lineNumber: 93
      expression: "!this.http2.isEnabled()"
      range: "(93,29)-(93,51)"
      evaluatedAs: true
      internalMethodName: "createServerConnector"
  - pathId: "path8"
    testPathName: "customizeWhenCaughtIllegalStateExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(org.springframework.boot.web.server.Http2,java.net.InetSocketAddress,org.springframework.boot.web.server.Ssl$ClientAuth,org.springframework.boot.ssl.SslBundle)\
      \ : void"
    modelFingerprint: "E1D1294C2FFFCEAFC77D7D70ECF2F143"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "C24EEAAB3E9DA45B619CE1B4B20C6116"
      valueUuid: "target"
    - type: "INPUT"
      name: "server"
      modelFingerprint: "AA17278BCD9EBF405FE6044E6267D0B6"
      valueUuid: "server"
    - type: "LOCAL_VARIABLE"
      name: "sslContextFactory"
      modelFingerprint: "26D3B42F8D95C757D6867BAB9B4173DD"
      valueUuid: "sslContextFactory.Server"
      methodExercised:
        expression: "setEndpointIdentificationAlgorithm(endpointIdentificationAlgorithm:uniqueUuid4):void"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "566AB7845F31B1C3D8F87E97E3F88894"
      methodExercised:
        expression: "configureSsl(factory:sslContextFactory.Server,clientAuth:clientAuth):void2"
    - type: "LOCAL_VARIABLE"
      name: "config"
      modelFingerprint: "DC4143981881B87E3004D98BD009067F"
      valueUuid: "httpConfiguration"
      methodExercised:
        expression: "setSendServerVersion(sendServerVersion:uniqueUuid5):void3"
    - type: "LOCAL_VARIABLE"
      name: "config"
      modelFingerprint: "EF7A2596489C656F8B733BEA8B46EB51"
      valueUuid: "httpConfiguration"
      methodExercised:
        expression: "setSecureScheme(secureScheme:uniqueUuid6):void4"
    - type: "LOCAL_VARIABLE"
      name: "config"
      modelFingerprint: "8CA0BF61CFFB85D5714FE403FCD7653D"
      valueUuid: "httpConfiguration"
      methodExercised:
        expression: "setSecurePort(securePort:int1):void5"
    - type: "LOCAL_VARIABLE"
      name: "config"
      modelFingerprint: "B2F0EFFCC0E51A8EF881222E5F8D4ED7"
      valueUuid: "httpConfiguration"
      methodExercised:
        expression: "addCustomizer(customizer:secureRequestCustomizer):void6"
    - type: "FIELD"
      name: "http2"
      modelFingerprint: "9E4594DBA1DEFFA6967F6DD1CEA62DED"
      valueUuid: "http2"
      methodExercised:
        expression: "isEnabled():enabled"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "5422D353482892F9435559EA685C5CC9"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid7,classLoader:uniqueUuid8):boolean2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean2,messageSupplier:uniqueUuid9):void7"
        staticAccess: true
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "81E4D305A4ED4111E65CB224A3DAFE41"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid10,classLoader:uniqueUuid11):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean3,messageSupplier:uniqueUuid12):void8"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "6B8FFAE4543183CFD05845834601A645"
      valueUuid: "illegalStateException2"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "sslContextFactory.setEndpointIdentificationAlgorithm(null);"
      lineNumber: 73
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: sslContextFactory - Method: setEndpointIdentificationAlgorithm"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer"
        parameters:
        - name: "http2"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.springframework.boot.web.server.Http2"
              parameters: []
              propertiesMap:
                enabled:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: true
                  valueType: "boolean"
                  uuid: "enabled"
            valueType: "org.springframework.boot.web.server.Http2"
            uuid: "http2"
        - name: "address"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.net.InetSocketAddress"
              parameters:
              - name: "port"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "int"
                  uuid: "address-port"
            valueType: "java.net.InetSocketAddress"
            uuid: "address"
        - name: "clientAuth"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "NONE"
            valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
            uuid: "clientAuth"
        - name: "sslBundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundle"
            uuid: "sslBundle"
      valueType: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.server.Server"
      uuid: "server"
    - sapientType: "ANY"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "sslContextFactory.Server"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid4"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "sslContextFactory.Server"
      fixed: true
    - sapientType: "ENUM"
      content: !<regular>
        value: "NONE"
      valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
      uuid: "clientAuth"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.HttpConfiguration"
        parameters: []
      valueType: "org.eclipse.jetty.server.HttpConfiguration"
      uuid: "httpConfiguration"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.HttpConfiguration"
        parameters: []
      valueType: "org.eclipse.jetty.server.HttpConfiguration"
      uuid: "httpConfiguration"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "https"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.HttpConfiguration"
        parameters: []
      valueType: "org.eclipse.jetty.server.HttpConfiguration"
      uuid: "httpConfiguration"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int1"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.HttpConfiguration"
        parameters: []
      valueType: "org.eclipse.jetty.server.HttpConfiguration"
      uuid: "httpConfiguration"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void6"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.eclipse.jetty.server.SecureRequestCustomizer"
      uuid: "secureRequestCustomizer"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.server.Http2"
        parameters: []
        propertiesMap:
          enabled:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "enabled"
      valueType: "org.springframework.boot.web.server.Http2"
      uuid: "http2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "enabled"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory"
      valueType: "java.lang.String"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid8"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void7"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid9"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory"
      valueType: "java.lang.String"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid11"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void8"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid12"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "An 'org.eclipse.jetty:jetty-alpn-*-server' dependency is required\
                \ for HTTP/2 support."
            valueType: "java.lang.String"
            uuid: "uniqueUuid13"
            fixed: true
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.IllegalStateException"
              parameters: []
            valueType: "java.lang.IllegalStateException"
            uuid: "illegalStateException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException2"
      fixed: true
    branches:
    - lineNumber: 93
      expression: "this.http2 == null"
      range: "(93,7)-(93,24)"
      evaluatedAs: false
      internalMethodName: "createServerConnector"
    - lineNumber: 93
      expression: "!this.http2.isEnabled()"
      range: "(93,29)-(93,51)"
      evaluatedAs: false
      internalMethodName: "createServerConnector"
    - lineNumber: 118
      expression: "ClassUtils.isPresent(\\\"org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory\\\
        \", null)"
      range: "(118,10)-(118,96)"
      evaluatedAs: true
      internalMethodName: "isJettyAlpnPresent"
    - lineNumber: 122
      expression: "ClassUtils.isPresent(\\\"org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory\\\
        \", null)"
      range: "(122,10)-(122,98)"
      evaluatedAs: true
      internalMethodName: "isJettyHttp2Present"
    - lineNumber: 143
      expression: "catch-exception (IllegalStateException)"
      range: "(143,3)-(143,33)"
      evaluatedAs: true
      internalMethodName: "createAlpnServerConnectionFactory"
    catchBlockExercised:
      idExternalInstruction: 17
      id: 1
      catchExceptions:
      - "java.lang.IllegalStateException"
  - pathId: "path6"
    testPathName: "customizeWhenClassUtilsNotIsPresentOrg_eclipse_jetty_http2_server_HTTP2ServerConnectionFactoryNullAndClassUtilsNotIsPre"
    constructorSignature: "<init>(org.springframework.boot.web.server.Http2,java.net.InetSocketAddress,org.springframework.boot.web.server.Ssl$ClientAuth,org.springframework.boot.ssl.SslBundle)\
      \ : void"
    modelFingerprint: "5140040933EE34C6F96461D99F136CEC"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "D153DCDBF8BA0684FAC9C2F2375E7137"
      valueUuid: "target"
    - type: "INPUT"
      name: "server"
      modelFingerprint: "5D5094FC70BFFD09334166E6ED20CD66"
      valueUuid: "server"
    - type: "LOCAL_VARIABLE"
      name: "sslContextFactory"
      modelFingerprint: "26D3B42F8D95C757D6867BAB9B4173DD"
      valueUuid: "sslContextFactory.Server"
      methodExercised:
        expression: "setEndpointIdentificationAlgorithm(endpointIdentificationAlgorithm:uniqueUuid14):void"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "566AB7845F31B1C3D8F87E97E3F88894"
      methodExercised:
        expression: "configureSsl(factory:sslContextFactory.Server,clientAuth:clientAuth):void2"
    - type: "LOCAL_VARIABLE"
      name: "config"
      modelFingerprint: "DC4143981881B87E3004D98BD009067F"
      valueUuid: "httpConfiguration"
      methodExercised:
        expression: "setSendServerVersion(sendServerVersion:uniqueUuid15):void3"
    - type: "LOCAL_VARIABLE"
      name: "config"
      modelFingerprint: "EF7A2596489C656F8B733BEA8B46EB51"
      valueUuid: "httpConfiguration"
      methodExercised:
        expression: "setSecureScheme(secureScheme:uniqueUuid16):void4"
    - type: "LOCAL_VARIABLE"
      name: "config"
      modelFingerprint: "8CA0BF61CFFB85D5714FE403FCD7653D"
      valueUuid: "httpConfiguration"
      methodExercised:
        expression: "setSecurePort(securePort:int1):void5"
    - type: "LOCAL_VARIABLE"
      name: "config"
      modelFingerprint: "B2F0EFFCC0E51A8EF881222E5F8D4ED7"
      valueUuid: "httpConfiguration"
      methodExercised:
        expression: "addCustomizer(customizer:secureRequestCustomizer):void6"
    - type: "FIELD"
      name: "http2"
      modelFingerprint: "9E4594DBA1DEFFA6967F6DD1CEA62DED"
      valueUuid: "http2"
      methodExercised:
        expression: "isEnabled():enabled"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "3539BE2F4094B48590D9AB0C8F6A8FEF"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid17,classLoader:uniqueUuid18):boolean2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "6D5FB5022FA0F8747855BBB24780A9DB"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean2,messageSupplier:uniqueUuid19):void7"
        staticAccess: true
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "B8AD229FD2036F43D6EE8AB2CF2F6403"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid20,classLoader:uniqueUuid21):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "6D5FB5022FA0F8747855BBB24780A9DB"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean3,messageSupplier:uniqueUuid22):void8"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "sslContextFactory"
      modelFingerprint: "CA55B83303270D024418F2806E402ECD"
      valueUuid: "sslContextFactory.Server"
      methodExercised:
        expression: "setCipherComparator(cipherComparator:comparator):void9"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "E1E1ECE54AB5A9BF02C1DF4C91266134"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid23,classLoader:uniqueUuid24):boolean4"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "alpn"
      modelFingerprint: "960A964829731FF36965FC2CAFC045CD"
      valueUuid: "aLPNServerConnectionFactory"
      methodExercised:
        expression: "getProtocol():string"
    - type: "FIELD"
      name: "sslBundle"
      modelFingerprint: "2A807357E906B038925C6DE76D96C899"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getKey():sslBundleKey"
    - type: "LOCAL_VARIABLE"
      name: "connector"
      modelFingerprint: "C138E00CF6F1D8ABF5EEF39866E1ABAC"
      valueUuid: "sslServerCustomizer.SslValidatingServerConnector"
      methodExercised:
        expression: "setPort(port:int2):void10"
    - type: "LOCAL_VARIABLE"
      name: "connector"
      modelFingerprint: "3DA4993E227BB43A59AE54CA361FBE6F"
      valueUuid: "sslServerCustomizer.SslValidatingServerConnector"
      methodExercised:
        expression: "setHost(host:string2):void11"
    - type: "LOCAL_VARIABLE"
      name: "server"
      modelFingerprint: "1C6D63CE302032D3B22DAE30100547F6"
      valueUuid: "server"
      methodExercised:
        expression: "setConnectors(connectors:connectorArray):void12"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "sslContextFactory.setEndpointIdentificationAlgorithm(null);"
      lineNumber: 73
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: sslContextFactory - Method: setEndpointIdentificationAlgorithm"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer"
        parameters:
        - name: "http2"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.springframework.boot.web.server.Http2"
              parameters: []
              propertiesMap:
                enabled:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: true
                  valueType: "boolean"
                  uuid: "enabled"
            valueType: "org.springframework.boot.web.server.Http2"
            uuid: "http2"
        - name: "address"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.net.InetSocketAddress"
              parameters:
              - name: "port"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "int"
                  uuid: "address-port"
            valueType: "java.net.InetSocketAddress"
            uuid: "address"
        - name: "clientAuth"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "NONE"
            valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
            uuid: "clientAuth"
        - name: "sslBundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundle"
            uuid: "sslBundle"
      valueType: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.server.Server"
      uuid: "server"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
        parameters: []
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "sslContextFactory.Server"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid14"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
        parameters: []
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "sslContextFactory.Server"
      fixed: true
    - sapientType: "ENUM"
      content: !<regular>
        value: "NONE"
      valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
      uuid: "clientAuth"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.HttpConfiguration"
        parameters: []
      valueType: "org.eclipse.jetty.server.HttpConfiguration"
      uuid: "httpConfiguration"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid15"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.HttpConfiguration"
        parameters: []
      valueType: "org.eclipse.jetty.server.HttpConfiguration"
      uuid: "httpConfiguration"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "https"
      valueType: "java.lang.String"
      uuid: "uniqueUuid16"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.HttpConfiguration"
        parameters: []
      valueType: "org.eclipse.jetty.server.HttpConfiguration"
      uuid: "httpConfiguration"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int1"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.HttpConfiguration"
        parameters: []
      valueType: "org.eclipse.jetty.server.HttpConfiguration"
      uuid: "httpConfiguration"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void6"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.eclipse.jetty.server.SecureRequestCustomizer"
      uuid: "secureRequestCustomizer"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.server.Http2"
        parameters: []
        propertiesMap:
          enabled:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "enabled"
      valueType: "org.springframework.boot.web.server.Http2"
      uuid: "http2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "enabled"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory"
      valueType: "java.lang.String"
      uuid: "uniqueUuid17"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid18"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void7"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid19"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory"
      valueType: "java.lang.String"
      uuid: "uniqueUuid20"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid21"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void8"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid22"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
        parameters: []
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "sslContextFactory.Server"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_field_return>
        target: "org.eclipse.jetty.http2.HTTP2Cipher"
        fieldName: "COMPARATOR"
      valueType: "java.util.Comparator"
      genericValueType: "java.lang.String"
      uuid: "comparator"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.conscrypt.Conscrypt"
      valueType: "java.lang.String"
      uuid: "uniqueUuid23"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid24"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory"
        parameters:
        - name: "protocols"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "stringArray"
      valueType: "org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory"
      uuid: "aLPNServerConnectionFactory"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProtocol1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer$SslValidatingServerConnector"
        parameters:
        - name: "keyAlias"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundleKey"
            uuid: "sslBundleKey"
        - name: "sslContextFactory"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
              parameters: []
            valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
            uuid: "sslContextFactory.Server"
            fixed: true
        - name: "server"
          value:
            sapientType: "MOCK"
            valueType: "org.eclipse.jetty.server.Server"
            uuid: "server"
        - name: "factories"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.server.SslConnectionFactory"
                    parameters:
                    - name: "factory"
                      value:
                        sapientType: "OBJECT"
                        content: !<new>
                          target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                          parameters: []
                        valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                        uuid: "sslContextFactory.Server"
                        fixed: true
                    - name: "nextProtocol"
                      value:
                        sapientType: "BASIC"
                        content: !<regular>
                          value: "return_of_getProtocol1"
                        valueType: "java.lang.String"
                        uuid: "string"
                  valueType: "org.eclipse.jetty.server.SslConnectionFactory"
                  uuid: "sslConnectionFactory"
                  fixed: true
                1:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory"
                    parameters:
                    - name: "protocols"
                      value:
                        sapientType: "ARRAY"
                        content: !<array>
                          values: {}
                        valueType: "java.lang.String[]"
                        uuid: "stringArray"
                  valueType: "org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory"
                  uuid: "aLPNServerConnectionFactory"
                  fixed: true
                2:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory"
                    parameters:
                    - name: "httpConfiguration"
                      value:
                        sapientType: "OBJECT"
                        content: !<new>
                          target: "org.eclipse.jetty.server.HttpConfiguration"
                          parameters: []
                        valueType: "org.eclipse.jetty.server.HttpConfiguration"
                        uuid: "httpConfiguration"
                        fixed: true
                  valueType: "org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory"
                  uuid: "hTTP2ServerConnectionFactory"
                  fixed: true
                3:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.server.HttpConnectionFactory"
                    parameters:
                    - name: "config"
                      value:
                        sapientType: "OBJECT"
                        content: !<new>
                          target: "org.eclipse.jetty.server.HttpConfiguration"
                          parameters: []
                        valueType: "org.eclipse.jetty.server.HttpConfiguration"
                        uuid: "httpConfiguration"
                        fixed: true
                  valueType: "org.eclipse.jetty.server.HttpConnectionFactory"
                  uuid: "httpConnectionFactory"
                  fixed: true
            valueType: "org.eclipse.jetty.server.ConnectionFactory[]"
            uuid: "connectionFactoryArray"
      valueType: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer$SslValidatingServerConnector"
      uuid: "sslServerCustomizer.SslValidatingServerConnector"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer$SslValidatingServerConnector"
        parameters:
        - name: "keyAlias"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundleKey"
            uuid: "sslBundleKey"
        - name: "sslContextFactory"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
              parameters: []
            valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
            uuid: "sslContextFactory.Server"
            fixed: true
        - name: "server"
          value:
            sapientType: "MOCK"
            valueType: "org.eclipse.jetty.server.Server"
            uuid: "server"
        - name: "factories"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.server.SslConnectionFactory"
                    parameters:
                    - name: "factory"
                      value:
                        sapientType: "OBJECT"
                        content: !<new>
                          target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                          parameters: []
                        valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                        uuid: "sslContextFactory.Server"
                        fixed: true
                    - name: "nextProtocol"
                      value:
                        sapientType: "BASIC"
                        content: !<regular>
                          value: "return_of_getProtocol1"
                        valueType: "java.lang.String"
                        uuid: "string"
                  valueType: "org.eclipse.jetty.server.SslConnectionFactory"
                  uuid: "sslConnectionFactory"
                  fixed: true
                1:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory"
                    parameters:
                    - name: "protocols"
                      value:
                        sapientType: "ARRAY"
                        content: !<array>
                          values: {}
                        valueType: "java.lang.String[]"
                        uuid: "stringArray"
                  valueType: "org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory"
                  uuid: "aLPNServerConnectionFactory"
                  fixed: true
                2:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory"
                    parameters:
                    - name: "httpConfiguration"
                      value:
                        sapientType: "OBJECT"
                        content: !<new>
                          target: "org.eclipse.jetty.server.HttpConfiguration"
                          parameters: []
                        valueType: "org.eclipse.jetty.server.HttpConfiguration"
                        uuid: "httpConfiguration"
                        fixed: true
                  valueType: "org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory"
                  uuid: "hTTP2ServerConnectionFactory"
                  fixed: true
                3:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.server.HttpConnectionFactory"
                    parameters:
                    - name: "config"
                      value:
                        sapientType: "OBJECT"
                        content: !<new>
                          target: "org.eclipse.jetty.server.HttpConfiguration"
                          parameters: []
                        valueType: "org.eclipse.jetty.server.HttpConfiguration"
                        uuid: "httpConfiguration"
                        fixed: true
                  valueType: "org.eclipse.jetty.server.HttpConnectionFactory"
                  uuid: "httpConnectionFactory"
                  fixed: true
            valueType: "org.eclipse.jetty.server.ConnectionFactory[]"
            uuid: "connectionFactoryArray"
      valueType: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer$SslValidatingServerConnector"
      uuid: "sslServerCustomizer.SslValidatingServerConnector"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "host1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.server.Server"
      uuid: "server"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void12"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer$SslValidatingServerConnector"
              parameters:
              - name: "keyAlias"
                value:
                  sapientType: "MOCK"
                  valueType: "org.springframework.boot.ssl.SslBundleKey"
                  uuid: "sslBundleKey"
              - name: "sslContextFactory"
                value:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                    parameters: []
                  valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                  uuid: "sslContextFactory.Server"
                  fixed: true
              - name: "server"
                value:
                  sapientType: "MOCK"
                  valueType: "org.eclipse.jetty.server.Server"
                  uuid: "server"
              - name: "factories"
                value:
                  sapientType: "ARRAY"
                  content: !<array>
                    values:
                      0:
                        sapientType: "OBJECT"
                        content: !<new>
                          target: "org.eclipse.jetty.server.SslConnectionFactory"
                          parameters:
                          - name: "factory"
                            value:
                              sapientType: "OBJECT"
                              content: !<new>
                                target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                                parameters: []
                              valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                              uuid: "sslContextFactory.Server"
                              fixed: true
                          - name: "nextProtocol"
                            value:
                              sapientType: "BASIC"
                              content: !<regular>
                                value: "return_of_getProtocol1"
                              valueType: "java.lang.String"
                              uuid: "string"
                        valueType: "org.eclipse.jetty.server.SslConnectionFactory"
                        uuid: "sslConnectionFactory"
                        fixed: true
                      1:
                        sapientType: "OBJECT"
                        content: !<new>
                          target: "org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory"
                          parameters:
                          - name: "protocols"
                            value:
                              sapientType: "ARRAY"
                              content: !<array>
                                values: {}
                              valueType: "java.lang.String[]"
                              uuid: "stringArray"
                        valueType: "org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory"
                        uuid: "aLPNServerConnectionFactory"
                        fixed: true
                      2:
                        sapientType: "OBJECT"
                        content: !<new>
                          target: "org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory"
                          parameters:
                          - name: "httpConfiguration"
                            value:
                              sapientType: "OBJECT"
                              content: !<new>
                                target: "org.eclipse.jetty.server.HttpConfiguration"
                                parameters: []
                              valueType: "org.eclipse.jetty.server.HttpConfiguration"
                              uuid: "httpConfiguration"
                              fixed: true
                        valueType: "org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory"
                        uuid: "hTTP2ServerConnectionFactory"
                        fixed: true
                      3:
                        sapientType: "OBJECT"
                        content: !<new>
                          target: "org.eclipse.jetty.server.HttpConnectionFactory"
                          parameters:
                          - name: "config"
                            value:
                              sapientType: "OBJECT"
                              content: !<new>
                                target: "org.eclipse.jetty.server.HttpConfiguration"
                                parameters: []
                              valueType: "org.eclipse.jetty.server.HttpConfiguration"
                              uuid: "httpConfiguration"
                              fixed: true
                        valueType: "org.eclipse.jetty.server.HttpConnectionFactory"
                        uuid: "httpConnectionFactory"
                        fixed: true
                  valueType: "org.eclipse.jetty.server.ConnectionFactory[]"
                  uuid: "connectionFactoryArray"
            valueType: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer$SslValidatingServerConnector"
            uuid: "sslServerCustomizer.SslValidatingServerConnector"
            fixed: true
      valueType: "org.eclipse.jetty.server.Connector[]"
      uuid: "connectorArray"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 93
      expression: "this.http2 == null"
      range: "(93,7)-(93,24)"
      evaluatedAs: false
      internalMethodName: "createServerConnector"
    - lineNumber: 93
      expression: "!this.http2.isEnabled()"
      range: "(93,29)-(93,51)"
      evaluatedAs: false
      internalMethodName: "createServerConnector"
    - lineNumber: 118
      expression: "ClassUtils.isPresent(\\\"org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory\\\
        \", null)"
      range: "(118,10)-(118,96)"
      evaluatedAs: false
      internalMethodName: "isJettyAlpnPresent"
    - lineNumber: 122
      expression: "ClassUtils.isPresent(\\\"org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory\\\
        \", null)"
      range: "(122,10)-(122,98)"
      evaluatedAs: false
      internalMethodName: "isJettyHttp2Present"
    - lineNumber: 150
      expression: "ClassUtils.isPresent(\\\"org.conscrypt.Conscrypt\\\", null)"
      range: "(150,10)-(150,62)"
      evaluatedAs: false
      internalMethodName: "isConscryptPresent"
    - lineNumber: 131
      expression: "isConscryptPresent()"
      range: "(131,7)-(131,26)"
      evaluatedAs: false
      internalMethodName: "createHttp2ServerConnector"
  - pathId: "path2"
    testPathName: "customizeWhenIsConscryptPresent"
    constructorSignature: "<init>(org.springframework.boot.web.server.Http2,java.net.InetSocketAddress,org.springframework.boot.web.server.Ssl$ClientAuth,org.springframework.boot.ssl.SslBundle)\
      \ : void"
    modelFingerprint: "E8D3151597BCA20582C450FECBA8F921"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "D153DCDBF8BA0684FAC9C2F2375E7137"
      valueUuid: "target"
    - type: "INPUT"
      name: "server"
      modelFingerprint: "5D5094FC70BFFD09334166E6ED20CD66"
      valueUuid: "server"
    - type: "LOCAL_VARIABLE"
      name: "sslContextFactory"
      modelFingerprint: "26D3B42F8D95C757D6867BAB9B4173DD"
      valueUuid: "sslContextFactory.Server"
      methodExercised:
        expression: "setEndpointIdentificationAlgorithm(endpointIdentificationAlgorithm:uniqueUuid25):void"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "566AB7845F31B1C3D8F87E97E3F88894"
      methodExercised:
        expression: "configureSsl(factory:sslContextFactory.Server,clientAuth:clientAuth):void2"
    - type: "LOCAL_VARIABLE"
      name: "config"
      modelFingerprint: "DC4143981881B87E3004D98BD009067F"
      valueUuid: "httpConfiguration"
      methodExercised:
        expression: "setSendServerVersion(sendServerVersion:uniqueUuid26):void3"
    - type: "LOCAL_VARIABLE"
      name: "config"
      modelFingerprint: "EF7A2596489C656F8B733BEA8B46EB51"
      valueUuid: "httpConfiguration"
      methodExercised:
        expression: "setSecureScheme(secureScheme:uniqueUuid27):void4"
    - type: "LOCAL_VARIABLE"
      name: "config"
      modelFingerprint: "8CA0BF61CFFB85D5714FE403FCD7653D"
      valueUuid: "httpConfiguration"
      methodExercised:
        expression: "setSecurePort(securePort:int1):void5"
    - type: "LOCAL_VARIABLE"
      name: "config"
      modelFingerprint: "B2F0EFFCC0E51A8EF881222E5F8D4ED7"
      valueUuid: "httpConfiguration"
      methodExercised:
        expression: "addCustomizer(customizer:secureRequestCustomizer):void6"
    - type: "FIELD"
      name: "http2"
      modelFingerprint: "9E4594DBA1DEFFA6967F6DD1CEA62DED"
      valueUuid: "http2"
      methodExercised:
        expression: "isEnabled():enabled"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "5422D353482892F9435559EA685C5CC9"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid28,classLoader:uniqueUuid29):boolean2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean2,messageSupplier:uniqueUuid30):void7"
        staticAccess: true
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "81E4D305A4ED4111E65CB224A3DAFE41"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid31,classLoader:uniqueUuid32):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:boolean3,messageSupplier:uniqueUuid33):void8"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "sslContextFactory"
      modelFingerprint: "CA55B83303270D024418F2806E402ECD"
      valueUuid: "sslContextFactory.Server"
      methodExercised:
        expression: "setCipherComparator(cipherComparator:comparator):void9"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "4CD6A3F89CD343507B356A943F493BC2"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid34,classLoader:uniqueUuid35):boolean4"
        staticAccess: true
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "387482AB5DDCE4174C4D83876E3C97AB"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid36,classLoader:uniqueUuid37):boolean5"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "sslContextFactory"
      modelFingerprint: "F9AA725AE0297B83F7D2FD161B6F51CD"
      valueUuid: "sslContextFactory.Server"
      methodExercised:
        expression: "setProvider(provider:uniqueUuid38):void10"
    - type: "LOCAL_VARIABLE"
      name: "alpn"
      modelFingerprint: "960A964829731FF36965FC2CAFC045CD"
      valueUuid: "aLPNServerConnectionFactory"
      methodExercised:
        expression: "getProtocol():string"
    - type: "FIELD"
      name: "sslBundle"
      modelFingerprint: "2A807357E906B038925C6DE76D96C899"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getKey():sslBundleKey"
    - type: "LOCAL_VARIABLE"
      name: "connector"
      modelFingerprint: "C138E00CF6F1D8ABF5EEF39866E1ABAC"
      valueUuid: "sslServerCustomizer.SslValidatingServerConnector"
      methodExercised:
        expression: "setPort(port:int2):void11"
    - type: "LOCAL_VARIABLE"
      name: "connector"
      modelFingerprint: "3DA4993E227BB43A59AE54CA361FBE6F"
      valueUuid: "sslServerCustomizer.SslValidatingServerConnector"
      methodExercised:
        expression: "setHost(host:string2):void12"
    - type: "LOCAL_VARIABLE"
      name: "server"
      modelFingerprint: "1C6D63CE302032D3B22DAE30100547F6"
      valueUuid: "server"
      methodExercised:
        expression: "setConnectors(connectors:connectorArray):void13"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "sslContextFactory.setEndpointIdentificationAlgorithm(null);"
      lineNumber: 73
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: sslContextFactory - Method: setEndpointIdentificationAlgorithm"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer"
        parameters:
        - name: "http2"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.springframework.boot.web.server.Http2"
              parameters: []
              propertiesMap:
                enabled:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: true
                  valueType: "boolean"
                  uuid: "enabled"
            valueType: "org.springframework.boot.web.server.Http2"
            uuid: "http2"
        - name: "address"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.net.InetSocketAddress"
              parameters:
              - name: "port"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "int"
                  uuid: "address-port"
            valueType: "java.net.InetSocketAddress"
            uuid: "address"
        - name: "clientAuth"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "NONE"
            valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
            uuid: "clientAuth"
        - name: "sslBundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundle"
            uuid: "sslBundle"
      valueType: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.server.Server"
      uuid: "server"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
        parameters: []
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "sslContextFactory.Server"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid25"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
        parameters: []
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "sslContextFactory.Server"
      fixed: true
    - sapientType: "ENUM"
      content: !<regular>
        value: "NONE"
      valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
      uuid: "clientAuth"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.HttpConfiguration"
        parameters: []
      valueType: "org.eclipse.jetty.server.HttpConfiguration"
      uuid: "httpConfiguration"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid26"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.HttpConfiguration"
        parameters: []
      valueType: "org.eclipse.jetty.server.HttpConfiguration"
      uuid: "httpConfiguration"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "https"
      valueType: "java.lang.String"
      uuid: "uniqueUuid27"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.HttpConfiguration"
        parameters: []
      valueType: "org.eclipse.jetty.server.HttpConfiguration"
      uuid: "httpConfiguration"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 1
      valueType: "int"
      uuid: "int1"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.server.HttpConfiguration"
        parameters: []
      valueType: "org.eclipse.jetty.server.HttpConfiguration"
      uuid: "httpConfiguration"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void6"
      fixed: true
    - sapientType: "ANY"
      valueType: "org.eclipse.jetty.server.SecureRequestCustomizer"
      uuid: "secureRequestCustomizer"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.server.Http2"
        parameters: []
        propertiesMap:
          enabled:
            sapientType: "BASIC"
            content: !<regular>
              value: true
            valueType: "boolean"
            uuid: "enabled"
      valueType: "org.springframework.boot.web.server.Http2"
      uuid: "http2"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "enabled"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory"
      valueType: "java.lang.String"
      uuid: "uniqueUuid28"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid29"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void7"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid30"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory"
      valueType: "java.lang.String"
      uuid: "uniqueUuid31"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid32"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void8"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid33"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
        parameters: []
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "sslContextFactory.Server"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_field_return>
        target: "org.eclipse.jetty.http2.HTTP2Cipher"
        fieldName: "COMPARATOR"
      valueType: "java.util.Comparator"
      genericValueType: "java.lang.String"
      uuid: "comparator"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.conscrypt.Conscrypt"
      valueType: "java.lang.String"
      uuid: "uniqueUuid34"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid35"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.eclipse.jetty.alpn.conscrypt.server.ConscryptServerALPNProcessor"
      valueType: "java.lang.String"
      uuid: "uniqueUuid36"
      fixed: true
    - sapientType: "NULL"
      uuid: "uniqueUuid37"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
        parameters: []
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "sslContextFactory.Server"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Conscrypt"
      valueType: "java.lang.String"
      uuid: "uniqueUuid38"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory"
        parameters:
        - name: "protocols"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "stringArray"
      valueType: "org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory"
      uuid: "aLPNServerConnectionFactory"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProtocol1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer$SslValidatingServerConnector"
        parameters:
        - name: "keyAlias"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundleKey"
            uuid: "sslBundleKey"
        - name: "sslContextFactory"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
              parameters: []
            valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
            uuid: "sslContextFactory.Server"
            fixed: true
        - name: "server"
          value:
            sapientType: "MOCK"
            valueType: "org.eclipse.jetty.server.Server"
            uuid: "server"
        - name: "factories"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.server.SslConnectionFactory"
                    parameters:
                    - name: "factory"
                      value:
                        sapientType: "OBJECT"
                        content: !<new>
                          target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                          parameters: []
                        valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                        uuid: "sslContextFactory.Server"
                        fixed: true
                    - name: "nextProtocol"
                      value:
                        sapientType: "BASIC"
                        content: !<regular>
                          value: "return_of_getProtocol1"
                        valueType: "java.lang.String"
                        uuid: "string"
                  valueType: "org.eclipse.jetty.server.SslConnectionFactory"
                  uuid: "sslConnectionFactory"
                  fixed: true
                1:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory"
                    parameters:
                    - name: "protocols"
                      value:
                        sapientType: "ARRAY"
                        content: !<array>
                          values: {}
                        valueType: "java.lang.String[]"
                        uuid: "stringArray"
                  valueType: "org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory"
                  uuid: "aLPNServerConnectionFactory"
                  fixed: true
                2:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory"
                    parameters:
                    - name: "httpConfiguration"
                      value:
                        sapientType: "OBJECT"
                        content: !<new>
                          target: "org.eclipse.jetty.server.HttpConfiguration"
                          parameters: []
                        valueType: "org.eclipse.jetty.server.HttpConfiguration"
                        uuid: "httpConfiguration"
                        fixed: true
                  valueType: "org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory"
                  uuid: "hTTP2ServerConnectionFactory"
                  fixed: true
                3:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.server.HttpConnectionFactory"
                    parameters:
                    - name: "config"
                      value:
                        sapientType: "OBJECT"
                        content: !<new>
                          target: "org.eclipse.jetty.server.HttpConfiguration"
                          parameters: []
                        valueType: "org.eclipse.jetty.server.HttpConfiguration"
                        uuid: "httpConfiguration"
                        fixed: true
                  valueType: "org.eclipse.jetty.server.HttpConnectionFactory"
                  uuid: "httpConnectionFactory"
                  fixed: true
            valueType: "org.eclipse.jetty.server.ConnectionFactory[]"
            uuid: "connectionFactoryArray"
      valueType: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer$SslValidatingServerConnector"
      uuid: "sslServerCustomizer.SslValidatingServerConnector"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer$SslValidatingServerConnector"
        parameters:
        - name: "keyAlias"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundleKey"
            uuid: "sslBundleKey"
        - name: "sslContextFactory"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
              parameters: []
            valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
            uuid: "sslContextFactory.Server"
            fixed: true
        - name: "server"
          value:
            sapientType: "MOCK"
            valueType: "org.eclipse.jetty.server.Server"
            uuid: "server"
        - name: "factories"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.server.SslConnectionFactory"
                    parameters:
                    - name: "factory"
                      value:
                        sapientType: "OBJECT"
                        content: !<new>
                          target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                          parameters: []
                        valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                        uuid: "sslContextFactory.Server"
                        fixed: true
                    - name: "nextProtocol"
                      value:
                        sapientType: "BASIC"
                        content: !<regular>
                          value: "return_of_getProtocol1"
                        valueType: "java.lang.String"
                        uuid: "string"
                  valueType: "org.eclipse.jetty.server.SslConnectionFactory"
                  uuid: "sslConnectionFactory"
                  fixed: true
                1:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory"
                    parameters:
                    - name: "protocols"
                      value:
                        sapientType: "ARRAY"
                        content: !<array>
                          values: {}
                        valueType: "java.lang.String[]"
                        uuid: "stringArray"
                  valueType: "org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory"
                  uuid: "aLPNServerConnectionFactory"
                  fixed: true
                2:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory"
                    parameters:
                    - name: "httpConfiguration"
                      value:
                        sapientType: "OBJECT"
                        content: !<new>
                          target: "org.eclipse.jetty.server.HttpConfiguration"
                          parameters: []
                        valueType: "org.eclipse.jetty.server.HttpConfiguration"
                        uuid: "httpConfiguration"
                        fixed: true
                  valueType: "org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory"
                  uuid: "hTTP2ServerConnectionFactory"
                  fixed: true
                3:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.server.HttpConnectionFactory"
                    parameters:
                    - name: "config"
                      value:
                        sapientType: "OBJECT"
                        content: !<new>
                          target: "org.eclipse.jetty.server.HttpConfiguration"
                          parameters: []
                        valueType: "org.eclipse.jetty.server.HttpConfiguration"
                        uuid: "httpConfiguration"
                        fixed: true
                  valueType: "org.eclipse.jetty.server.HttpConnectionFactory"
                  uuid: "httpConnectionFactory"
                  fixed: true
            valueType: "org.eclipse.jetty.server.ConnectionFactory[]"
            uuid: "connectionFactoryArray"
      valueType: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer$SslValidatingServerConnector"
      uuid: "sslServerCustomizer.SslValidatingServerConnector"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void12"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "host1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.server.Server"
      uuid: "server"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void13"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "OBJECT"
            content: !<new>
              target: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer$SslValidatingServerConnector"
              parameters:
              - name: "keyAlias"
                value:
                  sapientType: "MOCK"
                  valueType: "org.springframework.boot.ssl.SslBundleKey"
                  uuid: "sslBundleKey"
              - name: "sslContextFactory"
                value:
                  sapientType: "OBJECT"
                  content: !<new>
                    target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                    parameters: []
                  valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                  uuid: "sslContextFactory.Server"
                  fixed: true
              - name: "server"
                value:
                  sapientType: "MOCK"
                  valueType: "org.eclipse.jetty.server.Server"
                  uuid: "server"
              - name: "factories"
                value:
                  sapientType: "ARRAY"
                  content: !<array>
                    values:
                      0:
                        sapientType: "OBJECT"
                        content: !<new>
                          target: "org.eclipse.jetty.server.SslConnectionFactory"
                          parameters:
                          - name: "factory"
                            value:
                              sapientType: "OBJECT"
                              content: !<new>
                                target: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                                parameters: []
                              valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
                              uuid: "sslContextFactory.Server"
                              fixed: true
                          - name: "nextProtocol"
                            value:
                              sapientType: "BASIC"
                              content: !<regular>
                                value: "return_of_getProtocol1"
                              valueType: "java.lang.String"
                              uuid: "string"
                        valueType: "org.eclipse.jetty.server.SslConnectionFactory"
                        uuid: "sslConnectionFactory"
                        fixed: true
                      1:
                        sapientType: "OBJECT"
                        content: !<new>
                          target: "org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory"
                          parameters:
                          - name: "protocols"
                            value:
                              sapientType: "ARRAY"
                              content: !<array>
                                values: {}
                              valueType: "java.lang.String[]"
                              uuid: "stringArray"
                        valueType: "org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory"
                        uuid: "aLPNServerConnectionFactory"
                        fixed: true
                      2:
                        sapientType: "OBJECT"
                        content: !<new>
                          target: "org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory"
                          parameters:
                          - name: "httpConfiguration"
                            value:
                              sapientType: "OBJECT"
                              content: !<new>
                                target: "org.eclipse.jetty.server.HttpConfiguration"
                                parameters: []
                              valueType: "org.eclipse.jetty.server.HttpConfiguration"
                              uuid: "httpConfiguration"
                              fixed: true
                        valueType: "org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory"
                        uuid: "hTTP2ServerConnectionFactory"
                        fixed: true
                      3:
                        sapientType: "OBJECT"
                        content: !<new>
                          target: "org.eclipse.jetty.server.HttpConnectionFactory"
                          parameters:
                          - name: "config"
                            value:
                              sapientType: "OBJECT"
                              content: !<new>
                                target: "org.eclipse.jetty.server.HttpConfiguration"
                                parameters: []
                              valueType: "org.eclipse.jetty.server.HttpConfiguration"
                              uuid: "httpConfiguration"
                              fixed: true
                        valueType: "org.eclipse.jetty.server.HttpConnectionFactory"
                        uuid: "httpConnectionFactory"
                        fixed: true
                  valueType: "org.eclipse.jetty.server.ConnectionFactory[]"
                  uuid: "connectionFactoryArray"
            valueType: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer$SslValidatingServerConnector"
            uuid: "sslServerCustomizer.SslValidatingServerConnector"
            fixed: true
      valueType: "org.eclipse.jetty.server.Connector[]"
      uuid: "connectorArray"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 93
      expression: "this.http2 == null"
      range: "(93,7)-(93,24)"
      evaluatedAs: false
      internalMethodName: "createServerConnector"
    - lineNumber: 93
      expression: "!this.http2.isEnabled()"
      range: "(93,29)-(93,51)"
      evaluatedAs: false
      internalMethodName: "createServerConnector"
    - lineNumber: 118
      expression: "ClassUtils.isPresent(\\\"org.eclipse.jetty.alpn.server.ALPNServerConnectionFactory\\\
        \", null)"
      range: "(118,10)-(118,96)"
      evaluatedAs: true
      internalMethodName: "isJettyAlpnPresent"
    - lineNumber: 122
      expression: "ClassUtils.isPresent(\\\"org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory\\\
        \", null)"
      range: "(122,10)-(122,98)"
      evaluatedAs: true
      internalMethodName: "isJettyHttp2Present"
    - lineNumber: 150
      expression: "ClassUtils.isPresent(\\\"org.conscrypt.Conscrypt\\\", null)"
      range: "(150,10)-(150,62)"
      evaluatedAs: true
      internalMethodName: "isConscryptPresent"
    - lineNumber: 151
      expression: "ClassUtils.isPresent(\\\"org.eclipse.jetty.alpn.conscrypt.server.ConscryptServerALPNProcessor\\\
        \", null)"
      range: "(151,8)-(151,105)"
      evaluatedAs: true
      internalMethodName: "isConscryptPresent"
    - lineNumber: 131
      expression: "isConscryptPresent()"
      range: "(131,7)-(131,26)"
      evaluatedAs: true
      internalMethodName: "createHttp2ServerConnector"
- method:
    name: "configureSsl"
    sourceCodeSignature: "void configureSsl(SslContextFactory.Server factory, ClientAuth\
      \ clientAuth)"
    returnType: "void"
    parameters:
    - name: "factory"
      type: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
    - name: "clientAuth"
      type: "org.springframework.boot.web.server.Ssl$ClientAuth"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "A720DDD0C9B7E6A3F0ECE36A471F74CD"
  paths:
  - pathId: "path1"
    testPathName: "configureSslWhenKeyGetPasswordIsNotNull"
    constructorSignature: "<init>(org.springframework.boot.web.server.Http2,java.net.InetSocketAddress,org.springframework.boot.web.server.Ssl$ClientAuth,org.springframework.boot.ssl.SslBundle)\
      \ : void"
    modelFingerprint: "FD5C17C92A22E13CA916F959CEE5A063"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "A4657AAE6247FB923C636937E4169583"
      valueUuid: "target"
    - type: "INPUT"
      name: "factory"
      modelFingerprint: "0A20FAD48A722A5D556747772C0B506A"
      valueUuid: "factory"
    - type: "INPUT"
      name: "clientAuth"
      modelFingerprint: "DC18C4586E32A4D5DF19B6914AFB3D12"
      valueUuid: "clientAuth"
    - type: "FIELD"
      name: "sslBundle"
      modelFingerprint: "05C95741D60CC52E644FA75DAC3A57EF"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getKey():sslBundleKey"
    - type: "FIELD"
      name: "sslBundle"
      modelFingerprint: "D30BBA7AB4B917F39097A2A65AF0C706"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getOptions():sslOptions"
    - type: "FIELD"
      name: "sslBundle"
      modelFingerprint: "6C13E539F35C7B8995BE6AFBA7676C41"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getStores():sslStoreBundle"
    - type: "FIELD"
      name: "sslBundle"
      modelFingerprint: "17A2C15CEDCC90D9068854EE1DF1B3CB"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getProtocol():string"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "56E7C61F7024E2A9BF0F24789EEF094A"
      valueUuid: "factory"
      methodExercised:
        expression: "setProtocol(protocol:string):void"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "A357E8ED32109D039034B17F4F18B0DA"
      valueUuid: "factory"
      methodExercised:
        expression: "setWantClientAuth(wantClientAuth:uniqueUuid39):void2"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "6256D6A4BD3A0A1F16F1C66C05176DD8"
      valueUuid: "factory"
      methodExercised:
        expression: "setNeedClientAuth(needClientAuth:uniqueUuid40):void3"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "7DC84945E3BE5ED5AED8206ECBE577AC"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getKeyStorePassword():string2"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "7DC84945E3BE5ED5AED8206ECBE577AC"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getKeyStorePassword():string3"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "8B3C7A499A63C985CD6A68A8785F46CD"
      valueUuid: "factory"
      methodExercised:
        expression: "setKeyStorePassword(password:string3):void4"
    - type: "LOCAL_VARIABLE"
      name: "key"
      modelFingerprint: "F15DAEFDAD5010690CB13DDDF58AC64D"
      valueUuid: "sslBundleKey"
      methodExercised:
        expression: "getAlias():string4"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "AC3A9A1FC2490F2E36B4FFD144BB8C77"
      valueUuid: "factory"
      methodExercised:
        expression: "setCertAlias(certAlias:string4):void5"
    - type: "LOCAL_VARIABLE"
      name: "options"
      modelFingerprint: "0E66F9C360EB6426AC057606DD1A218B"
      valueUuid: "sslOptions"
      methodExercised:
        expression: "getCiphers():stringArray"
    - type: "LOCAL_VARIABLE"
      name: "options"
      modelFingerprint: "0E66F9C360EB6426AC057606DD1A218B"
      valueUuid: "sslOptions"
      methodExercised:
        expression: "getCiphers():stringArray2"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "8C01D0B136F6DCBB7DDBA09A132B174E"
      valueUuid: "factory"
      methodExercised:
        expression: "setIncludeCipherSuites(cipherSuites:stringArray2):void6"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "81883DBD99C8055B2899B09149D29F3E"
      valueUuid: "factory"
      methodExercised:
        expression: "setExcludeCipherSuites(cipherSuites:stringArray3):void7"
    - type: "LOCAL_VARIABLE"
      name: "options"
      modelFingerprint: "64C9161995BBED0B41AB11A83AA25EDC"
      valueUuid: "sslOptions"
      methodExercised:
        expression: "getEnabledProtocols():stringArray4"
    - type: "LOCAL_VARIABLE"
      name: "options"
      modelFingerprint: "64C9161995BBED0B41AB11A83AA25EDC"
      valueUuid: "sslOptions"
      methodExercised:
        expression: "getEnabledProtocols():stringArray5"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "DF94CFDDCC00DA18F5121A2B46173837"
      valueUuid: "factory"
      methodExercised:
        expression: "setIncludeProtocols(protocols:stringArray5):void8"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "02F0954687CAA184DE401B94F7E6CBA8"
      valueUuid: "factory"
      methodExercised:
        expression: "setExcludeProtocols(protocols:stringArray6):void9"
    - type: "LOCAL_VARIABLE"
      name: "key"
      modelFingerprint: "E1682CF1AEA8AE1C035DD187A2F526E1"
      valueUuid: "sslBundleKey"
      methodExercised:
        expression: "getPassword():string5"
    - type: "LOCAL_VARIABLE"
      name: "key"
      modelFingerprint: "E1682CF1AEA8AE1C035DD187A2F526E1"
      valueUuid: "sslBundleKey"
      methodExercised:
        expression: "getPassword():string6"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "8C8F539583CFFF38417024EFF599ACFD"
      valueUuid: "factory"
      methodExercised:
        expression: "setKeyManagerPassword(password:string6):void10"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "F109B046AD4A787DC08F4F076C3768AF"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getKeyStore():keyStore"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "F25652326CDA1D281C80D2A2B12CA8F6"
      valueUuid: "factory"
      methodExercised:
        expression: "setKeyStore(keyStore:keyStore):void11"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "68832D25C9B45D80E917978CB93D4004"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getTrustStore():keyStore2"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "AB72AF84047396AF581B8F84B63E3866"
      valueUuid: "factory"
      methodExercised:
        expression: "setTrustStore(trustStore:keyStore2):void12"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer"
        parameters:
        - name: "http2"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.web.server.Http2"
            uuid: "http2"
        - name: "address"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.net.InetSocketAddress"
              parameters:
              - name: "port"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "int"
                  uuid: "address-port"
            valueType: "java.net.InetSocketAddress"
            uuid: "address"
        - name: "clientAuth"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "NONE"
            valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
            uuid: "clientAuth2"
        - name: "sslBundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundle"
            uuid: "sslBundle"
      valueType: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "ENUM"
      content: !<regular>
        value: "NEED"
      valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
      uuid: "clientAuth"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProtocol1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProtocol1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid39"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid40"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getKeyStorePassword1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getKeyStorePassword1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getKeyStorePassword1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getAlias1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getAlias1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void6"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void7"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray3"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray4"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray5"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void8"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray5"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray6"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getPassword1"
      valueType: "java.lang.String"
      uuid: "string5"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getPassword1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getPassword1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore2"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void12"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore2"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 190
      expression: "clientAuth == ClientAuth.WANT"
      range: "(190,29)-(190,57)"
      evaluatedAs: false
      internalMethodName: "configureSslClientAuth"
    - lineNumber: 190
      expression: "clientAuth == ClientAuth.NEED"
      range: "(190,62)-(190,90)"
      evaluatedAs: true
      internalMethodName: "configureSslClientAuth"
    - lineNumber: 191
      expression: "clientAuth == ClientAuth.NEED"
      range: "(191,29)-(191,57)"
      evaluatedAs: true
      internalMethodName: "configureSslClientAuth"
    - lineNumber: 165
      expression: "stores.getKeyStorePassword() != null"
      range: "(165,7)-(165,42)"
      evaluatedAs: true
    - lineNumber: 169
      expression: "options.getCiphers() != null"
      range: "(169,7)-(169,34)"
      evaluatedAs: true
    - lineNumber: 173
      expression: "options.getEnabledProtocols() != null"
      range: "(173,7)-(173,43)"
      evaluatedAs: true
    - lineNumber: 178
      expression: "key.getPassword() != null"
      range: "(178,8)-(178,32)"
      evaluatedAs: true
  - pathId: "path17"
    testPathName: "configureSslWhenOptionsGetCiphersIsNullAndOptionsGetEnabledProtocolsIsNullAndKeyGetPasswordIsNull3"
    constructorSignature: "<init>(org.springframework.boot.web.server.Http2,java.net.InetSocketAddress,org.springframework.boot.web.server.Ssl$ClientAuth,org.springframework.boot.ssl.SslBundle)\
      \ : void"
    modelFingerprint: "179FED64EF3D727D619FAB372F66F6A1"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "A4657AAE6247FB923C636937E4169583"
      valueUuid: "target"
    - type: "INPUT"
      name: "factory"
      modelFingerprint: "0A20FAD48A722A5D556747772C0B506A"
      valueUuid: "factory"
    - type: "INPUT"
      name: "clientAuth"
      modelFingerprint: "7E8553E7D2194F74C9275DFA6236F07D"
      valueUuid: "clientAuth"
    - type: "FIELD"
      name: "sslBundle"
      modelFingerprint: "05C95741D60CC52E644FA75DAC3A57EF"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getKey():sslBundleKey"
    - type: "FIELD"
      name: "sslBundle"
      modelFingerprint: "D30BBA7AB4B917F39097A2A65AF0C706"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getOptions():sslOptions"
    - type: "FIELD"
      name: "sslBundle"
      modelFingerprint: "6C13E539F35C7B8995BE6AFBA7676C41"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getStores():sslStoreBundle"
    - type: "FIELD"
      name: "sslBundle"
      modelFingerprint: "17A2C15CEDCC90D9068854EE1DF1B3CB"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getProtocol():string"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "56E7C61F7024E2A9BF0F24789EEF094A"
      valueUuid: "factory"
      methodExercised:
        expression: "setProtocol(protocol:string):void"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "592BF9752A0EE52A89DEC93281796519"
      valueUuid: "factory"
      methodExercised:
        expression: "setWantClientAuth(wantClientAuth:uniqueUuid41):void2"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "ABF699EBF94F65B2097139F75D238033"
      valueUuid: "factory"
      methodExercised:
        expression: "setNeedClientAuth(needClientAuth:uniqueUuid42):void3"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "62EE4F6ACA4934FA8F3905A951519511"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getKeyStorePassword():string2"
    - type: "LOCAL_VARIABLE"
      name: "key"
      modelFingerprint: "F15DAEFDAD5010690CB13DDDF58AC64D"
      valueUuid: "sslBundleKey"
      methodExercised:
        expression: "getAlias():string3"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "AC3A9A1FC2490F2E36B4FFD144BB8C77"
      valueUuid: "factory"
      methodExercised:
        expression: "setCertAlias(certAlias:string3):void4"
    - type: "LOCAL_VARIABLE"
      name: "options"
      modelFingerprint: "8FFC4A4F6085AF5EDAA18650876181F9"
      valueUuid: "sslOptions"
      methodExercised:
        expression: "getCiphers():stringArray"
    - type: "LOCAL_VARIABLE"
      name: "options"
      modelFingerprint: "39EDBCFE2AF7D00DF69B1162A38956FB"
      valueUuid: "sslOptions"
      methodExercised:
        expression: "getEnabledProtocols():stringArray2"
    - type: "LOCAL_VARIABLE"
      name: "key"
      modelFingerprint: "9B2427A05D2F37041FEDA37C33044099"
      valueUuid: "sslBundleKey"
      methodExercised:
        expression: "getPassword():string4"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "F109B046AD4A787DC08F4F076C3768AF"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getKeyStore():keyStore"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "F25652326CDA1D281C80D2A2B12CA8F6"
      valueUuid: "factory"
      methodExercised:
        expression: "setKeyStore(keyStore:keyStore):void5"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "68832D25C9B45D80E917978CB93D4004"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getTrustStore():keyStore2"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "AB72AF84047396AF581B8F84B63E3866"
      valueUuid: "factory"
      methodExercised:
        expression: "setTrustStore(trustStore:keyStore2):void6"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer"
        parameters:
        - name: "http2"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.web.server.Http2"
            uuid: "http2"
        - name: "address"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.net.InetSocketAddress"
              parameters:
              - name: "port"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "int"
                  uuid: "address-port"
            valueType: "java.net.InetSocketAddress"
            uuid: "address"
        - name: "clientAuth"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "NONE"
            valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
            uuid: "clientAuth2"
        - name: "sslBundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundle"
            uuid: "sslBundle"
      valueType: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "ENUM"
      content: !<regular>
        value: "NONE"
      valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
      uuid: "clientAuth"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProtocol1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProtocol1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid41"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid42"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getAlias1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getAlias1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "NULL"
      valueType: "java.lang.String[]"
      uuid: "stringArray"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "NULL"
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore2"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore2"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 190
      expression: "clientAuth == ClientAuth.WANT"
      range: "(190,29)-(190,57)"
      evaluatedAs: false
      internalMethodName: "configureSslClientAuth"
    - lineNumber: 190
      expression: "clientAuth == ClientAuth.NEED"
      range: "(190,62)-(190,90)"
      evaluatedAs: false
      internalMethodName: "configureSslClientAuth"
    - lineNumber: 191
      expression: "clientAuth == ClientAuth.NEED"
      range: "(191,29)-(191,57)"
      evaluatedAs: false
      internalMethodName: "configureSslClientAuth"
    - lineNumber: 165
      expression: "stores.getKeyStorePassword() != null"
      range: "(165,7)-(165,42)"
      evaluatedAs: false
    - lineNumber: 169
      expression: "options.getCiphers() != null"
      range: "(169,7)-(169,34)"
      evaluatedAs: false
    - lineNumber: 173
      expression: "options.getEnabledProtocols() != null"
      range: "(173,7)-(173,43)"
      evaluatedAs: false
    - lineNumber: 178
      expression: "key.getPassword() != null"
      range: "(178,8)-(178,32)"
      evaluatedAs: false
  - pathId: "path19"
    testPathName: "configureSslWhenKeyGetPasswordIsNotNullAndCaughtExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(org.springframework.boot.web.server.Http2,java.net.InetSocketAddress,org.springframework.boot.web.server.Ssl$ClientAuth,org.springframework.boot.ssl.SslBundle)\
      \ : void"
    modelFingerprint: "A114FB89C99DB5ABB3AF643D4AEFE1D0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "63E7BF563C548AEF3EDD3F6EF2094991"
      valueUuid: "target"
    - type: "INPUT"
      name: "factory"
      modelFingerprint: "0A20FAD48A722A5D556747772C0B506A"
      valueUuid: "factory"
    - type: "INPUT"
      name: "clientAuth"
      modelFingerprint: "DC18C4586E32A4D5DF19B6914AFB3D12"
      valueUuid: "clientAuth"
    - type: "FIELD"
      name: "sslBundle"
      modelFingerprint: "AC03D56CD3AC852C24A7749069069E21"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getKey():sslBundleKey"
    - type: "FIELD"
      name: "sslBundle"
      modelFingerprint: "8DE5D1C99ED124C264ACB42F3EC750A8"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getOptions():sslOptions"
    - type: "FIELD"
      name: "sslBundle"
      modelFingerprint: "08E5BCBEF81DDA066E8F73D8C0B34BF6"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getStores():sslStoreBundle"
    - type: "FIELD"
      name: "sslBundle"
      modelFingerprint: "E6FE3B048BF2A5C2DB50FA3F6DF1AF11"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getProtocol():string"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "56E7C61F7024E2A9BF0F24789EEF094A"
      valueUuid: "factory"
      methodExercised:
        expression: "setProtocol(protocol:string):void"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "A357E8ED32109D039034B17F4F18B0DA"
      valueUuid: "factory"
      methodExercised:
        expression: "setWantClientAuth(wantClientAuth:uniqueUuid1):void2"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "6256D6A4BD3A0A1F16F1C66C05176DD8"
      valueUuid: "factory"
      methodExercised:
        expression: "setNeedClientAuth(needClientAuth:uniqueUuid2):void3"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "7DC84945E3BE5ED5AED8206ECBE577AC"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getKeyStorePassword():string2"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "7DC84945E3BE5ED5AED8206ECBE577AC"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getKeyStorePassword():string3"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "8B3C7A499A63C985CD6A68A8785F46CD"
      valueUuid: "factory"
      methodExercised:
        expression: "setKeyStorePassword(password:string3):void4"
    - type: "LOCAL_VARIABLE"
      name: "key"
      modelFingerprint: "F15DAEFDAD5010690CB13DDDF58AC64D"
      valueUuid: "sslBundleKey"
      methodExercised:
        expression: "getAlias():string4"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "AC3A9A1FC2490F2E36B4FFD144BB8C77"
      valueUuid: "factory"
      methodExercised:
        expression: "setCertAlias(certAlias:string4):void5"
    - type: "LOCAL_VARIABLE"
      name: "options"
      modelFingerprint: "0E66F9C360EB6426AC057606DD1A218B"
      valueUuid: "sslOptions"
      methodExercised:
        expression: "getCiphers():stringArray"
    - type: "LOCAL_VARIABLE"
      name: "options"
      modelFingerprint: "0E66F9C360EB6426AC057606DD1A218B"
      valueUuid: "sslOptions"
      methodExercised:
        expression: "getCiphers():stringArray2"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "8C01D0B136F6DCBB7DDBA09A132B174E"
      valueUuid: "factory"
      methodExercised:
        expression: "setIncludeCipherSuites(cipherSuites:stringArray2):void6"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "81883DBD99C8055B2899B09149D29F3E"
      valueUuid: "factory"
      methodExercised:
        expression: "setExcludeCipherSuites(cipherSuites:stringArray3):void7"
    - type: "LOCAL_VARIABLE"
      name: "options"
      modelFingerprint: "64C9161995BBED0B41AB11A83AA25EDC"
      valueUuid: "sslOptions"
      methodExercised:
        expression: "getEnabledProtocols():stringArray4"
    - type: "LOCAL_VARIABLE"
      name: "options"
      modelFingerprint: "64C9161995BBED0B41AB11A83AA25EDC"
      valueUuid: "sslOptions"
      methodExercised:
        expression: "getEnabledProtocols():stringArray5"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "DF94CFDDCC00DA18F5121A2B46173837"
      valueUuid: "factory"
      methodExercised:
        expression: "setIncludeProtocols(protocols:stringArray5):void8"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "02F0954687CAA184DE401B94F7E6CBA8"
      valueUuid: "factory"
      methodExercised:
        expression: "setExcludeProtocols(protocols:stringArray6):void9"
    - type: "LOCAL_VARIABLE"
      name: "key"
      modelFingerprint: "E1682CF1AEA8AE1C035DD187A2F526E1"
      valueUuid: "sslBundleKey"
      methodExercised:
        expression: "getPassword():string5"
    - type: "LOCAL_VARIABLE"
      name: "key"
      modelFingerprint: "E1682CF1AEA8AE1C035DD187A2F526E1"
      valueUuid: "sslBundleKey"
      methodExercised:
        expression: "getPassword():string6"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "8C8F539583CFFF38417024EFF599ACFD"
      valueUuid: "factory"
      methodExercised:
        expression: "setKeyManagerPassword(password:string6):void10"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "F109B046AD4A787DC08F4F076C3768AF"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getKeyStore():keyStore"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "F25652326CDA1D281C80D2A2B12CA8F6"
      valueUuid: "factory"
      methodExercised:
        expression: "setKeyStore(keyStore:keyStore):void11"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "68832D25C9B45D80E917978CB93D4004"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getTrustStore():keyStore2"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "35F1C6C835BCDA1569978381E45DFD50"
      valueUuid: "factory"
      methodExercised:
        expression: "setTrustStore(trustStore:keyStore2):void12"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "805947BA7D92D933FA38DB37DB86347A"
      valueUuid: "illegalStateException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer"
        parameters:
        - name: "http2"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.web.server.Http2"
            uuid: "http2"
        - name: "address"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.net.InetSocketAddress"
              parameters:
              - name: "port"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "int"
                  uuid: "address-port"
            valueType: "java.net.InetSocketAddress"
            uuid: "address"
        - name: "clientAuth"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "NONE"
            valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
            uuid: "clientAuth2"
        - name: "sslBundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundle"
            uuid: "sslBundle"
      valueType: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "ENUM"
      content: !<regular>
        value: "NEED"
      valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
      uuid: "clientAuth"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProtocol1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProtocol1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getKeyStorePassword1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getKeyStorePassword1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getKeyStorePassword1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getAlias1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getAlias1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void6"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void7"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray3"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray4"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray5"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void8"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray5"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray6"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getPassword1"
      valueType: "java.lang.String"
      uuid: "string5"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getPassword1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getPassword1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore2"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.RuntimeException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "message"
      valueType: "java.lang.RuntimeException"
      uuid: "void12"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore2"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Unable to set SSL store: A"
            valueType: "java.lang.String"
            uuid: "string8"
        - name: "cause"
          value:
            sapientType: "EXCEPTION"
            content: !<new>
              target: "java.lang.RuntimeException"
              parameters:
              - name: "message"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "A"
                  valueType: "java.lang.String"
                  uuid: "message"
            valueType: "java.lang.RuntimeException"
            uuid: "void12"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 190
      expression: "clientAuth == ClientAuth.WANT"
      range: "(190,29)-(190,57)"
      evaluatedAs: false
      internalMethodName: "configureSslClientAuth"
    - lineNumber: 190
      expression: "clientAuth == ClientAuth.NEED"
      range: "(190,62)-(190,90)"
      evaluatedAs: true
      internalMethodName: "configureSslClientAuth"
    - lineNumber: 191
      expression: "clientAuth == ClientAuth.NEED"
      range: "(191,29)-(191,57)"
      evaluatedAs: true
      internalMethodName: "configureSslClientAuth"
    - lineNumber: 165
      expression: "stores.getKeyStorePassword() != null"
      range: "(165,7)-(165,42)"
      evaluatedAs: true
    - lineNumber: 169
      expression: "options.getCiphers() != null"
      range: "(169,7)-(169,34)"
      evaluatedAs: true
    - lineNumber: 173
      expression: "options.getEnabledProtocols() != null"
      range: "(173,7)-(173,43)"
      evaluatedAs: true
    - lineNumber: 178
      expression: "key.getPassword() != null"
      range: "(178,8)-(178,32)"
      evaluatedAs: true
    - lineNumber: 184
      expression: "catch-exception (Exception)"
      range: "(184,3)-(184,21)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path28"
    testPathName: "configureSslWhenOptionsGetEnabledProtocolsIsNullAndKeyGetPasswordIsNullAndCaughtException4ThrowsIllegalStateException"
    constructorSignature: "<init>(org.springframework.boot.web.server.Http2,java.net.InetSocketAddress,org.springframework.boot.web.server.Ssl$ClientAuth,org.springframework.boot.ssl.SslBundle)\
      \ : void"
    modelFingerprint: "28625D63ACC1693E39473D2BF4C5AA90"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "63E7BF563C548AEF3EDD3F6EF2094991"
      valueUuid: "target"
    - type: "INPUT"
      name: "factory"
      modelFingerprint: "0A20FAD48A722A5D556747772C0B506A"
      valueUuid: "factory"
    - type: "INPUT"
      name: "clientAuth"
      modelFingerprint: "7E8553E7D2194F74C9275DFA6236F07D"
      valueUuid: "clientAuth"
    - type: "FIELD"
      name: "sslBundle"
      modelFingerprint: "AC03D56CD3AC852C24A7749069069E21"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getKey():sslBundleKey"
    - type: "FIELD"
      name: "sslBundle"
      modelFingerprint: "8DE5D1C99ED124C264ACB42F3EC750A8"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getOptions():sslOptions"
    - type: "FIELD"
      name: "sslBundle"
      modelFingerprint: "08E5BCBEF81DDA066E8F73D8C0B34BF6"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getStores():sslStoreBundle"
    - type: "FIELD"
      name: "sslBundle"
      modelFingerprint: "E6FE3B048BF2A5C2DB50FA3F6DF1AF11"
      valueUuid: "sslBundle"
      methodExercised:
        expression: "getProtocol():string"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "56E7C61F7024E2A9BF0F24789EEF094A"
      valueUuid: "factory"
      methodExercised:
        expression: "setProtocol(protocol:string):void"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "592BF9752A0EE52A89DEC93281796519"
      valueUuid: "factory"
      methodExercised:
        expression: "setWantClientAuth(wantClientAuth:uniqueUuid1):void2"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "ABF699EBF94F65B2097139F75D238033"
      valueUuid: "factory"
      methodExercised:
        expression: "setNeedClientAuth(needClientAuth:uniqueUuid2):void3"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "62EE4F6ACA4934FA8F3905A951519511"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getKeyStorePassword():string2"
    - type: "LOCAL_VARIABLE"
      name: "key"
      modelFingerprint: "F15DAEFDAD5010690CB13DDDF58AC64D"
      valueUuid: "sslBundleKey"
      methodExercised:
        expression: "getAlias():string3"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "AC3A9A1FC2490F2E36B4FFD144BB8C77"
      valueUuid: "factory"
      methodExercised:
        expression: "setCertAlias(certAlias:string3):void4"
    - type: "LOCAL_VARIABLE"
      name: "options"
      modelFingerprint: "8FFC4A4F6085AF5EDAA18650876181F9"
      valueUuid: "sslOptions"
      methodExercised:
        expression: "getCiphers():stringArray"
    - type: "LOCAL_VARIABLE"
      name: "options"
      modelFingerprint: "39EDBCFE2AF7D00DF69B1162A38956FB"
      valueUuid: "sslOptions"
      methodExercised:
        expression: "getEnabledProtocols():stringArray2"
    - type: "LOCAL_VARIABLE"
      name: "key"
      modelFingerprint: "9B2427A05D2F37041FEDA37C33044099"
      valueUuid: "sslBundleKey"
      methodExercised:
        expression: "getPassword():string4"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "F109B046AD4A787DC08F4F076C3768AF"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getKeyStore():keyStore"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "F25652326CDA1D281C80D2A2B12CA8F6"
      valueUuid: "factory"
      methodExercised:
        expression: "setKeyStore(keyStore:keyStore):void5"
    - type: "LOCAL_VARIABLE"
      name: "stores"
      modelFingerprint: "68832D25C9B45D80E917978CB93D4004"
      valueUuid: "sslStoreBundle"
      methodExercised:
        expression: "getTrustStore():keyStore2"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "35F1C6C835BCDA1569978381E45DFD50"
      valueUuid: "factory"
      methodExercised:
        expression: "setTrustStore(trustStore:keyStore2):void6"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "805947BA7D92D933FA38DB37DB86347A"
      valueUuid: "illegalStateException"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer"
        parameters:
        - name: "http2"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.web.server.Http2"
            uuid: "http2"
        - name: "address"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.net.InetSocketAddress"
              parameters:
              - name: "port"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: 0
                  valueType: "int"
                  uuid: "address-port"
            valueType: "java.net.InetSocketAddress"
            uuid: "address"
        - name: "clientAuth"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "NONE"
            valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
            uuid: "clientAuth2"
        - name: "sslBundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundle"
            uuid: "sslBundle"
      valueType: "org.springframework.boot.web.embedded.jetty.SslServerCustomizer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "ENUM"
      content: !<regular>
        value: "NONE"
      valueType: "org.springframework.boot.web.server.Ssl$ClientAuth"
      uuid: "clientAuth"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProtocol1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getProtocol1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getAlias1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getAlias1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "NULL"
      valueType: "java.lang.String[]"
      uuid: "stringArray"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslOptions"
      uuid: "sslOptions"
    - sapientType: "NULL"
      valueType: "java.lang.String[]"
      uuid: "stringArray2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "sslBundleKey"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "sslStoreBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore2"
    - sapientType: "MOCK"
      valueType: "org.eclipse.jetty.util.ssl.SslContextFactory$Server"
      uuid: "factory"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.RuntimeException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "message"
      valueType: "java.lang.RuntimeException"
      uuid: "void6"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore2"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Unable to set SSL store: A"
            valueType: "java.lang.String"
            uuid: "string6"
        - name: "cause"
          value:
            sapientType: "EXCEPTION"
            content: !<new>
              target: "java.lang.RuntimeException"
              parameters:
              - name: "message"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "A"
                  valueType: "java.lang.String"
                  uuid: "message"
            valueType: "java.lang.RuntimeException"
            uuid: "void6"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 190
      expression: "clientAuth == ClientAuth.WANT"
      range: "(190,29)-(190,57)"
      evaluatedAs: false
      internalMethodName: "configureSslClientAuth"
    - lineNumber: 190
      expression: "clientAuth == ClientAuth.NEED"
      range: "(190,62)-(190,90)"
      evaluatedAs: false
      internalMethodName: "configureSslClientAuth"
    - lineNumber: 191
      expression: "clientAuth == ClientAuth.NEED"
      range: "(191,29)-(191,57)"
      evaluatedAs: false
      internalMethodName: "configureSslClientAuth"
    - lineNumber: 165
      expression: "stores.getKeyStorePassword() != null"
      range: "(165,7)-(165,42)"
      evaluatedAs: false
    - lineNumber: 169
      expression: "options.getCiphers() != null"
      range: "(169,7)-(169,34)"
      evaluatedAs: false
    - lineNumber: 173
      expression: "options.getEnabledProtocols() != null"
      range: "(173,7)-(173,43)"
      evaluatedAs: false
    - lineNumber: 178
      expression: "key.getPassword() != null"
      range: "(178,8)-(178,32)"
      evaluatedAs: false
    - lineNumber: 184
      expression: "catch-exception (Exception)"
      range: "(184,3)-(184,21)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
