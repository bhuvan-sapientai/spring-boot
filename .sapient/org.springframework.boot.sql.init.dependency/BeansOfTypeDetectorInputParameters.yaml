---
modelFingerprint: "A41820942F7DAD72B6FFD3AD6659D587"
targetClass:
  fullClassName: "org.springframework.boot.sql.init.dependency.BeansOfTypeDetector"
methods:
- method:
    name: "detect"
    sourceCodeSignature: "Set<String> detect(ListableBeanFactory beanFactory)"
    returnType: "java.util.Set"
    genericReturnType: "java.lang.String"
    parameters:
    - name: "beanFactory"
      type: "org.springframework.beans.factory.ListableBeanFactory"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Throwable"
    instructionFingerprint: "764D5205490DD2A98A813DE67077E101"
  paths:
  - pathId: "path1"
    testPathName: "detectWhenThisTypesIsNotEmpty"
    constructorSignature: "<init>(java.util.Set<java.lang.Class<?>>) : void"
    modelFingerprint: "873993B6CCFCB1C41B686F07AE26C72D"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "A97FD3B95884A32297A25A65F84CB370"
      valueUuid: "target"
    - type: "INPUT"
      name: "beanFactory"
      modelFingerprint: "0B7BEBB57ADCDFE5528729FCB9BB18E4"
      valueUuid: "beanFactory"
    - type: "LOCAL_VARIABLE"
      name: "beanFactory"
      modelFingerprint: "0672E145F8CD4E2FB46F30825828D2A9"
      valueUuid: "beanFactory"
      methodExercised:
        expression: "getBeanNamesForType(type:object,includeNonSingletons:uniqueUuid1,allowEagerInit:uniqueUuid2):stringArray"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "798BFA639F7FCD07221E402032DA4756"
      valueUuid: "hashSet"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.sql.init.dependency.BeansOfTypeDetector"
        parameters:
        - name: "types"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.HashSet"
              parameters: []
              values:
              - sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "object"
                collectionUuid: "types"
            valueType: "java.util.Set"
            genericValueType: "java.lang.Class<?>"
            uuid: "types"
      valueType: "org.springframework.boot.sql.init.dependency.BeansOfTypeDetector"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.ListableBeanFactory"
      uuid: "beanFactory"
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.ListableBeanFactory"
      uuid: "beanFactory"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "object"
      collectionUuid: "types"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashSet"
        parameters: []
        values: []
      valueType: "java.util.Set"
      genericValueType: "java.lang.String"
      uuid: "hashSet"
    branches:
    - lineNumber: 41
      expression: "for-each(this.types)"
      range: "(41,24)-(41,33)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "detectWhenCaughtThrowable"
    constructorSignature: "<init>(java.util.Set<java.lang.Class<?>>) : void"
    modelFingerprint: "036BEEF36BF2B36D9650150DA2B7E808"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "D44208E980F06D5AB4726881280606BB"
      valueUuid: "target"
    - type: "INPUT"
      name: "beanFactory"
      modelFingerprint: "0B7BEBB57ADCDFE5528729FCB9BB18E4"
      valueUuid: "beanFactory"
    - type: "LOCAL_VARIABLE"
      name: "beanFactory"
      modelFingerprint: "D6E96962363DA62B927E065EDF7F95C0"
      valueUuid: "beanFactory"
      methodExercised:
        expression: "getBeanNamesForType(type:object,includeNonSingletons:uniqueUuid3,allowEagerInit:uniqueUuid4):stringArray"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "798BFA639F7FCD07221E402032DA4756"
      valueUuid: "hashSet"
    disabled: false
    failureReason:
      reason: "DEPENDENCY_TO_THROW_EXCEPTION_NOT_FOUND"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.sql.init.dependency.BeansOfTypeDetector"
        parameters:
        - name: "types"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.HashSet"
              parameters: []
              values:
              - sapientType: "CLASS"
                content: !<regular>
                  value: "java.lang.Object"
                valueType: "java.lang.Class"
                genericValueType: "?"
                uuid: "object"
                collectionUuid: "types"
            valueType: "java.util.Set"
            genericValueType: "java.lang.Class<?>"
            uuid: "types"
      valueType: "org.springframework.boot.sql.init.dependency.BeansOfTypeDetector"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.ListableBeanFactory"
      uuid: "beanFactory"
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.ListableBeanFactory"
      uuid: "beanFactory"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.String[]"
      uuid: "stringArray"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "object"
      collectionUuid: "types"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashSet"
        parameters: []
        values: []
      valueType: "java.util.Set"
      genericValueType: "java.lang.String"
      uuid: "hashSet"
    branches:
    - lineNumber: 41
      expression: "for-each(this.types)"
      range: "(41,24)-(41,33)"
      evaluatedAs: true
    - lineNumber: 46
      expression: "catch-exception (Throwable)"
      range: "(46,4)-(46,22)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Throwable"
