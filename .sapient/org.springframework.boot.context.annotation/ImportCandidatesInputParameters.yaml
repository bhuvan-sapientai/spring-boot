---
modelFingerprint: "D210EA4011A0A2F6C38135BB208E242A"
targetClass:
  fullClassName: "org.springframework.boot.context.annotation.ImportCandidates"
methods:
- method:
    name: "iterator"
    sourceCodeSignature: "Iterator<String> iterator()"
    returnType: "java.util.Iterator"
    genericReturnType: "java.lang.String"
    instructionFingerprint: "3CA4549606465541CB1A3EBA35E8D2F7"
  paths:
  - pathId: "path1"
    testPathName: "iteratorTest"
    constructorSignature: "load(java.lang.Class<?>,java.lang.ClassLoader) : org.springframework.boot.context.annotation.ImportCandidates"
    modelFingerprint: "3F89A6D116E9407DAA80196A93F731B4"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "STATIC_FACTORY_METHOD"
      modelFingerprint: "9AD3C7C09431A794C2A674C90ADA94C9"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "CD2CD4F84A17E82665DD46E0612274B1"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:annotation,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "8E5683968F763D9EDF3A4CFF5F11BF86"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:arrayList,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "7AEAA800698C4BD6C9D7A0352B269638"
      valueUuid: "iteratorNotNull"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.annotation.ImportCandidates"
        method: "load"
        methodParameters:
        - name: "annotation"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            genericValueType: "?"
            uuid: "annotation"
        - name: "classLoader"
          value:
            sapientType: "NULL"
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
            fixed: true
      valueType: "org.springframework.boot.context.annotation.ImportCandidates"
      uuid: "target"
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "annotation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "'annotation' must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "arrayList"
    - sapientType: "BASIC"
      content: !<regular>
        value: "'candidates' must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "NOT_NULL"
      valueType: "java.util.Iterator"
      genericValueType: "java.lang.String"
      uuid: "iteratorNotNull"
      fixed: true
      collectionUuid: "list"
    calledSomeStaticInternalMethod: true
- method:
    name: "getCandidates"
    sourceCodeSignature: "List<String> getCandidates()"
    returnType: "java.util.List"
    genericReturnType: "java.lang.String"
    instructionFingerprint: "5C230A06D6291E4C45897248C5DD0402"
  paths:
  - pathId: "path1"
    testPathName: "getCandidatesTest"
    constructorSignature: "load(java.lang.Class<?>,java.lang.ClassLoader) : org.springframework.boot.context.annotation.ImportCandidates"
    modelFingerprint: "2B7A944EEC4539DA391740DB6C79006A"
    problemWasSolvedByProver: false
    inputParameters: []
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "new InputStreamReader(new UrlResource(url).getInputStream(), StandardCharsets.UTF_8)))\
        \ {"
      lineNumber: 111
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type UrlResource - Method: getInputStream"
    allValues: []
    calledSomeStaticInternalMethod: true
- method:
    name: "load"
    sourceCodeSignature: "ImportCandidates load(Class<?> annotation, ClassLoader classLoader)"
    returnType: "org.springframework.boot.context.annotation.ImportCandidates"
    parameters:
    - name: "annotation"
      type: "java.lang.Class"
    - name: "classLoader"
      type: "java.lang.ClassLoader"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.io.IOException"
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Throwable"
    - idExternalInstruction: 0
      id: 3
      catchExceptions:
      - "java.lang.Throwable"
    - idExternalInstruction: 0
      id: 4
      catchExceptions:
      - "java.io.IOException"
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.io.IOException"
    instructionFingerprint: "B9991BA7C5152D55052F90CC0107E16C"
  paths:
  - pathId: "path11"
    testPathName: "loadWhenCaughtIOExceptionThrowsIllegalArgumentException"
    modelFingerprint: "1C3F842D0A61B951F953ABBA3F3F190A"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "annotation"
      modelFingerprint: "2837B4E60B07BC15DD2D411C9770B691"
      valueUuid: "annotation"
    - type: "INPUT"
      name: "classLoader"
      modelFingerprint: "466BDB8F17944AE9DC0AF76E5495F31E"
      valueUuid: "classLoader"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "CD2CD4F84A17E82665DD46E0612274B1"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:annotation,message:uniqueUuid1):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "classLoader"
      modelFingerprint: "8B4030FEFEAA8B9AC4F09545FA95A02E"
      valueUuid: "classLoader2"
      methodExercised:
        expression: "getResources(name:string2):enumeration"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "9011906DFC38EEFEEE0D0B19E5BEDEBD"
      valueUuid: "illegalArgumentException"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "annotation"
    - sapientType: "NULL"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "annotation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "'annotation' must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader2"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.io.IOException"
        parameters: []
      valueType: "java.io.IOException"
      uuid: "enumeration"
    - sapientType: "BASIC"
      content: !<regular>
        value: "META-INF/spring/.imports"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Failed to load configurations from location [META-INF/spring/.imports]"
            valueType: "java.lang.String"
            uuid: "string3"
        - name: "cause"
          value:
            sapientType: "EXCEPTION"
            content: !<new>
              target: "java.io.IOException"
              parameters: []
            valueType: "java.io.IOException"
            uuid: "enumeration"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
      fixed: true
    branches:
    - lineNumber: 94
      expression: "classLoader == null"
      range: "(94,7)-(94,25)"
      evaluatedAs: true
      internalMethodName: "decideClassloader"
    - lineNumber: 104
      expression: "catch-exception (IOException)"
      range: "(104,3)-(104,23)"
      evaluatedAs: true
      internalMethodName: "findUrlsInClasspath"
    calledSomeStaticInternalMethod: true
    catchBlockExercised:
      idExternalInstruction: 26
      id: 1
      catchExceptions:
      - "java.io.IOException"
  - pathId: "path6"
    testPathName: "loadWhenClassLoaderIsNotNullAndUrlsNotHasMoreElements"
    modelFingerprint: "1B2C3662AA0BFF6C770D48A825E6DB68"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "annotation"
      modelFingerprint: "2837B4E60B07BC15DD2D411C9770B691"
      valueUuid: "annotation"
    - type: "INPUT"
      name: "classLoader"
      modelFingerprint: "41DDD19A6E082313172F3B4D673E6C9B"
      valueUuid: "classLoader"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "CD2CD4F84A17E82665DD46E0612274B1"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:annotation,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "8E5683968F763D9EDF3A4CFF5F11BF86"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:arrayList,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "36A7386CCABEB85616917FA8CD5B1196"
      valueUuid: "importCandidates"
    disabled: false
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "annotation"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "annotation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "'annotation' must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "arrayList"
    - sapientType: "BASIC"
      content: !<regular>
        value: "'candidates' must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.annotation.ImportCandidates"
        parameters:
        - name: "candidates"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.ArrayList"
              parameters: []
              values: []
            valueType: "java.util.List"
            genericValueType: "java.lang.String"
            uuid: "arrayList"
      valueType: "org.springframework.boot.context.annotation.ImportCandidates"
      uuid: "importCandidates"
      fixed: true
    branches:
    - lineNumber: 94
      expression: "classLoader == null"
      range: "(94,7)-(94,25)"
      evaluatedAs: false
      internalMethodName: "decideClassloader"
    - lineNumber: 86
      expression: "urls.hasMoreElements()"
      range: "(86,10)-(86,31)"
      evaluatedAs: false
    calledSomeStaticInternalMethod: true
  - pathId: "path1"
    testPathName: "loadWhenLineIsEmpty"
    modelFingerprint: "9F5A723D0A22F2E5AE53C40B6691E124"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "annotation"
      modelFingerprint: "2837B4E60B07BC15DD2D411C9770B691"
      valueUuid: "annotation"
    - type: "INPUT"
      name: "classLoader"
      modelFingerprint: "466BDB8F17944AE9DC0AF76E5495F31E"
      valueUuid: "classLoader"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "CD2CD4F84A17E82665DD46E0612274B1"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:annotation,message:uniqueUuid9):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "F793289ECBFE220AC48274AAFB6E52A0"
      valueUuid: "urlResource"
      methodExercised:
        expression: "getInputStream():inputStream"
        throwsExceptions:
        - "java.io.IOException"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "8E5683968F763D9EDF3A4CFF5F11BF86"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "notNull(object:arrayList,message:uniqueUuid10):void3"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "36A7386CCABEB85616917FA8CD5B1196"
      valueUuid: "importCandidates"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "new InputStreamReader(new UrlResource(url).getInputStream(), StandardCharsets.UTF_8)))\
        \ {"
      lineNumber: 111
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type UrlResource - Method: getInputStream"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "annotation"
    - sapientType: "NULL"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "annotation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "'annotation' must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.io.UrlResource"
        parameters:
        - name: "url"
          value:
            sapientType: "MOCK"
            valueType: "java.net.URL"
            uuid: "object"
            explicitCastNeeded: true
      valueType: "org.springframework.core.io.UrlResource"
      uuid: "urlResource"
      fixed: true
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "inputStream"
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "arrayList"
    - sapientType: "BASIC"
      content: !<regular>
        value: "'candidates' must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.annotation.ImportCandidates"
        parameters:
        - name: "candidates"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.ArrayList"
              parameters: []
              values: []
            valueType: "java.util.List"
            genericValueType: "java.lang.String"
            uuid: "arrayList"
      valueType: "org.springframework.boot.context.annotation.ImportCandidates"
      uuid: "importCandidates"
      fixed: true
    branches:
    - lineNumber: 94
      expression: "classLoader == null"
      range: "(94,7)-(94,25)"
      evaluatedAs: true
      internalMethodName: "decideClassloader"
    - lineNumber: 86
      expression: "urls.hasMoreElements()"
      range: "(86,10)-(86,31)"
      evaluatedAs: true
    - lineNumber: 114
      expression: "(line = reader.readLine()) != null"
      range: "(114,11)-(114,44)"
      evaluatedAs: true
      internalMethodName: "readCandidateConfigurations"
    - lineNumber: 131
      expression: "commentStart == -1"
      range: "(131,7)-(131,24)"
      evaluatedAs: true
      internalMethodName: "stripComment"
    - lineNumber: 117
      expression: "line.isEmpty()"
      range: "(117,9)-(117,22)"
      evaluatedAs: true
      internalMethodName: "readCandidateConfigurations"
    calledSomeStaticInternalMethod: true
  - pathId: "path3"
    testPathName: "loadWhenCommentStartNotEqualsMinus1AndLineNotIsEmpty"
    modelFingerprint: "EEF6110734FA41157699CDE3430298D3"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "annotation"
      modelFingerprint: "2837B4E60B07BC15DD2D411C9770B691"
      valueUuid: "annotation"
    - type: "INPUT"
      name: "classLoader"
      modelFingerprint: "466BDB8F17944AE9DC0AF76E5495F31E"
      valueUuid: "classLoader"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "CD2CD4F84A17E82665DD46E0612274B1"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:annotation,message:uniqueUuid11):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "F793289ECBFE220AC48274AAFB6E52A0"
      valueUuid: "urlResource"
      methodExercised:
        expression: "getInputStream():inputStream"
        throwsExceptions:
        - "java.io.IOException"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "3C3314E5D6900A9C3FAB0F4631A779A4"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:arrayList,message:uniqueUuid12):void3"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B66D5C254B19C056FC7ABC5F55FBFE8B"
      valueUuid: "importCandidates"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "new InputStreamReader(new UrlResource(url).getInputStream(), StandardCharsets.UTF_8)))\
        \ {"
      lineNumber: 111
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type UrlResource - Method: getInputStream"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "annotation"
    - sapientType: "NULL"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "annotation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "'annotation' must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid11"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.io.UrlResource"
        parameters:
        - name: "url"
          value:
            sapientType: "MOCK"
            valueType: "java.net.URL"
            uuid: "object"
            explicitCastNeeded: true
      valueType: "org.springframework.core.io.UrlResource"
      uuid: "urlResource"
      fixed: true
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "inputStream"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "BASIC"
          content: !<regular>
            value: "objectItem1"
          valueType: "java.lang.String"
          uuid: "string5"
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "arrayList"
    - sapientType: "BASIC"
      content: !<regular>
        value: "'candidates' must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid12"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.annotation.ImportCandidates"
        parameters:
        - name: "candidates"
          value:
            sapientType: "COLLECTION"
            content: !<collection>
              collectionClass: "java.util.ArrayList"
              parameters: []
              values:
              - sapientType: "BASIC"
                content: !<regular>
                  value: "objectItem1"
                valueType: "java.lang.String"
                uuid: "string5"
            valueType: "java.util.List"
            genericValueType: "java.lang.String"
            uuid: "arrayList"
      valueType: "org.springframework.boot.context.annotation.ImportCandidates"
      uuid: "importCandidates"
      fixed: true
    branches:
    - lineNumber: 94
      expression: "classLoader == null"
      range: "(94,7)-(94,25)"
      evaluatedAs: true
      internalMethodName: "decideClassloader"
    - lineNumber: 86
      expression: "urls.hasMoreElements()"
      range: "(86,10)-(86,31)"
      evaluatedAs: true
    - lineNumber: 114
      expression: "(line = reader.readLine()) != null"
      range: "(114,11)-(114,44)"
      evaluatedAs: true
      internalMethodName: "readCandidateConfigurations"
    - lineNumber: 131
      expression: "commentStart == -1"
      range: "(131,7)-(131,24)"
      evaluatedAs: false
      internalMethodName: "stripComment"
    - lineNumber: 117
      expression: "line.isEmpty()"
      range: "(117,9)-(117,22)"
      evaluatedAs: false
      internalMethodName: "readCandidateConfigurations"
    calledSomeStaticInternalMethod: true
  - pathId: "path7"
    testPathName: "loadWhenDefaultBranchThrowsThrowable"
    modelFingerprint: "334A892B82F40E0D09E9D5D505EC2B28"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "annotation"
      modelFingerprint: "2837B4E60B07BC15DD2D411C9770B691"
      valueUuid: "annotation"
    - type: "INPUT"
      name: "classLoader"
      modelFingerprint: "466BDB8F17944AE9DC0AF76E5495F31E"
      valueUuid: "classLoader"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "CD2CD4F84A17E82665DD46E0612274B1"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:annotation,message:uniqueUuid13):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "F793289ECBFE220AC48274AAFB6E52A0"
      valueUuid: "urlResource"
      methodExercised:
        expression: "getInputStream():inputStream"
        throwsExceptions:
        - "java.io.IOException"
    - type: "LOCAL_VARIABLE"
      name: "reader"
      modelFingerprint: "28259B6B1A77C4DDC65A35796F3D9D68"
      valueUuid: "bufferedReader"
      methodExercised:
        expression: "readLine():string3"
        throwsExceptions:
        - "java.io.IOException"
    - type: "LOCAL_VARIABLE"
      name: "reader"
      modelFingerprint: "28259B6B1A77C4DDC65A35796F3D9D68"
      valueUuid: "bufferedReader"
      methodExercised:
        expression: "readLine():string5"
        throwsExceptions:
        - "java.io.IOException"
    - type: "LOCAL_VARIABLE"
      name: "reader"
      modelFingerprint: "446F43FC46A76801050E3BF6D105027E"
      valueUuid: "bufferedReader"
      methodExercised:
        expression: "close():void2"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "49E493EB56B47EDEB5C173968793BABC"
      valueUuid: "throwable"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "new InputStreamReader(new UrlResource(url).getInputStream(), StandardCharsets.UTF_8)))\
        \ {"
      lineNumber: 111
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type UrlResource - Method: getInputStream"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "annotation"
    - sapientType: "NULL"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "annotation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "'annotation' must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid13"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.io.UrlResource"
        parameters:
        - name: "url"
          value:
            sapientType: "MOCK"
            valueType: "java.net.URL"
            uuid: "object"
            explicitCastNeeded: true
      valueType: "org.springframework.core.io.UrlResource"
      uuid: "urlResource"
      fixed: true
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "inputStream"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.BufferedReader"
        parameters:
        - name: "in"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.InputStreamReader"
              parameters:
              - name: "in"
                value:
                  sapientType: "INPUT_STREAM"
                  content: !<inputStream>
                    values: []
                  valueType: "java.io.InputStream"
                  uuid: "inputStream"
              - name: "cs"
                value:
                  sapientType: "OBJECT"
                  content: !<static_field_return>
                    target: "java.nio.charset.StandardCharsets"
                    fieldName: "UTF_8"
                  valueType: "java.nio.charset.Charset"
                  uuid: "charset"
            valueType: "java.io.InputStreamReader"
            uuid: "inputStreamReader"
            fixed: true
      valueType: "java.io.BufferedReader"
      uuid: "bufferedReader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_readLine1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.BufferedReader"
        parameters:
        - name: "in"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.InputStreamReader"
              parameters:
              - name: "in"
                value:
                  sapientType: "INPUT_STREAM"
                  content: !<inputStream>
                    values: []
                  valueType: "java.io.InputStream"
                  uuid: "inputStream"
              - name: "cs"
                value:
                  sapientType: "OBJECT"
                  content: !<static_field_return>
                    target: "java.nio.charset.StandardCharsets"
                    fieldName: "UTF_8"
                  valueType: "java.nio.charset.Charset"
                  uuid: "charset"
            valueType: "java.io.InputStreamReader"
            uuid: "inputStreamReader"
            fixed: true
      valueType: "java.io.BufferedReader"
      uuid: "bufferedReader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_readLine1"
      valueType: "java.lang.String"
      uuid: "string5"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.BufferedReader"
        parameters:
        - name: "in"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.InputStreamReader"
              parameters:
              - name: "in"
                value:
                  sapientType: "INPUT_STREAM"
                  content: !<inputStream>
                    values: []
                  valueType: "java.io.InputStream"
                  uuid: "inputStream"
              - name: "cs"
                value:
                  sapientType: "OBJECT"
                  content: !<static_field_return>
                    target: "java.nio.charset.StandardCharsets"
                    fieldName: "UTF_8"
                  valueType: "java.nio.charset.Charset"
                  uuid: "charset"
            valueType: "java.io.InputStreamReader"
            uuid: "inputStreamReader"
            fixed: true
      valueType: "java.io.BufferedReader"
      uuid: "bufferedReader"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "throwable"
    branches:
    - lineNumber: 94
      expression: "classLoader == null"
      range: "(94,7)-(94,25)"
      evaluatedAs: true
      internalMethodName: "decideClassloader"
    - lineNumber: 86
      expression: "urls.hasMoreElements()"
      range: "(86,10)-(86,31)"
      evaluatedAs: true
    - lineNumber: 114
      expression: "(line = reader.readLine()) != null"
      range: "(114,11)-(114,44)"
      evaluatedAs: true
      internalMethodName: "readCandidateConfigurations"
    - lineNumber: 131
      expression: "commentStart == -1"
      range: "(131,7)-(131,24)"
      evaluatedAs: true
      internalMethodName: "stripComment"
    - lineNumber: 117
      expression: "line.isEmpty()"
      range: "(117,9)-(117,22)"
      evaluatedAs: true
      internalMethodName: "readCandidateConfigurations"
    - lineNumber: 110
      expression: "branch expression (line 110)"
      range: "(110,1)-(110,200)"
      evaluatedAs: true
      internalMethodName: "readCandidateConfigurations"
    calledSomeStaticInternalMethod: true
    catchBlockExercised:
      idExternalInstruction: 50
      id: 2
      catchExceptions:
      - "java.lang.Throwable"
  - pathId: "path9"
    testPathName: "loadWhenLineNotIsEmptyAndCaughtIOExceptionThrowsIllegalArgumentException"
    modelFingerprint: "ADDCF30D088F830DB6BBB9983E4CBA32"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "annotation"
      modelFingerprint: "2837B4E60B07BC15DD2D411C9770B691"
      valueUuid: "annotation"
    - type: "INPUT"
      name: "classLoader"
      modelFingerprint: "466BDB8F17944AE9DC0AF76E5495F31E"
      valueUuid: "classLoader"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "CD2CD4F84A17E82665DD46E0612274B1"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:annotation,message:uniqueUuid14):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "F793289ECBFE220AC48274AAFB6E52A0"
      valueUuid: "urlResource"
      methodExercised:
        expression: "getInputStream():inputStream"
        throwsExceptions:
        - "java.io.IOException"
    - type: "LOCAL_VARIABLE"
      name: "reader"
      modelFingerprint: "28259B6B1A77C4DDC65A35796F3D9D68"
      valueUuid: "bufferedReader"
      methodExercised:
        expression: "readLine():string3"
        throwsExceptions:
        - "java.io.IOException"
    - type: "LOCAL_VARIABLE"
      name: "reader"
      modelFingerprint: "28259B6B1A77C4DDC65A35796F3D9D68"
      valueUuid: "bufferedReader"
      methodExercised:
        expression: "readLine():string6"
        throwsExceptions:
        - "java.io.IOException"
    - type: "LOCAL_VARIABLE"
      name: "reader"
      modelFingerprint: "446F43FC46A76801050E3BF6D105027E"
      valueUuid: "bufferedReader"
      methodExercised:
        expression: "close():void2"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0CDE18B17E1A8B9F32CC489D901E1102"
      valueUuid: "illegalArgumentException"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "new InputStreamReader(new UrlResource(url).getInputStream(), StandardCharsets.UTF_8)))\
        \ {"
      lineNumber: 111
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: object of type UrlResource - Method: getInputStream"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "annotation"
    - sapientType: "NULL"
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "annotation"
    - sapientType: "BASIC"
      content: !<regular>
        value: "'annotation' must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid14"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.io.UrlResource"
        parameters:
        - name: "url"
          value:
            sapientType: "MOCK"
            valueType: "java.net.URL"
            uuid: "object"
            nameForMock: "object"
            explicitCastNeeded: true
      valueType: "org.springframework.core.io.UrlResource"
      uuid: "urlResource"
      fixed: true
    - sapientType: "INPUT_STREAM"
      content: !<inputStream>
        values: []
      valueType: "java.io.InputStream"
      uuid: "inputStream"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.BufferedReader"
        parameters:
        - name: "in"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.InputStreamReader"
              parameters:
              - name: "in"
                value:
                  sapientType: "INPUT_STREAM"
                  content: !<inputStream>
                    values: []
                  valueType: "java.io.InputStream"
                  uuid: "inputStream"
              - name: "cs"
                value:
                  sapientType: "OBJECT"
                  content: !<static_field_return>
                    target: "java.nio.charset.StandardCharsets"
                    fieldName: "UTF_8"
                  valueType: "java.nio.charset.Charset"
                  uuid: "charset"
            valueType: "java.io.InputStreamReader"
            uuid: "inputStreamReader"
            fixed: true
      valueType: "java.io.BufferedReader"
      uuid: "bufferedReader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_readLine1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.BufferedReader"
        parameters:
        - name: "in"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.InputStreamReader"
              parameters:
              - name: "in"
                value:
                  sapientType: "INPUT_STREAM"
                  content: !<inputStream>
                    values: []
                  valueType: "java.io.InputStream"
                  uuid: "inputStream"
              - name: "cs"
                value:
                  sapientType: "OBJECT"
                  content: !<static_field_return>
                    target: "java.nio.charset.StandardCharsets"
                    fieldName: "UTF_8"
                  valueType: "java.nio.charset.Charset"
                  uuid: "charset"
            valueType: "java.io.InputStreamReader"
            uuid: "inputStreamReader"
            fixed: true
      valueType: "java.io.BufferedReader"
      uuid: "bufferedReader"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_readLine1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.BufferedReader"
        parameters:
        - name: "in"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.InputStreamReader"
              parameters:
              - name: "in"
                value:
                  sapientType: "INPUT_STREAM"
                  content: !<inputStream>
                    values: []
                  valueType: "java.io.InputStream"
                  uuid: "inputStream"
              - name: "cs"
                value:
                  sapientType: "OBJECT"
                  content: !<static_field_return>
                    target: "java.nio.charset.StandardCharsets"
                    fieldName: "UTF_8"
                  valueType: "java.nio.charset.Charset"
                  uuid: "charset"
            valueType: "java.io.InputStreamReader"
            uuid: "inputStreamReader"
            fixed: true
      valueType: "java.io.BufferedReader"
      uuid: "bufferedReader"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalArgumentException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "message1"
            valueType: "java.lang.String"
            uuid: "string7"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.io.IOException"
              parameters: []
            valueType: "java.io.IOException"
            uuid: "iOException"
      valueType: "java.lang.IllegalArgumentException"
      uuid: "illegalArgumentException"
      fixed: true
    branches:
    - lineNumber: 94
      expression: "classLoader == null"
      range: "(94,7)-(94,25)"
      evaluatedAs: true
      internalMethodName: "decideClassloader"
    - lineNumber: 86
      expression: "urls.hasMoreElements()"
      range: "(86,10)-(86,31)"
      evaluatedAs: true
    - lineNumber: 114
      expression: "(line = reader.readLine()) != null"
      range: "(114,11)-(114,44)"
      evaluatedAs: true
      internalMethodName: "readCandidateConfigurations"
    - lineNumber: 131
      expression: "commentStart == -1"
      range: "(131,7)-(131,24)"
      evaluatedAs: false
      internalMethodName: "stripComment"
    - lineNumber: 117
      expression: "line.isEmpty()"
      range: "(117,9)-(117,22)"
      evaluatedAs: false
      internalMethodName: "readCandidateConfigurations"
    - lineNumber: 124
      expression: "catch-exception (IOException)"
      range: "(124,3)-(124,23)"
      evaluatedAs: true
      internalMethodName: "readCandidateConfigurations"
    calledSomeStaticInternalMethod: true
    catchBlockExercised:
      idExternalInstruction: 50
      id: 4
      catchExceptions:
      - "java.io.IOException"
