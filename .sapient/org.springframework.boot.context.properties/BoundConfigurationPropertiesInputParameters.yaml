---
modelFingerprint: "D7893E09B20233A1EDA9754CBD6DC741"
targetClass:
  fullClassName: "org.springframework.boot.context.properties.BoundConfigurationProperties"
methods:
- method:
    name: "add"
    sourceCodeSignature: "void add(ConfigurationProperty configurationProperty)"
    returnType: "void"
    parameters:
    - name: "configurationProperty"
      type: "org.springframework.boot.context.properties.source.ConfigurationProperty"
    instructionFingerprint: "AC7948472A170DE21D751B81B8E61EBF"
  paths:
  - pathId: "path1"
    testPathName: "addTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "6133DC67C6B7417E5E364E14884A25DC"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "configurationProperty"
      modelFingerprint: "50B093C2F87B4E36D995E20501E8EACD"
      valueUuid: "configurationProperty"
    - type: "LOCAL_VARIABLE"
      name: "configurationProperty"
      modelFingerprint: "762C812DE4F692B0573848CF3583FCF3"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getName():name"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.BoundConfigurationProperties"
        parameters: []
      valueType: "org.springframework.boot.context.properties.BoundConfigurationProperties"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "configurationProperty-value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "configurationProperty-value"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "get"
    sourceCodeSignature: "ConfigurationProperty get(ConfigurationPropertyName name)"
    returnType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
    parameters:
    - name: "name"
      type: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
    instructionFingerprint: "90789248DA2E591E7C4D8AA41FF4434A"
  paths:
  - pathId: "path1"
    testPathName: "getTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "4B956C7EC11855974B2453BCE46BBF61"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "79AA751E8DEF85DAAC2666FA9A7E6307"
      valueUuid: "name"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "AA8042F0C47D91DA84387A5151001BD1"
      valueUuid: "configurationProperty"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.BoundConfigurationProperties"
        parameters: []
      valueType: "org.springframework.boot.context.properties.BoundConfigurationProperties"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
      collectionUuid: "linkedHashMap"
- method:
    name: "getAll"
    sourceCodeSignature: "Map<ConfigurationPropertyName, ConfigurationProperty> getAll()"
    returnType: "java.util.Map"
    genericReturnType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName,org.springframework.boot.context.properties.source.ConfigurationProperty"
    instructionFingerprint: "0F75C39EAD9EE429BB9854111C34D34B"
  paths:
  - pathId: "path1"
    testPathName: "getAllTest"
    constructorSignature: "<init>() : void"
    modelFingerprint: "0BEA3794D30342CB50FB90C2CD36E0D2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "35D05FDE17DD610B0A58414C1102C852"
      valueUuid: "map"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.BoundConfigurationProperties"
        parameters: []
      valueType: "org.springframework.boot.context.properties.BoundConfigurationProperties"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.LinkedHashMap"
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName,org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "map"
- method:
    name: "get"
    sourceCodeSignature: "BoundConfigurationProperties get(ApplicationContext context)"
    returnType: "org.springframework.boot.context.properties.BoundConfigurationProperties"
    parameters:
    - name: "context"
      type: "org.springframework.context.ApplicationContext"
    instructionFingerprint: "AE2B65F6D3C9D137754BEA24ABB92223"
  paths:
  - pathId: "path1"
    testPathName: "get1WhenContextNotContainsBeanDefinitionBEAN_NAME"
    modelFingerprint: "9D2B9B7D7C04B4C0FD32A79A402DDFC0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "context"
      modelFingerprint: "A4FADCC1E02EED3729A8336C60442EF2"
      valueUuid: "context"
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "94B5B69D6BAC9CF9DF823CAB480CCA92"
      valueUuid: "context"
      methodExercised:
        expression: "containsBeanDefinition(beanName:string):boolean1"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5B84499FAB9915DD2EDB29F72F13C636"
      valueUuid: "boundConfigurationProperties"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "context"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.context.properties.BoundConfigurationProperties"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.context.properties.BoundConfigurationProperties"
      uuid: "boundConfigurationProperties"
      fixed: true
    branches:
    - lineNumber: 75
      expression: "!context.containsBeanDefinition(BEAN_NAME)"
      range: "(75,7)-(75,48)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "get1WhenContextContainsBeanDefinitionBEAN_NAME"
    modelFingerprint: "E2A2884C711B4EE9E05A038B656B6908"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "context"
      modelFingerprint: "A4FADCC1E02EED3729A8336C60442EF2"
      valueUuid: "context"
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "F761DDC679144A66AA7D2FD0F6643E8D"
      valueUuid: "context"
      methodExercised:
        expression: "containsBeanDefinition(beanName:string):boolean1"
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "9362D7CE4DCF33B265EAB4D5F6A32C1E"
      valueUuid: "context"
      methodExercised:
        expression: "getBean(name:string,requiredType:uniqueUuid1):object"
        throwsExceptions:
        - "org.springframework.beans.BeansException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "58FDE3DF4C8B59F89D6EF8CD45223514"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "context"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.context.properties.BoundConfigurationProperties"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.BoundConfigurationProperties"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.context.properties.BoundConfigurationProperties"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.properties.BoundConfigurationProperties"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.properties.BoundConfigurationProperties"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.BoundConfigurationProperties"
      uuid: "object"
      explicitCastNeeded: true
    branches:
    - lineNumber: 75
      expression: "!context.containsBeanDefinition(BEAN_NAME)"
      range: "(75,7)-(75,48)"
      evaluatedAs: false
- method:
    name: "register"
    sourceCodeSignature: "void register(BeanDefinitionRegistry registry)"
    returnType: "void"
    parameters:
    - name: "registry"
      type: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
    instructionFingerprint: "6D66EB8296415CE0043E0C5BD6672A88"
  paths:
  - pathId: "path1"
    testPathName: "registerWhenRegistryNotContainsBeanDefinitionBEAN_NAME"
    modelFingerprint: "70439FBDDC2FBC2796C2C0844ABA2047"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "registry"
      modelFingerprint: "14F926E67FDB678BF2FEC697D6F094DC"
      valueUuid: "registry"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "17A521A9364A9E421812473759FBAEA2"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:registry,message:uniqueUuid2):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "registry"
      modelFingerprint: "2F9C2DFBB8AE59596692E832FCAB51FA"
      valueUuid: "registry"
      methodExercised:
        expression: "containsBeanDefinition(beanName:string):boolean1"
    - type: "STATIC"
      name: "BeanDefinitionBuilder.class.real"
      modelFingerprint: "E4415B6C621D711E82C8E92537558B7D"
      valueUuid: "BeanDefinitionBuilder.class.real"
      methodExercised:
        expression: "genericBeanDefinition(beanClass:uniqueUuid3):beanDefinitionBuilder"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "2C8F147D30CE4CAC4C7B78B973DE26A2"
      valueUuid: "beanDefinitionBuilder"
      methodExercised:
        expression: "getBeanDefinition():abstractBeanDefinition"
    - type: "LOCAL_VARIABLE"
      name: "definition"
      modelFingerprint: "E3E01924097E7B9416BB43066C9172ED"
      valueUuid: "abstractBeanDefinition"
      methodExercised:
        expression: "setRole(role:uniqueUuid6):void2"
    - type: "LOCAL_VARIABLE"
      name: "registry"
      modelFingerprint: "B92E83720A36AF4B122C5E8CD613D6B6"
      valueUuid: "registry"
      methodExercised:
        expression: "registerBeanDefinition(beanName:string,beanDefinition:abstractBeanDefinition):void3"
        throwsExceptions:
        - "org.springframework.beans.factory.BeanDefinitionStoreException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
      uuid: "registry"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
      uuid: "registry"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Registry must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
      uuid: "registry"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.context.properties.BoundConfigurationProperties"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "REAL"
      valueType: "org.springframework.beans.factory.support.BeanDefinitionBuilder"
      uuid: "BeanDefinitionBuilder.class.real"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.beans.factory.support.BeanDefinitionBuilder"
        method: "genericBeanDefinition"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "org.springframework.boot.context.properties.BoundConfigurationProperties"
            valueType: "java.lang.Class"
            genericValueType: "org.springframework.boot.context.properties.BoundConfigurationProperties"
            uuid: "uniqueUuid4"
            fixed: true
      valueType: "org.springframework.beans.factory.support.BeanDefinitionBuilder"
      uuid: "beanDefinitionBuilder"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.boot.context.properties.BoundConfigurationProperties"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.boot.context.properties.BoundConfigurationProperties"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.beans.factory.support.BeanDefinitionBuilder"
        method: "genericBeanDefinition"
        methodParameters:
        - value:
            sapientType: "CLASS"
            content: !<regular>
              value: "org.springframework.boot.context.properties.BoundConfigurationProperties"
            valueType: "java.lang.Class"
            genericValueType: "org.springframework.boot.context.properties.BoundConfigurationProperties"
            uuid: "uniqueUuid5"
            fixed: true
      valueType: "org.springframework.beans.factory.support.BeanDefinitionBuilder"
      uuid: "beanDefinitionBuilder"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.beans.factory.support.AbstractBeanDefinition"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "org.springframework.beans.factory.support.BeanDefinitionBuilder"
            method: "genericBeanDefinition"
            methodParameters:
            - value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "org.springframework.boot.context.properties.BoundConfigurationProperties"
                valueType: "java.lang.Class"
                genericValueType: "org.springframework.boot.context.properties.BoundConfigurationProperties"
                fixed: true
          valueType: "org.springframework.beans.factory.support.BeanDefinitionBuilder"
          uuid: "beanDefinitionBuilder"
        methodParameters: []
        methodName: "getBeanDefinition"
      valueType: "org.springframework.beans.factory.support.AbstractBeanDefinition"
      uuid: "abstractBeanDefinition"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.beans.factory.support.AbstractBeanDefinition"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "org.springframework.beans.factory.support.BeanDefinitionBuilder"
            method: "genericBeanDefinition"
            methodParameters:
            - value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "org.springframework.boot.context.properties.BoundConfigurationProperties"
                valueType: "java.lang.Class"
                genericValueType: "org.springframework.boot.context.properties.BoundConfigurationProperties"
                fixed: true
          valueType: "org.springframework.beans.factory.support.BeanDefinitionBuilder"
          uuid: "beanDefinitionBuilder"
        methodParameters: []
        methodName: "getBeanDefinition"
      valueType: "org.springframework.beans.factory.support.AbstractBeanDefinition"
      uuid: "abstractBeanDefinition"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.support.BeanDefinitionRegistry"
      uuid: "registry"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.context.properties.BoundConfigurationProperties"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "org.springframework.beans.factory.support.AbstractBeanDefinition"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "org.springframework.beans.factory.support.BeanDefinitionBuilder"
            method: "genericBeanDefinition"
            methodParameters:
            - value:
                sapientType: "CLASS"
                content: !<regular>
                  value: "org.springframework.boot.context.properties.BoundConfigurationProperties"
                valueType: "java.lang.Class"
                genericValueType: "org.springframework.boot.context.properties.BoundConfigurationProperties"
                fixed: true
          valueType: "org.springframework.beans.factory.support.BeanDefinitionBuilder"
          uuid: "beanDefinitionBuilder"
        methodParameters: []
        methodName: "getBeanDefinition"
      valueType: "org.springframework.beans.factory.support.AbstractBeanDefinition"
      uuid: "abstractBeanDefinition"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 83
      expression: "!registry.containsBeanDefinition(BEAN_NAME)"
      range: "(83,7)-(83,49)"
      evaluatedAs: true
