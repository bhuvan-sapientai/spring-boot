---
modelFingerprint: "9EE0C319E457E89EA3F939A603E69877"
targetClass:
  fullClassName: "org.springframework.boot.context.properties.IncompatibleConfigurationException"
methods:
- method:
    name: "getIncompatibleKeys"
    sourceCodeSignature: "Collection<String> getIncompatibleKeys()"
    returnType: "java.util.Collection"
    genericReturnType: "java.lang.String"
    instructionFingerprint: "93FB793E1B2725A546A0A199F79F678F"
  paths:
  - pathId: "path1"
    testPathName: "getIncompatibleKeysTest"
    constructorSignature: "<init>(java.lang.String[]) : void"
    modelFingerprint: "38FAB40CA4F836E52D6A3A1EA421DF4F"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "1C1C8AD3FF06B2D52D45501058504903"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A21C27D81F89EF2C62F31578D131A608"
      valueUuid: "list"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.IncompatibleConfigurationException"
        parameters:
        - name: "incompatibleKeys"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.String[]"
            uuid: "incompatibleKeys"
      valueType: "org.springframework.boot.context.properties.IncompatibleConfigurationException"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "java.lang.String"
      uuid: "list"
