---
modelFingerprint: "9FE3CA2A8032627948840CCD5065EC95"
targetClass:
  fullClassName: "org.springframework.boot.context.properties.PropertyMapper"
methods:
- method:
    name: "alwaysApplyingWhenNonNull"
    sourceCodeSignature: "PropertyMapper alwaysApplyingWhenNonNull()"
    returnType: "org.springframework.boot.context.properties.PropertyMapper"
    instructionFingerprint: "F45B003278D5F6B1B1B179A70CF4853D"
  paths:
  - pathId: "path1"
    testPathName: "alwaysApplyingWhenNonNullTest"
    constructorSignature: "get() : org.springframework.boot.context.properties.PropertyMapper"
    modelFingerprint: "713E4DD369F3EC1CD9823BA6C667A828"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "STATIC_FACTORY_METHOD"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "7637F467AB81877A4C56BC93296DB339"
      methodExercised:
        expression: "alwaysApplying(operator:uniqueUuid1):propertyMapper3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "355E2457C83650A602D99A59C53309F4"
      valueUuid: "propertyMapper3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.PropertyMapper"
        method: "get"
        methodParameters: []
      valueType: "org.springframework.boot.context.properties.PropertyMapper"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.PropertyMapper"
      uuid: "propertyMapper3"
    - sapientType: "ANY"
      valueType: "org.springframework.boot.context.properties.PropertyMapper$SourceOperator"
      uuid: "uniqueUuid1"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.PropertyMapper"
      uuid: "propertyMapper3"
- method:
    name: "alwaysApplying"
    sourceCodeSignature: "PropertyMapper alwaysApplying(SourceOperator operator)"
    returnType: "org.springframework.boot.context.properties.PropertyMapper"
    parameters:
    - name: "operator"
      type: "org.springframework.boot.context.properties.PropertyMapper$SourceOperator"
    instructionFingerprint: "4F7B70A7C0A3BB1E972387747ECC36FB"
  paths:
  - pathId: "path1"
    testPathName: "alwaysApplyingTest"
    constructorSignature: "get() : org.springframework.boot.context.properties.PropertyMapper"
    modelFingerprint: "D754F2B1451A11AEA3BC26F57C820C45"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "STATIC_FACTORY_METHOD"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "operator"
      modelFingerprint: "439234706C50E0C4F8737D0DE841743F"
      valueUuid: "operator"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "FEB8220A2924FA73947044590E0118DB"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:operator,message:uniqueUuid2):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "19F100B5F8E99D99A9EAE913DE7300E6"
      valueUuid: "propertyMapper3"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.PropertyMapper"
        method: "get"
        methodParameters: []
      valueType: "org.springframework.boot.context.properties.PropertyMapper"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.PropertyMapper$SourceOperator"
      uuid: "operator"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.PropertyMapper$SourceOperator"
      uuid: "operator"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Operator must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.PropertyMapper"
        parameters:
        - name: "parent"
          value:
            sapientType: "THIS"
            valueType: "org.springframework.boot.context.properties.PropertyMapper"
            uuid: "targetClassObject"
            fixed: true
        - name: "sourceOperator"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.PropertyMapper$SourceOperator"
            uuid: "operator"
      valueType: "org.springframework.boot.context.properties.PropertyMapper"
      uuid: "propertyMapper3"
      fixed: true
- method:
    name: "from"
    sourceCodeSignature: "<T> Source<T> from(Supplier<T> supplier)"
    returnType: "org.springframework.boot.context.properties.PropertyMapper$Source"
    parameters:
    - name: "supplier"
      type: "java.util.function.Supplier"
    instructionFingerprint: "21A6D7AE9460AD6211A88F4FB2854F5E"
  paths:
  - pathId: "path1"
    testPathName: "fromWhenThisSourceOperatorIsNull"
    constructorSignature: "get() : org.springframework.boot.context.properties.PropertyMapper"
    modelFingerprint: "A3AD0FB58065B8D3D1A3FE143DA06AEA"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "STATIC_FACTORY_METHOD"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "supplier"
      modelFingerprint: "3A56E1FD6E24D51D29D271C23F070E12"
      valueUuid: "supplier"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "BE9150E986918171FFC38161177517B8"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:supplier,message:uniqueUuid3):void"
        staticAccess: true
    - type: "STATIC"
      name: "SingletonSupplier.class"
      modelFingerprint: "49AD35EE94CFECFBCD25D6081BA5BE1B"
      valueUuid: "SingletonSupplier.class"
      methodExercised:
        expression: "of(supplier:supplier):singletonSupplier"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "2876B0423A41672799313B484EE49047"
      valueUuid: "propertyMapper.Source"
    disabled: false
    failureReason:
      reason: "REAL_FIELD_VALUE_NOT_ACCESSIBLE"
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.PropertyMapper"
        method: "get"
        methodParameters: []
      valueType: "org.springframework.boot.context.properties.PropertyMapper"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "supplier"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "supplier"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Supplier must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.function.SingletonSupplier"
      uuid: "SingletonSupplier.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.function.SingletonSupplier"
      genericValueType: "java.lang.Object"
      uuid: "singletonSupplier"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "supplier"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.PropertyMapper$Source"
        parameters:
        - name: "supplier"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.util.function.SingletonSupplier"
            genericValueType: "java.lang.Object"
            uuid: "singletonSupplier"
        - name: "predicate"
          value:
            sapientType: "MOCK"
            valueType: "java.util.function.Predicate"
            uuid: "predicate"
      valueType: "org.springframework.boot.context.properties.PropertyMapper$Source"
      genericValueType: "java.lang.Object"
      uuid: "propertyMapper.Source"
      fixed: true
    branches:
    - lineNumber: 128
      expression: "this.parent != null"
      range: "(128,7)-(128,25)"
      evaluatedAs: false
      internalMethodName: "getSource"
    - lineNumber: 109
      expression: "this.sourceOperator != null"
      range: "(109,7)-(109,33)"
      evaluatedAs: false
- method:
    name: "from"
    sourceCodeSignature: "<T> Source<T> from(T value)"
    returnType: "org.springframework.boot.context.properties.PropertyMapper$Source"
    parameters:
    - name: "value"
      type: "java.lang.Object"
    instructionFingerprint: "1B6E890EE04B7F6DD2FF81A667FB0909"
  paths:
  - pathId: "path1"
    testPathName: "from1Test"
    constructorSignature: "get() : org.springframework.boot.context.properties.PropertyMapper"
    modelFingerprint: "A96632E63E57C98E75864ED9C5716DE1"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "STATIC_FACTORY_METHOD"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "value"
      modelFingerprint: "EB88C1798DFE893966CC3D4502A52694"
      valueUuid: "value"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "C3B1A089FE68A1539867402CC4206F9F"
      methodExercised:
        expression: "from(supplier:uniqueUuid4):propertyMapper.Source"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D44DDCB4B59F68D6E12FC1873A117779"
      valueUuid: "propertyMapper.Source"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.PropertyMapper"
        method: "get"
        methodParameters: []
      valueType: "org.springframework.boot.context.properties.PropertyMapper"
      uuid: "target"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "value"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.PropertyMapper$Source"
      uuid: "propertyMapper.Source"
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      uuid: "uniqueUuid4"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.PropertyMapper$Source"
      uuid: "propertyMapper.Source"
- method:
    name: "get"
    sourceCodeSignature: "PropertyMapper get()"
    returnType: "org.springframework.boot.context.properties.PropertyMapper"
    instructionFingerprint: "E963194827D0AFE584D43EC8546786AB"
  paths:
  - pathId: "path1"
    testPathName: "getTest"
    modelFingerprint: "B4E9EE02C2947903D1DABAFEAF98129D"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "RESULT"
      name: "result"
      modelFingerprint: "DB30D5F6B96114A320124E80B3E3580E"
      valueUuid: "propertyMapper"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.PropertyMapper"
        parameters:
        - name: "parent"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.boot.context.properties.PropertyMapper"
            uuid: "uniqueUuid5"
        - name: "sourceOperator"
          value:
            sapientType: "NULL"
            valueType: "org.springframework.boot.context.properties.PropertyMapper$SourceOperator"
            uuid: "uniqueUuid6"
      valueType: "org.springframework.boot.context.properties.PropertyMapper"
      uuid: "propertyMapper"
      fixed: true
