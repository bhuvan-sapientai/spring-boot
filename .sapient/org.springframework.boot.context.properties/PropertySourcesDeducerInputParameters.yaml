---
modelFingerprint: "6ED6764018B7159FE4EED5432DA9E043"
targetClass:
  fullClassName: "org.springframework.boot.context.properties.PropertySourcesDeducer"
methods:
- method:
    name: "getPropertySources"
    sourceCodeSignature: "PropertySources getPropertySources()"
    returnType: "org.springframework.core.env.PropertySources"
    instructionFingerprint: "0F53FBFF00E24670F570E8A6C5512B47"
  paths:
  - pathId: "path1"
    testPathName: "getPropertySourcesWhenConfigurerIsNotNull"
    constructorSignature: "<init>(org.springframework.context.ApplicationContext)\
      \ : void"
    modelFingerprint: "D9C547FD0E23A5191D9AC78EDFCE05D4"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "9B6B345DC6AA2E36CD52D6320B4C1A8B"
      valueUuid: "target"
    - type: "FIELD"
      name: "applicationContext"
      modelFingerprint: "13518F12FFB05F4E6F514EA080DF1216"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "getBeansOfType(type:uniqueUuid1,includeNonSingletons:uniqueUuid2,allowEagerInit:uniqueUuid3):map"
        throwsExceptions:
        - "org.springframework.beans.BeansException"
    - type: "LOCAL_VARIABLE"
      name: "configurer"
      modelFingerprint: "BE4B039B37BA58B3324E660FB100C408"
      valueUuid: "object"
      methodExercised:
        expression: "getAppliedPropertySources():appliedPropertySources"
        throwsExceptions:
        - "java.lang.IllegalStateException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "1BEA33BD0D7D76684BFEC959BF74F461"
      valueUuid: "appliedPropertySources"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.PropertySourcesDeducer"
        parameters:
        - name: "applicationContext"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.context.ApplicationContext"
            uuid: "applicationContext"
      valueType: "org.springframework.boot.context.properties.PropertySourcesDeducer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashMap"
        parameters: []
        values:
        - sapientType: "PAIR"
          content: !<pair>
            key:
              sapientType: "BASIC"
              content: !<regular>
                value: 0
              valueType: "java.lang.String"
              uuid: "objectKey"
            value:
              sapientType: "MOCK"
              valueType: "org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
              uuid: "object"
              collectionUuid: "collection"
          uuid: "map-item0"
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
      uuid: "map"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
      uuid: "object"
      collectionUuid: "collection"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySources"
      uuid: "appliedPropertySources"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.PropertySources"
      uuid: "appliedPropertySources"
    branches:
    - lineNumber: 62
      expression: "beans.size() == 1"
      range: "(62,7)-(62,23)"
      evaluatedAs: true
      internalMethodName: "getSinglePropertySourcesPlaceholderConfigurer"
    - lineNumber: 49
      expression: "configurer != null"
      range: "(49,7)-(49,24)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "getPropertySourcesWhenSourcesIsNotNull"
    constructorSignature: "<init>(org.springframework.context.ApplicationContext)\
      \ : void"
    modelFingerprint: "B01F471113BB91D29679B8C918168B3D"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "9B6B345DC6AA2E36CD52D6320B4C1A8B"
      valueUuid: "target"
    - type: "FIELD"
      name: "applicationContext"
      modelFingerprint: "F52E7D1C25A45B97B8E55C46E72B197B"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "getBeansOfType(type:uniqueUuid4,includeNonSingletons:uniqueUuid5,allowEagerInit:uniqueUuid6):map"
        throwsExceptions:
        - "org.springframework.beans.BeansException"
    - type: "FIELD"
      name: "applicationContext"
      modelFingerprint: "053050DDABB67C1A3C8BD5A45849DAA6"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "getEnvironment():environment"
    - type: "LOCAL_VARIABLE"
      name: "configurableEnvironment"
      modelFingerprint: "67684653B380CAD3C2D4191E95A866FE"
      valueUuid: "environment"
      methodExercised:
        expression: "getPropertySources():mutablePropertySources"
    - type: "STATIC"
      name: "Assert.class.real"
      modelFingerprint: "4FF9719F05F9A0708DE2224EB882ADD8"
      valueUuid: "Assert.class.real"
      methodExercised:
        expression: "state(expression:uniqueUuid7,message:uniqueUuid8):void"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0B21C4C7997B0D97F59CE31B8447F264"
      valueUuid: "mutablePropertySources"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.PropertySourcesDeducer"
        parameters:
        - name: "applicationContext"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.context.ApplicationContext"
            uuid: "applicationContext"
      valueType: "org.springframework.boot.context.properties.PropertySourcesDeducer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashMap"
        parameters: []
        values:
        - sapientType: "PAIR"
          content: !<pair>
            key:
              sapientType: "BASIC"
              content: !<regular>
                value: 0
              valueType: "java.lang.String"
              uuid: "objectKey"
            value:
              sapientType: "NULL"
              valueType: "org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
              uuid: "object"
              fixed: true
              collectionUuid: "collection"
          uuid: "map-item0"
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
      uuid: "map"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    - sapientType: "REAL"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class.real"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Unable to obtain PropertySources from PropertySourcesPlaceholderConfigurer\
          \ or Environment"
      valueType: "java.lang.String"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
    branches:
    - lineNumber: 62
      expression: "beans.size() == 1"
      range: "(62,7)-(62,23)"
      evaluatedAs: true
      internalMethodName: "getSinglePropertySourcesPlaceholderConfigurer"
    - lineNumber: 49
      expression: "configurer != null"
      range: "(49,7)-(49,24)"
      evaluatedAs: false
    - lineNumber: 74
      expression: "environment instanceof ConfigurableEnvironment configurableEnvironment"
      range: "(74,7)-(74,76)"
      evaluatedAs: true
      internalMethodName: "extractEnvironmentPropertySources"
    - lineNumber: 53
      expression: "sources != null"
      range: "(53,16)-(53,30)"
      evaluatedAs: true
  - pathId: "path5"
    testPathName: "getPropertySourcesWhenLoggerIsWarnEnabledAndConfigurerIsNullAndEnvironmentNotInstanceOfConfigurableEnvironmentAndSource"
    constructorSignature: "<init>(org.springframework.context.ApplicationContext)\
      \ : void"
    modelFingerprint: "A2C442E3D42D958305F7D827F2CCB2B1"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "9B6B345DC6AA2E36CD52D6320B4C1A8B"
      valueUuid: "target"
    - type: "FIELD"
      name: "applicationContext"
      modelFingerprint: "889501D2BC3C76BA4E92D431E7E79B51"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "getBeansOfType(type:uniqueUuid9,includeNonSingletons:uniqueUuid10,allowEagerInit:uniqueUuid11):map"
        throwsExceptions:
        - "org.springframework.beans.BeansException"
    - type: "FIELD"
      name: "applicationContext"
      modelFingerprint: "1DE3F3FF8A3B912A3C0A61B5AEB1828A"
      valueUuid: "applicationContext"
      methodExercised:
        expression: "getEnvironment():environment"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "068406BC28EC2BBCDA177DF9737CF56E"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid14,message:uniqueUuid15):void2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "27873C64027ACD4CC3EDDCB87F914CEE"
      valueUuid: "mutablePropertySources"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.PropertySourcesDeducer"
        parameters:
        - name: "applicationContext"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.context.ApplicationContext"
            uuid: "applicationContext"
      valueType: "org.springframework.boot.context.properties.PropertySourcesDeducer"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashMap"
        parameters: []
        values:
        - sapientType: "PAIR"
          content: !<pair>
            key:
              sapientType: "BASIC"
              content: !<regular>
                value: "return_of_getBeansOfTypeItem1Key1"
              valueType: "java.lang.String"
              uuid: "mapKey0"
            value:
              sapientType: "MOCK"
              valueType: "org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
              uuid: "mapValue0"
          uuid: "uniqueUuid12"
        - sapientType: "PAIR"
          content: !<pair>
            key:
              sapientType: "BASIC"
              content: !<regular>
                value: "return_of_getBeansOfTypeItem2Key1"
              valueType: "java.lang.String"
              uuid: "mapKey1"
            value:
              sapientType: "MOCK"
              valueType: "org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
              uuid: "mapValue1"
          uuid: "uniqueUuid13"
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
      uuid: "map"
    - sapientType: "CLASS"
      content: !<regular>
        value: "org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
      valueType: "java.lang.Class"
      genericValueType: "org.springframework.context.support.PropertySourcesPlaceholderConfigurer"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.context.ApplicationContext"
      uuid: "applicationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid14"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Unable to obtain PropertySources from PropertySourcesPlaceholderConfigurer\
          \ or Environment"
      valueType: "java.lang.String"
      uuid: "uniqueUuid15"
      fixed: true
    - sapientType: "NULL"
      valueType: "org.springframework.core.env.MutablePropertySources"
      uuid: "mutablePropertySources"
      fixed: true
    branches:
    - lineNumber: 62
      expression: "beans.size() == 1"
      range: "(62,7)-(62,23)"
      evaluatedAs: false
      internalMethodName: "getSinglePropertySourcesPlaceholderConfigurer"
    - lineNumber: 65
      expression: "beans.size() > 1"
      range: "(65,7)-(65,22)"
      evaluatedAs: true
      internalMethodName: "getSinglePropertySourcesPlaceholderConfigurer"
    - lineNumber: 65
      expression: "logger.isWarnEnabled()"
      range: "(65,27)-(65,48)"
      evaluatedAs: true
      internalMethodName: "getSinglePropertySourcesPlaceholderConfigurer"
    - lineNumber: 49
      expression: "configurer != null"
      range: "(49,7)-(49,24)"
      evaluatedAs: false
    - lineNumber: 74
      expression: "environment instanceof ConfigurableEnvironment configurableEnvironment"
      range: "(74,7)-(74,76)"
      evaluatedAs: false
      internalMethodName: "extractEnvironmentPropertySources"
    - lineNumber: 53
      expression: "sources != null"
      range: "(53,16)-(53,30)"
      evaluatedAs: false
