---
modelFingerprint: "1405798F441995E70CC373C6C817B299"
targetClass:
  fullClassName: "org.springframework.boot.ssl.DefaultSslManagerBundle"
methods:
- method:
    name: "getKeyManagerFactory"
    sourceCodeSignature: "KeyManagerFactory getKeyManagerFactory()"
    returnType: "javax.net.ssl.KeyManagerFactory"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.RuntimeException"
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "CFC3F3DD84E1C8787989A7D4CE5597C9"
  paths:
  - pathId: "path2"
    testPathName: "getKeyManagerFactoryWhenPasswordIsNullAndPasswordIsNotNull"
    constructorSignature: "<init>(org.springframework.boot.ssl.SslStoreBundle,org.springframework.boot.ssl.SslBundleKey)\
      \ : void"
    modelFingerprint: "1AA89A0F592413205AF5B7276ABDC531"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "FED9278E831855D4096E4FCB84510DDB"
      valueUuid: "target"
    - type: "FIELD"
      name: "storeBundle"
      modelFingerprint: "79268FEE6D98AA70F0F4DBB096E70C2D"
      valueUuid: "storeBundle"
      methodExercised:
        expression: "getKeyStore():keyStore"
    - type: "FIELD"
      name: "key"
      modelFingerprint: "75F09D8267C276C68D8F80BEFB16667D"
      valueUuid: "key"
      methodExercised:
        expression: "assertContainsAlias(keyStore:keyStore):void"
    - type: "FIELD"
      name: "key"
      modelFingerprint: "09AC7D3697CA12303DFFA2B1ADC19E19"
      valueUuid: "key"
      methodExercised:
        expression: "getAlias():string"
    - type: "FIELD"
      name: "key"
      modelFingerprint: "348A423F17C478A81BA106B3E4E7D8D3"
      valueUuid: "key"
      methodExercised:
        expression: "getPassword():string3"
    - type: "FIELD"
      name: "storeBundle"
      modelFingerprint: "1FCBF31470C7FBECF65776C09C948773"
      valueUuid: "storeBundle"
      methodExercised:
        expression: "getKeyStorePassword():string4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "E46513A93B6195DD1E9FDD6F0E004E26"
      valueUuid: "aliasKeyManagerFactory"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "factory.init(store, (password != null) ? password.toCharArray() : null);"
      lineNumber: 53
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: factory - Method: init"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ssl.DefaultSslManagerBundle"
        parameters:
        - name: "storeBundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslStoreBundle"
            uuid: "storeBundle"
        - name: "key"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundleKey"
            uuid: "key"
      valueType: "org.springframework.boot.ssl.DefaultSslManagerBundle"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "storeBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "key"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getAlias1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "key"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "storeBundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ssl.AliasKeyManagerFactory"
        parameters:
        - name: "delegate"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "javax.net.ssl.KeyManagerFactory"
              method: "getInstance"
              methodParameters:
              - value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "SunX509"
                  valueType: "java.lang.String"
                  uuid: "string2"
            valueType: "javax.net.ssl.KeyManagerFactory"
            uuid: "keyManagerFactory"
        - name: "alias"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "return_of_getAlias1"
            valueType: "java.lang.String"
            uuid: "string"
        - name: "algorithm"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "SunX509"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "org.springframework.boot.ssl.AliasKeyManagerFactory"
      uuid: "aliasKeyManagerFactory"
      fixed: true
    branches:
    - lineNumber: 50
      expression: "alias != null"
      range: "(50,15)-(50,27)"
      evaluatedAs: true
    - lineNumber: 52
      expression: "password != null"
      range: "(52,16)-(52,31)"
      evaluatedAs: false
    - lineNumber: 53
      expression: "password != null"
      range: "(53,25)-(53,40)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "getKeyManagerFactoryWhenPasswordIsNull"
    constructorSignature: "<init>(org.springframework.boot.ssl.SslStoreBundle,org.springframework.boot.ssl.SslBundleKey)\
      \ : void"
    modelFingerprint: "6505AFBF2E42DF9A3F4361DB65A1FDF3"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "FED9278E831855D4096E4FCB84510DDB"
      valueUuid: "target"
    - type: "FIELD"
      name: "storeBundle"
      modelFingerprint: "79268FEE6D98AA70F0F4DBB096E70C2D"
      valueUuid: "storeBundle"
      methodExercised:
        expression: "getKeyStore():keyStore"
    - type: "FIELD"
      name: "key"
      modelFingerprint: "75F09D8267C276C68D8F80BEFB16667D"
      valueUuid: "key"
      methodExercised:
        expression: "assertContainsAlias(keyStore:keyStore):void"
    - type: "FIELD"
      name: "key"
      modelFingerprint: "09AC7D3697CA12303DFFA2B1ADC19E19"
      valueUuid: "key"
      methodExercised:
        expression: "getAlias():string"
    - type: "FIELD"
      name: "key"
      modelFingerprint: "348A423F17C478A81BA106B3E4E7D8D3"
      valueUuid: "key"
      methodExercised:
        expression: "getPassword():string3"
    - type: "FIELD"
      name: "storeBundle"
      modelFingerprint: "0FE5EDB8404D546CC32CDDD03E90026A"
      valueUuid: "storeBundle"
      methodExercised:
        expression: "getKeyStorePassword():string4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "E46513A93B6195DD1E9FDD6F0E004E26"
      valueUuid: "aliasKeyManagerFactory"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "factory.init(store, (password != null) ? password.toCharArray() : null);"
      lineNumber: 53
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: factory - Method: init"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ssl.DefaultSslManagerBundle"
        parameters:
        - name: "storeBundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslStoreBundle"
            uuid: "storeBundle"
        - name: "key"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundleKey"
            uuid: "key"
      valueType: "org.springframework.boot.ssl.DefaultSslManagerBundle"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "storeBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "key"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getAlias1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "key"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "storeBundle"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string4"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ssl.AliasKeyManagerFactory"
        parameters:
        - name: "delegate"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "javax.net.ssl.KeyManagerFactory"
              method: "getInstance"
              methodParameters:
              - value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "SunX509"
                  valueType: "java.lang.String"
                  uuid: "string2"
            valueType: "javax.net.ssl.KeyManagerFactory"
            uuid: "keyManagerFactory"
        - name: "alias"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "return_of_getAlias1"
            valueType: "java.lang.String"
            uuid: "string"
        - name: "algorithm"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "SunX509"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "org.springframework.boot.ssl.AliasKeyManagerFactory"
      uuid: "aliasKeyManagerFactory"
      fixed: true
    branches:
    - lineNumber: 50
      expression: "alias != null"
      range: "(50,15)-(50,27)"
      evaluatedAs: true
    - lineNumber: 52
      expression: "password != null"
      range: "(52,16)-(52,31)"
      evaluatedAs: false
    - lineNumber: 53
      expression: "password != null"
      range: "(53,25)-(53,40)"
      evaluatedAs: false
  - pathId: "path4"
    testPathName: "getKeyManagerFactoryWhenPasswordIsNotNullAndPasswordIsNotNull"
    constructorSignature: "<init>(org.springframework.boot.ssl.SslStoreBundle,org.springframework.boot.ssl.SslBundleKey)\
      \ : void"
    modelFingerprint: "C00AAAB5133B4513E952BFD51513A422"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "FED9278E831855D4096E4FCB84510DDB"
      valueUuid: "target"
    - type: "FIELD"
      name: "storeBundle"
      modelFingerprint: "79268FEE6D98AA70F0F4DBB096E70C2D"
      valueUuid: "storeBundle"
      methodExercised:
        expression: "getKeyStore():keyStore"
    - type: "FIELD"
      name: "key"
      modelFingerprint: "75F09D8267C276C68D8F80BEFB16667D"
      valueUuid: "key"
      methodExercised:
        expression: "assertContainsAlias(keyStore:keyStore):void"
    - type: "FIELD"
      name: "key"
      modelFingerprint: "3DA286A25044E78838F0B38CDEE32976"
      valueUuid: "key"
      methodExercised:
        expression: "getAlias():string"
    - type: "FIELD"
      name: "key"
      modelFingerprint: "7274B887528FD5A805DD6DD0E3B57C42"
      valueUuid: "key"
      methodExercised:
        expression: "getPassword():string3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "98E233D587EAD0CE9540A86DFD428B4B"
      valueUuid: "keyManagerFactory"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "factory.init(store, (password != null) ? password.toCharArray() : null);"
      lineNumber: 53
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: factory - Method: init"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ssl.DefaultSslManagerBundle"
        parameters:
        - name: "storeBundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslStoreBundle"
            uuid: "storeBundle"
        - name: "key"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundleKey"
            uuid: "key"
      valueType: "org.springframework.boot.ssl.DefaultSslManagerBundle"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "storeBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "key"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "key"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "javax.net.ssl.KeyManagerFactory"
        method: "getInstance"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "SunX509"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "javax.net.ssl.KeyManagerFactory"
      uuid: "keyManagerFactory"
    branches:
    - lineNumber: 50
      expression: "alias != null"
      range: "(50,15)-(50,27)"
      evaluatedAs: false
    - lineNumber: 52
      expression: "password != null"
      range: "(52,16)-(52,31)"
      evaluatedAs: true
    - lineNumber: 53
      expression: "password != null"
      range: "(53,25)-(53,40)"
      evaluatedAs: true
  - pathId: "path7"
    testPathName: "getKeyManagerFactoryWhenCaughtRuntimeExceptionThrowsRuntimeException"
    constructorSignature: "<init>(org.springframework.boot.ssl.SslStoreBundle,org.springframework.boot.ssl.SslBundleKey)\
      \ : void"
    modelFingerprint: "2C8AC18467E2A71D0F5266250D3A7B12"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "FED9278E831855D4096E4FCB84510DDB"
      valueUuid: "target"
    - type: "FIELD"
      name: "storeBundle"
      modelFingerprint: "79268FEE6D98AA70F0F4DBB096E70C2D"
      valueUuid: "storeBundle"
      methodExercised:
        expression: "getKeyStore():keyStore"
    - type: "FIELD"
      name: "key"
      modelFingerprint: "75F09D8267C276C68D8F80BEFB16667D"
      valueUuid: "key"
      methodExercised:
        expression: "assertContainsAlias(keyStore:keyStore):void"
    - type: "FIELD"
      name: "key"
      modelFingerprint: "09AC7D3697CA12303DFFA2B1ADC19E19"
      valueUuid: "key"
      methodExercised:
        expression: "getAlias():string"
    - type: "FIELD"
      name: "key"
      modelFingerprint: "7274B887528FD5A805DD6DD0E3B57C42"
      valueUuid: "key"
      methodExercised:
        expression: "getPassword():string3"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "CA787DA4C6A72298CC87E8E6DE246B8F"
      valueUuid: "aliasKeyManagerFactory"
      methodExercised:
        expression: "init(ks:keyStore,password:charArray):void2"
        throwsExceptions:
        - "java.security.KeyStoreException"
        - "java.security.NoSuchAlgorithmException"
        - "java.security.UnrecoverableKeyException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C47223612F71BFE607116AFCAAE5E423"
      valueUuid: "runtimeException"
    disabled: false
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "factory.init(store, (password != null) ? password.toCharArray() : null);"
      lineNumber: 53
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: factory - Method: init"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ssl.DefaultSslManagerBundle"
        parameters:
        - name: "storeBundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslStoreBundle"
            uuid: "storeBundle"
        - name: "key"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundleKey"
            uuid: "key"
      valueType: "org.springframework.boot.ssl.DefaultSslManagerBundle"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "storeBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "key"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getAlias1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ssl.AliasKeyManagerFactory"
        parameters:
        - name: "delegate"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "javax.net.ssl.KeyManagerFactory"
              method: "getInstance"
              methodParameters:
              - value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "SunX509"
                  valueType: "java.lang.String"
                  uuid: "string2"
            valueType: "javax.net.ssl.KeyManagerFactory"
            uuid: "keyManagerFactory"
        - name: "alias"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "return_of_getAlias1"
            valueType: "java.lang.String"
            uuid: "string"
        - name: "algorithm"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "SunX509"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "org.springframework.boot.ssl.AliasKeyManagerFactory"
      uuid: "aliasKeyManagerFactory"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "charArray-item0"
      valueType: "char[]"
      uuid: "charArray"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.RuntimeException"
        parameters: []
      valueType: "java.lang.RuntimeException"
      uuid: "runtimeException"
    branches:
    - lineNumber: 50
      expression: "alias != null"
      range: "(50,15)-(50,27)"
      evaluatedAs: true
    - lineNumber: 52
      expression: "password != null"
      range: "(52,16)-(52,31)"
      evaluatedAs: true
    - lineNumber: 53
      expression: "password != null"
      range: "(53,25)-(53,40)"
      evaluatedAs: true
    - lineNumber: 56
      expression: "catch-exception (RuntimeException)"
      range: "(56,3)-(56,28)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.RuntimeException"
  - pathId: "path10"
    testPathName: "getKeyManagerFactoryWhenPasswordIsNotNullAndCaughtExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(org.springframework.boot.ssl.SslStoreBundle,org.springframework.boot.ssl.SslBundleKey)\
      \ : void"
    modelFingerprint: "D8F0ECB5FA1B73E91110315AD01EFD09"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "FED9278E831855D4096E4FCB84510DDB"
      valueUuid: "target"
    - type: "FIELD"
      name: "storeBundle"
      modelFingerprint: "79268FEE6D98AA70F0F4DBB096E70C2D"
      valueUuid: "storeBundle"
      methodExercised:
        expression: "getKeyStore():keyStore"
    - type: "FIELD"
      name: "key"
      modelFingerprint: "75F09D8267C276C68D8F80BEFB16667D"
      valueUuid: "key"
      methodExercised:
        expression: "assertContainsAlias(keyStore:keyStore):void"
    - type: "FIELD"
      name: "key"
      modelFingerprint: "09AC7D3697CA12303DFFA2B1ADC19E19"
      valueUuid: "key"
      methodExercised:
        expression: "getAlias():string"
    - type: "FIELD"
      name: "key"
      modelFingerprint: "348A423F17C478A81BA106B3E4E7D8D3"
      valueUuid: "key"
      methodExercised:
        expression: "getPassword():string3"
    - type: "FIELD"
      name: "storeBundle"
      modelFingerprint: "1FCBF31470C7FBECF65776C09C948773"
      valueUuid: "storeBundle"
      methodExercised:
        expression: "getKeyStorePassword():string4"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "CA787DA4C6A72298CC87E8E6DE246B8F"
      valueUuid: "aliasKeyManagerFactory"
      methodExercised:
        expression: "init(ks:keyStore,password:charArray):void2"
        throwsExceptions:
        - "java.security.KeyStoreException"
        - "java.security.NoSuchAlgorithmException"
        - "java.security.UnrecoverableKeyException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "E4C77C86725CE371FB861D5964900374"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "factory.init(store, (password != null) ? password.toCharArray() : null);"
      lineNumber: 53
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: factory - Method: init"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ssl.DefaultSslManagerBundle"
        parameters:
        - name: "storeBundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslStoreBundle"
            uuid: "storeBundle"
        - name: "key"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundleKey"
            uuid: "key"
      valueType: "org.springframework.boot.ssl.DefaultSslManagerBundle"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "storeBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "key"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getAlias1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "key"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "storeBundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ssl.AliasKeyManagerFactory"
        parameters:
        - name: "delegate"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "javax.net.ssl.KeyManagerFactory"
              method: "getInstance"
              methodParameters:
              - value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "SunX509"
                  valueType: "java.lang.String"
                  uuid: "string2"
            valueType: "javax.net.ssl.KeyManagerFactory"
            uuid: "keyManagerFactory"
        - name: "alias"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "return_of_getAlias1"
            valueType: "java.lang.String"
            uuid: "string"
        - name: "algorithm"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "SunX509"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "org.springframework.boot.ssl.AliasKeyManagerFactory"
      uuid: "aliasKeyManagerFactory"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "char"
            uuid: "charArray-item0"
      valueType: "char[]"
      uuid: "charArray"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Could not load key manager factory: B"
            valueType: "java.lang.String"
            uuid: "string6"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Exception"
              parameters:
              - name: "message"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "B"
                  valueType: "java.lang.String"
                  uuid: "message"
            valueType: "java.lang.Exception"
            uuid: "exception"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 50
      expression: "alias != null"
      range: "(50,15)-(50,27)"
      evaluatedAs: true
    - lineNumber: 52
      expression: "password != null"
      range: "(52,16)-(52,31)"
      evaluatedAs: false
    - lineNumber: 53
      expression: "password != null"
      range: "(53,25)-(53,40)"
      evaluatedAs: true
    - lineNumber: 59
      expression: "catch-exception (Exception)"
      range: "(59,3)-(59,21)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path11"
    testPathName: "getKeyManagerFactoryWhenPasswordIsNullAndCaughtExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(org.springframework.boot.ssl.SslStoreBundle,org.springframework.boot.ssl.SslBundleKey)\
      \ : void"
    modelFingerprint: "446BDAA48BDE3D1631AE13B30AF2A18C"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "FED9278E831855D4096E4FCB84510DDB"
      valueUuid: "target"
    - type: "FIELD"
      name: "storeBundle"
      modelFingerprint: "79268FEE6D98AA70F0F4DBB096E70C2D"
      valueUuid: "storeBundle"
      methodExercised:
        expression: "getKeyStore():keyStore"
    - type: "FIELD"
      name: "key"
      modelFingerprint: "75F09D8267C276C68D8F80BEFB16667D"
      valueUuid: "key"
      methodExercised:
        expression: "assertContainsAlias(keyStore:keyStore):void"
    - type: "FIELD"
      name: "key"
      modelFingerprint: "09AC7D3697CA12303DFFA2B1ADC19E19"
      valueUuid: "key"
      methodExercised:
        expression: "getAlias():string"
    - type: "FIELD"
      name: "key"
      modelFingerprint: "348A423F17C478A81BA106B3E4E7D8D3"
      valueUuid: "key"
      methodExercised:
        expression: "getPassword():string3"
    - type: "FIELD"
      name: "storeBundle"
      modelFingerprint: "0FE5EDB8404D546CC32CDDD03E90026A"
      valueUuid: "storeBundle"
      methodExercised:
        expression: "getKeyStorePassword():string4"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "BABEE417FADAF39D9F4E186A781B9384"
      valueUuid: "aliasKeyManagerFactory"
      methodExercised:
        expression: "init(ks:keyStore,password:uniqueUuid1):void2"
        throwsExceptions:
        - "java.security.KeyStoreException"
        - "java.security.NoSuchAlgorithmException"
        - "java.security.UnrecoverableKeyException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "AB1E93B291DDFA07E811A7ED83A26DF3"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "factory.init(store, (password != null) ? password.toCharArray() : null);"
      lineNumber: 53
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: factory - Method: init"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ssl.DefaultSslManagerBundle"
        parameters:
        - name: "storeBundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslStoreBundle"
            uuid: "storeBundle"
        - name: "key"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundleKey"
            uuid: "key"
      valueType: "org.springframework.boot.ssl.DefaultSslManagerBundle"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "storeBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "key"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "key"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getAlias1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundleKey"
      uuid: "key"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "storeBundle"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string4"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ssl.AliasKeyManagerFactory"
        parameters:
        - name: "delegate"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "javax.net.ssl.KeyManagerFactory"
              method: "getInstance"
              methodParameters:
              - value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "SunX509"
                  valueType: "java.lang.String"
                  uuid: "string2"
            valueType: "javax.net.ssl.KeyManagerFactory"
            uuid: "keyManagerFactory"
        - name: "alias"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "return_of_getAlias1"
            valueType: "java.lang.String"
            uuid: "string"
        - name: "algorithm"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "SunX509"
            valueType: "java.lang.String"
            uuid: "string2"
      valueType: "org.springframework.boot.ssl.AliasKeyManagerFactory"
      uuid: "aliasKeyManagerFactory"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "NULL"
      uuid: "uniqueUuid1"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Could not load key manager factory: A"
            valueType: "java.lang.String"
            uuid: "string6"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Exception"
              parameters:
              - name: "message"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "A"
                  valueType: "java.lang.String"
                  uuid: "message"
            valueType: "java.lang.Exception"
            uuid: "exception"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 50
      expression: "alias != null"
      range: "(50,15)-(50,27)"
      evaluatedAs: true
    - lineNumber: 52
      expression: "password != null"
      range: "(52,16)-(52,31)"
      evaluatedAs: false
    - lineNumber: 53
      expression: "password != null"
      range: "(53,25)-(53,40)"
      evaluatedAs: false
    - lineNumber: 59
      expression: "catch-exception (Exception)"
      range: "(59,3)-(59,21)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
- method:
    name: "getTrustManagerFactory"
    sourceCodeSignature: "TrustManagerFactory getTrustManagerFactory()"
    returnType: "javax.net.ssl.TrustManagerFactory"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 3
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "40F0AB797C156F9BFAD4B52C2ED18615"
  paths:
  - pathId: "path1"
    testPathName: "getTrustManagerFactoryTest"
    constructorSignature: "<init>(org.springframework.boot.ssl.SslStoreBundle,org.springframework.boot.ssl.SslBundleKey)\
      \ : void"
    modelFingerprint: "A769FA3346AB2AD36AAACD9936C63385"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "D47FFFDAD19C557AD9D0A6CA4013C456"
      valueUuid: "target"
    - type: "FIELD"
      name: "storeBundle"
      modelFingerprint: "542120E7E689441FB3C67D371A05D313"
      valueUuid: "storeBundle"
      methodExercised:
        expression: "getTrustStore():keyStore"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "28981A2FC34A204C42B35A5DDEDF273B"
      valueUuid: "trustManagerFactory"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "factory.init(store);"
      lineNumber: 70
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: factory - Method: init"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ssl.DefaultSslManagerBundle"
        parameters:
        - name: "storeBundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslStoreBundle"
            uuid: "storeBundle"
        - name: "key"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundleKey"
            uuid: "key"
      valueType: "org.springframework.boot.ssl.DefaultSslManagerBundle"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "storeBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "javax.net.ssl.TrustManagerFactory"
        method: "getInstance"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "PKIX"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "javax.net.ssl.TrustManagerFactory"
      uuid: "trustManagerFactory"
  - pathId: "path2"
    testPathName: "getTrustManagerFactoryWhenCaughtExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(org.springframework.boot.ssl.SslStoreBundle,org.springframework.boot.ssl.SslBundleKey)\
      \ : void"
    modelFingerprint: "340CE1CFA26E32FA389FD3D2E0FC05E3"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "D47FFFDAD19C557AD9D0A6CA4013C456"
      valueUuid: "target"
    - type: "FIELD"
      name: "storeBundle"
      modelFingerprint: "542120E7E689441FB3C67D371A05D313"
      valueUuid: "storeBundle"
      methodExercised:
        expression: "getTrustStore():keyStore"
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "7EEF2D5AB43E957CEDDC757C1D296149"
      valueUuid: "trustManagerFactory"
      methodExercised:
        expression: "init(ks:keyStore):void"
        throwsExceptions:
        - "java.security.KeyStoreException"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "7264B4294DF1188F5A08E8FE1F13D45F"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "factory.init(store);"
      lineNumber: 70
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: factory - Method: init"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ssl.DefaultSslManagerBundle"
        parameters:
        - name: "storeBundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslStoreBundle"
            uuid: "storeBundle"
        - name: "key"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundleKey"
            uuid: "key"
      valueType: "org.springframework.boot.ssl.DefaultSslManagerBundle"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslStoreBundle"
      uuid: "storeBundle"
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "javax.net.ssl.TrustManagerFactory"
        method: "getInstance"
        methodParameters:
        - value:
            sapientType: "BASIC"
            content: !<regular>
              value: "PKIX"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "javax.net.ssl.TrustManagerFactory"
      uuid: "trustManagerFactory"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.security.KeyStore"
      uuid: "keyStore"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Could not load trust manager factory: A"
            valueType: "java.lang.String"
            uuid: "string3"
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Exception"
              parameters:
              - name: "message"
                value:
                  sapientType: "BASIC"
                  content: !<regular>
                    value: "A"
                  valueType: "java.lang.String"
                  uuid: "message"
            valueType: "java.lang.Exception"
            uuid: "exception"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 73
      expression: "catch-exception (Exception)"
      range: "(73,3)-(73,21)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 3
      catchExceptions:
      - "java.lang.Exception"
- method:
    name: "getKeyManagerFactoryInstance"
    sourceCodeSignature: "KeyManagerFactory getKeyManagerFactoryInstance(String algorithm)"
    returnType: "javax.net.ssl.KeyManagerFactory"
    throwsExceptions:
    - "java.security.NoSuchAlgorithmException"
    parameters:
    - name: "algorithm"
      type: "java.lang.String"
    instructionFingerprint: "7418FB14E4C944E98ACCFB62FAC78636"
  paths:
  - pathId: "path1"
    testPathName: "getKeyManagerFactoryInstanceTest"
    constructorSignature: "<init>(org.springframework.boot.ssl.SslStoreBundle,org.springframework.boot.ssl.SslBundleKey)\
      \ : void"
    modelFingerprint: "6AB7EA9E92414CCE44388D42ED906B79"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "486D9FA91AB2C52FD0149B9B30166FA7"
      valueUuid: "target"
    - type: "INPUT"
      name: "algorithm"
      modelFingerprint: "2499DCF25A857CA5ADB476E1ABE85AC7"
      valueUuid: "algorithm"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "F7F789C8BB4054EAA3D0FE74466640D5"
      valueUuid: "keyManagerFactory"
    disabled: true
    failureReason:
      reason: "REFLECTION_CALL_FAILURE"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ssl.DefaultSslManagerBundle"
        parameters:
        - name: "storeBundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslStoreBundle"
            uuid: "storeBundle"
        - name: "key"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundleKey"
            uuid: "key"
      valueType: "org.springframework.boot.ssl.DefaultSslManagerBundle"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "algorithm"
    - sapientType: "MOCK"
      valueType: "javax.net.ssl.KeyManagerFactory"
      uuid: "keyManagerFactory"
- method:
    name: "getTrustManagerFactoryInstance"
    sourceCodeSignature: "TrustManagerFactory getTrustManagerFactoryInstance(String\
      \ algorithm)"
    returnType: "javax.net.ssl.TrustManagerFactory"
    throwsExceptions:
    - "java.security.NoSuchAlgorithmException"
    parameters:
    - name: "algorithm"
      type: "java.lang.String"
    instructionFingerprint: "DB8BFFE71317BDF0ADCB5C53C0AA75D4"
  paths:
  - pathId: "path1"
    testPathName: "getTrustManagerFactoryInstanceTest"
    constructorSignature: "<init>(org.springframework.boot.ssl.SslStoreBundle,org.springframework.boot.ssl.SslBundleKey)\
      \ : void"
    modelFingerprint: "C8EC11FDBB8A986D308E4DE1BE08CC55"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "486D9FA91AB2C52FD0149B9B30166FA7"
      valueUuid: "target"
    - type: "INPUT"
      name: "algorithm"
      modelFingerprint: "2499DCF25A857CA5ADB476E1ABE85AC7"
      valueUuid: "algorithm"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A4606926D152A94319B19C49DE4BD7DF"
      valueUuid: "trustManagerFactory"
    disabled: true
    failureReason:
      reason: "REFLECTION_CALL_FAILURE"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ssl.DefaultSslManagerBundle"
        parameters:
        - name: "storeBundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslStoreBundle"
            uuid: "storeBundle"
        - name: "key"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundleKey"
            uuid: "key"
      valueType: "org.springframework.boot.ssl.DefaultSslManagerBundle"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "algorithm"
    - sapientType: "MOCK"
      valueType: "javax.net.ssl.TrustManagerFactory"
      uuid: "trustManagerFactory"
