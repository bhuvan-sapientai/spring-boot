---
modelFingerprint: "D2910B54B9DE7F68B9F02FA6664DFB5C"
targetClass:
  fullClassName: "org.springframework.boot.ssl.DefaultSslBundleRegistry"
methods:
- method:
    name: "registerBundle"
    sourceCodeSignature: "void registerBundle(String name, SslBundle bundle)"
    returnType: "void"
    parameters:
    - name: "name"
      type: "java.lang.String"
    - name: "bundle"
      type: "org.springframework.boot.ssl.SslBundle"
    instructionFingerprint: "AD721A5A7D3050A2D852D6C457C7E80B"
  paths:
  - pathId: "path1"
    testPathName: "registerBundleWhenPreviousIsNotNull"
    constructorSignature: "<init>(java.lang.String,org.springframework.boot.ssl.SslBundle)\
      \ : void"
    modelFingerprint: "6BDC857429A3CBDB243A7BFD28EED7C4"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "61FB3906FC5C13513F03BDE7F073115D"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "5EC9153806E3BAD5D8C7DECC2BA5EC60"
      valueUuid: "name2"
    - type: "INPUT"
      name: "bundle"
      modelFingerprint: "09EF2F3D7BF9C80C565AF037E149C37B"
      valueUuid: "bundle2"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "49586823591C9EA778F39043B5133FE5"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:name2,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "BEDAA7C45195199E528544E980E2600C"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:bundle2,message:uniqueUuid2):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid3,messageSupplier:uniqueUuid4):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "49586823591C9EA778F39043B5133FE5"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:name2,message:uniqueUuid5):void4"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "BEDAA7C45195199E528544E980E2600C"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:bundle2,message:uniqueUuid6):void5"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "6D5FB5022FA0F8747855BBB24780A9DB"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid7,messageSupplier:uniqueUuid8):void6"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_UNFILLED_PARAMS"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ssl.DefaultSslBundleRegistry"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "bundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundle"
            uuid: "bundle2"
      valueType: "org.springframework.boot.ssl.DefaultSslBundleRegistry"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "bundle2"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Name must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "bundle2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Bundle must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid4"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Name must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "bundle2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Bundle must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void6"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid8"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 57
      expression: "previous == null"
      range: "(57,16)-(57,31)"
      evaluatedAs: false
- method:
    name: "updateBundle"
    sourceCodeSignature: "void updateBundle(String name, SslBundle updatedBundle)"
    returnType: "void"
    parameters:
    - name: "name"
      type: "java.lang.String"
    - name: "updatedBundle"
      type: "org.springframework.boot.ssl.SslBundle"
    instructionFingerprint: "C53577556A1016D60425513D33C5B992"
  paths:
  - pathId: "path1"
    testPathName: "updateBundleWhenRegisteredIsNullThrowsNoSuchSslBundleException"
    constructorSignature: "<init>(java.lang.String,org.springframework.boot.ssl.SslBundle)\
      \ : void"
    modelFingerprint: "65FFA5099E5351D747406A97D438550A"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "B5AF81DC1B58B18DDBEA622523738AEE"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "DBD8001A886B525E6009132277F2EE8C"
      valueUuid: "name"
    - type: "INPUT"
      name: "updatedBundle"
      modelFingerprint: "7286528B69FDA414EB96A2E50949D9A7"
      valueUuid: "updatedBundle"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "86E5484D2DC8BEE92F870578D0763011"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:name2,message:uniqueUuid9):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "BEDAA7C45195199E528544E980E2600C"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:bundle,message:uniqueUuid10):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid11,messageSupplier:uniqueUuid12):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "86E5484D2DC8BEE92F870578D0763011"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:name,message:uniqueUuid13):void4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "80110279BD69CC69819E5F3BDE778FC1"
      valueUuid: "noSuchSslBundleException"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_UNFILLED_PARAMS"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ssl.DefaultSslBundleRegistry"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "name1"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "bundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundle"
            uuid: "bundle"
      valueType: "org.springframework.boot.ssl.DefaultSslBundleRegistry"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "object1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "updatedBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Name must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "bundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Bundle must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid11"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid12"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "object1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Name must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid13"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "org.springframework.boot.ssl.NoSuchSslBundleException"
        parameters:
        - name: "bundleName"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "object1"
            valueType: "java.lang.String"
            uuid: "name"
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "message1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "org.springframework.boot.ssl.NoSuchSslBundleException"
      uuid: "noSuchSslBundleException"
      fixed: true
    branches:
    - lineNumber: 78
      expression: "registered == null"
      range: "(78,7)-(78,24)"
      evaluatedAs: true
      internalMethodName: "getRegistered"
  - pathId: "path2"
    testPathName: "updateBundleWhenRegisteredIsNotNull"
    constructorSignature: "<init>(java.lang.String,org.springframework.boot.ssl.SslBundle)\
      \ : void"
    modelFingerprint: "DB55EF4527FDE0099857D6F76968A1D0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "B5AF81DC1B58B18DDBEA622523738AEE"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "63F0AEB18588FDD50129913BF544F767"
      valueUuid: "name"
    - type: "INPUT"
      name: "updatedBundle"
      modelFingerprint: "7286528B69FDA414EB96A2E50949D9A7"
      valueUuid: "updatedBundle"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "86E5484D2DC8BEE92F870578D0763011"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:name2,message:uniqueUuid14):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "BEDAA7C45195199E528544E980E2600C"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:bundle,message:uniqueUuid15):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid16,messageSupplier:uniqueUuid17):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "86E5484D2DC8BEE92F870578D0763011"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:name,message:uniqueUuid18):void4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_UNFILLED_PARAMS"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ssl.DefaultSslBundleRegistry"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "name1"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "bundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundle"
            uuid: "bundle"
      valueType: "org.springframework.boot.ssl.DefaultSslBundleRegistry"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "updatedBundle"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Name must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid14"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "bundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Bundle must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid15"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid16"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid17"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Name must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid18"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 78
      expression: "registered == null"
      range: "(78,7)-(78,24)"
      evaluatedAs: false
      internalMethodName: "getRegistered"
- method:
    name: "getBundle"
    sourceCodeSignature: "SslBundle getBundle(String name)"
    returnType: "org.springframework.boot.ssl.SslBundle"
    parameters:
    - name: "name"
      type: "java.lang.String"
    instructionFingerprint: "7CD755CD8577341EE48168AA3F4B2515"
  paths:
  - pathId: "path1"
    testPathName: "getBundleWhenRegisteredIsNullThrowsNoSuchSslBundleException"
    constructorSignature: "<init>(java.lang.String,org.springframework.boot.ssl.SslBundle)\
      \ : void"
    modelFingerprint: "3D7448567F847782BFCFA4BCBB6CB947"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "B5AF81DC1B58B18DDBEA622523738AEE"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "DBD8001A886B525E6009132277F2EE8C"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "86E5484D2DC8BEE92F870578D0763011"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:name2,message:uniqueUuid19):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "BEDAA7C45195199E528544E980E2600C"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:bundle,message:uniqueUuid20):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid21,messageSupplier:uniqueUuid22):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "86E5484D2DC8BEE92F870578D0763011"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:name,message:uniqueUuid23):void4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "80110279BD69CC69819E5F3BDE778FC1"
      valueUuid: "noSuchSslBundleException"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_UNFILLED_PARAMS"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ssl.DefaultSslBundleRegistry"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "name1"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "bundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundle"
            uuid: "bundle"
      valueType: "org.springframework.boot.ssl.DefaultSslBundleRegistry"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "object1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Name must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid19"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "bundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Bundle must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid20"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid21"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid22"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "object1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Name must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid23"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "org.springframework.boot.ssl.NoSuchSslBundleException"
        parameters:
        - name: "bundleName"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "object1"
            valueType: "java.lang.String"
            uuid: "name"
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "message1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "org.springframework.boot.ssl.NoSuchSslBundleException"
      uuid: "noSuchSslBundleException"
      fixed: true
    branches:
    - lineNumber: 78
      expression: "registered == null"
      range: "(78,7)-(78,24)"
      evaluatedAs: true
      internalMethodName: "getRegistered"
  - pathId: "path2"
    testPathName: "getBundleWhenRegisteredIsNotNull"
    constructorSignature: "<init>(java.lang.String,org.springframework.boot.ssl.SslBundle)\
      \ : void"
    modelFingerprint: "90F6C80EDA9BB16F70EF299FB9DD3DAC"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "B5AF81DC1B58B18DDBEA622523738AEE"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "63F0AEB18588FDD50129913BF544F767"
      valueUuid: "name"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "86E5484D2DC8BEE92F870578D0763011"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:name2,message:uniqueUuid24):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "BEDAA7C45195199E528544E980E2600C"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:bundle,message:uniqueUuid25):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid26,messageSupplier:uniqueUuid27):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "86E5484D2DC8BEE92F870578D0763011"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:name,message:uniqueUuid28):void4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C5B5A462B38A7402CD4187F15EFCC25C"
      valueUuid: "sslBundle"
    disabled: false
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_UNFILLED_PARAMS"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ssl.DefaultSslBundleRegistry"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "name1"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "bundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundle"
            uuid: "bundle"
      valueType: "org.springframework.boot.ssl.DefaultSslBundleRegistry"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Name must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid24"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "bundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Bundle must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid25"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid26"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid27"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Name must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid28"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "sslBundle"
    branches:
    - lineNumber: 78
      expression: "registered == null"
      range: "(78,7)-(78,24)"
      evaluatedAs: false
      internalMethodName: "getRegistered"
- method:
    name: "addBundleUpdateHandler"
    sourceCodeSignature: "void addBundleUpdateHandler(String name, Consumer<SslBundle>\
      \ updateHandler)"
    returnType: "void"
    throwsExceptions:
    - "org.springframework.boot.ssl.NoSuchSslBundleException"
    parameters:
    - name: "name"
      type: "java.lang.String"
    - name: "updateHandler"
      type: "java.util.function.Consumer"
    instructionFingerprint: "5E0E6B03C089DEB1B49AC40636503C46"
  paths:
  - pathId: "path1"
    testPathName: "addBundleUpdateHandlerWhenRegisteredIsNullThrowsNoSuchSslBundleException"
    constructorSignature: "<init>(java.lang.String,org.springframework.boot.ssl.SslBundle)\
      \ : void"
    modelFingerprint: "13E581AEF67EE211469EC0DD7FB0A84C"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "B5AF81DC1B58B18DDBEA622523738AEE"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "DBD8001A886B525E6009132277F2EE8C"
      valueUuid: "name"
    - type: "INPUT"
      name: "updateHandler"
      modelFingerprint: "0E7239E8C006D2189F5872AA260E1DB3"
      valueUuid: "updateHandler"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "86E5484D2DC8BEE92F870578D0763011"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:name2,message:uniqueUuid29):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "BEDAA7C45195199E528544E980E2600C"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:bundle,message:uniqueUuid30):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid31,messageSupplier:uniqueUuid32):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "86E5484D2DC8BEE92F870578D0763011"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:name,message:uniqueUuid33):void4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "80110279BD69CC69819E5F3BDE778FC1"
      valueUuid: "noSuchSslBundleException"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_UNFILLED_PARAMS"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ssl.DefaultSslBundleRegistry"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "name1"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "bundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundle"
            uuid: "bundle"
      valueType: "org.springframework.boot.ssl.DefaultSslBundleRegistry"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "object1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "java.util.function.Consumer"
      uuid: "updateHandler"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Name must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid29"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "bundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Bundle must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid30"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid31"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid32"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "object1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Name must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid33"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "org.springframework.boot.ssl.NoSuchSslBundleException"
        parameters:
        - name: "bundleName"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "object1"
            valueType: "java.lang.String"
            uuid: "name"
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "message1"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "org.springframework.boot.ssl.NoSuchSslBundleException"
      uuid: "noSuchSslBundleException"
      fixed: true
    branches:
    - lineNumber: 78
      expression: "registered == null"
      range: "(78,7)-(78,24)"
      evaluatedAs: true
      internalMethodName: "getRegistered"
  - pathId: "path2"
    testPathName: "addBundleUpdateHandlerWhenRegisteredIsNotNull"
    constructorSignature: "<init>(java.lang.String,org.springframework.boot.ssl.SslBundle)\
      \ : void"
    modelFingerprint: "4627166CA8C80BD6F6E6189ADC4AA3A4"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "B5AF81DC1B58B18DDBEA622523738AEE"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "63F0AEB18588FDD50129913BF544F767"
      valueUuid: "name"
    - type: "INPUT"
      name: "updateHandler"
      modelFingerprint: "0E7239E8C006D2189F5872AA260E1DB3"
      valueUuid: "updateHandler"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "86E5484D2DC8BEE92F870578D0763011"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:name2,message:uniqueUuid34):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "BEDAA7C45195199E528544E980E2600C"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:bundle,message:uniqueUuid35):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "1A7F96A6DD09FE22FCDF20C3F86F6C17"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "state(expression:uniqueUuid36,messageSupplier:uniqueUuid37):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "86E5484D2DC8BEE92F870578D0763011"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:name,message:uniqueUuid38):void4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_UNFILLED_PARAMS"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.ssl.DefaultSslBundleRegistry"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "name1"
            valueType: "java.lang.String"
            uuid: "name2"
        - name: "bundle"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.ssl.SslBundle"
            uuid: "bundle"
      valueType: "org.springframework.boot.ssl.DefaultSslBundleRegistry"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "java.util.function.Consumer"
      uuid: "updateHandler"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Name must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid34"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.ssl.SslBundle"
      uuid: "bundle"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Bundle must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid35"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid36"
      fixed: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid37"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Name must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid38"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 78
      expression: "registered == null"
      range: "(78,7)-(78,24)"
      evaluatedAs: false
      internalMethodName: "getRegistered"
