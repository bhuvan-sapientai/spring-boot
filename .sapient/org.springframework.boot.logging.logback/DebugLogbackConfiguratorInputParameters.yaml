---
modelFingerprint: "E9F430BC427D895626595C4CEF85AE08"
targetClass:
  fullClassName: "org.springframework.boot.logging.logback.DebugLogbackConfigurator"
methods:
- method:
    name: "conversionRule"
    sourceCodeSignature: "void conversionRule(String conversionWord, Class<? extends\
      \ Converter> converterClass)"
    returnType: "void"
    parameters:
    - name: "conversionWord"
      type: "java.lang.String"
    - name: "converterClass"
      type: "java.lang.Class"
    instructionFingerprint: "37156E6E81A4E091161F15C3F8539796"
  paths:
  - pathId: "path1"
    testPathName: "conversionRuleWhenRegistryIsNull"
    constructorSignature: "<init>(ch.qos.logback.classic.LoggerContext) : void"
    modelFingerprint: "8A0E0009011AB2EEBCDBFD2BD7DDAAF7"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "2D0D439B47DD8F2B14C0E4BB5A3115F8"
      valueUuid: "target"
    - type: "INPUT"
      name: "conversionWord"
      modelFingerprint: "85BD8A33C01DB6F71C47BFD457B1CC45"
      valueUuid: "conversionWord"
    - type: "INPUT"
      name: "converterClass"
      modelFingerprint: "3BCFF38761619A0391A3E5BFC5E2C546"
      valueUuid: "converterClass"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "697953E5F16830C570FA1959993E7EAF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:context,message:uniqueUuid1):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "5A7151FF51FFC75A4E5CC7226A860CD1"
      valueUuid: "context"
      methodExercised:
        expression: "getStatusManager():statusManager"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "D9470C5AC3408DAAE71F2141BED7FFA1"
      valueUuid: "statusManager"
      methodExercised:
        expression: "add(arg0:infoStatus):void2"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "DF4ABF5D525CA8884EC7773C62F078D0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasLength(text:conversionWord,message:uniqueUuid2):void3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "BC3A86D50B07347740E96CB1FF47380C"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:converterClass,message:uniqueUuid3):void4"
        staticAccess: true
    - type: "FIELD"
      name: "context"
      modelFingerprint: "028E3DA55ABE3C09AC694B4F6EE2E617"
      valueUuid: "context"
      methodExercised:
        expression: "getObject(key:uniqueUuid4):object"
    - type: "FIELD"
      name: "context"
      modelFingerprint: "27C23FEA047318F6F88E590035ADCD01"
      valueUuid: "context"
      methodExercised:
        expression: "putObject(key:uniqueUuid5,value:hashMap):void5"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.DebugLogbackConfigurator"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "ch.qos.logback.classic.LoggerContext"
            uuid: "context"
      valueType: "org.springframework.boot.logging.logback.DebugLogbackConfigurator"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "conversionWord"
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.core.pattern.Converter"
      valueType: "java.lang.Class"
      genericValueType: "? extends ch.qos.logback.core.pattern.Converter"
      uuid: "converterClass"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Context must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "ch.qos.logback.core.status.InfoStatus"
      uuid: "infoStatus"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "conversionWord"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Conversion word must not be empty"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.core.pattern.Converter"
      valueType: "java.lang.Class"
      genericValueType: "? extends ch.qos.logback.core.pattern.Converter"
      uuid: "converterClass"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Converter class must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "NULL"
      valueType: "java.util.Map"
      uuid: "object"
      fixed: true
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "PATTERN_RULE_REGISTRY"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "PATTERN_RULE_REGISTRY"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashMap"
        parameters: []
        values:
        - sapientType: "PAIR"
          content: !<pair>
            key:
              sapientType: "BASIC"
              content: !<regular>
                value: "B"
              valueType: "java.lang.String"
              uuid: "conversionWord"
            value:
              sapientType: "BASIC"
              content: !<regular>
                value: "ch.qos.logback.core.pattern.Converter"
              valueType: "java.lang.String"
              uuid: "string3"
          valueType: "java.util.Map$Entry"
          genericValueType: "java.lang.String,java.lang.String"
          uuid: "uniqueUuid6"
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,java.lang.String"
      uuid: "hashMap"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 62
      expression: "registry == null"
      range: "(62,7)-(62,22)"
      evaluatedAs: true
      internalMethodName: "conversionRule"
- method:
    name: "appender"
    sourceCodeSignature: "void appender(String name, Appender<?> appender)"
    returnType: "void"
    parameters:
    - name: "name"
      type: "java.lang.String"
    - name: "appender"
      type: "ch.qos.logback.core.Appender"
    instructionFingerprint: "280D9513738CD87C4FFEA0596309054F"
  paths:
  - pathId: "path1"
    testPathName: "appenderTest"
    constructorSignature: "<init>(ch.qos.logback.classic.LoggerContext) : void"
    modelFingerprint: "D07EDC5B2AB693202446314E47084AEA"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "2D0D439B47DD8F2B14C0E4BB5A3115F8"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "5EC9153806E3BAD5D8C7DECC2BA5EC60"
      valueUuid: "name"
    - type: "INPUT"
      name: "appender"
      modelFingerprint: "7F7BD39193774149900B156EE3F3D9BF"
      valueUuid: "appender"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "697953E5F16830C570FA1959993E7EAF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:context,message:uniqueUuid7):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "5A7151FF51FFC75A4E5CC7226A860CD1"
      valueUuid: "context"
      methodExercised:
        expression: "getStatusManager():statusManager"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "557CC94FAF140947308B59FD69B406CC"
      valueUuid: "statusManager"
      methodExercised:
        expression: "add(arg0:infoStatus):void2"
    - type: "LOCAL_VARIABLE"
      name: "appender"
      modelFingerprint: "436B57046D39FDF9B18162C3850556F7"
      valueUuid: "appender"
      methodExercised:
        expression: "setName(arg0:name):void3"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "F246A1A4CCCE0CB9916ED9005A2CCA21"
      methodExercised:
        expression: "start(lifeCycle:appender):void4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.DebugLogbackConfigurator"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "ch.qos.logback.classic.LoggerContext"
            uuid: "context"
      valueType: "org.springframework.boot.logging.logback.DebugLogbackConfigurator"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.Appender"
      genericValueType: "?"
      uuid: "appender"
      nameForMock: "appender"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Context must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "ch.qos.logback.core.status.InfoStatus"
      uuid: "infoStatus"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.Appender"
      genericValueType: "?"
      uuid: "appender"
      nameForMock: "appender"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.Appender"
      genericValueType: "?"
      uuid: "appender"
      nameForMock: "appender"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "logger"
    sourceCodeSignature: "void logger(String name, Level level, boolean additive,\
      \ Appender<ILoggingEvent> appender)"
    returnType: "void"
    parameters:
    - name: "name"
      type: "java.lang.String"
    - name: "level"
      type: "ch.qos.logback.classic.Level"
    - name: "additive"
      type: "boolean"
    - name: "appender"
      type: "ch.qos.logback.core.Appender"
    instructionFingerprint: "246C2DBB61E880A568E31636AEC63399"
  paths:
  - pathId: "path1"
    testPathName: "logger2WhenAppenderIsNotNull"
    constructorSignature: "<init>(ch.qos.logback.classic.LoggerContext) : void"
    modelFingerprint: "C60091C3EC2FD0FAFF43EEEB3E0E1B22"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "2D0D439B47DD8F2B14C0E4BB5A3115F8"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "5EC9153806E3BAD5D8C7DECC2BA5EC60"
      valueUuid: "name"
    - type: "INPUT"
      name: "level"
      modelFingerprint: "70B4D14DE5C0F2EA85819F1E66D4B1CA"
      valueUuid: "level"
    - type: "INPUT"
      name: "additive"
      modelFingerprint: "18BDEDC0B85982474B0ED3AA2CA1395A"
      valueUuid: "additive"
    - type: "INPUT"
      name: "appender"
      modelFingerprint: "DD8642B526BBE427E68E40360BD3D14B"
      valueUuid: "appender"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "697953E5F16830C570FA1959993E7EAF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:context,message:uniqueUuid8):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "5A7151FF51FFC75A4E5CC7226A860CD1"
      valueUuid: "context"
      methodExercised:
        expression: "getStatusManager():statusManager"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "C80AF1F5ECC81D070CDCD0B22B567FEE"
      valueUuid: "statusManager"
      methodExercised:
        expression: "add(arg0:infoStatus):void2"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "5A7151FF51FFC75A4E5CC7226A860CD1"
      valueUuid: "context"
      methodExercised:
        expression: "getStatusManager():statusManager2"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "3BDB276BA30565176208D36263B0632D"
      valueUuid: "statusManager2"
      methodExercised:
        expression: "add(arg0:infoStatus2):void3"
    - type: "FIELD"
      name: "context"
      modelFingerprint: "098BE5483D3478FAF51A271BD7AEE745"
      valueUuid: "context"
      methodExercised:
        expression: "getLogger(name:name):logger"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "109D0BEE70902077318196DA3504BA65"
      valueUuid: "logger"
      methodExercised:
        expression: "setLevel(newLevel:level):void4"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "D32085558B512A74C977104A49B364F6"
      valueUuid: "logger"
      methodExercised:
        expression: "setAdditive(additive:additive):void5"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "7D550E13C9704B4A9EB3CEADAAE68261"
      valueUuid: "logger"
      methodExercised:
        expression: "addAppender(newAppender:appender):void6"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.DebugLogbackConfigurator"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "ch.qos.logback.classic.LoggerContext"
            uuid: "context"
      valueType: "org.springframework.boot.logging.logback.DebugLogbackConfigurator"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Level"
      uuid: "level"
      nameForMock: "level"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "additive"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.Appender"
      genericValueType: "ch.qos.logback.classic.spi.ILoggingEvent"
      uuid: "appender"
      nameForMock: "appender"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Context must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "ch.qos.logback.core.status.InfoStatus"
      uuid: "infoStatus"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager2"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager2"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "ANY"
      valueType: "ch.qos.logback.core.status.InfoStatus"
      uuid: "infoStatus2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Level"
      uuid: "level"
      nameForMock: "level"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void5"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "additive"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.Appender"
      genericValueType: "ch.qos.logback.classic.spi.ILoggingEvent"
      uuid: "appender"
      nameForMock: "appender"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 56
      expression: "appender != null"
      range: "(56,7)-(56,22)"
      evaluatedAs: true
    - lineNumber: 84
      expression: "level != null"
      range: "(84,7)-(84,19)"
      evaluatedAs: true
      internalMethodName: "logger"
    - lineNumber: 88
      expression: "appender != null"
      range: "(88,7)-(88,22)"
      evaluatedAs: true
      internalMethodName: "logger"
- method:
    name: "start"
    sourceCodeSignature: "void start(LifeCycle lifeCycle)"
    returnType: "void"
    parameters:
    - name: "lifeCycle"
      type: "ch.qos.logback.core.spi.LifeCycle"
    instructionFingerprint: "4CA75136274B54EE0D569845F4ED1031"
  paths:
  - pathId: "path1"
    testPathName: "startWhenLifeCycleNotInstanceOfContextAware"
    constructorSignature: "<init>(ch.qos.logback.classic.LoggerContext) : void"
    modelFingerprint: "F91913A92496B1BBA6A3983324C783B9"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "2D0D439B47DD8F2B14C0E4BB5A3115F8"
      valueUuid: "target"
    - type: "INPUT"
      name: "lifeCycle"
      modelFingerprint: "4E61019B63D9943B738DCC3B8F0BCECB"
      valueUuid: "lifeCycle"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "697953E5F16830C570FA1959993E7EAF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:context,message:uniqueUuid9):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "5A7151FF51FFC75A4E5CC7226A860CD1"
      valueUuid: "context"
      methodExercised:
        expression: "getStatusManager():statusManager"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "2B37903D0071D4158B8091F684D370D7"
      valueUuid: "statusManager"
      methodExercised:
        expression: "add(arg0:infoStatus):void2"
    - type: "LOCAL_VARIABLE"
      name: "lifeCycle"
      modelFingerprint: "565D2523B15E2D594CA5E41683AA9AA0"
      valueUuid: "lifeCycle"
      methodExercised:
        expression: "start():void3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.DebugLogbackConfigurator"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "ch.qos.logback.classic.LoggerContext"
            uuid: "context"
      valueType: "org.springframework.boot.logging.logback.DebugLogbackConfigurator"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.spi.LifeCycle"
      uuid: "lifeCycle"
      nameForMock: "lifeCycle"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Context must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "ANY"
      valueType: "ch.qos.logback.core.status.InfoStatus"
      uuid: "infoStatus"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.spi.LifeCycle"
      uuid: "lifeCycle"
      nameForMock: "lifeCycle"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 105
      expression: "lifeCycle instanceof ContextAware contextAware"
      range: "(105,7)-(105,52)"
      evaluatedAs: false
      internalMethodName: "start"
