---
modelFingerprint: "DFA56CB29E75046A27D5A2A2317FF740"
targetClass:
  fullClassName: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
methods:
- method:
    name: "getSystemProperties"
    sourceCodeSignature: "LoggingSystemProperties getSystemProperties(ConfigurableEnvironment\
      \ environment)"
    returnType: "org.springframework.boot.logging.LoggingSystemProperties"
    parameters:
    - name: "environment"
      type: "org.springframework.core.env.ConfigurableEnvironment"
    instructionFingerprint: "6F821F968E41DCA1359BC28BBB883E0E"
  paths:
  - pathId: "path1"
    testPathName: "getSystemPropertiesTest"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "454238A3E591C11D227416CDF1777668"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "environment"
      modelFingerprint: "3F73E3E0E26E26EEEFAD4DD95D3AE3D4"
      valueUuid: "environment"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "253C3078D0024CEC68CE309189112C4E"
      valueUuid: "logbackLoggingSystemPropertiesNotNull"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.ConfigurableEnvironment"
      uuid: "environment"
    - sapientType: "NOT_NULL"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystemProperties"
      uuid: "logbackLoggingSystemPropertiesNotNull"
      fixed: true
- method:
    name: "getStandardConfigLocations"
    sourceCodeSignature: "String[] getStandardConfigLocations()"
    returnType: "java.lang.String[]"
    instructionFingerprint: "7CB42B098F936DE9073B4F4FC055CE93"
  paths:
  - pathId: "path1"
    testPathName: "getStandardConfigLocationsTest"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "8BB3F0A4A212FC1C4C36160F8347B659"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "3D19F614054416F8AFF597778ECE5D32"
      valueUuid: "stringArray"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "BASIC"
            content: !<regular>
              value: "logback-test.groovy"
            valueType: "java.lang.String"
            uuid: "uniqueUuid1"
            fixed: true
          1:
            sapientType: "BASIC"
            content: !<regular>
              value: "logback-test.xml"
            valueType: "java.lang.String"
            uuid: "uniqueUuid2"
            fixed: true
          2:
            sapientType: "BASIC"
            content: !<regular>
              value: "logback.groovy"
            valueType: "java.lang.String"
            uuid: "uniqueUuid3"
            fixed: true
          3:
            sapientType: "BASIC"
            content: !<regular>
              value: "logback.xml"
            valueType: "java.lang.String"
            uuid: "uniqueUuid4"
            fixed: true
      valueType: "java.lang.String[]"
      uuid: "stringArray"
- method:
    name: "beforeInitialize"
    sourceCodeSignature: "void beforeInitialize()"
    returnType: "void"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Throwable"
    - idExternalInstruction: 0
      id: 3
      catchExceptions:
      - "java.lang.Throwable"
    - idExternalInstruction: 0
      id: 4
      catchExceptions:
      - "java.lang.Throwable"
    instructionFingerprint: "34C55087D56CA71F9D54D719E724584C"
  paths:
  - pathId: "path1"
    testPathName: "beforeInitializeWhenIsAlreadyInitializedLoggerContext"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "20AB6BF1F56C101BB9F08E298C733EE1"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0EED9D401952D017F9A3C4F3269A4C94"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid1,obj:iLoggerFactory2,messageSupplier:uniqueUuid2):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "4692CA21EAAC0F66076BAD310C3317BA"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getObject(key:string):object"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid2"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 437
      expression: "loggerContext.getObject(LoggingSystem.class.getName()) != null"
      range: "(437,10)-(437,71)"
      evaluatedAs: true
      internalMethodName: "isAlreadyInitialized"
    - lineNumber: 125
      expression: "isAlreadyInitialized(loggerContext)"
      range: "(125,7)-(125,41)"
      evaluatedAs: true
  - pathId: "path7"
    testPathName: "beforeInitializeWhenIsBridgeJulIntoSlf4jNot"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "6B0DE4A398851F9D313F52F2F56D0D65"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0EED9D401952D017F9A3C4F3269A4C94"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid1,obj:iLoggerFactory2,messageSupplier:uniqueUuid2):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "88E92B36C31359A2A5F601B52BCD8568"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getObject(key:string):object"
    - type: "STATIC"
      name: "ClassUtils.class.real"
      modelFingerprint: "CD6E9F753FD9532B4D42257624CB9F97"
      valueUuid: "ClassUtils.class.real"
      methodExercised:
        expression: "isPresent(className:uniqueUuid3,classLoader:classLoader):boolean3"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "7DC090C830520838B3611EEB03DFF308"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getTurboFilterList():turboFilterList"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "899DE72DBE49775681FCD3011885CA6F"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "add(e:uniqueUuid4):boolean4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid2"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "REAL"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.slf4j.bridge.SLF4JBridgeHandler"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean4"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid4"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 437
      expression: "loggerContext.getObject(LoggingSystem.class.getName()) != null"
      range: "(437,10)-(437,71)"
      evaluatedAs: false
      internalMethodName: "isAlreadyInitialized"
    - lineNumber: 125
      expression: "isAlreadyInitialized(loggerContext)"
      range: "(125,7)-(125,41)"
      evaluatedAs: false
    - lineNumber: 150
      expression: "ClassUtils.isPresent(BRIDGE_HANDLER, getClassLoader())"
      range: "(150,10)-(150,63)"
      evaluatedAs: false
      internalMethodName: "isBridgeHandlerAvailable"
    - lineNumber: 146
      expression: "isBridgeHandlerAvailable()"
      range: "(146,10)-(146,35)"
      evaluatedAs: false
      internalMethodName: "isBridgeJulIntoSlf4j"
    - lineNumber: 135
      expression: "isBridgeJulIntoSlf4j()"
      range: "(135,8)-(135,29)"
      evaluatedAs: false
      internalMethodName: "configureJdkLoggingBridgeHandler"
  - pathId: "path9"
    testPathName: "beforeInitializeWhenCaughtThrowable"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "1BF4166736E287249CB421FD31A49A9E"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid11,obj:iLoggerFactory,messageSupplier:uniqueUuid12):void9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "88E92B36C31359A2A5F601B52BCD8568"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "getObject(key:string):object"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "8981CA7F9A75DCF6D7565B26D60DDD7F"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid13,classLoader:classLoader):boolean2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "7DC090C830520838B3611EEB03DFF308"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "getTurboFilterList():turboFilterList"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "899DE72DBE49775681FCD3011885CA6F"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "add(e:uniqueUuid14):boolean3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "DEPENDENCY_TO_THROW_EXCEPTION_NOT_FOUND"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid12"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.slf4j.bridge.SLF4JBridgeHandler"
      valueType: "java.lang.String"
      uuid: "uniqueUuid13"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid14"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: false
      internalMethodName: "getLoggerFactory"
    - lineNumber: 437
      expression: "loggerContext.getObject(LoggingSystem.class.getName()) != null"
      range: "(437,10)-(437,71)"
      evaluatedAs: false
      internalMethodName: "isAlreadyInitialized"
    - lineNumber: 125
      expression: "isAlreadyInitialized(loggerContext)"
      range: "(125,7)-(125,41)"
      evaluatedAs: false
    - lineNumber: 150
      expression: "ClassUtils.isPresent(BRIDGE_HANDLER, getClassLoader())"
      range: "(150,10)-(150,63)"
      evaluatedAs: false
      internalMethodName: "isBridgeHandlerAvailable"
    - lineNumber: 146
      expression: "isBridgeHandlerAvailable()"
      range: "(146,10)-(146,35)"
      evaluatedAs: false
      internalMethodName: "isBridgeJulIntoSlf4j"
    - lineNumber: 135
      expression: "isBridgeJulIntoSlf4j()"
      range: "(135,8)-(135,29)"
      evaluatedAs: false
      internalMethodName: "configureJdkLoggingBridgeHandler"
    - lineNumber: 140
      expression: "catch-exception (Throwable)"
      range: "(140,3)-(140,21)"
      evaluatedAs: true
      internalMethodName: "configureJdkLoggingBridgeHandler"
    catchBlockExercised:
      idExternalInstruction: 22
      id: 2
      catchExceptions:
      - "java.lang.Throwable"
  - pathId: "path4"
    testPathName: "beforeInitializeWhen0IndexOfHandlersNotInstanceOfConsoleHandlerAndIsJulUsingASingleConsoleHandlerAtMostNotAndIsBridgeJu"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "10F7D29BA1034330A8AEB7848D9DAE3C"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid15,obj:iLoggerFactory2,messageSupplier:uniqueUuid16):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "88E92B36C31359A2A5F601B52BCD8568"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getObject(key:string):object"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "5AE9821C7CDDD05196EAF5A4EB8C34A6"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid17,classLoader:classLoader):boolean3"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "7DC090C830520838B3611EEB03DFF308"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getTurboFilterList():turboFilterList"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "899DE72DBE49775681FCD3011885CA6F"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "add(e:uniqueUuid18):boolean5"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid15"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid16"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.slf4j.bridge.SLF4JBridgeHandler"
      valueType: "java.lang.String"
      uuid: "uniqueUuid17"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean5"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid18"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 437
      expression: "loggerContext.getObject(LoggingSystem.class.getName()) != null"
      range: "(437,10)-(437,71)"
      evaluatedAs: false
      internalMethodName: "isAlreadyInitialized"
    - lineNumber: 125
      expression: "isAlreadyInitialized(loggerContext)"
      range: "(125,7)-(125,41)"
      evaluatedAs: false
    - lineNumber: 150
      expression: "ClassUtils.isPresent(BRIDGE_HANDLER, getClassLoader())"
      range: "(150,10)-(150,63)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerAvailable"
    - lineNumber: 146
      expression: "isBridgeHandlerAvailable()"
      range: "(146,10)-(146,35)"
      evaluatedAs: true
      internalMethodName: "isBridgeJulIntoSlf4j"
    - lineNumber: 156
      expression: "handlers.length == 0"
      range: "(156,10)-(156,29)"
      evaluatedAs: false
      internalMethodName: "isJulUsingASingleConsoleHandlerAtMost"
    - lineNumber: 156
      expression: "handlers.length == 1"
      range: "(156,35)-(156,54)"
      evaluatedAs: true
      internalMethodName: "isJulUsingASingleConsoleHandlerAtMost"
    - lineNumber: 156
      expression: "handlers[0] instanceof ConsoleHandler"
      range: "(156,59)-(156,95)"
      evaluatedAs: false
      internalMethodName: "isJulUsingASingleConsoleHandlerAtMost"
    - lineNumber: 146
      expression: "isJulUsingASingleConsoleHandlerAtMost()"
      range: "(146,40)-(146,78)"
      evaluatedAs: false
      internalMethodName: "isBridgeJulIntoSlf4j"
    - lineNumber: 135
      expression: "isBridgeJulIntoSlf4j()"
      range: "(135,8)-(135,29)"
      evaluatedAs: false
      internalMethodName: "configureJdkLoggingBridgeHandler"
  - pathId: "path2"
    testPathName: "beforeInitializeWhen0IndexOfHandlersInstanceOfConsoleHandler"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "DCDA9659370A7F05823F209324112C86"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid19,obj:iLoggerFactory2,messageSupplier:uniqueUuid20):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "88E92B36C31359A2A5F601B52BCD8568"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getObject(key:string):object"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "5AE9821C7CDDD05196EAF5A4EB8C34A6"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid21,classLoader:classLoader):boolean3"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "7DC090C830520838B3611EEB03DFF308"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getTurboFilterList():turboFilterList"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "899DE72DBE49775681FCD3011885CA6F"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "add(e:uniqueUuid22):boolean6"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "ERROR_RECALCULATING_SUGGESTED_VALUES"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid19"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid20"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.slf4j.bridge.SLF4JBridgeHandler"
      valueType: "java.lang.String"
      uuid: "uniqueUuid21"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean6"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid22"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 437
      expression: "loggerContext.getObject(LoggingSystem.class.getName()) != null"
      range: "(437,10)-(437,71)"
      evaluatedAs: false
      internalMethodName: "isAlreadyInitialized"
    - lineNumber: 125
      expression: "isAlreadyInitialized(loggerContext)"
      range: "(125,7)-(125,41)"
      evaluatedAs: false
    - lineNumber: 150
      expression: "ClassUtils.isPresent(BRIDGE_HANDLER, getClassLoader())"
      range: "(150,10)-(150,63)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerAvailable"
    - lineNumber: 146
      expression: "isBridgeHandlerAvailable()"
      range: "(146,10)-(146,35)"
      evaluatedAs: true
      internalMethodName: "isBridgeJulIntoSlf4j"
    - lineNumber: 156
      expression: "handlers.length == 0"
      range: "(156,10)-(156,29)"
      evaluatedAs: false
      internalMethodName: "isJulUsingASingleConsoleHandlerAtMost"
    - lineNumber: 156
      expression: "handlers.length == 1"
      range: "(156,35)-(156,54)"
      evaluatedAs: true
      internalMethodName: "isJulUsingASingleConsoleHandlerAtMost"
    - lineNumber: 156
      expression: "handlers[0] instanceof ConsoleHandler"
      range: "(156,59)-(156,95)"
      evaluatedAs: true
      internalMethodName: "isJulUsingASingleConsoleHandlerAtMost"
    - lineNumber: 146
      expression: "isJulUsingASingleConsoleHandlerAtMost()"
      range: "(146,40)-(146,78)"
      evaluatedAs: true
      internalMethodName: "isBridgeJulIntoSlf4j"
    - lineNumber: 135
      expression: "isBridgeJulIntoSlf4j()"
      range: "(135,8)-(135,29)"
      evaluatedAs: true
      internalMethodName: "configureJdkLoggingBridgeHandler"
    - lineNumber: 173
      expression: "handlers.length == 1"
      range: "(173,8)-(173,27)"
      evaluatedAs: true
      internalMethodName: "removeDefaultRootHandler"
    - lineNumber: 173
      expression: "handlers[0] instanceof ConsoleHandler"
      range: "(173,32)-(173,68)"
      evaluatedAs: true
      internalMethodName: "removeDefaultRootHandler"
- method:
    name: "initialize"
    sourceCodeSignature: "void initialize(LoggingInitializationContext initializationContext,\
      \ String configLocation, LogFile logFile)"
    returnType: "void"
    parameters:
    - name: "initializationContext"
      type: "org.springframework.boot.logging.LoggingInitializationContext"
    - name: "configLocation"
      type: "java.lang.String"
    - name: "logFile"
      type: "org.springframework.boot.logging.LogFile"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
    instructionFingerprint: "7D79DBD590909125B495ECB3F671D6F4"
  paths:
  - pathId: "path15"
    testPathName: "initializeWhenCaughtInterruptedExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "90DC68E9B907EB45E6CFCCCA3562728B"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "configLocation"
      modelFingerprint: "B3892ED02ADD2D85E9D4127CB28982BA"
      valueUuid: "configLocation"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Thread.class"
      modelFingerprint: "066E7FA821C72A4CA44720CF40374C42"
      valueUuid: "Thread.class"
      methodExercised:
        expression: "sleep(arg0:uniqueUuid23):void9"
        throwsExceptions:
        - "java.lang.InterruptedException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "6A4954B46E576A51EAC0DC702989E353"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_POTENTIAL_HARM_FULL_SYSTEM_CALL"
      source: "Thread.currentThread().interrupt();"
      lineNumber: 414
      details: "Potential harmful system call (Thread.interrupt) detected; Learn more:\
        \ https://github.com/Sapient-AI/docs#disabled-generated-tests"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: "configLocation1"
      valueType: "java.lang.String"
      uuid: "configLocation"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "java.lang.Thread"
      uuid: "Thread.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 50
      valueType: "long"
      uuid: "uniqueUuid23"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Interrupted while waiting for non-substitute logger factory"
            valueType: "java.lang.String"
            uuid: "uniqueUuid24"
            fixed: true
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.InterruptedException"
              parameters: []
            valueType: "java.lang.InterruptedException"
            uuid: "interruptedException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 413
      expression: "catch-exception (InterruptedException)"
      range: "(413,4)-(413,33)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    catchBlockExercised:
      idExternalInstruction: 3
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
  - pathId: "path1"
    testPathName: "initializeWhenIsAlreadyInitializedLoggerContext"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "B31CBCFC66820AEB247392B01F30BF22"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0EED9D401952D017F9A3C4F3269A4C94"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "configLocation"
      modelFingerprint: "037AEE3B9E55A2F3B008BDCC017C9378"
      valueUuid: "configLocation"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid1,obj:iLoggerFactory2,messageSupplier:uniqueUuid2):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "4692CA21EAAC0F66076BAD310C3317BA"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getObject(key:string):object"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: "configLocation1"
      valueType: "java.lang.String"
      uuid: "configLocation"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid2"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 437
      expression: "loggerContext.getObject(LoggingSystem.class.getName()) != null"
      range: "(437,10)-(437,71)"
      evaluatedAs: true
      internalMethodName: "isAlreadyInitialized"
    - lineNumber: 185
      expression: "isAlreadyInitialized(loggerContext)"
      range: "(185,7)-(185,41)"
      evaluatedAs: true
  - pathId: "path16"
    testPathName: "initializeWhenLoggerContextGetObjectLoggingSystemGetNameIsNotNullAndIsAlreadyInitializedLoggerContext"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "B5966B2F7666F36696249FAC22AFF39B"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "configLocation"
      modelFingerprint: "B3892ED02ADD2D85E9D4127CB28982BA"
      valueUuid: "configLocation"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid27,obj:iLoggerFactory,messageSupplier:uniqueUuid28):void9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "4692CA21EAAC0F66076BAD310C3317BA"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "getObject(key:string):object"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "DEPENDENCY_TO_THROW_EXCEPTION_NOT_FOUND"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: "configLocation1"
      valueType: "java.lang.String"
      uuid: "configLocation"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid27"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid28"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: false
      internalMethodName: "getLoggerFactory"
    - lineNumber: 413
      expression: "catch-exception (InterruptedException)"
      range: "(413,4)-(413,33)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 437
      expression: "loggerContext.getObject(LoggingSystem.class.getName()) != null"
      range: "(437,10)-(437,71)"
      evaluatedAs: true
      internalMethodName: "isAlreadyInitialized"
    - lineNumber: 185
      expression: "isAlreadyInitialized(loggerContext)"
      range: "(185,7)-(185,41)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 3
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
  - pathId: "path13"
    testPathName: "initializeWhenStringUtilsHasTextSystemGetPropertyCONFIGURATION_FILE_PROPERTYAndCaughtInterruThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "FC9F10CB69AD7DAB363CB4DD39AF09CC"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "103943554753788D91DF39AF76338D95"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "configLocation"
      modelFingerprint: "A0FC8324DE9BC1A4EBE5B431EF21B8CE"
      valueUuid: "configLocation"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid29,obj:iLoggerFactory,messageSupplier:uniqueUuid30):void9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "88E92B36C31359A2A5F601B52BCD8568"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "getObject(key:string):object"
    - type: "STATIC"
      name: "AotDetector.class.real"
      modelFingerprint: "A651F35C9CB1BB4329EA23C459C95680"
      valueUuid: "AotDetector.class.real"
      methodExercised:
        expression: "useGeneratedArtifacts():boolean2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "343F4757C4E645C5D95B6C1E12B9BF12"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:configLocation):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "SystemPropertyUtils.class.real"
      modelFingerprint: "BE4F3C0573505F13F3344CAEF0337590"
      valueUuid: "SystemPropertyUtils.class.real"
      methodExercised:
        expression: "resolvePlaceholders(text:configLocation):string2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "initializationContext"
      modelFingerprint: "B43BCFF9474519DE3742BE7B13AE4678"
      valueUuid: "initializationContext"
      methodExercised:
        expression: "getEnvironment():environment"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "D74C95336106C28CDCE73054A310CC45"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "putObject(key:string3,value:environment):void11"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "5451BA99C45FE57B1B58388DBDEA897D"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "getTurboFilterList():turboFilterList"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "FA7085C9B1957BC84D6731B1D9FAAE99"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "remove(o:uniqueUuid32):boolean4"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "33228471B9841C2BFB25BCF695BE6335"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "putObject(key:string4,value:object2):void12"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "30B952EF9F46152D72639415F659BC3D"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasText(str:string5):boolean5"
        staticAccess: true
    - type: "STATIC"
      name: "Thread.class"
      modelFingerprint: "066E7FA821C72A4CA44720CF40374C42"
      valueUuid: "Thread.class"
      methodExercised:
        expression: "sleep(arg0:uniqueUuid34):void13"
        throwsExceptions:
        - "java.lang.InterruptedException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "6A4954B46E576A51EAC0DC702989E353"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_POTENTIAL_HARM_FULL_SYSTEM_CALL"
      source: "Thread.currentThread().interrupt();"
      lineNumber: 414
      details: "Potential harmful system call (Thread.interrupt) detected; Learn more:\
        \ https://github.com/Sapient-AI/docs#disabled-generated-tests"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "configLocation"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid29"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid30"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "REAL"
      valueType: "org.springframework.aot.AotDetector"
      uuid: "AotDetector.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "configLocation"
    - sapientType: "REAL"
      valueType: "org.springframework.util.SystemPropertyUtils"
      uuid: "SystemPropertyUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "configLocation"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.core.env.Environment"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          uuid: "uniqueUuid33"
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          uuid: "uniqueUuid33"
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean4"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid32"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void12"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "ANY"
      valueType: "java.lang.Object"
      uuid: "object2"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "string5"
    - sapientType: "MOCK"
      valueType: "java.lang.Thread"
      uuid: "Thread.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void13"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 50
      valueType: "long"
      uuid: "uniqueUuid34"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Interrupted while waiting for non-substitute logger factory"
            valueType: "java.lang.String"
            uuid: "uniqueUuid35"
            fixed: true
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.InterruptedException"
              parameters: []
            valueType: "java.lang.InterruptedException"
            uuid: "interruptedException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: false
      internalMethodName: "getLoggerFactory"
    - lineNumber: 437
      expression: "loggerContext.getObject(LoggingSystem.class.getName()) != null"
      range: "(437,10)-(437,71)"
      evaluatedAs: false
      internalMethodName: "isAlreadyInitialized"
    - lineNumber: 185
      expression: "isAlreadyInitialized(loggerContext)"
      range: "(185,7)-(185,41)"
      evaluatedAs: false
    - lineNumber: 202
      expression: "!AotDetector.useGeneratedArtifacts()"
      range: "(202,7)-(202,42)"
      evaluatedAs: true
      internalMethodName: "initializeFromAotGeneratedArtifactsIfPossible"
    - lineNumber: 188
      expression: "!initializeFromAotGeneratedArtifactsIfPossible(initializationContext,\
        \ logFile)"
      range: "(188,7)-(188,84)"
      evaluatedAs: true
    - lineNumber: 57
      expression: "StringUtils.hasLength(configLocation)"
      range: "(57,7)-(57,43)"
      evaluatedAs: true
      internalMethodName: "initialize"
    - lineNumber: 194
      expression: "StringUtils.hasText(System.getProperty(CONFIGURATION_FILE_PROPERTY))"
      range: "(194,7)-(194,74)"
      evaluatedAs: true
    - lineNumber: 413
      expression: "catch-exception (InterruptedException)"
      range: "(413,4)-(413,33)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    catchBlockExercised:
      idExternalInstruction: 3
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
  - pathId: "path2"
    testPathName: "initializeWhenLoggerROOT_LOGGER_NAMENotEqualsName"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "311335BD097C11E5A4C080629AB86C56"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "103943554753788D91DF39AF76338D95"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "configLocation"
      modelFingerprint: "A0FC8324DE9BC1A4EBE5B431EF21B8CE"
      valueUuid: "configLocation"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid36,obj:iLoggerFactory2,messageSupplier:uniqueUuid37):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "88E92B36C31359A2A5F601B52BCD8568"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getObject(key:string):object"
    - type: "STATIC"
      name: "AotDetector.class.real"
      modelFingerprint: "A651F35C9CB1BB4329EA23C459C95680"
      valueUuid: "AotDetector.class.real"
      methodExercised:
        expression: "useGeneratedArtifacts():boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "343F4757C4E645C5D95B6C1E12B9BF12"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:configLocation):boolean4"
        staticAccess: true
    - type: "STATIC"
      name: "SystemPropertyUtils.class.real"
      modelFingerprint: "BE4F3C0573505F13F3344CAEF0337590"
      valueUuid: "SystemPropertyUtils.class.real"
      methodExercised:
        expression: "resolvePlaceholders(text:configLocation):string2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "initializationContext"
      modelFingerprint: "B43BCFF9474519DE3742BE7B13AE4678"
      valueUuid: "initializationContext"
      methodExercised:
        expression: "getEnvironment():environment"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "D74C95336106C28CDCE73054A310CC45"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "putObject(key:string3,value:environment):void12"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "5451BA99C45FE57B1B58388DBDEA897D"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getTurboFilterList():turboFilterList"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "FA7085C9B1957BC84D6731B1D9FAAE99"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "remove(o:uniqueUuid39):boolean5"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "33228471B9841C2BFB25BCF695BE6335"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "putObject(key:string4,value:object2):void13"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "30B952EF9F46152D72639415F659BC3D"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasText(str:string5):boolean6"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid41,obj:iLoggerFactory4,messageSupplier:uniqueUuid42):void15"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "E0332E7EBB8A249363DBC7C0617D0628"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:string6):boolean9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "B831F459F5D07F44A311E4F074C44405"
      valueUuid: "iLoggerFactory4"
      methodExercised:
        expression: "getLogger(name:string6):logger"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "55F5A1D87B93E4386AAB7710FEAD24D6"
      valueUuid: "logger"
      methodExercised:
        expression: "warn(msg:uniqueUuid43):void16"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_INTERNAL_METHOD_FAILURE"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "configLocation"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid36"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid37"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "REAL"
      valueType: "org.springframework.aot.AotDetector"
      uuid: "AotDetector.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "configLocation"
    - sapientType: "REAL"
      valueType: "org.springframework.util.SystemPropertyUtils"
      uuid: "SystemPropertyUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "configLocation"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void12"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.core.env.Environment"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          uuid: "uniqueUuid40"
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          uuid: "uniqueUuid40"
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean5"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid39"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void13"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "ANY"
      valueType: "java.lang.Object"
      uuid: "object2"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "string5"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void15"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid41"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory4"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid42"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean9"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory4"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void16"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Ignoring 'logback.configurationFile' system property. Please use 'logging.config'\
          \ instead."
      valueType: "java.lang.String"
      uuid: "uniqueUuid43"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 437
      expression: "loggerContext.getObject(LoggingSystem.class.getName()) != null"
      range: "(437,10)-(437,71)"
      evaluatedAs: false
      internalMethodName: "isAlreadyInitialized"
    - lineNumber: 185
      expression: "isAlreadyInitialized(loggerContext)"
      range: "(185,7)-(185,41)"
      evaluatedAs: false
    - lineNumber: 202
      expression: "!AotDetector.useGeneratedArtifacts()"
      range: "(202,7)-(202,42)"
      evaluatedAs: true
      internalMethodName: "initializeFromAotGeneratedArtifactsIfPossible"
    - lineNumber: 188
      expression: "!initializeFromAotGeneratedArtifactsIfPossible(initializationContext,\
        \ logFile)"
      range: "(188,7)-(188,84)"
      evaluatedAs: true
    - lineNumber: 57
      expression: "StringUtils.hasLength(configLocation)"
      range: "(57,7)-(57,43)"
      evaluatedAs: true
      internalMethodName: "initialize"
    - lineNumber: 194
      expression: "StringUtils.hasText(System.getProperty(CONFIGURATION_FILE_PROPERTY))"
      range: "(194,7)-(194,74)"
      evaluatedAs: true
    - lineNumber: 355
      expression: "!StringUtils.hasLength(name)"
      range: "(355,7)-(355,34)"
      evaluatedAs: false
      internalMethodName: "getLoggerName"
    - lineNumber: 355
      expression: "Logger.ROOT_LOGGER_NAME.equals(name)"
      range: "(355,39)-(355,74)"
      evaluatedAs: false
      internalMethodName: "getLoggerName"
  - pathId: "path14"
    testPathName: "initializeWhenCaughtInterruptedExceptionAndStringUtilsHasLengthNameAndLoggerROOT_LOGGER_NAMENotEqualsName"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "3E8E169C86346ECFEFC282D6C6D6DBCA"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "103943554753788D91DF39AF76338D95"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "configLocation"
      modelFingerprint: "A0FC8324DE9BC1A4EBE5B431EF21B8CE"
      valueUuid: "configLocation"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid44,obj:iLoggerFactory,messageSupplier:uniqueUuid45):void9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "88E92B36C31359A2A5F601B52BCD8568"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "getObject(key:string):object"
    - type: "STATIC"
      name: "AotDetector.class.real"
      modelFingerprint: "A651F35C9CB1BB4329EA23C459C95680"
      valueUuid: "AotDetector.class.real"
      methodExercised:
        expression: "useGeneratedArtifacts():boolean2"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "343F4757C4E645C5D95B6C1E12B9BF12"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:configLocation):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "SystemPropertyUtils.class.real"
      modelFingerprint: "BE4F3C0573505F13F3344CAEF0337590"
      valueUuid: "SystemPropertyUtils.class.real"
      methodExercised:
        expression: "resolvePlaceholders(text:configLocation):string2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "initializationContext"
      modelFingerprint: "B43BCFF9474519DE3742BE7B13AE4678"
      valueUuid: "initializationContext"
      methodExercised:
        expression: "getEnvironment():environment"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "D74C95336106C28CDCE73054A310CC45"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "putObject(key:string3,value:environment):void11"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "5451BA99C45FE57B1B58388DBDEA897D"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "getTurboFilterList():turboFilterList"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "FA7085C9B1957BC84D6731B1D9FAAE99"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "remove(o:uniqueUuid47):boolean4"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "33228471B9841C2BFB25BCF695BE6335"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "putObject(key:string4,value:object2):void12"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "30B952EF9F46152D72639415F659BC3D"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasText(str:string5):boolean5"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid49,obj:iLoggerFactory2,messageSupplier:uniqueUuid50):void13"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "E0332E7EBB8A249363DBC7C0617D0628"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:string6):boolean7"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "B831F459F5D07F44A311E4F074C44405"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getLogger(name:string6):logger"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "55F5A1D87B93E4386AAB7710FEAD24D6"
      valueUuid: "logger"
      methodExercised:
        expression: "warn(msg:uniqueUuid51):void14"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_INTERNAL_METHOD_FAILURE"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "configLocation"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid44"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid45"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "REAL"
      valueType: "org.springframework.aot.AotDetector"
      uuid: "AotDetector.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "configLocation"
    - sapientType: "REAL"
      valueType: "org.springframework.util.SystemPropertyUtils"
      uuid: "SystemPropertyUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "configLocation"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.core.env.Environment"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          uuid: "uniqueUuid48"
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          uuid: "uniqueUuid48"
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean4"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid47"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void12"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "ANY"
      valueType: "java.lang.Object"
      uuid: "object2"
      fixed: true
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "string5"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void13"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid49"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid50"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean7"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void14"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "Ignoring 'logback.configurationFile' system property. Please use 'logging.config'\
          \ instead."
      valueType: "java.lang.String"
      uuid: "uniqueUuid51"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: false
      internalMethodName: "getLoggerFactory"
    - lineNumber: 437
      expression: "loggerContext.getObject(LoggingSystem.class.getName()) != null"
      range: "(437,10)-(437,71)"
      evaluatedAs: false
      internalMethodName: "isAlreadyInitialized"
    - lineNumber: 185
      expression: "isAlreadyInitialized(loggerContext)"
      range: "(185,7)-(185,41)"
      evaluatedAs: false
    - lineNumber: 202
      expression: "!AotDetector.useGeneratedArtifacts()"
      range: "(202,7)-(202,42)"
      evaluatedAs: true
      internalMethodName: "initializeFromAotGeneratedArtifactsIfPossible"
    - lineNumber: 188
      expression: "!initializeFromAotGeneratedArtifactsIfPossible(initializationContext,\
        \ logFile)"
      range: "(188,7)-(188,84)"
      evaluatedAs: true
    - lineNumber: 57
      expression: "StringUtils.hasLength(configLocation)"
      range: "(57,7)-(57,43)"
      evaluatedAs: true
      internalMethodName: "initialize"
    - lineNumber: 194
      expression: "StringUtils.hasText(System.getProperty(CONFIGURATION_FILE_PROPERTY))"
      range: "(194,7)-(194,74)"
      evaluatedAs: true
    - lineNumber: 413
      expression: "catch-exception (InterruptedException)"
      range: "(413,4)-(413,33)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 355
      expression: "!StringUtils.hasLength(name)"
      range: "(355,7)-(355,34)"
      evaluatedAs: false
      internalMethodName: "getLoggerName"
    - lineNumber: 355
      expression: "Logger.ROOT_LOGGER_NAME.equals(name)"
      range: "(355,39)-(355,74)"
      evaluatedAs: false
      internalMethodName: "getLoggerName"
    catchBlockExercised:
      idExternalInstruction: 3
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
  - pathId: "path5"
    testPathName: "initializeWhenLogFileIsNullAndStringUtilsNotHasTextSystemGetPropertyCONFIGURATION_FILE_PROPERTY"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "8BD780EFD05FD9BD6B8CE1D1C8F4078E"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "103943554753788D91DF39AF76338D95"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "configLocation"
      modelFingerprint: "81AC94CF288F740E4DD60456DFA3BBE0"
      valueUuid: "configLocation"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "9B1BF83008E682F052DC52C99E63D7C5"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid52,obj:iLoggerFactory2,messageSupplier:uniqueUuid53):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "88E92B36C31359A2A5F601B52BCD8568"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getObject(key:string):object"
    - type: "STATIC"
      name: "AotDetector.class.real"
      modelFingerprint: "A651F35C9CB1BB4329EA23C459C95680"
      valueUuid: "AotDetector.class.real"
      methodExercised:
        expression: "useGeneratedArtifacts():boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "2619BA9F9D4C119510AD7D984F1B0F19"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:configLocation):boolean4"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "3151A922D4C4C014413E146DFD8BC4E5"
      valueUuid: "classPathResource"
      methodExercised:
        expression: "exists():boolean5"
    - type: "LOCAL_VARIABLE"
      name: "initializationContext"
      modelFingerprint: "B43BCFF9474519DE3742BE7B13AE4678"
      valueUuid: "initializationContext"
      methodExercised:
        expression: "getEnvironment():environment"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "D74C95336106C28CDCE73054A310CC45"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "putObject(key:string4,value:environment):void11"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "5451BA99C45FE57B1B58388DBDEA897D"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getTurboFilterList():turboFilterList"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "FA7085C9B1957BC84D6731B1D9FAAE99"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "remove(o:uniqueUuid55):boolean6"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "33228471B9841C2BFB25BCF695BE6335"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "putObject(key:string5,value:object2):void12"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "539C2EC3323FF482ED2EAE7FC2E8A4CD"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasText(str:string6):boolean7"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_INTERNAL_METHOD_ACCESS_FAILURE"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "configLocation"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid52"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid53"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "REAL"
      valueType: "org.springframework.aot.AotDetector"
      uuid: "AotDetector.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "C"
      valueType: "java.lang.String"
      uuid: "configLocation"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.io.ClassPathResource"
        parameters:
        - name: "path"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "string2"
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.core.io.ClassPathResource"
      uuid: "classPathResource"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.core.env.Environment"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          uuid: "uniqueUuid56"
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          uuid: "uniqueUuid56"
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean6"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid55"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void12"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string5"
    - sapientType: "ANY"
      valueType: "java.lang.Object"
      uuid: "object2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean7"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 437
      expression: "loggerContext.getObject(LoggingSystem.class.getName()) != null"
      range: "(437,10)-(437,71)"
      evaluatedAs: false
      internalMethodName: "isAlreadyInitialized"
    - lineNumber: 185
      expression: "isAlreadyInitialized(loggerContext)"
      range: "(185,7)-(185,41)"
      evaluatedAs: false
    - lineNumber: 202
      expression: "!AotDetector.useGeneratedArtifacts()"
      range: "(202,7)-(202,42)"
      evaluatedAs: true
      internalMethodName: "initializeFromAotGeneratedArtifactsIfPossible"
    - lineNumber: 188
      expression: "!initializeFromAotGeneratedArtifactsIfPossible(initializationContext,\
        \ logFile)"
      range: "(188,7)-(188,84)"
      evaluatedAs: true
    - lineNumber: 57
      expression: "StringUtils.hasLength(configLocation)"
      range: "(57,7)-(57,43)"
      evaluatedAs: false
      internalMethodName: "initialize"
    - lineNumber: 107
      expression: "for-each(locations)"
      range: "(107,26)-(107,34)"
      evaluatedAs: true
      internalMethodName: "findConfig"
    - lineNumber: 109
      expression: "resource.exists()"
      range: "(109,8)-(109,24)"
      evaluatedAs: true
      internalMethodName: "findConfig"
    - lineNumber: 72
      expression: "config != null"
      range: "(72,7)-(72,20)"
      evaluatedAs: true
      internalMethodName: "initializeWithConventions"
    - lineNumber: 72
      expression: "logFile == null"
      range: "(72,25)-(72,39)"
      evaluatedAs: true
      internalMethodName: "initializeWithConventions"
    - lineNumber: 194
      expression: "StringUtils.hasText(System.getProperty(CONFIGURATION_FILE_PROPERTY))"
      range: "(194,7)-(194,74)"
      evaluatedAs: false
  - pathId: "path7"
    testPathName: "initializeWhenILessThanLocationsLengthAndConfigIsNotNullAndStringUtilsNotHasTextSystemGetPropertyCONFIGURATION_FILE_PRO"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "AF0671D34375D2E36B192F6FDF924830"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "103943554753788D91DF39AF76338D95"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "configLocation"
      modelFingerprint: "B3892ED02ADD2D85E9D4127CB28982BA"
      valueUuid: "configLocation"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid57,obj:iLoggerFactory2,messageSupplier:uniqueUuid58):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "88E92B36C31359A2A5F601B52BCD8568"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getObject(key:string):object"
    - type: "STATIC"
      name: "AotDetector.class.real"
      modelFingerprint: "A651F35C9CB1BB4329EA23C459C95680"
      valueUuid: "AotDetector.class.real"
      methodExercised:
        expression: "useGeneratedArtifacts():boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "DD9F0D4C1858580EBB7B38DD7EAE0873"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:configLocation):boolean4"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "9579EA5AE95A247510F6F5B5E5A8D1B6"
      valueUuid: "classPathResource"
      methodExercised:
        expression: "exists():boolean5"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "AED418DC7DEC8D96156497E9032EB427"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "getFilenameExtension(path:string4):string5"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "5FEF3316BA4AC93A1FD23486430A9A21"
      valueUuid: "classPathResource2"
      methodExercised:
        expression: "exists():boolean6"
    - type: "LOCAL_VARIABLE"
      name: "initializationContext"
      modelFingerprint: "B43BCFF9474519DE3742BE7B13AE4678"
      valueUuid: "initializationContext"
      methodExercised:
        expression: "getEnvironment():environment"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "D74C95336106C28CDCE73054A310CC45"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "putObject(key:string12,value:environment):void12"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "5451BA99C45FE57B1B58388DBDEA897D"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getTurboFilterList():turboFilterList"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "FA7085C9B1957BC84D6731B1D9FAAE99"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "remove(o:uniqueUuid60):boolean7"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "33228471B9841C2BFB25BCF695BE6335"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "putObject(key:string13,value:object2):void13"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "C2139E474972F760E0A30C0D601198C5"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasText(str:string14):boolean8"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_INTERNAL_METHOD_ACCESS_FAILURE"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "configLocation"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid57"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid58"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "REAL"
      valueType: "org.springframework.aot.AotDetector"
      uuid: "AotDetector.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "configLocation"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.io.ClassPathResource"
        parameters:
        - name: "path"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "path1"
            valueType: "java.lang.String"
            uuid: "string2"
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.core.io.ClassPathResource"
      uuid: "classPathResource"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string5"
    - sapientType: "BASIC"
      content: !<regular>
        value: "DA"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.io.ClassPathResource"
        parameters:
        - name: "path"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "D-spring."
            valueType: "java.lang.String"
            uuid: "string9"
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.core.io.ClassPathResource"
      uuid: "classPathResource2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean6"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void12"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.core.env.Environment"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          uuid: "uniqueUuid61"
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          uuid: "uniqueUuid61"
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean7"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid60"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void13"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string13"
    - sapientType: "ANY"
      valueType: "java.lang.Object"
      uuid: "object2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "BE"
      valueType: "java.lang.String"
      uuid: "string14"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 437
      expression: "loggerContext.getObject(LoggingSystem.class.getName()) != null"
      range: "(437,10)-(437,71)"
      evaluatedAs: false
      internalMethodName: "isAlreadyInitialized"
    - lineNumber: 185
      expression: "isAlreadyInitialized(loggerContext)"
      range: "(185,7)-(185,41)"
      evaluatedAs: false
    - lineNumber: 202
      expression: "!AotDetector.useGeneratedArtifacts()"
      range: "(202,7)-(202,42)"
      evaluatedAs: true
      internalMethodName: "initializeFromAotGeneratedArtifactsIfPossible"
    - lineNumber: 188
      expression: "!initializeFromAotGeneratedArtifactsIfPossible(initializationContext,\
        \ logFile)"
      range: "(188,7)-(188,84)"
      evaluatedAs: true
    - lineNumber: 57
      expression: "StringUtils.hasLength(configLocation)"
      range: "(57,7)-(57,43)"
      evaluatedAs: false
      internalMethodName: "initialize"
    - lineNumber: 107
      expression: "for-each(locations)"
      range: "(107,26)-(107,34)"
      evaluatedAs: true
      internalMethodName: "findConfig"
    - lineNumber: 109
      expression: "resource.exists()"
      range: "(109,8)-(109,24)"
      evaluatedAs: false
      internalMethodName: "findConfig"
    - lineNumber: 72
      expression: "config != null"
      range: "(72,7)-(72,20)"
      evaluatedAs: false
      internalMethodName: "initializeWithConventions"
    - lineNumber: 77
      expression: "config == null"
      range: "(77,7)-(77,20)"
      evaluatedAs: true
      internalMethodName: "initializeWithConventions"
    - lineNumber: 131
      expression: "i < locations.length"
      range: "(131,19)-(131,38)"
      evaluatedAs: true
      internalMethodName: "getSpringConfigLocations"
    - lineNumber: 80
      expression: "config != null"
      range: "(80,7)-(80,20)"
      evaluatedAs: true
      internalMethodName: "initializeWithConventions"
    - lineNumber: 194
      expression: "StringUtils.hasText(System.getProperty(CONFIGURATION_FILE_PROPERTY))"
      range: "(194,7)-(194,74)"
      evaluatedAs: false
  - pathId: "path8"
    testPathName: "initializeWhenILessThanLocationsLengthAndConfigIsNullAndStringUtilsNotHasTextSystemGetPropertyCONFIGURATION_FILE_PROPER"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "DAD15835C243678346B42635D27A715E"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "103943554753788D91DF39AF76338D95"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "configLocation"
      modelFingerprint: "B3892ED02ADD2D85E9D4127CB28982BA"
      valueUuid: "configLocation"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid62,obj:iLoggerFactory2,messageSupplier:uniqueUuid63):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "88E92B36C31359A2A5F601B52BCD8568"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getObject(key:string):object"
    - type: "STATIC"
      name: "AotDetector.class.real"
      modelFingerprint: "A651F35C9CB1BB4329EA23C459C95680"
      valueUuid: "AotDetector.class.real"
      methodExercised:
        expression: "useGeneratedArtifacts():boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "DD9F0D4C1858580EBB7B38DD7EAE0873"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:configLocation):boolean4"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "9579EA5AE95A247510F6F5B5E5A8D1B6"
      valueUuid: "classPathResource"
      methodExercised:
        expression: "exists():boolean5"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "AED418DC7DEC8D96156497E9032EB427"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "getFilenameExtension(path:string4):string5"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "67A3C55AD0F07B7F647CDCFCBD4DC7B5"
      valueUuid: "classPathResource2"
      methodExercised:
        expression: "exists():boolean6"
    - type: "LOCAL_VARIABLE"
      name: "initializationContext"
      modelFingerprint: "B43BCFF9474519DE3742BE7B13AE4678"
      valueUuid: "initializationContext"
      methodExercised:
        expression: "getEnvironment():environment"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "D74C95336106C28CDCE73054A310CC45"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "putObject(key:string12,value:environment):void12"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "5451BA99C45FE57B1B58388DBDEA897D"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getTurboFilterList():turboFilterList"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "FA7085C9B1957BC84D6731B1D9FAAE99"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "remove(o:uniqueUuid65):boolean7"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "33228471B9841C2BFB25BCF695BE6335"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "putObject(key:string13,value:object2):void13"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "C2139E474972F760E0A30C0D601198C5"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasText(str:string14):boolean8"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_INTERNAL_METHOD_ACCESS_FAILURE"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "configLocation"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid62"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid63"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "REAL"
      valueType: "org.springframework.aot.AotDetector"
      uuid: "AotDetector.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "configLocation"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.io.ClassPathResource"
        parameters:
        - name: "path"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "path1"
            valueType: "java.lang.String"
            uuid: "string2"
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.core.io.ClassPathResource"
      uuid: "classPathResource"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: ""
      valueType: "java.lang.String"
      uuid: "string5"
    - sapientType: "BASIC"
      content: !<regular>
        value: "DA"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.io.ClassPathResource"
        parameters:
        - name: "path"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "D-spring."
            valueType: "java.lang.String"
            uuid: "string9"
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.core.io.ClassPathResource"
      uuid: "classPathResource2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean6"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void12"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.core.env.Environment"
      valueType: "java.lang.String"
      uuid: "string12"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.env.Environment"
      uuid: "environment"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          uuid: "uniqueUuid66"
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          uuid: "uniqueUuid66"
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean7"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid65"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void13"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string13"
    - sapientType: "ANY"
      valueType: "java.lang.Object"
      uuid: "object2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean8"
    - sapientType: "BASIC"
      content: !<regular>
        value: "BE"
      valueType: "java.lang.String"
      uuid: "string14"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 437
      expression: "loggerContext.getObject(LoggingSystem.class.getName()) != null"
      range: "(437,10)-(437,71)"
      evaluatedAs: false
      internalMethodName: "isAlreadyInitialized"
    - lineNumber: 185
      expression: "isAlreadyInitialized(loggerContext)"
      range: "(185,7)-(185,41)"
      evaluatedAs: false
    - lineNumber: 202
      expression: "!AotDetector.useGeneratedArtifacts()"
      range: "(202,7)-(202,42)"
      evaluatedAs: true
      internalMethodName: "initializeFromAotGeneratedArtifactsIfPossible"
    - lineNumber: 188
      expression: "!initializeFromAotGeneratedArtifactsIfPossible(initializationContext,\
        \ logFile)"
      range: "(188,7)-(188,84)"
      evaluatedAs: true
    - lineNumber: 57
      expression: "StringUtils.hasLength(configLocation)"
      range: "(57,7)-(57,43)"
      evaluatedAs: false
      internalMethodName: "initialize"
    - lineNumber: 107
      expression: "for-each(locations)"
      range: "(107,26)-(107,34)"
      evaluatedAs: true
      internalMethodName: "findConfig"
    - lineNumber: 109
      expression: "resource.exists()"
      range: "(109,8)-(109,24)"
      evaluatedAs: false
      internalMethodName: "findConfig"
    - lineNumber: 72
      expression: "config != null"
      range: "(72,7)-(72,20)"
      evaluatedAs: false
      internalMethodName: "initializeWithConventions"
    - lineNumber: 77
      expression: "config == null"
      range: "(77,7)-(77,20)"
      evaluatedAs: true
      internalMethodName: "initializeWithConventions"
    - lineNumber: 131
      expression: "i < locations.length"
      range: "(131,19)-(131,38)"
      evaluatedAs: true
      internalMethodName: "getSpringConfigLocations"
    - lineNumber: 80
      expression: "config != null"
      range: "(80,7)-(80,20)"
      evaluatedAs: false
      internalMethodName: "initializeWithConventions"
    - lineNumber: 194
      expression: "StringUtils.hasText(System.getProperty(CONFIGURATION_FILE_PROPERTY))"
      range: "(194,7)-(194,74)"
      evaluatedAs: false
- method:
    name: "loadDefaults"
    sourceCodeSignature: "void loadDefaults(LoggingInitializationContext initializationContext,\
      \ LogFile logFile)"
    returnType: "void"
    parameters:
    - name: "initializationContext"
      type: "org.springframework.boot.logging.LoggingInitializationContext"
    - name: "logFile"
      type: "org.springframework.boot.logging.LogFile"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
    instructionFingerprint: "5F9AA7CEEC8F469D12FE7690C5A5D02F"
  paths:
  - pathId: "path8"
    testPathName: "loadDefaultsWhenCaughtInterruptedExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "02EF8D7CFC337B60400539A48242CD3B"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Thread.class"
      modelFingerprint: "066E7FA821C72A4CA44720CF40374C42"
      valueUuid: "Thread.class"
      methodExercised:
        expression: "sleep(arg0:uniqueUuid67):void9"
        throwsExceptions:
        - "java.lang.InterruptedException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "6A4954B46E576A51EAC0DC702989E353"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_POTENTIAL_HARM_FULL_SYSTEM_CALL"
      source: "Thread.currentThread().interrupt();"
      lineNumber: 414
      details: "Potential harmful system call (Thread.interrupt) detected; Learn more:\
        \ https://github.com/Sapient-AI/docs#disabled-generated-tests"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "java.lang.Thread"
      uuid: "Thread.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 50
      valueType: "long"
      uuid: "uniqueUuid67"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Interrupted while waiting for non-substitute logger factory"
            valueType: "java.lang.String"
            uuid: "uniqueUuid68"
            fixed: true
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.InterruptedException"
              parameters: []
            valueType: "java.lang.InterruptedException"
            uuid: "interruptedException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 413
      expression: "catch-exception (InterruptedException)"
      range: "(413,4)-(413,33)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    catchBlockExercised:
      idExternalInstruction: 3
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
  - pathId: "path5"
    testPathName: "loadDefaultsWhenIsBridgeHandlerInstalledNot"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "ACC9CFDEED382DA814B6E022932C777D"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid69,obj:iLoggerFactory2,messageSupplier:uniqueUuid70):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "4824172383E1405593BB3FF8FA861974"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "stop():void11"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "C5421F472FF7A1E785DF996FD15050AF"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "reset():void12"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "8981CA7F9A75DCF6D7565B26D60DDD7F"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid71,classLoader:classLoader):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid72,obj:iLoggerFactory3,messageSupplier:uniqueUuid73):void13"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "7DC090C830520838B3611EEB03DFF308"
      valueUuid: "iLoggerFactory3"
      methodExercised:
        expression: "getTurboFilterList():turboFilterList"
    - type: "LOCAL_VARIABLE"
      name: "turboFilters"
      modelFingerprint: "899DE72DBE49775681FCD3011885CA6F"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "add(e:uniqueUuid74):boolean5"
    - type: "LOCAL_VARIABLE"
      name: "turboFilters"
      modelFingerprint: "97BCE14254A34E224A9F28B97D1C96D7"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "remove(o:uniqueUuid75):boolean6"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_POTENTIAL_HARM_FULL_SYSTEM_CALL"
      source: "action.run();"
      lineNumber: 467
      details: "Potential harmful system call (Runnable.run) detected; Learn more:\
        \ https://github.com/Sapient-AI/docs#disabled-generated-tests"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid69"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid70"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void12"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.slf4j.bridge.SLF4JBridgeHandler"
      valueType: "java.lang.String"
      uuid: "uniqueUuid71"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void13"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid72"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory3"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid73"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory3"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean5"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid74"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean6"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid75"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 150
      expression: "ClassUtils.isPresent(BRIDGE_HANDLER, getClassLoader())"
      range: "(150,10)-(150,63)"
      evaluatedAs: false
      internalMethodName: "isBridgeHandlerAvailable"
    - lineNumber: 303
      expression: "!isBridgeHandlerAvailable()"
      range: "(303,7)-(303,33)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerInstalled"
    - lineNumber: 297
      expression: "isBridgeHandlerInstalled()"
      range: "(297,7)-(297,32)"
      evaluatedAs: false
      internalMethodName: "stopAndReset"
  - pathId: "path7"
    testPathName: "loadDefaultsWhenIsBridgeHandlerInstalledNotAndCaughtInterruptedExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "A703CA5E9ED4A953C3B9763298B66F76"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid76,obj:iLoggerFactory,messageSupplier:uniqueUuid77):void9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "4824172383E1405593BB3FF8FA861974"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "stop():void10"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "C5421F472FF7A1E785DF996FD15050AF"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "reset():void11"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "8981CA7F9A75DCF6D7565B26D60DDD7F"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid78,classLoader:classLoader):boolean2"
        staticAccess: true
    - type: "STATIC"
      name: "Thread.class"
      modelFingerprint: "066E7FA821C72A4CA44720CF40374C42"
      valueUuid: "Thread.class"
      methodExercised:
        expression: "sleep(arg0:uniqueUuid79):void12"
        throwsExceptions:
        - "java.lang.InterruptedException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "6A4954B46E576A51EAC0DC702989E353"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_POTENTIAL_HARM_FULL_SYSTEM_CALL"
      source: "Thread.currentThread().interrupt();"
      lineNumber: 414
      details: "Potential harmful system call (Thread.interrupt) detected; Learn more:\
        \ https://github.com/Sapient-AI/docs#disabled-generated-tests"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid76"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid77"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.slf4j.bridge.SLF4JBridgeHandler"
      valueType: "java.lang.String"
      uuid: "uniqueUuid78"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "java.lang.Thread"
      uuid: "Thread.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void12"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 50
      valueType: "long"
      uuid: "uniqueUuid79"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Interrupted while waiting for non-substitute logger factory"
            valueType: "java.lang.String"
            uuid: "uniqueUuid80"
            fixed: true
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.InterruptedException"
              parameters: []
            valueType: "java.lang.InterruptedException"
            uuid: "interruptedException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: false
      internalMethodName: "getLoggerFactory"
    - lineNumber: 150
      expression: "ClassUtils.isPresent(BRIDGE_HANDLER, getClassLoader())"
      range: "(150,10)-(150,63)"
      evaluatedAs: false
      internalMethodName: "isBridgeHandlerAvailable"
    - lineNumber: 303
      expression: "!isBridgeHandlerAvailable()"
      range: "(303,7)-(303,33)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerInstalled"
    - lineNumber: 297
      expression: "isBridgeHandlerInstalled()"
      range: "(297,7)-(297,32)"
      evaluatedAs: false
      internalMethodName: "stopAndReset"
    - lineNumber: 413
      expression: "catch-exception (InterruptedException)"
      range: "(413,4)-(413,33)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    catchBlockExercised:
      idExternalInstruction: 3
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
  - pathId: "path1"
    testPathName: "loadDefaultsWhenIsBridgeHandlerInstalled"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "FE4FC92E599087572216B87E005BF3DB"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid81,obj:iLoggerFactory2,messageSupplier:uniqueUuid82):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "4824172383E1405593BB3FF8FA861974"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "stop():void11"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "C5421F472FF7A1E785DF996FD15050AF"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "reset():void12"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "5AE9821C7CDDD05196EAF5A4EB8C34A6"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid83,classLoader:classLoader):boolean3"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "A8C9B2A78F25061A74BD5554C68F3658"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "addListener(listener:levelChangePropagator):void15"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid85,obj:iLoggerFactory4,messageSupplier:uniqueUuid86):void17"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "7DC090C830520838B3611EEB03DFF308"
      valueUuid: "iLoggerFactory4"
      methodExercised:
        expression: "getTurboFilterList():turboFilterList"
    - type: "LOCAL_VARIABLE"
      name: "turboFilters"
      modelFingerprint: "899DE72DBE49775681FCD3011885CA6F"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "add(e:uniqueUuid87):boolean7"
    - type: "LOCAL_VARIABLE"
      name: "turboFilters"
      modelFingerprint: "97BCE14254A34E224A9F28B97D1C96D7"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "remove(o:uniqueUuid88):boolean8"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_POTENTIAL_HARM_FULL_SYSTEM_CALL"
      source: "action.run();"
      lineNumber: 467
      details: "Potential harmful system call (Runnable.run) detected; Learn more:\
        \ https://github.com/Sapient-AI/docs#disabled-generated-tests"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid81"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid82"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void12"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.slf4j.bridge.SLF4JBridgeHandler"
      valueType: "java.lang.String"
      uuid: "uniqueUuid83"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void15"
      fixed: true
    - sapientType: "ANY"
      valueType: "ch.qos.logback.classic.jul.LevelChangePropagator"
      uuid: "levelChangePropagator"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void17"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid85"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory4"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid86"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory4"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean7"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid87"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean8"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid88"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 150
      expression: "ClassUtils.isPresent(BRIDGE_HANDLER, getClassLoader())"
      range: "(150,10)-(150,63)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerAvailable"
    - lineNumber: 303
      expression: "!isBridgeHandlerAvailable()"
      range: "(303,7)-(303,33)"
      evaluatedAs: false
      internalMethodName: "isBridgeHandlerInstalled"
    - lineNumber: 308
      expression: "handlers.length == 1"
      range: "(308,10)-(308,29)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerInstalled"
    - lineNumber: 308
      expression: "handlers[0] instanceof SLF4JBridgeHandler"
      range: "(308,34)-(308,74)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerInstalled"
    - lineNumber: 297
      expression: "isBridgeHandlerInstalled()"
      range: "(297,7)-(297,32)"
      evaluatedAs: true
      internalMethodName: "stopAndReset"
  - pathId: "path3"
    testPathName: "loadDefaultsWhen0IndexOfHandlersNotInstanceOfSLF4JBridgeHandlerAndIsBridgeHandlerInstalledNot"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "0472DFDEDC50E35CBAD9E267866E1FE8"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid89,obj:iLoggerFactory2,messageSupplier:uniqueUuid90):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "4824172383E1405593BB3FF8FA861974"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "stop():void11"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "C5421F472FF7A1E785DF996FD15050AF"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "reset():void12"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "5AE9821C7CDDD05196EAF5A4EB8C34A6"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid91,classLoader:classLoader):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid92,obj:iLoggerFactory3,messageSupplier:uniqueUuid93):void13"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "7DC090C830520838B3611EEB03DFF308"
      valueUuid: "iLoggerFactory3"
      methodExercised:
        expression: "getTurboFilterList():turboFilterList"
    - type: "LOCAL_VARIABLE"
      name: "turboFilters"
      modelFingerprint: "899DE72DBE49775681FCD3011885CA6F"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "add(e:uniqueUuid94):boolean6"
    - type: "LOCAL_VARIABLE"
      name: "turboFilters"
      modelFingerprint: "97BCE14254A34E224A9F28B97D1C96D7"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "remove(o:uniqueUuid95):boolean7"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_POTENTIAL_HARM_FULL_SYSTEM_CALL"
      source: "action.run();"
      lineNumber: 467
      details: "Potential harmful system call (Runnable.run) detected; Learn more:\
        \ https://github.com/Sapient-AI/docs#disabled-generated-tests"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid89"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid90"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void12"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.slf4j.bridge.SLF4JBridgeHandler"
      valueType: "java.lang.String"
      uuid: "uniqueUuid91"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void13"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid92"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory3"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid93"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory3"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean6"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid94"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean7"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid95"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 150
      expression: "ClassUtils.isPresent(BRIDGE_HANDLER, getClassLoader())"
      range: "(150,10)-(150,63)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerAvailable"
    - lineNumber: 303
      expression: "!isBridgeHandlerAvailable()"
      range: "(303,7)-(303,33)"
      evaluatedAs: false
      internalMethodName: "isBridgeHandlerInstalled"
    - lineNumber: 308
      expression: "handlers.length == 1"
      range: "(308,10)-(308,29)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerInstalled"
    - lineNumber: 308
      expression: "handlers[0] instanceof SLF4JBridgeHandler"
      range: "(308,34)-(308,74)"
      evaluatedAs: false
      internalMethodName: "isBridgeHandlerInstalled"
    - lineNumber: 297
      expression: "isBridgeHandlerInstalled()"
      range: "(297,7)-(297,32)"
      evaluatedAs: false
      internalMethodName: "stopAndReset"
- method:
    name: "loadConfiguration"
    sourceCodeSignature: "void loadConfiguration(LoggingInitializationContext initializationContext,\
      \ String location, LogFile logFile)"
    returnType: "void"
    parameters:
    - name: "initializationContext"
      type: "org.springframework.boot.logging.LoggingInitializationContext"
    - name: "location"
      type: "java.lang.String"
    - name: "logFile"
      type: "org.springframework.boot.logging.LogFile"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
    instructionFingerprint: "5001C6E574FFF6ED3D4A717F784E6D1A"
  paths:
  - pathId: "path18"
    testPathName: "loadConfigurationWhenCaughtInterruptedExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "0F82556F1257C5137806046153827DB8"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "3AFB819A3AF82CB03439BE094E5D74A5"
      valueUuid: "location"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Thread.class"
      modelFingerprint: "066E7FA821C72A4CA44720CF40374C42"
      valueUuid: "Thread.class"
      methodExercised:
        expression: "sleep(arg0:uniqueUuid96):void9"
        throwsExceptions:
        - "java.lang.InterruptedException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "6A4954B46E576A51EAC0DC702989E353"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_POTENTIAL_HARM_FULL_SYSTEM_CALL"
      source: "Thread.currentThread().interrupt();"
      lineNumber: 414
      details: "Potential harmful system call (Thread.interrupt) detected; Learn more:\
        \ https://github.com/Sapient-AI/docs#disabled-generated-tests"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "java.lang.Thread"
      uuid: "Thread.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 50
      valueType: "long"
      uuid: "uniqueUuid96"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Interrupted while waiting for non-substitute logger factory"
            valueType: "java.lang.String"
            uuid: "uniqueUuid97"
            fixed: true
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.InterruptedException"
              parameters: []
            valueType: "java.lang.InterruptedException"
            uuid: "interruptedException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 413
      expression: "catch-exception (InterruptedException)"
      range: "(413,4)-(413,33)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    catchBlockExercised:
      idExternalInstruction: 3
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
  - pathId: "path16"
    testPathName: "loadConfigurationWhenIsBridgeHandlerInstalledNotAndCaughtInterruptedExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "F8C233639AC513B75819D9E86B533263"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "3AFB819A3AF82CB03439BE094E5D74A5"
      valueUuid: "location"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid98,obj:iLoggerFactory,messageSupplier:uniqueUuid99):void9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "4824172383E1405593BB3FF8FA861974"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "stop():void10"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "C5421F472FF7A1E785DF996FD15050AF"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "reset():void11"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "8981CA7F9A75DCF6D7565B26D60DDD7F"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid100,classLoader:classLoader):boolean2"
        staticAccess: true
    - type: "STATIC"
      name: "Thread.class"
      modelFingerprint: "066E7FA821C72A4CA44720CF40374C42"
      valueUuid: "Thread.class"
      methodExercised:
        expression: "sleep(arg0:uniqueUuid101):void12"
        throwsExceptions:
        - "java.lang.InterruptedException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "6A4954B46E576A51EAC0DC702989E353"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_POTENTIAL_HARM_FULL_SYSTEM_CALL"
      source: "Thread.currentThread().interrupt();"
      lineNumber: 414
      details: "Potential harmful system call (Thread.interrupt) detected; Learn more:\
        \ https://github.com/Sapient-AI/docs#disabled-generated-tests"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid98"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid99"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.slf4j.bridge.SLF4JBridgeHandler"
      valueType: "java.lang.String"
      uuid: "uniqueUuid100"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "java.lang.Thread"
      uuid: "Thread.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void12"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 50
      valueType: "long"
      uuid: "uniqueUuid101"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Interrupted while waiting for non-substitute logger factory"
            valueType: "java.lang.String"
            uuid: "uniqueUuid102"
            fixed: true
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.InterruptedException"
              parameters: []
            valueType: "java.lang.InterruptedException"
            uuid: "interruptedException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: false
      internalMethodName: "getLoggerFactory"
    - lineNumber: 150
      expression: "ClassUtils.isPresent(BRIDGE_HANDLER, getClassLoader())"
      range: "(150,10)-(150,63)"
      evaluatedAs: false
      internalMethodName: "isBridgeHandlerAvailable"
    - lineNumber: 303
      expression: "!isBridgeHandlerAvailable()"
      range: "(303,7)-(303,33)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerInstalled"
    - lineNumber: 297
      expression: "isBridgeHandlerInstalled()"
      range: "(297,7)-(297,32)"
      evaluatedAs: false
      internalMethodName: "stopAndReset"
    - lineNumber: 413
      expression: "catch-exception (InterruptedException)"
      range: "(413,4)-(413,33)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    catchBlockExercised:
      idExternalInstruction: 3
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
  - pathId: "path14"
    testPathName: "loadConfigurationWhenStatusUtilContextHasStatusListenerLoggerContext"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "59CCFEF5A905824779D1DA7F33058F42"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "3AFB819A3AF82CB03439BE094E5D74A5"
      valueUuid: "location"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid103,obj:iLoggerFactory2,messageSupplier:uniqueUuid104):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "4824172383E1405593BB3FF8FA861974"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "stop():void11"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "C5421F472FF7A1E785DF996FD15050AF"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "reset():void12"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "8981CA7F9A75DCF6D7565B26D60DDD7F"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid105,classLoader:classLoader):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid106,obj:iLoggerFactory3,messageSupplier:uniqueUuid107):void13"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "7DC090C830520838B3611EEB03DFF308"
      valueUuid: "iLoggerFactory3"
      methodExercised:
        expression: "getTurboFilterList():turboFilterList"
    - type: "LOCAL_VARIABLE"
      name: "turboFilters"
      modelFingerprint: "899DE72DBE49775681FCD3011885CA6F"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "add(e:uniqueUuid108):boolean5"
    - type: "LOCAL_VARIABLE"
      name: "turboFilters"
      modelFingerprint: "97BCE14254A34E224A9F28B97D1C96D7"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "remove(o:uniqueUuid109):boolean6"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "B26DF5DD38D424EC82D93F3D355A22F5"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getStatusManager():statusManager"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "3553B5E01A0BC9268E4E6D8FA77DA6FF"
      valueUuid: "statusManager"
      methodExercised:
        expression: "getCopyOfStatusList():list"
    - type: "STATIC"
      name: "StatusUtil.class"
      modelFingerprint: "490DAE2574423F838E2BB9D3D2C3BCFE"
      valueUuid: "StatusUtil.class"
      methodExercised:
        expression: "contextHasStatusListener(context:iLoggerFactory2):boolean9"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_POTENTIAL_HARM_FULL_SYSTEM_CALL"
      source: "action.run();"
      lineNumber: 467
      details: "Potential harmful system call (Runnable.run) detected; Learn more:\
        \ https://github.com/Sapient-AI/docs#disabled-generated-tests"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid103"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid104"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void12"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.slf4j.bridge.SLF4JBridgeHandler"
      valueType: "java.lang.String"
      uuid: "uniqueUuid105"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void13"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid106"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory3"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid107"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory3"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean5"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid108"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean6"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid109"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "ch.qos.logback.core.status.Status"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusUtil"
      uuid: "StatusUtil.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean9"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 150
      expression: "ClassUtils.isPresent(BRIDGE_HANDLER, getClassLoader())"
      range: "(150,10)-(150,63)"
      evaluatedAs: false
      internalMethodName: "isBridgeHandlerAvailable"
    - lineNumber: 303
      expression: "!isBridgeHandlerAvailable()"
      range: "(303,7)-(303,33)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerInstalled"
    - lineNumber: 297
      expression: "isBridgeHandlerInstalled()"
      range: "(297,7)-(297,32)"
      evaluatedAs: false
      internalMethodName: "stopAndReset"
    - lineNumber: 261
      expression: "for-each(loggerContext.getStatusManager().getCopyOfStatusList())"
      range: "(261,24)-(261,77)"
      evaluatedAs: false
      internalMethodName: "reportConfigurationErrorsIfNecessary"
    - lineNumber: 270
      expression: "errors.isEmpty()"
      range: "(270,7)-(270,22)"
      evaluatedAs: true
      internalMethodName: "reportConfigurationErrorsIfNecessary"
    - lineNumber: 271
      expression: "!StatusUtil.contextHasStatusListener(loggerContext)"
      range: "(271,8)-(271,58)"
      evaluatedAs: false
      internalMethodName: "reportConfigurationErrorsIfNecessary"
  - pathId: "path12"
    testPathName: "loadConfigurationWhenErrorsIsEmptyAndStatusUtilContextHasStatusListenerLoggerContext4"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "02C5118EC6F11B125EEF242983911718"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "3AFB819A3AF82CB03439BE094E5D74A5"
      valueUuid: "location"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid110,obj:iLoggerFactory2,messageSupplier:uniqueUuid111):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "4824172383E1405593BB3FF8FA861974"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "stop():void11"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "C5421F472FF7A1E785DF996FD15050AF"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "reset():void12"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "5AE9821C7CDDD05196EAF5A4EB8C34A6"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid112,classLoader:classLoader):boolean3"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid113,obj:iLoggerFactory3,messageSupplier:uniqueUuid114):void13"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "7DC090C830520838B3611EEB03DFF308"
      valueUuid: "iLoggerFactory3"
      methodExercised:
        expression: "getTurboFilterList():turboFilterList"
    - type: "LOCAL_VARIABLE"
      name: "turboFilters"
      modelFingerprint: "899DE72DBE49775681FCD3011885CA6F"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "add(e:uniqueUuid115):boolean6"
    - type: "LOCAL_VARIABLE"
      name: "turboFilters"
      modelFingerprint: "97BCE14254A34E224A9F28B97D1C96D7"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "remove(o:uniqueUuid116):boolean7"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "B26DF5DD38D424EC82D93F3D355A22F5"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getStatusManager():statusManager"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "3553B5E01A0BC9268E4E6D8FA77DA6FF"
      valueUuid: "statusManager"
      methodExercised:
        expression: "getCopyOfStatusList():list"
    - type: "STATIC"
      name: "StatusUtil.class"
      modelFingerprint: "490DAE2574423F838E2BB9D3D2C3BCFE"
      valueUuid: "StatusUtil.class"
      methodExercised:
        expression: "contextHasStatusListener(context:iLoggerFactory2):boolean10"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_POTENTIAL_HARM_FULL_SYSTEM_CALL"
      source: "action.run();"
      lineNumber: 467
      details: "Potential harmful system call (Runnable.run) detected; Learn more:\
        \ https://github.com/Sapient-AI/docs#disabled-generated-tests"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid110"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid111"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void12"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.slf4j.bridge.SLF4JBridgeHandler"
      valueType: "java.lang.String"
      uuid: "uniqueUuid112"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void13"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid113"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory3"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid114"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory3"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean6"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid115"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean7"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid116"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "ch.qos.logback.core.status.Status"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusUtil"
      uuid: "StatusUtil.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean10"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 150
      expression: "ClassUtils.isPresent(BRIDGE_HANDLER, getClassLoader())"
      range: "(150,10)-(150,63)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerAvailable"
    - lineNumber: 303
      expression: "!isBridgeHandlerAvailable()"
      range: "(303,7)-(303,33)"
      evaluatedAs: false
      internalMethodName: "isBridgeHandlerInstalled"
    - lineNumber: 308
      expression: "handlers.length == 1"
      range: "(308,10)-(308,29)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerInstalled"
    - lineNumber: 308
      expression: "handlers[0] instanceof SLF4JBridgeHandler"
      range: "(308,34)-(308,74)"
      evaluatedAs: false
      internalMethodName: "isBridgeHandlerInstalled"
    - lineNumber: 297
      expression: "isBridgeHandlerInstalled()"
      range: "(297,7)-(297,32)"
      evaluatedAs: false
      internalMethodName: "stopAndReset"
    - lineNumber: 261
      expression: "for-each(loggerContext.getStatusManager().getCopyOfStatusList())"
      range: "(261,24)-(261,77)"
      evaluatedAs: false
      internalMethodName: "reportConfigurationErrorsIfNecessary"
    - lineNumber: 270
      expression: "errors.isEmpty()"
      range: "(270,7)-(270,22)"
      evaluatedAs: true
      internalMethodName: "reportConfigurationErrorsIfNecessary"
    - lineNumber: 271
      expression: "!StatusUtil.contextHasStatusListener(loggerContext)"
      range: "(271,8)-(271,58)"
      evaluatedAs: false
      internalMethodName: "reportConfigurationErrorsIfNecessary"
  - pathId: "path3"
    testPathName: "loadConfigurationWhenErrorsNotIsEmptyThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "036E0FA2AE42AF8778921E70CFBA39EB"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "3AFB819A3AF82CB03439BE094E5D74A5"
      valueUuid: "location"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid117,obj:iLoggerFactory2,messageSupplier:uniqueUuid118):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "4824172383E1405593BB3FF8FA861974"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "stop():void11"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "C5421F472FF7A1E785DF996FD15050AF"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "reset():void12"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "5AE9821C7CDDD05196EAF5A4EB8C34A6"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid119,classLoader:classLoader):boolean3"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "A8C9B2A78F25061A74BD5554C68F3658"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "addListener(listener:levelChangePropagator):void15"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid121,obj:iLoggerFactory4,messageSupplier:uniqueUuid122):void17"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "7DC090C830520838B3611EEB03DFF308"
      valueUuid: "iLoggerFactory4"
      methodExercised:
        expression: "getTurboFilterList():turboFilterList"
    - type: "LOCAL_VARIABLE"
      name: "turboFilters"
      modelFingerprint: "899DE72DBE49775681FCD3011885CA6F"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "add(e:uniqueUuid123):boolean7"
    - type: "LOCAL_VARIABLE"
      name: "turboFilters"
      modelFingerprint: "97BCE14254A34E224A9F28B97D1C96D7"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "remove(o:uniqueUuid124):boolean8"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "B26DF5DD38D424EC82D93F3D355A22F5"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getStatusManager():statusManager"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "2B9D6B2AA3C7721C50C84F42F386C50C"
      valueUuid: "statusManager"
      methodExercised:
        expression: "getCopyOfStatusList():list"
    - type: "LOCAL_VARIABLE"
      name: "status"
      modelFingerprint: "0E2C708D2C17F879081AE3D220FBE9A6"
      valueUuid: "object"
      methodExercised:
        expression: "getLevel():int2"
    - type: "LOCAL_VARIABLE"
      name: "status"
      modelFingerprint: "E24271E69A8D545C1CA51D6010FE65CF"
      valueUuid: "object"
      methodExercised:
        expression: "getThrowable():throwable"
    - type: "LOCAL_VARIABLE"
      name: "status"
      modelFingerprint: "E24271E69A8D545C1CA51D6010FE65CF"
      valueUuid: "object"
      methodExercised:
        expression: "getThrowable():throwable2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "9831E0858DA0043CD6BE22AAE04D4AA1"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_POTENTIAL_HARM_FULL_SYSTEM_CALL"
      source: "action.run();"
      lineNumber: 467
      details: "Potential harmful system call (Runnable.run) detected; Learn more:\
        \ https://github.com/Sapient-AI/docs#disabled-generated-tests"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid117"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid118"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void12"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.slf4j.bridge.SLF4JBridgeHandler"
      valueType: "java.lang.String"
      uuid: "uniqueUuid119"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void15"
      fixed: true
    - sapientType: "ANY"
      valueType: "ch.qos.logback.classic.jul.LevelChangePropagator"
      uuid: "levelChangePropagator"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void17"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid121"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory4"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid122"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory4"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean7"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid123"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean8"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid124"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "ch.qos.logback.core.status.Status"
          uuid: "object"
          collectionUuid: "list"
          nameForMock: "object"
      valueType: "java.util.List"
      genericValueType: "ch.qos.logback.core.status.Status"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.Status"
      uuid: "object"
      collectionUuid: "list"
      nameForMock: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: 2
      valueType: "int"
      uuid: "int2"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.Status"
      uuid: "object"
      collectionUuid: "list"
      nameForMock: "object"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "throwable"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.Status"
      uuid: "object"
      collectionUuid: "list"
      nameForMock: "object"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "throwable2"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "s"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Logback configuration error detected: \\nobject"
            valueType: "java.lang.String"
            uuid: "string"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 150
      expression: "ClassUtils.isPresent(BRIDGE_HANDLER, getClassLoader())"
      range: "(150,10)-(150,63)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerAvailable"
    - lineNumber: 303
      expression: "!isBridgeHandlerAvailable()"
      range: "(303,7)-(303,33)"
      evaluatedAs: false
      internalMethodName: "isBridgeHandlerInstalled"
    - lineNumber: 308
      expression: "handlers.length == 1"
      range: "(308,10)-(308,29)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerInstalled"
    - lineNumber: 308
      expression: "handlers[0] instanceof SLF4JBridgeHandler"
      range: "(308,34)-(308,74)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerInstalled"
    - lineNumber: 297
      expression: "isBridgeHandlerInstalled()"
      range: "(297,7)-(297,32)"
      evaluatedAs: true
      internalMethodName: "stopAndReset"
    - lineNumber: 261
      expression: "for-each(loggerContext.getStatusManager().getCopyOfStatusList())"
      range: "(261,24)-(261,77)"
      evaluatedAs: true
      internalMethodName: "reportConfigurationErrorsIfNecessary"
    - lineNumber: 262
      expression: "status.getLevel() == Status.ERROR"
      range: "(262,8)-(262,40)"
      evaluatedAs: true
      internalMethodName: "reportConfigurationErrorsIfNecessary"
    - lineNumber: 263
      expression: "!errors.isEmpty()"
      range: "(263,20)-(263,36)"
      evaluatedAs: false
      internalMethodName: "reportConfigurationErrorsIfNecessary"
    - lineNumber: 265
      expression: "status.getThrowable() != null"
      range: "(265,9)-(265,37)"
      evaluatedAs: true
      internalMethodName: "reportConfigurationErrorsIfNecessary"
    - lineNumber: 270
      expression: "errors.isEmpty()"
      range: "(270,7)-(270,22)"
      evaluatedAs: false
      internalMethodName: "reportConfigurationErrorsIfNecessary"
  - pathId: "path17"
    testPathName: "loadConfigurationWhenStatusGetThrowableIsNotNullAndErrorsIsEmptyAndStatusUtilNotContextHasStatusListenerLoggerContext"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "4096EF3C43615C7BAB51D45E19B97CC0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "3AFB819A3AF82CB03439BE094E5D74A5"
      valueUuid: "location"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid125,obj:iLoggerFactory,messageSupplier:uniqueUuid126):void9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "4824172383E1405593BB3FF8FA861974"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "stop():void10"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "C5421F472FF7A1E785DF996FD15050AF"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "reset():void11"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "8981CA7F9A75DCF6D7565B26D60DDD7F"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid127,classLoader:classLoader):boolean2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid128,obj:iLoggerFactory2,messageSupplier:uniqueUuid129):void12"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "878C588408DB7E03912699476BF35E80"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getTurboFilterList():turboFilterList"
    - type: "LOCAL_VARIABLE"
      name: "turboFilters"
      modelFingerprint: "5C53CDA27B313A0B89288B7BBCD6EEC2"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "add(e:uniqueUuid130):boolean4"
    - type: "LOCAL_VARIABLE"
      name: "turboFilters"
      modelFingerprint: "2433AF0B0526CB3A3F3FDE02840C7946"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "remove(o:uniqueUuid131):boolean5"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "B26DF5DD38D424EC82D93F3D355A22F5"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "getStatusManager():statusManager"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "FE2A895F42BFB220E0B04A93B57708EF"
      valueUuid: "statusManager"
      methodExercised:
        expression: "getCopyOfStatusList():list"
    - type: "LOCAL_VARIABLE"
      name: "status"
      modelFingerprint: "A1BA95464BE708119FAC9251D0074AEA"
      valueUuid: "object"
      methodExercised:
        expression: "getLevel():int1"
    - type: "LOCAL_VARIABLE"
      name: "status"
      modelFingerprint: "E24271E69A8D545C1CA51D6010FE65CF"
      valueUuid: "object"
      methodExercised:
        expression: "getThrowable():throwable"
    - type: "LOCAL_VARIABLE"
      name: "status"
      modelFingerprint: "E24271E69A8D545C1CA51D6010FE65CF"
      valueUuid: "object"
      methodExercised:
        expression: "getThrowable():throwable2"
    - type: "STATIC"
      name: "StatusUtil.class"
      modelFingerprint: "061FCC966BFC54654A25EADFC0ECA3EB"
      valueUuid: "StatusUtil.class"
      methodExercised:
        expression: "contextHasStatusListener(context:iLoggerFactory):boolean11"
        staticAccess: true
    - type: "STATIC"
      name: "StatusPrinter.class"
      modelFingerprint: "E20D4D659B6C3D1D86A368E528F6EEC2"
      valueUuid: "StatusPrinter.class"
      methodExercised:
        expression: "printInCaseOfErrorsOrWarnings(context:iLoggerFactory):void14"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_POTENTIAL_HARM_FULL_SYSTEM_CALL"
      source: "action.run();"
      lineNumber: 467
      details: "Potential harmful system call (Runnable.run) detected; Learn more:\
        \ https://github.com/Sapient-AI/docs#disabled-generated-tests"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid125"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid126"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.slf4j.bridge.SLF4JBridgeHandler"
      valueType: "java.lang.String"
      uuid: "uniqueUuid127"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void12"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid128"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid129"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean4"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid130"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean5"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid131"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "ch.qos.logback.core.status.Status"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.Status"
      uuid: "object"
      collectionUuid: "list"
      nameForMock: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.Status"
      uuid: "object"
      collectionUuid: "list"
      nameForMock: "object"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "throwable"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.Status"
      uuid: "object"
      collectionUuid: "list"
      nameForMock: "object"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "throwable2"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusUtil"
      uuid: "StatusUtil.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean11"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.util.StatusPrinter"
      uuid: "StatusPrinter.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void14"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: false
      internalMethodName: "getLoggerFactory"
    - lineNumber: 150
      expression: "ClassUtils.isPresent(BRIDGE_HANDLER, getClassLoader())"
      range: "(150,10)-(150,63)"
      evaluatedAs: false
      internalMethodName: "isBridgeHandlerAvailable"
    - lineNumber: 303
      expression: "!isBridgeHandlerAvailable()"
      range: "(303,7)-(303,33)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerInstalled"
    - lineNumber: 297
      expression: "isBridgeHandlerInstalled()"
      range: "(297,7)-(297,32)"
      evaluatedAs: false
      internalMethodName: "stopAndReset"
    - lineNumber: 413
      expression: "catch-exception (InterruptedException)"
      range: "(413,4)-(413,33)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 261
      expression: "for-each(loggerContext.getStatusManager().getCopyOfStatusList())"
      range: "(261,24)-(261,77)"
      evaluatedAs: true
      internalMethodName: "reportConfigurationErrorsIfNecessary"
    - lineNumber: 262
      expression: "status.getLevel() == Status.ERROR"
      range: "(262,8)-(262,40)"
      evaluatedAs: true
      internalMethodName: "reportConfigurationErrorsIfNecessary"
    - lineNumber: 263
      expression: "!errors.isEmpty()"
      range: "(263,20)-(263,36)"
      evaluatedAs: false
      internalMethodName: "reportConfigurationErrorsIfNecessary"
    - lineNumber: 265
      expression: "status.getThrowable() != null"
      range: "(265,9)-(265,37)"
      evaluatedAs: true
      internalMethodName: "reportConfigurationErrorsIfNecessary"
    - lineNumber: 270
      expression: "errors.isEmpty()"
      range: "(270,7)-(270,22)"
      evaluatedAs: true
      internalMethodName: "reportConfigurationErrorsIfNecessary"
    - lineNumber: 271
      expression: "!StatusUtil.contextHasStatusListener(loggerContext)"
      range: "(271,8)-(271,58)"
      evaluatedAs: true
      internalMethodName: "reportConfigurationErrorsIfNecessary"
    catchBlockExercised:
      idExternalInstruction: 3
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
  - pathId: "path1"
    testPathName: "loadConfigurationWhenStatusGetThrowableIsNotNullAndErrorsIsEmptyAndStatusUtilNotContextHasStatusListenerLoggerContext2"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "49A6064B53020B9F25A8FA485265BD68"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "INPUT"
      name: "location"
      modelFingerprint: "3AFB819A3AF82CB03439BE094E5D74A5"
      valueUuid: "location"
    - type: "INPUT"
      name: "logFile"
      modelFingerprint: "86BCE540ED2DF71D13DEB1FE7D6B7A32"
      valueUuid: "logFile"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid132,obj:iLoggerFactory2,messageSupplier:uniqueUuid133):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "4824172383E1405593BB3FF8FA861974"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "stop():void11"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "C5421F472FF7A1E785DF996FD15050AF"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "reset():void12"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "5AE9821C7CDDD05196EAF5A4EB8C34A6"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid134,classLoader:classLoader):boolean3"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "A8C9B2A78F25061A74BD5554C68F3658"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "addListener(listener:levelChangePropagator):void15"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid136,obj:iLoggerFactory4,messageSupplier:uniqueUuid137):void17"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "878C588408DB7E03912699476BF35E80"
      valueUuid: "iLoggerFactory4"
      methodExercised:
        expression: "getTurboFilterList():turboFilterList"
    - type: "LOCAL_VARIABLE"
      name: "turboFilters"
      modelFingerprint: "5C53CDA27B313A0B89288B7BBCD6EEC2"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "add(e:uniqueUuid138):boolean7"
    - type: "LOCAL_VARIABLE"
      name: "turboFilters"
      modelFingerprint: "2433AF0B0526CB3A3F3FDE02840C7946"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "remove(o:uniqueUuid139):boolean8"
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "B26DF5DD38D424EC82D93F3D355A22F5"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getStatusManager():statusManager"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "FE2A895F42BFB220E0B04A93B57708EF"
      valueUuid: "statusManager"
      methodExercised:
        expression: "getCopyOfStatusList():list"
    - type: "LOCAL_VARIABLE"
      name: "status"
      modelFingerprint: "A1BA95464BE708119FAC9251D0074AEA"
      valueUuid: "object"
      methodExercised:
        expression: "getLevel():int2"
    - type: "LOCAL_VARIABLE"
      name: "status"
      modelFingerprint: "E24271E69A8D545C1CA51D6010FE65CF"
      valueUuid: "object"
      methodExercised:
        expression: "getThrowable():throwable"
    - type: "LOCAL_VARIABLE"
      name: "status"
      modelFingerprint: "E24271E69A8D545C1CA51D6010FE65CF"
      valueUuid: "object"
      methodExercised:
        expression: "getThrowable():throwable2"
    - type: "STATIC"
      name: "StatusUtil.class"
      modelFingerprint: "061FCC966BFC54654A25EADFC0ECA3EB"
      valueUuid: "StatusUtil.class"
      methodExercised:
        expression: "contextHasStatusListener(context:iLoggerFactory2):boolean14"
        staticAccess: true
    - type: "STATIC"
      name: "StatusPrinter.class"
      modelFingerprint: "E20D4D659B6C3D1D86A368E528F6EEC2"
      valueUuid: "StatusPrinter.class"
      methodExercised:
        expression: "printInCaseOfErrorsOrWarnings(context:iLoggerFactory2):void19"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_POTENTIAL_HARM_FULL_SYSTEM_CALL"
      source: "action.run();"
      lineNumber: 467
      details: "Potential harmful system call (Runnable.run) detected; Learn more:\
        \ https://github.com/Sapient-AI/docs#disabled-generated-tests"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: "location1"
      valueType: "java.lang.String"
      uuid: "location"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "logFile"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid132"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid133"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void12"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.slf4j.bridge.SLF4JBridgeHandler"
      valueType: "java.lang.String"
      uuid: "uniqueUuid134"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void15"
      fixed: true
    - sapientType: "ANY"
      valueType: "ch.qos.logback.classic.jul.LevelChangePropagator"
      uuid: "levelChangePropagator"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void17"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid136"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory4"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid137"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory4"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean7"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid138"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean8"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid139"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.List"
      genericValueType: "ch.qos.logback.core.status.Status"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.Status"
      uuid: "object"
      collectionUuid: "list"
      nameForMock: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.Status"
      uuid: "object"
      collectionUuid: "list"
      nameForMock: "object"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "throwable"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.Status"
      uuid: "object"
      collectionUuid: "list"
      nameForMock: "object"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "throwable2"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusUtil"
      uuid: "StatusUtil.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean14"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.util.StatusPrinter"
      uuid: "StatusPrinter.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void19"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 150
      expression: "ClassUtils.isPresent(BRIDGE_HANDLER, getClassLoader())"
      range: "(150,10)-(150,63)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerAvailable"
    - lineNumber: 303
      expression: "!isBridgeHandlerAvailable()"
      range: "(303,7)-(303,33)"
      evaluatedAs: false
      internalMethodName: "isBridgeHandlerInstalled"
    - lineNumber: 308
      expression: "handlers.length == 1"
      range: "(308,10)-(308,29)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerInstalled"
    - lineNumber: 308
      expression: "handlers[0] instanceof SLF4JBridgeHandler"
      range: "(308,34)-(308,74)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerInstalled"
    - lineNumber: 297
      expression: "isBridgeHandlerInstalled()"
      range: "(297,7)-(297,32)"
      evaluatedAs: true
      internalMethodName: "stopAndReset"
    - lineNumber: 261
      expression: "for-each(loggerContext.getStatusManager().getCopyOfStatusList())"
      range: "(261,24)-(261,77)"
      evaluatedAs: true
      internalMethodName: "reportConfigurationErrorsIfNecessary"
    - lineNumber: 262
      expression: "status.getLevel() == Status.ERROR"
      range: "(262,8)-(262,40)"
      evaluatedAs: true
      internalMethodName: "reportConfigurationErrorsIfNecessary"
    - lineNumber: 263
      expression: "!errors.isEmpty()"
      range: "(263,20)-(263,36)"
      evaluatedAs: false
      internalMethodName: "reportConfigurationErrorsIfNecessary"
    - lineNumber: 265
      expression: "status.getThrowable() != null"
      range: "(265,9)-(265,37)"
      evaluatedAs: true
      internalMethodName: "reportConfigurationErrorsIfNecessary"
    - lineNumber: 270
      expression: "errors.isEmpty()"
      range: "(270,7)-(270,22)"
      evaluatedAs: true
      internalMethodName: "reportConfigurationErrorsIfNecessary"
    - lineNumber: 271
      expression: "!StatusUtil.contextHasStatusListener(loggerContext)"
      range: "(271,8)-(271,58)"
      evaluatedAs: true
      internalMethodName: "reportConfigurationErrorsIfNecessary"
- method:
    name: "cleanUp"
    sourceCodeSignature: "void cleanUp()"
    returnType: "void"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
    - idExternalInstruction: 0
      id: 3
      catchExceptions:
      - "java.lang.Throwable"
    - idExternalInstruction: 0
      id: 4
      catchExceptions:
      - "java.lang.Throwable"
    instructionFingerprint: "E2DB8F1D87204B5B2390804C9983F7F3"
  paths:
  - pathId: "path8"
    testPathName: "cleanUpWhenCaughtInterruptedExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "1E0DA44E0E73E795F729DD1E7D869445"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "STATIC"
      name: "Thread.class"
      modelFingerprint: "066E7FA821C72A4CA44720CF40374C42"
      valueUuid: "Thread.class"
      methodExercised:
        expression: "sleep(arg0:uniqueUuid140):void9"
        throwsExceptions:
        - "java.lang.InterruptedException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "6A4954B46E576A51EAC0DC702989E353"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_POTENTIAL_HARM_FULL_SYSTEM_CALL"
      source: "Thread.currentThread().interrupt();"
      lineNumber: 414
      details: "Potential harmful system call (Thread.interrupt) detected; Learn more:\
        \ https://github.com/Sapient-AI/docs#disabled-generated-tests"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "java.lang.Thread"
      uuid: "Thread.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 50
      valueType: "long"
      uuid: "uniqueUuid140"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Interrupted while waiting for non-substitute logger factory"
            valueType: "java.lang.String"
            uuid: "uniqueUuid141"
            fixed: true
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.InterruptedException"
              parameters: []
            valueType: "java.lang.InterruptedException"
            uuid: "interruptedException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 413
      expression: "catch-exception (InterruptedException)"
      range: "(413,4)-(413,33)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    catchBlockExercised:
      idExternalInstruction: 3
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
  - pathId: "path4"
    testPathName: "cleanUpWhenIsBridgeHandlerAvailableNot"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "3E3821692CA0B6F553C1075C691EA1A3"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid142,obj:iLoggerFactory2,messageSupplier:uniqueUuid143):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "1A83567B52570531358327562279E779"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "removeObject(key:string):void11"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "8981CA7F9A75DCF6D7565B26D60DDD7F"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid144,classLoader:classLoader):boolean3"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "B26DF5DD38D424EC82D93F3D355A22F5"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getStatusManager():statusManager"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "E32387BE9A54C3B343AE8CEE70D38B69"
      valueUuid: "statusManager"
      methodExercised:
        expression: "clear():void13"
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "5451BA99C45FE57B1B58388DBDEA897D"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getTurboFilterList():turboFilterList"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "FA7085C9B1957BC84D6731B1D9FAAE99"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "remove(o:uniqueUuid146):boolean4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_INTERNAL_METHOD_FAILURE"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid142"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid143"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.slf4j.bridge.SLF4JBridgeHandler"
      valueType: "java.lang.String"
      uuid: "uniqueUuid144"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void13"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          uuid: "uniqueUuid147"
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          uuid: "uniqueUuid147"
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean4"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid146"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 150
      expression: "ClassUtils.isPresent(BRIDGE_HANDLER, getClassLoader())"
      range: "(150,10)-(150,63)"
      evaluatedAs: false
      internalMethodName: "isBridgeHandlerAvailable"
    - lineNumber: 323
      expression: "isBridgeHandlerAvailable()"
      range: "(323,7)-(323,32)"
      evaluatedAs: false
  - pathId: "path1"
    testPathName: "cleanUpWhen0IndexOfHandlersInstanceOfConsoleHandler"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "C235B6D933C4614E1EB39EE6A47C6692"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid148,obj:iLoggerFactory2,messageSupplier:uniqueUuid149):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "1A83567B52570531358327562279E779"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "removeObject(key:string):void11"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "5AE9821C7CDDD05196EAF5A4EB8C34A6"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid150,classLoader:classLoader):boolean3"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "B26DF5DD38D424EC82D93F3D355A22F5"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getStatusManager():statusManager"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "E32387BE9A54C3B343AE8CEE70D38B69"
      valueUuid: "statusManager"
      methodExercised:
        expression: "clear():void15"
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "5451BA99C45FE57B1B58388DBDEA897D"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getTurboFilterList():turboFilterList"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "FA7085C9B1957BC84D6731B1D9FAAE99"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "remove(o:uniqueUuid152):boolean5"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_INTERNAL_METHOD_FAILURE"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid148"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid149"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.slf4j.bridge.SLF4JBridgeHandler"
      valueType: "java.lang.String"
      uuid: "uniqueUuid150"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void15"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          uuid: "uniqueUuid153"
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          uuid: "uniqueUuid153"
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean5"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid152"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 150
      expression: "ClassUtils.isPresent(BRIDGE_HANDLER, getClassLoader())"
      range: "(150,10)-(150,63)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerAvailable"
    - lineNumber: 323
      expression: "isBridgeHandlerAvailable()"
      range: "(323,7)-(323,32)"
      evaluatedAs: true
    - lineNumber: 173
      expression: "handlers.length == 1"
      range: "(173,8)-(173,27)"
      evaluatedAs: true
      internalMethodName: "removeDefaultRootHandler"
    - lineNumber: 173
      expression: "handlers[0] instanceof ConsoleHandler"
      range: "(173,32)-(173,68)"
      evaluatedAs: true
      internalMethodName: "removeDefaultRootHandler"
  - pathId: "path6"
    testPathName: "cleanUpWhenCaughtThrowable"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "DB69B5D40A6DC2A3E55DBA80EF4ECAAB"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid154,obj:iLoggerFactory,messageSupplier:uniqueUuid155):void9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "1A83567B52570531358327562279E779"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "removeObject(key:string):void10"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "5AE9821C7CDDD05196EAF5A4EB8C34A6"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid156,classLoader:classLoader):boolean2"
        staticAccess: true
    - type: "STATIC"
      name: "SLF4JBridgeHandler.class"
      modelFingerprint: "4C1A64481153CB9135BD6E3AA7775D9C"
      valueUuid: "SLF4JBridgeHandler.class"
      methodExercised:
        expression: "uninstall():void13"
        throwsExceptions:
        - "java.lang.SecurityException"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "B26DF5DD38D424EC82D93F3D355A22F5"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "getStatusManager():statusManager"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "E32387BE9A54C3B343AE8CEE70D38B69"
      valueUuid: "statusManager"
      methodExercised:
        expression: "clear():void14"
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "5451BA99C45FE57B1B58388DBDEA897D"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "getTurboFilterList():turboFilterList"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "FA7085C9B1957BC84D6731B1D9FAAE99"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "remove(o:uniqueUuid158):boolean4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_INTERNAL_METHOD_FAILURE"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid154"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid155"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.slf4j.bridge.SLF4JBridgeHandler"
      valueType: "java.lang.String"
      uuid: "uniqueUuid156"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "MOCK"
      valueType: "org.slf4j.bridge.SLF4JBridgeHandler"
      uuid: "SLF4JBridgeHandler.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void13"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void14"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          uuid: "uniqueUuid159"
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          uuid: "uniqueUuid159"
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean4"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid158"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: false
      internalMethodName: "getLoggerFactory"
    - lineNumber: 150
      expression: "ClassUtils.isPresent(BRIDGE_HANDLER, getClassLoader())"
      range: "(150,10)-(150,63)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerAvailable"
    - lineNumber: 323
      expression: "isBridgeHandlerAvailable()"
      range: "(323,7)-(323,32)"
      evaluatedAs: true
    - lineNumber: 173
      expression: "handlers.length == 1"
      range: "(173,8)-(173,27)"
      evaluatedAs: true
      internalMethodName: "removeDefaultRootHandler"
    - lineNumber: 173
      expression: "handlers[0] instanceof ConsoleHandler"
      range: "(173,32)-(173,68)"
      evaluatedAs: true
      internalMethodName: "removeDefaultRootHandler"
    - lineNumber: 164
      expression: "catch-exception (Throwable)"
      range: "(164,3)-(164,21)"
      evaluatedAs: true
      internalMethodName: "removeJdkLoggingBridgeHandler"
    catchBlockExercised:
      idExternalInstruction: 22
      id: 3
      catchExceptions:
      - "java.lang.Throwable"
  - pathId: "path7"
    testPathName: "cleanUpWhen0IndexOfHandlersInstanceOfConsoleHandlerAndCaughtThrowable"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "737DA1297009988F7BC1B1124C1BCE46"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid160,obj:iLoggerFactory,messageSupplier:uniqueUuid161):void9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "1A83567B52570531358327562279E779"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "removeObject(key:string):void10"
    - type: "STATIC"
      name: "ClassUtils.class"
      modelFingerprint: "5AE9821C7CDDD05196EAF5A4EB8C34A6"
      valueUuid: "ClassUtils.class"
      methodExercised:
        expression: "isPresent(className:uniqueUuid162,classLoader:classLoader):boolean2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "rootLogger"
      modelFingerprint: "BED32E8806E42D5EC03C5172EB5289A7"
      valueUuid: "logger"
      methodExercised:
        expression: "removeHandler(handler:handler):void12"
        throwsExceptions:
        - "java.lang.SecurityException"
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "B26DF5DD38D424EC82D93F3D355A22F5"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "getStatusManager():statusManager"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "E32387BE9A54C3B343AE8CEE70D38B69"
      valueUuid: "statusManager"
      methodExercised:
        expression: "clear():void14"
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "5451BA99C45FE57B1B58388DBDEA897D"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "getTurboFilterList():turboFilterList"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "FA7085C9B1957BC84D6731B1D9FAAE99"
      valueUuid: "turboFilterList"
      methodExercised:
        expression: "remove(o:uniqueUuid165):boolean4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_INTERNAL_METHOD_FAILURE"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid160"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid161"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.boot.logging.LoggingSystem"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.ClassUtils"
      uuid: "ClassUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.slf4j.bridge.SLF4JBridgeHandler"
      valueType: "java.lang.String"
      uuid: "uniqueUuid162"
      fixed: true
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.util.logging.Logger"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<static_method_return>
            target: "java.util.logging.LogManager"
            method: "getLogManager"
            methodParameters: []
          valueType: "java.util.logging.LogManager"
          uuid: "logManager"
        methodParameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: ""
            valueType: "java.lang.String"
            uuid: "uniqueUuid163"
            fixed: true
        methodName: "getLogger"
      valueType: "java.util.logging.Logger"
      uuid: "logger"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void12"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.util.logging.ConsoleHandler"
        parameters: []
      valueType: "java.util.logging.ConsoleHandler"
      uuid: "handler"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void14"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          uuid: "uniqueUuid166"
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values:
        - sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
          uuid: "uniqueUuid166"
      valueType: "ch.qos.logback.classic.spi.TurboFilterList"
      uuid: "turboFilterList"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean4"
      collectionUuid: "turboFilterList"
    - sapientType: "ANY"
      uuid: "uniqueUuid165"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: false
      internalMethodName: "getLoggerFactory"
    - lineNumber: 150
      expression: "ClassUtils.isPresent(BRIDGE_HANDLER, getClassLoader())"
      range: "(150,10)-(150,63)"
      evaluatedAs: true
      internalMethodName: "isBridgeHandlerAvailable"
    - lineNumber: 323
      expression: "isBridgeHandlerAvailable()"
      range: "(323,7)-(323,32)"
      evaluatedAs: true
    - lineNumber: 173
      expression: "handlers.length == 1"
      range: "(173,8)-(173,27)"
      evaluatedAs: true
      internalMethodName: "removeDefaultRootHandler"
    - lineNumber: 173
      expression: "handlers[0] instanceof ConsoleHandler"
      range: "(173,32)-(173,68)"
      evaluatedAs: true
      internalMethodName: "removeDefaultRootHandler"
    - lineNumber: 177
      expression: "catch-exception (Throwable)"
      range: "(177,3)-(177,21)"
      evaluatedAs: true
      internalMethodName: "removeDefaultRootHandler"
    catchBlockExercised:
      idExternalInstruction: 3
      id: 4
      catchExceptions:
      - "java.lang.Throwable"
- method:
    name: "reinitialize"
    sourceCodeSignature: "void reinitialize(LoggingInitializationContext initializationContext)"
    returnType: "void"
    parameters:
    - name: "initializationContext"
      type: "org.springframework.boot.logging.LoggingInitializationContext"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
    instructionFingerprint: "F9AB514A1F4688E9F5D9FF6042537756"
  paths:
  - pathId: "path7"
    testPathName: "reinitializeWhenCaughtInterruptedExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "E867E2508C97F8C0531AB2D6C803C4B4"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "STATIC"
      name: "Thread.class"
      modelFingerprint: "066E7FA821C72A4CA44720CF40374C42"
      valueUuid: "Thread.class"
      methodExercised:
        expression: "sleep(arg0:uniqueUuid167):void9"
        throwsExceptions:
        - "java.lang.InterruptedException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "6A4954B46E576A51EAC0DC702989E353"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_POTENTIAL_HARM_FULL_SYSTEM_CALL"
      source: "Thread.currentThread().interrupt();"
      lineNumber: 414
      details: "Potential harmful system call (Thread.interrupt) detected; Learn more:\
        \ https://github.com/Sapient-AI/docs#disabled-generated-tests"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "java.lang.Thread"
      uuid: "Thread.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 50
      valueType: "long"
      uuid: "uniqueUuid167"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Interrupted while waiting for non-substitute logger factory"
            valueType: "java.lang.String"
            uuid: "uniqueUuid168"
            fixed: true
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.InterruptedException"
              parameters: []
            valueType: "java.lang.InterruptedException"
            uuid: "interruptedException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 413
      expression: "catch-exception (InterruptedException)"
      range: "(413,4)-(413,33)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    catchBlockExercised:
      idExternalInstruction: 3
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
  - pathId: "path6"
    testPathName: "reinitializeWhenFactoryNotInstanceOfSubstituteLoggerFactoryAndCaughtInterruptedExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "033F8BF70EEC7BF6D2D05110ABC94E94"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid169,obj:iLoggerFactory,messageSupplier:uniqueUuid170):void9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "C5421F472FF7A1E785DF996FD15050AF"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "reset():void10"
    - type: "STATIC"
      name: "Thread.class"
      modelFingerprint: "066E7FA821C72A4CA44720CF40374C42"
      valueUuid: "Thread.class"
      methodExercised:
        expression: "sleep(arg0:uniqueUuid171):void11"
        throwsExceptions:
        - "java.lang.InterruptedException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "6A4954B46E576A51EAC0DC702989E353"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_POTENTIAL_HARM_FULL_SYSTEM_CALL"
      source: "Thread.currentThread().interrupt();"
      lineNumber: 414
      details: "Potential harmful system call (Thread.interrupt) detected; Learn more:\
        \ https://github.com/Sapient-AI/docs#disabled-generated-tests"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid169"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid170"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "MOCK"
      valueType: "java.lang.Thread"
      uuid: "Thread.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 50
      valueType: "long"
      uuid: "uniqueUuid171"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Interrupted while waiting for non-substitute logger factory"
            valueType: "java.lang.String"
            uuid: "uniqueUuid172"
            fixed: true
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.InterruptedException"
              parameters: []
            valueType: "java.lang.InterruptedException"
            uuid: "interruptedException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: false
      internalMethodName: "getLoggerFactory"
    - lineNumber: 413
      expression: "catch-exception (InterruptedException)"
      range: "(413,4)-(413,33)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    catchBlockExercised:
      idExternalInstruction: 3
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
  - pathId: "path1"
    testPathName: "reinitializeWhenResourceExists"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "C1BDBC8E51D3C342B148AF769879A5DB"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid173,obj:iLoggerFactory2,messageSupplier:uniqueUuid174):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "C5421F472FF7A1E785DF996FD15050AF"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "reset():void11"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid175,obj:iLoggerFactory4,messageSupplier:uniqueUuid176):void13"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "B26DF5DD38D424EC82D93F3D355A22F5"
      valueUuid: "iLoggerFactory4"
      methodExercised:
        expression: "getStatusManager():statusManager"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "E32387BE9A54C3B343AE8CEE70D38B69"
      valueUuid: "statusManager"
      methodExercised:
        expression: "clear():void14"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "3151A922D4C4C014413E146DFD8BC4E5"
      valueUuid: "classPathResource"
      methodExercised:
        expression: "exists():boolean5"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "546A2C189099315BA2BE40F608256D70"
      methodExercised:
        expression: "loadConfiguration(initializationContext:initializationContext,location:string2,logFile:uniqueUuid177):void15"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_INTERNAL_METHOD_ACCESS_FAILURE"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid173"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid174"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void13"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid175"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory4"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid176"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory4"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void14"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.io.ClassPathResource"
        parameters:
        - name: "path"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "string"
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.core.io.ClassPathResource"
      uuid: "classPathResource"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void15"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "BASIC"
      content: !<regular>
        value: "classpath:A"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "NULL"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "uniqueUuid177"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 107
      expression: "for-each(locations)"
      range: "(107,26)-(107,34)"
      evaluatedAs: true
      internalMethodName: "findConfig"
    - lineNumber: 109
      expression: "resource.exists()"
      range: "(109,8)-(109,24)"
      evaluatedAs: true
      internalMethodName: "findConfig"
  - pathId: "path2"
    testPathName: "reinitializeWhenResourceNotExists"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "058AF9EC41D580F33CC380145666F253"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "initializationContext"
      modelFingerprint: "F6BEE24B4AAE6A3EE4C77ECAC947875B"
      valueUuid: "initializationContext"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid178,obj:iLoggerFactory2,messageSupplier:uniqueUuid179):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "C5421F472FF7A1E785DF996FD15050AF"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "reset():void11"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid180,obj:iLoggerFactory4,messageSupplier:uniqueUuid181):void13"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "B26DF5DD38D424EC82D93F3D355A22F5"
      valueUuid: "iLoggerFactory4"
      methodExercised:
        expression: "getStatusManager():statusManager"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "E32387BE9A54C3B343AE8CEE70D38B69"
      valueUuid: "statusManager"
      methodExercised:
        expression: "clear():void14"
    - type: "LOCAL_VARIABLE"
      name: "resource"
      modelFingerprint: "9579EA5AE95A247510F6F5B5E5A8D1B6"
      valueUuid: "classPathResource"
      methodExercised:
        expression: "exists():boolean5"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "FDEE3C8A96E60B76044DA4E38FF08F8B"
      methodExercised:
        expression: "loadConfiguration(initializationContext:initializationContext,location:string2,logFile:uniqueUuid182):void15"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_INTERNAL_METHOD_ACCESS_FAILURE"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid178"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid179"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void13"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid180"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory4"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid181"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory4"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.status.StatusManager"
      uuid: "statusManager"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void14"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.core.io.ClassPathResource"
        parameters:
        - name: "path"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "path1"
            valueType: "java.lang.String"
            uuid: "string"
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.core.io.ClassPathResource"
      uuid: "classPathResource"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void15"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.logging.LoggingInitializationContext"
      uuid: "initializationContext"
    - sapientType: "NULL"
      valueType: "java.lang.String"
      uuid: "string2"
      fixed: true
    - sapientType: "NULL"
      valueType: "org.springframework.boot.logging.LogFile"
      uuid: "uniqueUuid182"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 107
      expression: "for-each(locations)"
      range: "(107,26)-(107,34)"
      evaluatedAs: true
      internalMethodName: "findConfig"
    - lineNumber: 109
      expression: "resource.exists()"
      range: "(109,8)-(109,24)"
      evaluatedAs: false
      internalMethodName: "findConfig"
- method:
    name: "getLoggerConfigurations"
    sourceCodeSignature: "List<LoggerConfiguration> getLoggerConfigurations()"
    returnType: "java.util.List"
    genericReturnType: "org.springframework.boot.logging.LoggerConfiguration"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
    instructionFingerprint: "A630C8B1E95CDE51D29270BD7FA96A71"
  paths:
  - pathId: "path7"
    testPathName: "getLoggerConfigurationsWhenCaughtInterruptedExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "1E0DA44E0E73E795F729DD1E7D869445"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "STATIC"
      name: "Thread.class"
      modelFingerprint: "066E7FA821C72A4CA44720CF40374C42"
      valueUuid: "Thread.class"
      methodExercised:
        expression: "sleep(arg0:uniqueUuid183):void9"
        throwsExceptions:
        - "java.lang.InterruptedException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "6A4954B46E576A51EAC0DC702989E353"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_POTENTIAL_HARM_FULL_SYSTEM_CALL"
      source: "Thread.currentThread().interrupt();"
      lineNumber: 414
      details: "Potential harmful system call (Thread.interrupt) detected; Learn more:\
        \ https://github.com/Sapient-AI/docs#disabled-generated-tests"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "java.lang.Thread"
      uuid: "Thread.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 50
      valueType: "long"
      uuid: "uniqueUuid183"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Interrupted while waiting for non-substitute logger factory"
            valueType: "java.lang.String"
            uuid: "uniqueUuid184"
            fixed: true
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.InterruptedException"
              parameters: []
            valueType: "java.lang.InterruptedException"
            uuid: "interruptedException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 413
      expression: "catch-exception (InterruptedException)"
      range: "(413,4)-(413,33)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    catchBlockExercised:
      idExternalInstruction: 3
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
  - pathId: "path1"
    testPathName: "getLoggerConfigurationsWhenLoggerIsNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "EADD08E763AD0E7BE3072676E2A80B37"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid185,obj:iLoggerFactory2,messageSupplier:uniqueUuid186):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "292A5B87CA635C3C5F85FF80372927C8"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getLoggerList():list"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "7A0528B4F28435EFC6A8A4C2660F72A3"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "GET_STATIC_FINAL_FIELD_INSTRUCTION_FIELD_NOT_ACCESSIBLE"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid185"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid186"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "NULL"
          valueType: "ch.qos.logback.classic.Logger"
          uuid: "object"
          fixed: true
          collectionUuid: "list"
      valueType: "java.util.List"
      genericValueType: "ch.qos.logback.classic.Logger"
      uuid: "list"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "NULL"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration"
          fixed: true
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "arrayList"
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 340
      expression: "for-each(getLoggerContext().getLoggerList())"
      range: "(340,47)-(340,80)"
      evaluatedAs: true
    - lineNumber: 362
      expression: "logger == null"
      range: "(362,7)-(362,20)"
      evaluatedAs: true
      internalMethodName: "getLoggerConfiguration"
  - pathId: "path8"
    testPathName: "getLoggerConfigurationsWhenGetLoggerContextGetLoggerListIsNotEmptyAndLoggerIsNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "25606DEDCDB580EA3B653FC0C2808E05"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid187,obj:iLoggerFactory,messageSupplier:uniqueUuid188):void9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "292A5B87CA635C3C5F85FF80372927C8"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "getLoggerList():list"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "7A0528B4F28435EFC6A8A4C2660F72A3"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "GET_STATIC_FINAL_FIELD_INSTRUCTION_FIELD_NOT_ACCESSIBLE"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid187"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid188"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "NULL"
          valueType: "ch.qos.logback.classic.Logger"
          uuid: "object"
          fixed: true
          collectionUuid: "list"
      valueType: "java.util.List"
      genericValueType: "ch.qos.logback.classic.Logger"
      uuid: "list"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "NULL"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration"
          fixed: true
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "arrayList"
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: false
      internalMethodName: "getLoggerFactory"
    - lineNumber: 413
      expression: "catch-exception (InterruptedException)"
      range: "(413,4)-(413,33)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 340
      expression: "for-each(getLoggerContext().getLoggerList())"
      range: "(340,47)-(340,80)"
      evaluatedAs: true
    - lineNumber: 362
      expression: "logger == null"
      range: "(362,7)-(362,20)"
      evaluatedAs: true
      internalMethodName: "getLoggerConfiguration"
    catchBlockExercised:
      idExternalInstruction: 3
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
  - pathId: "path2"
    testPathName: "getLoggerConfigurationsWhenLoggerROOT_LOGGER_NAMEEqualsName"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "0FA2788897A4738889DCCB08DDCBCE73"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid189,obj:iLoggerFactory2,messageSupplier:uniqueUuid190):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "65730095E0B92A8AD46A227D154BD7F6"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getLoggerList():list"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "B8D15738CADB275F480F0402E70AE1D4"
      valueUuid: "object"
      methodExercised:
        expression: "getLevel():level8"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "9DBF3E29FB6E45E01CB9AE25CDB5B120"
      valueUuid: "object"
      methodExercised:
        expression: "getEffectiveLevel():level9"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "1E060965D968BD2BC205604AA88C6676"
      valueUuid: "object"
      methodExercised:
        expression: "getName():string"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "9141BB3EE2AA5D69878EA9BDA88D21EC"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:string):boolean4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "1553609DF7A6410F6DDA652F45BD7EA0"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "LogLevel level = LEVELS.convertNativeToSystem(logger.getLevel());"
      lineNumber: 365
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: LEVELS - Method: convertNativeToSystem"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid189"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid190"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "ch.qos.logback.classic.Logger"
          uuid: "object"
          collectionUuid: "list"
      valueType: "java.util.List"
      genericValueType: "ch.qos.logback.classic.Logger"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "object"
      collectionUuid: "list"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Level"
      uuid: "level8"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "object"
      collectionUuid: "list"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Level"
      uuid: "level9"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "object"
      collectionUuid: "list"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.logging.LoggerConfiguration"
            parameters:
            - name: "name"
              value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "ROOT"
                valueType: "java.lang.String"
                uuid: "string2"
                fixed: true
            - name: "configuredLevel"
              value:
                sapientType: "ENUM"
                content: !<regular>
                  value: "TRACE"
                valueType: "org.springframework.boot.logging.LogLevel"
                uuid: "logLevel"
            - name: "effectiveLevel"
              value:
                sapientType: "ENUM"
                content: !<regular>
                  value: "TRACE"
                valueType: "org.springframework.boot.logging.LogLevel"
                uuid: "logLevel2"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration"
          fixed: true
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "arrayList"
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 340
      expression: "for-each(getLoggerContext().getLoggerList())"
      range: "(340,47)-(340,80)"
      evaluatedAs: true
    - lineNumber: 362
      expression: "logger == null"
      range: "(362,7)-(362,20)"
      evaluatedAs: false
      internalMethodName: "getLoggerConfiguration"
    - lineNumber: 355
      expression: "!StringUtils.hasLength(name)"
      range: "(355,7)-(355,34)"
      evaluatedAs: false
      internalMethodName: "getLoggerName"
    - lineNumber: 355
      expression: "Logger.ROOT_LOGGER_NAME.equals(name)"
      range: "(355,39)-(355,74)"
      evaluatedAs: true
      internalMethodName: "getLoggerName"
  - pathId: "path3"
    testPathName: "getLoggerConfigurationsWhenLoggerROOT_LOGGER_NAMENotEqualsName"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "C47644A2FF72FCD3605350E9C9CAB0E0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid191,obj:iLoggerFactory2,messageSupplier:uniqueUuid192):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "65730095E0B92A8AD46A227D154BD7F6"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getLoggerList():list"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "B8D15738CADB275F480F0402E70AE1D4"
      valueUuid: "object"
      methodExercised:
        expression: "getLevel():level8"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "9DBF3E29FB6E45E01CB9AE25CDB5B120"
      valueUuid: "object"
      methodExercised:
        expression: "getEffectiveLevel():level9"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "46BC280CD29982A4B9BC0882291DBCA5"
      valueUuid: "object"
      methodExercised:
        expression: "getName():string"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "7B623EE582A0C2E878E2D18F466E3DE6"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:string):boolean4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D87E90EA434784BE1711412E6D4D3BC1"
      valueUuid: "arrayList"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "LogLevel level = LEVELS.convertNativeToSystem(logger.getLevel());"
      lineNumber: 365
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: LEVELS - Method: convertNativeToSystem"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid191"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid192"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "ch.qos.logback.classic.Logger"
          uuid: "object"
          collectionUuid: "list"
      valueType: "java.util.List"
      genericValueType: "ch.qos.logback.classic.Logger"
      uuid: "list"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "object"
      collectionUuid: "list"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Level"
      uuid: "level8"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "object"
      collectionUuid: "list"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Level"
      uuid: "level9"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "object"
      collectionUuid: "list"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.logging.LoggerConfiguration"
            parameters:
            - name: "name"
              value:
                sapientType: "BASIC"
                content: !<regular>
                  value: "A"
                valueType: "java.lang.String"
                uuid: "string"
            - name: "configuredLevel"
              value:
                sapientType: "ENUM"
                content: !<regular>
                  value: "TRACE"
                valueType: "org.springframework.boot.logging.LogLevel"
                uuid: "logLevel"
            - name: "effectiveLevel"
              value:
                sapientType: "ENUM"
                content: !<regular>
                  value: "TRACE"
                valueType: "org.springframework.boot.logging.LogLevel"
                uuid: "logLevel2"
          valueType: "org.springframework.boot.logging.LoggerConfiguration"
          uuid: "loggerConfiguration"
          fixed: true
      valueType: "java.util.List"
      genericValueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "arrayList"
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 340
      expression: "for-each(getLoggerContext().getLoggerList())"
      range: "(340,47)-(340,80)"
      evaluatedAs: true
    - lineNumber: 362
      expression: "logger == null"
      range: "(362,7)-(362,20)"
      evaluatedAs: false
      internalMethodName: "getLoggerConfiguration"
    - lineNumber: 355
      expression: "!StringUtils.hasLength(name)"
      range: "(355,7)-(355,34)"
      evaluatedAs: false
      internalMethodName: "getLoggerName"
    - lineNumber: 355
      expression: "Logger.ROOT_LOGGER_NAME.equals(name)"
      range: "(355,39)-(355,74)"
      evaluatedAs: false
      internalMethodName: "getLoggerName"
- method:
    name: "getLoggerConfiguration"
    sourceCodeSignature: "LoggerConfiguration getLoggerConfiguration(String loggerName)"
    returnType: "org.springframework.boot.logging.LoggerConfiguration"
    parameters:
    - name: "loggerName"
      type: "java.lang.String"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
    instructionFingerprint: "EB815413C80145025725418BACC002FC"
  paths:
  - pathId: "path1"
    testPathName: "getLoggerConfigurationWhenLoggerIsNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "EE9FA9145B5F890599D7F5350924A880"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0EED9D401952D017F9A3C4F3269A4C94"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "2E7450BAF0E5B750B6D861597765DE17"
      valueUuid: "loggerName"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "9AD35227EBC46C080CEDFA93B2D92D03"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:loggerName):boolean1"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid1,obj:iLoggerFactory2,messageSupplier:uniqueUuid2):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "E96E84CED4A340E2EEA1B5B4AC3F3231"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "exists(name:string):logger"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "3A5A60D2947E5A7C6022611FE6C7947B"
      valueUuid: "loggerConfiguration"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid2"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "NULL"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "string"
      fixed: true
    - sapientType: "NULL"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration"
      fixed: true
    branches:
    - lineNumber: 355
      expression: "!StringUtils.hasLength(name)"
      range: "(355,7)-(355,34)"
      evaluatedAs: false
      internalMethodName: "getLoggerName"
    - lineNumber: 355
      expression: "Logger.ROOT_LOGGER_NAME.equals(name)"
      range: "(355,39)-(355,74)"
      evaluatedAs: true
      internalMethodName: "getLoggerName"
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 362
      expression: "logger == null"
      range: "(362,7)-(362,20)"
      evaluatedAs: true
      internalMethodName: "getLoggerConfiguration"
  - pathId: "path2"
    testPathName: "getLoggerConfigurationWhenFactoryInstanceOfSubstituteLoggerFactoryAndLoggerIsNotNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "7CFAFDD869F31D4F5A3F4B593DD1601F"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "92E6E94B493D274576D3BDC78C61F78B"
      valueUuid: "loggerName"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "684342B1C5C273BF0CBB28A6FD251B3B"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:loggerName):boolean1"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid195,obj:iLoggerFactory2,messageSupplier:uniqueUuid196):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "5DEE17D86E103A8094BD37F85719FD6F"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "exists(name:string):logger"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "B8D15738CADB275F480F0402E70AE1D4"
      valueUuid: "logger"
      methodExercised:
        expression: "getLevel():level8"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "9DBF3E29FB6E45E01CB9AE25CDB5B120"
      valueUuid: "logger"
      methodExercised:
        expression: "getEffectiveLevel():level9"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "1E060965D968BD2BC205604AA88C6676"
      valueUuid: "logger"
      methodExercised:
        expression: "getName():string2"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "9141BB3EE2AA5D69878EA9BDA88D21EC"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:string2):boolean5"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C1EF2C485ADD0C6F25FDE63FB93577A5"
      valueUuid: "loggerConfiguration"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "LogLevel level = LEVELS.convertNativeToSystem(logger.getLevel());"
      lineNumber: 365
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: LEVELS - Method: convertNativeToSystem"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid195"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid196"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "string"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Level"
      uuid: "level8"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Level"
      uuid: "level9"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.LoggerConfiguration"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "ROOT"
            valueType: "java.lang.String"
            uuid: "string3"
            fixed: true
        - name: "configuredLevel"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "TRACE"
            valueType: "org.springframework.boot.logging.LogLevel"
            uuid: "logLevel"
        - name: "effectiveLevel"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "TRACE"
            valueType: "org.springframework.boot.logging.LogLevel"
            uuid: "logLevel2"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration"
      fixed: true
    branches:
    - lineNumber: 355
      expression: "!StringUtils.hasLength(name)"
      range: "(355,7)-(355,34)"
      evaluatedAs: false
      internalMethodName: "getLoggerName"
    - lineNumber: 355
      expression: "Logger.ROOT_LOGGER_NAME.equals(name)"
      range: "(355,39)-(355,74)"
      evaluatedAs: true
      internalMethodName: "getLoggerName"
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 362
      expression: "logger == null"
      range: "(362,7)-(362,20)"
      evaluatedAs: false
      internalMethodName: "getLoggerConfiguration"
  - pathId: "path3"
    testPathName: "getLoggerConfigurationWhenStringUtilsHasLengthNameAndLoggerROOT_LOGGER_NAMEEqualsNameAndFactoryInstanceOfSubstituteLogg"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "8A3D63AF3157FB5992464AC772D8A50A"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "92E6E94B493D274576D3BDC78C61F78B"
      valueUuid: "loggerName"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "684342B1C5C273BF0CBB28A6FD251B3B"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:loggerName):boolean1"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid197,obj:iLoggerFactory2,messageSupplier:uniqueUuid198):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "5DEE17D86E103A8094BD37F85719FD6F"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "exists(name:string):logger"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "B8D15738CADB275F480F0402E70AE1D4"
      valueUuid: "logger"
      methodExercised:
        expression: "getLevel():level8"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "9DBF3E29FB6E45E01CB9AE25CDB5B120"
      valueUuid: "logger"
      methodExercised:
        expression: "getEffectiveLevel():level9"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "46BC280CD29982A4B9BC0882291DBCA5"
      valueUuid: "logger"
      methodExercised:
        expression: "getName():string2"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "7B623EE582A0C2E878E2D18F466E3DE6"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:string2):boolean5"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "CECF679CEDCA50B4FBF25CBFFFC47109"
      valueUuid: "loggerConfiguration"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "LogLevel level = LEVELS.convertNativeToSystem(logger.getLevel());"
      lineNumber: 365
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: LEVELS - Method: convertNativeToSystem"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid197"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid198"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "string"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Level"
      uuid: "level8"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Level"
      uuid: "level9"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean5"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.LoggerConfiguration"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "A"
            valueType: "java.lang.String"
            uuid: "string2"
        - name: "configuredLevel"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "TRACE"
            valueType: "org.springframework.boot.logging.LogLevel"
            uuid: "logLevel"
        - name: "effectiveLevel"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "TRACE"
            valueType: "org.springframework.boot.logging.LogLevel"
            uuid: "logLevel2"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration"
      fixed: true
    branches:
    - lineNumber: 355
      expression: "!StringUtils.hasLength(name)"
      range: "(355,7)-(355,34)"
      evaluatedAs: false
      internalMethodName: "getLoggerName"
    - lineNumber: 355
      expression: "Logger.ROOT_LOGGER_NAME.equals(name)"
      range: "(355,39)-(355,74)"
      evaluatedAs: true
      internalMethodName: "getLoggerName"
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 362
      expression: "logger == null"
      range: "(362,7)-(362,20)"
      evaluatedAs: false
      internalMethodName: "getLoggerConfiguration"
  - pathId: "path8"
    testPathName: "getLoggerConfigurationWhenCaughtInterruptedExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "77493EFCCCC3A4E5009CB5098FAACB33"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "92E6E94B493D274576D3BDC78C61F78B"
      valueUuid: "loggerName"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "684342B1C5C273BF0CBB28A6FD251B3B"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:loggerName):boolean1"
        staticAccess: true
    - type: "STATIC"
      name: "Thread.class"
      modelFingerprint: "066E7FA821C72A4CA44720CF40374C42"
      valueUuid: "Thread.class"
      methodExercised:
        expression: "sleep(arg0:uniqueUuid199):void9"
        throwsExceptions:
        - "java.lang.InterruptedException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "6A4954B46E576A51EAC0DC702989E353"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_POTENTIAL_HARM_FULL_SYSTEM_CALL"
      source: "Thread.currentThread().interrupt();"
      lineNumber: 414
      details: "Potential harmful system call (Thread.interrupt) detected; Learn more:\
        \ https://github.com/Sapient-AI/docs#disabled-generated-tests"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "MOCK"
      valueType: "java.lang.Thread"
      uuid: "Thread.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 50
      valueType: "long"
      uuid: "uniqueUuid199"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Interrupted while waiting for non-substitute logger factory"
            valueType: "java.lang.String"
            uuid: "uniqueUuid200"
            fixed: true
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.InterruptedException"
              parameters: []
            valueType: "java.lang.InterruptedException"
            uuid: "interruptedException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 355
      expression: "!StringUtils.hasLength(name)"
      range: "(355,7)-(355,34)"
      evaluatedAs: false
      internalMethodName: "getLoggerName"
    - lineNumber: 355
      expression: "Logger.ROOT_LOGGER_NAME.equals(name)"
      range: "(355,39)-(355,74)"
      evaluatedAs: true
      internalMethodName: "getLoggerName"
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 413
      expression: "catch-exception (InterruptedException)"
      range: "(413,4)-(413,33)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    catchBlockExercised:
      idExternalInstruction: 3
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
  - pathId: "path6"
    testPathName: "getLoggerConfigurationWhenLoggerROOT_LOGGER_NAMENotEqualsNameAndFactoryNotInstanceOfSubstituteLoggerFactoryAndLoggerIsN"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "0EDCCCFF7A96BC9AA473B09A3F55941E"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "A2E11966147629F7EB0BA8706EE80B6B"
      valueUuid: "loggerName"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "343F4757C4E645C5D95B6C1E12B9BF12"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:loggerName):boolean1"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid201,obj:iLoggerFactory,messageSupplier:uniqueUuid202):void9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "21802B00552C5F1155655F4555F21DFD"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "exists(name:loggerName):logger"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "B8D15738CADB275F480F0402E70AE1D4"
      valueUuid: "logger"
      methodExercised:
        expression: "getLevel():level8"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "9DBF3E29FB6E45E01CB9AE25CDB5B120"
      valueUuid: "logger"
      methodExercised:
        expression: "getEffectiveLevel():level9"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "ACB2994933594C67C3B61DA8A069FA33"
      valueUuid: "logger"
      methodExercised:
        expression: "getName():string"
    - type: "STATIC"
      name: "StringUtils.class"
      modelFingerprint: "C2604A03CA03BFAB37C0AD4EFDCC34F5"
      valueUuid: "StringUtils.class"
      methodExercised:
        expression: "hasLength(str:string):boolean4"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C1EF2C485ADD0C6F25FDE63FB93577A5"
      valueUuid: "loggerConfiguration"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "LogLevel level = LEVELS.convertNativeToSystem(logger.getLevel());"
      lineNumber: 365
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: LEVELS - Method: convertNativeToSystem"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid201"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid202"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Level"
      uuid: "level8"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Level"
      uuid: "level9"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "B"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.LoggerConfiguration"
        parameters:
        - name: "name"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "ROOT"
            valueType: "java.lang.String"
            uuid: "string2"
            fixed: true
        - name: "configuredLevel"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "TRACE"
            valueType: "org.springframework.boot.logging.LogLevel"
            uuid: "logLevel"
        - name: "effectiveLevel"
          value:
            sapientType: "ENUM"
            content: !<regular>
              value: "TRACE"
            valueType: "org.springframework.boot.logging.LogLevel"
            uuid: "logLevel2"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration"
      fixed: true
    branches:
    - lineNumber: 355
      expression: "!StringUtils.hasLength(name)"
      range: "(355,7)-(355,34)"
      evaluatedAs: false
      internalMethodName: "getLoggerName"
    - lineNumber: 355
      expression: "Logger.ROOT_LOGGER_NAME.equals(name)"
      range: "(355,39)-(355,74)"
      evaluatedAs: false
      internalMethodName: "getLoggerName"
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: false
      internalMethodName: "getLoggerFactory"
    - lineNumber: 362
      expression: "logger == null"
      range: "(362,7)-(362,20)"
      evaluatedAs: false
      internalMethodName: "getLoggerConfiguration"
  - pathId: "path9"
    testPathName: "getLoggerConfigurationWhenCaughtInterruptedExceptionAndLoggerIsNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "878FCA1488AF2A93989D404DFF730C44"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "92E6E94B493D274576D3BDC78C61F78B"
      valueUuid: "loggerName"
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "684342B1C5C273BF0CBB28A6FD251B3B"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:loggerName):boolean1"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid203,obj:iLoggerFactory,messageSupplier:uniqueUuid204):void9"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "loggerContext"
      modelFingerprint: "E96E84CED4A340E2EEA1B5B4AC3F3231"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "exists(name:string):logger"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "3A5A60D2947E5A7C6022611FE6C7947B"
      valueUuid: "loggerConfiguration"
    disabled: true
    failureReason:
      reason: "DEPENDENCY_TO_THROW_EXCEPTION_NOT_FOUND"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid203"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid204"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "NULL"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "string"
      fixed: true
    - sapientType: "NULL"
      valueType: "org.springframework.boot.logging.LoggerConfiguration"
      uuid: "loggerConfiguration"
      fixed: true
    branches:
    - lineNumber: 355
      expression: "!StringUtils.hasLength(name)"
      range: "(355,7)-(355,34)"
      evaluatedAs: false
      internalMethodName: "getLoggerName"
    - lineNumber: 355
      expression: "Logger.ROOT_LOGGER_NAME.equals(name)"
      range: "(355,39)-(355,74)"
      evaluatedAs: true
      internalMethodName: "getLoggerName"
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: false
      internalMethodName: "getLoggerFactory"
    - lineNumber: 413
      expression: "catch-exception (InterruptedException)"
      range: "(413,4)-(413,33)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 362
      expression: "logger == null"
      range: "(362,7)-(362,20)"
      evaluatedAs: true
      internalMethodName: "getLoggerConfiguration"
    catchBlockExercised:
      idExternalInstruction: 3
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
- method:
    name: "getSupportedLogLevels"
    sourceCodeSignature: "Set<LogLevel> getSupportedLogLevels()"
    returnType: "java.util.Set"
    genericReturnType: "org.springframework.boot.logging.LogLevel"
    instructionFingerprint: "C7DE47ABECFFE7D539DA63CCA76011F6"
  paths:
  - pathId: "path1"
    testPathName: "getSupportedLogLevelsTest"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "02FBE5C31F402B3F973DBEC17E108151"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "4199E7380E9EACFBDBB084A4478FA200"
      valueUuid: "set"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Set"
      genericValueType: "org.springframework.boot.logging.LogLevel"
      uuid: "set"
- method:
    name: "setLogLevel"
    sourceCodeSignature: "void setLogLevel(String loggerName, LogLevel level)"
    returnType: "void"
    parameters:
    - name: "loggerName"
      type: "java.lang.String"
    - name: "level"
      type: "org.springframework.boot.logging.LogLevel"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
    instructionFingerprint: "7981F8A69C65F243FF8F4A7C53741A67"
  paths:
  - pathId: "path6"
    testPathName: "setLogLevelWhenCaughtInterruptedExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "3EA21D534C0D993993043808B86C8C1C"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "279D111B2A92306DC84BCC9AF8EB546F"
      valueUuid: "loggerName"
    - type: "INPUT"
      name: "level"
      modelFingerprint: "4DAD859C002C8C2921B238B0254ECF25"
      valueUuid: "level"
    - type: "STATIC"
      name: "Thread.class"
      modelFingerprint: "066E7FA821C72A4CA44720CF40374C42"
      valueUuid: "Thread.class"
      methodExercised:
        expression: "sleep(arg0:uniqueUuid205):void9"
        throwsExceptions:
        - "java.lang.InterruptedException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "6A4954B46E576A51EAC0DC702989E353"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_POTENTIAL_HARM_FULL_SYSTEM_CALL"
      source: "Thread.currentThread().interrupt();"
      lineNumber: 414
      details: "Potential harmful system call (Thread.interrupt) detected; Learn more:\
        \ https://github.com/Sapient-AI/docs#disabled-generated-tests"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "loggerName1"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "ENUM"
      content: !<regular>
        value: "TRACE"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "level"
    - sapientType: "MOCK"
      valueType: "java.lang.Thread"
      uuid: "Thread.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 50
      valueType: "long"
      uuid: "uniqueUuid205"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Interrupted while waiting for non-substitute logger factory"
            valueType: "java.lang.String"
            uuid: "uniqueUuid206"
            fixed: true
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.InterruptedException"
              parameters: []
            valueType: "java.lang.InterruptedException"
            uuid: "interruptedException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 413
      expression: "catch-exception (InterruptedException)"
      range: "(413,4)-(413,33)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    catchBlockExercised:
      idExternalInstruction: 3
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
  - pathId: "path1"
    testPathName: "setLogLevelWhenLoggerIsNotNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "46D1BB05070E1660D29DE44950CAB828"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0EED9D401952D017F9A3C4F3269A4C94"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "2E7450BAF0E5B750B6D861597765DE17"
      valueUuid: "loggerName"
    - type: "INPUT"
      name: "level"
      modelFingerprint: "4ADA2F12588E0F5BB141B0EFEA678AD1"
      valueUuid: "level"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid1,obj:iLoggerFactory2,messageSupplier:uniqueUuid2):void10"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "9AD35227EBC46C080CEDFA93B2D92D03"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:loggerName):boolean3"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "77A7B42BB3C8289D91F269B657B5785A"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getLogger(name:uniqueUuid3):logger"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "B3A03C51C46F21DFEFC3FF2279F9572C"
      valueUuid: "logger"
      methodExercised:
        expression: "setLevel(newLevel:object):void11"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "ENUM"
      content: !<regular>
        value: "FATAL"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "level"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid2"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "NULL"
      valueType: "ch.qos.logback.classic.Level"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 355
      expression: "!StringUtils.hasLength(name)"
      range: "(355,7)-(355,34)"
      evaluatedAs: false
      internalMethodName: "getLoggerName"
    - lineNumber: 355
      expression: "Logger.ROOT_LOGGER_NAME.equals(name)"
      range: "(355,39)-(355,74)"
      evaluatedAs: true
      internalMethodName: "getLoggerName"
    - lineNumber: 379
      expression: "logger != null"
      range: "(379,7)-(379,20)"
      evaluatedAs: true
  - pathId: "path3"
    testPathName: "setLogLevelWhenLoggerROOT_LOGGER_NAMENotEqualsNameAndLoggerIsNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "BEC7EBCEFCB7D21D5F3316FE3F794C10"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0EED9D401952D017F9A3C4F3269A4C94"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "FE0722AC5A321A9C991E311AD99A7A0A"
      valueUuid: "loggerName"
    - type: "INPUT"
      name: "level"
      modelFingerprint: "807596B6F5FFFB76F8F25521917FA5E7"
      valueUuid: "level"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid1,obj:iLoggerFactory2,messageSupplier:uniqueUuid2):void10"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "51AAA449DC11CBBCAF785F231932D883"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:loggerName):boolean3"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "D930D9208F111D74660529DC28F56C05"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getLogger(name:loggerName):logger"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "ENUM"
      content: !<regular>
        value: "TRACE"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "level"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid2"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "NULL"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 355
      expression: "!StringUtils.hasLength(name)"
      range: "(355,7)-(355,34)"
      evaluatedAs: false
      internalMethodName: "getLoggerName"
    - lineNumber: 355
      expression: "Logger.ROOT_LOGGER_NAME.equals(name)"
      range: "(355,39)-(355,74)"
      evaluatedAs: false
      internalMethodName: "getLoggerName"
    - lineNumber: 379
      expression: "logger != null"
      range: "(379,7)-(379,20)"
      evaluatedAs: false
  - pathId: "path7"
    testPathName: "setLogLevelWhenLoggerROOT_LOGGER_NAMEEqualsNameAndLoggerIsNotNull"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "58502DC18D96DEE17CE96E92EF059F7F"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "loggerName"
      modelFingerprint: "92E6E94B493D274576D3BDC78C61F78B"
      valueUuid: "loggerName"
    - type: "INPUT"
      name: "level"
      modelFingerprint: "94E55EC6A9BF7F744B20ABA43E19090E"
      valueUuid: "level"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid212,obj:iLoggerFactory,messageSupplier:uniqueUuid213):void9"
        staticAccess: true
    - type: "STATIC"
      name: "StringUtils.class.real"
      modelFingerprint: "684342B1C5C273BF0CBB28A6FD251B3B"
      valueUuid: "StringUtils.class.real"
      methodExercised:
        expression: "hasLength(str:loggerName):boolean2"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "factory"
      modelFingerprint: "77A7B42BB3C8289D91F269B657B5785A"
      valueUuid: "iLoggerFactory"
      methodExercised:
        expression: "getLogger(name:uniqueUuid214):logger"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "700B0FD3C434683D1B3AAEAABD72C954"
      valueUuid: "logger"
      methodExercised:
        expression: "setLevel(newLevel:object):void10"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "DEPENDENCY_TO_THROW_EXCEPTION_NOT_FOUND"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "ENUM"
      content: !<regular>
        value: "FATAL"
      valueType: "org.springframework.boot.logging.LogLevel"
      uuid: "level"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid212"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid213"
    - sapientType: "REAL"
      valueType: "org.springframework.util.StringUtils"
      uuid: "StringUtils.class.real"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "loggerName"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "uniqueUuid214"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "NULL"
      valueType: "ch.qos.logback.classic.Level"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: false
      internalMethodName: "getLoggerFactory"
    - lineNumber: 413
      expression: "catch-exception (InterruptedException)"
      range: "(413,4)-(413,33)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 355
      expression: "!StringUtils.hasLength(name)"
      range: "(355,7)-(355,34)"
      evaluatedAs: false
      internalMethodName: "getLoggerName"
    - lineNumber: 355
      expression: "Logger.ROOT_LOGGER_NAME.equals(name)"
      range: "(355,39)-(355,74)"
      evaluatedAs: true
      internalMethodName: "getLoggerName"
    - lineNumber: 379
      expression: "logger != null"
      range: "(379,7)-(379,20)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 3
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
- method:
    name: "getShutdownHandler"
    sourceCodeSignature: "Runnable getShutdownHandler()"
    returnType: "java.lang.Runnable"
    instructionFingerprint: "50B331B2816ACE10F50A59CAB1B1880F"
  paths:
  - pathId: "path1"
    testPathName: "getShutdownHandlerTest"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "D47464FDF87C5F59E40DE7F61FA7270A"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "992B3E5D2952F893CF69794C32319CB3"
      valueUuid: "runnableNotNull"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "NOT_NULL"
      valueType: "java.lang.Runnable"
      uuid: "runnableNotNull"
      fixed: true
- method:
    name: "getDefaultLogCorrelationPattern"
    sourceCodeSignature: "String getDefaultLogCorrelationPattern()"
    returnType: "java.lang.String"
    instructionFingerprint: "C0EF50AD88945131799CB6BA2E2AD04A"
  paths:
  - pathId: "path1"
    testPathName: "getDefaultLogCorrelationPatternTest"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "EE52CEF6A7C14F6AF9A9D7341F5165A2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B4685CBF115E12399B9B83DFBE3DE1E5"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "%correlationId"
      valueType: "java.lang.String"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "processAheadOfTime"
    sourceCodeSignature: "BeanFactoryInitializationAotContribution processAheadOfTime(ConfigurableListableBeanFactory\
      \ beanFactory)"
    returnType: "org.springframework.beans.factory.aot.BeanFactoryInitializationAotContribution"
    parameters:
    - name: "beanFactory"
      type: "org.springframework.beans.factory.config.ConfigurableListableBeanFactory"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
    instructionFingerprint: "5193239FE82DFC62D28FF0DE0A8A4E0D"
  paths:
  - pathId: "path1"
    testPathName: "processAheadOfTimeWhenFactoryInstanceOfSubstituteLoggerFactory"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "9C55303F21777790086103B119373DCD"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0EED9D401952D017F9A3C4F3269A4C94"
      valueUuid: "target"
    - type: "INPUT"
      name: "beanFactory"
      modelFingerprint: "932A2700B3FDD585DF4F3E3794C50826"
      valueUuid: "beanFactory"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "4B91279F296D0A9798FF9A78742F11E0"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "isInstanceOf(type:uniqueUuid1,obj:iLoggerFactory2,messageSupplier:uniqueUuid2):void10"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "2321DB53D38A3C740CCFEE4752C4CD12"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "getObject(key:string):object"
    - type: "LOCAL_VARIABLE"
      name: "context"
      modelFingerprint: "6775586E0D79DB7928CAE5FBDEF3F062"
      valueUuid: "iLoggerFactory2"
      methodExercised:
        expression: "removeObject(key:string):void11"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8432C19B7C0954EDCA65CB8F58FEB6D5"
      valueUuid: "object"
    disabled: true
    failureReason:
      reason: "UNKNOWN_REASON"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.config.ConfigurableListableBeanFactory"
      uuid: "beanFactory"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void10"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.classic.LoggerContext"
      valueType: "java.lang.Class"
      genericValueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "ANY"
      valueType: "java.util.function.Supplier"
      genericValueType: "java.lang.String"
      uuid: "uniqueUuid2"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.aot.BeanFactoryInitializationAotContribution"
      uuid: "object"
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.beans.factory.aot.BeanFactoryInitializationAotContribution"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "iLoggerFactory2"
      explicitCastNeeded: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void11"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "org.springframework.beans.factory.aot.BeanFactoryInitializationAotContribution"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.aot.BeanFactoryInitializationAotContribution"
      uuid: "object"
      explicitCastNeeded: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
  - pathId: "path3"
    testPathName: "processAheadOfTimeWhenCaughtInterruptedExceptionThrowsIllegalStateException"
    constructorSignature: "<init>(java.lang.ClassLoader) : void"
    modelFingerprint: "EDE5EE5F51A776C2A2D6CB606AE60452"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "372222AE360FDF818815E2736D8B8058"
      valueUuid: "target"
    - type: "INPUT"
      name: "beanFactory"
      modelFingerprint: "932A2700B3FDD585DF4F3E3794C50826"
      valueUuid: "beanFactory"
    - type: "STATIC"
      name: "Thread.class"
      modelFingerprint: "066E7FA821C72A4CA44720CF40374C42"
      valueUuid: "Thread.class"
      methodExercised:
        expression: "sleep(arg0:uniqueUuid217):void9"
        throwsExceptions:
        - "java.lang.InterruptedException"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "6A4954B46E576A51EAC0DC702989E353"
      valueUuid: "illegalStateException"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_POTENTIAL_HARM_FULL_SYSTEM_CALL"
      source: "Thread.currentThread().interrupt();"
      lineNumber: 414
      details: "Potential harmful system call (Thread.interrupt) detected; Learn more:\
        \ https://github.com/Sapient-AI/docs#disabled-generated-tests"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
        parameters:
        - name: "classLoader"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.lang.ClassLoader"
              method: "getPlatformClassLoader"
              methodParameters: []
            valueType: "java.lang.ClassLoader"
            uuid: "classLoader"
      valueType: "org.springframework.boot.logging.logback.LogbackLoggingSystem"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.beans.factory.config.ConfigurableListableBeanFactory"
      uuid: "beanFactory"
    - sapientType: "MOCK"
      valueType: "java.lang.Thread"
      uuid: "Thread.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void9"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 50
      valueType: "long"
      uuid: "uniqueUuid217"
      fixed: true
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.IllegalStateException"
        parameters:
        - name: "message"
          value:
            sapientType: "BASIC"
            content: !<regular>
              value: "Interrupted while waiting for non-substitute logger factory"
            valueType: "java.lang.String"
            uuid: "uniqueUuid218"
            fixed: true
        - name: "cause"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.InterruptedException"
              parameters: []
            valueType: "java.lang.InterruptedException"
            uuid: "interruptedException"
      valueType: "java.lang.IllegalStateException"
      uuid: "illegalStateException"
      fixed: true
    branches:
    - lineNumber: 409
      expression: "factory instanceof SubstituteLoggerFactory"
      range: "(409,10)-(409,51)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    - lineNumber: 413
      expression: "catch-exception (InterruptedException)"
      range: "(413,4)-(413,33)"
      evaluatedAs: true
      internalMethodName: "getLoggerFactory"
    catchBlockExercised:
      idExternalInstruction: 3
      id: 5
      catchExceptions:
      - "java.lang.InterruptedException"
