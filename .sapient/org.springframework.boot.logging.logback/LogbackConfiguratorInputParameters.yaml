---
modelFingerprint: "31ABA658081E14A211B7C43E22334587"
targetClass:
  fullClassName: "org.springframework.boot.logging.logback.LogbackConfigurator"
methods:
- method:
    name: "getContext"
    sourceCodeSignature: "LoggerContext getContext()"
    returnType: "ch.qos.logback.classic.LoggerContext"
    instructionFingerprint: "EC92E50762E84D0CD101AA4B804820BF"
  paths:
  - pathId: "path1"
    testPathName: "getContextTest"
    constructorSignature: "<init>(ch.qos.logback.classic.LoggerContext) : void"
    modelFingerprint: "F4FD9081FABB7D937B59E5F71E860DCB"
    problemWasSolvedByProver: true
    inputParameters: []
    disabled: false
    allValues: []
- method:
    name: "getConfigurationLock"
    sourceCodeSignature: "Object getConfigurationLock()"
    returnType: "java.lang.Object"
    instructionFingerprint: "86889F2A456FCAA31DFDF1BC512D42D8"
  paths:
  - pathId: "path1"
    testPathName: "getConfigurationLockTest"
    constructorSignature: "<init>(ch.qos.logback.classic.LoggerContext) : void"
    modelFingerprint: "51921AE95A8E61FF2E8671E1A5B455B6"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "2D0D439B47DD8F2B14C0E4BB5A3115F8"
      valueUuid: "target"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "697953E5F16830C570FA1959993E7EAF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:context,message:uniqueUuid2):void"
        staticAccess: true
    - type: "FIELD"
      name: "context"
      modelFingerprint: "8B41D3068749BF680930B3E6096593B2"
      valueUuid: "context"
      methodExercised:
        expression: "getConfigurationLock():object"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A5457F8C44AF90FDF3ACB1B2051E1175"
      valueUuid: "object"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackConfigurator"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "ch.qos.logback.classic.LoggerContext"
            uuid: "context"
      valueType: "org.springframework.boot.logging.logback.LogbackConfigurator"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Context must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object"
- method:
    name: "conversionRule"
    sourceCodeSignature: "void conversionRule(String conversionWord, Class<? extends\
      \ Converter> converterClass)"
    returnType: "void"
    parameters:
    - name: "conversionWord"
      type: "java.lang.String"
    - name: "converterClass"
      type: "java.lang.Class"
    instructionFingerprint: "999749604DD0CEB0D4A042920A2AB403"
  paths:
  - pathId: "path1"
    testPathName: "conversionRuleWhenRegistryIsNull"
    constructorSignature: "<init>(ch.qos.logback.classic.LoggerContext) : void"
    modelFingerprint: "23C23861A50B53E6D9B5BCB4F482D2D2"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "2D0D439B47DD8F2B14C0E4BB5A3115F8"
      valueUuid: "target"
    - type: "INPUT"
      name: "conversionWord"
      modelFingerprint: "D27BE3CE09D6EA07E790D1EEC13FCC42"
      valueUuid: "conversionWord"
    - type: "INPUT"
      name: "converterClass"
      modelFingerprint: "3BCFF38761619A0391A3E5BFC5E2C546"
      valueUuid: "converterClass"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "697953E5F16830C570FA1959993E7EAF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:context,message:uniqueUuid3):void"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "8682E8FB14494A41BB7FE0F09FD0404A"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "hasLength(text:conversionWord,message:uniqueUuid4):void2"
        staticAccess: true
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "BC3A86D50B07347740E96CB1FF47380C"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:converterClass,message:uniqueUuid5):void3"
        staticAccess: true
    - type: "FIELD"
      name: "context"
      modelFingerprint: "028E3DA55ABE3C09AC694B4F6EE2E617"
      valueUuid: "context"
      methodExercised:
        expression: "getObject(key:uniqueUuid6):object"
    - type: "FIELD"
      name: "context"
      modelFingerprint: "7AC553A40E22D4604AE7D839540A132B"
      valueUuid: "context"
      methodExercised:
        expression: "putObject(key:uniqueUuid7,value:hashMap):void4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackConfigurator"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "ch.qos.logback.classic.LoggerContext"
            uuid: "context"
      valueType: "org.springframework.boot.logging.logback.LogbackConfigurator"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "conversionWord"
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.core.pattern.Converter"
      valueType: "java.lang.Class"
      genericValueType: "? extends ch.qos.logback.core.pattern.Converter"
      uuid: "converterClass"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Context must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "conversionWord"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Conversion word must not be empty"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "CLASS"
      content: !<regular>
        value: "ch.qos.logback.core.pattern.Converter"
      valueType: "java.lang.Class"
      genericValueType: "? extends ch.qos.logback.core.pattern.Converter"
      uuid: "converterClass"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Converter class must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "NULL"
      valueType: "java.util.Map"
      uuid: "object"
      fixed: true
      explicitCastNeeded: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "PATTERN_RULE_REGISTRY"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "PATTERN_RULE_REGISTRY"
      valueType: "java.lang.String"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashMap"
        parameters: []
        values:
        - sapientType: "PAIR"
          content: !<pair>
            key:
              sapientType: "BASIC"
              content: !<regular>
                value: "A"
              valueType: "java.lang.String"
              uuid: "conversionWord"
            value:
              sapientType: "BASIC"
              content: !<regular>
                value: "ch.qos.logback.core.pattern.Converter"
              valueType: "java.lang.String"
              uuid: "string"
          valueType: "java.util.Map$Entry"
          genericValueType: "java.lang.String,java.lang.String"
          uuid: "uniqueUuid8"
      valueType: "java.util.Map"
      genericValueType: "java.lang.String,java.lang.String"
      uuid: "hashMap"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 62
      expression: "registry == null"
      range: "(62,7)-(62,22)"
      evaluatedAs: true
- method:
    name: "appender"
    sourceCodeSignature: "void appender(String name, Appender<?> appender)"
    returnType: "void"
    parameters:
    - name: "name"
      type: "java.lang.String"
    - name: "appender"
      type: "ch.qos.logback.core.Appender"
    instructionFingerprint: "3A7125A0B6D0E469DA697ED4442846FD"
  paths:
  - pathId: "path1"
    testPathName: "appenderTest"
    constructorSignature: "<init>(ch.qos.logback.classic.LoggerContext) : void"
    modelFingerprint: "E4B142DCB917D1EF4E5B746B44C43A67"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "6DB0A67786110746723159E0F46560DE"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "63F0AEB18588FDD50129913BF544F767"
      valueUuid: "name"
    - type: "INPUT"
      name: "appender"
      modelFingerprint: "7F7BD39193774149900B156EE3F3D9BF"
      valueUuid: "appender"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "CF69BE1A6221D30B756D2C248D59A50C"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:context,message:uniqueUuid9):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "appender"
      modelFingerprint: "FEB0EB2D87B019EE2E2A829143CA56B0"
      valueUuid: "appender"
      methodExercised:
        expression: "setName(arg0:name):void2"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "F246A1A4CCCE0CB9916ED9005A2CCA21"
      methodExercised:
        expression: "start(lifeCycle:appender):void3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackConfigurator"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "ch.qos.logback.classic.LoggerContext"
            uuid: "context"
      valueType: "org.springframework.boot.logging.logback.LogbackConfigurator"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.Appender"
      genericValueType: "?"
      uuid: "appender"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Context must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.Appender"
      genericValueType: "?"
      uuid: "appender"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.Appender"
      genericValueType: "?"
      uuid: "appender"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "logger"
    sourceCodeSignature: "void logger(String name, Level level)"
    returnType: "void"
    parameters:
    - name: "name"
      type: "java.lang.String"
    - name: "level"
      type: "ch.qos.logback.classic.Level"
    instructionFingerprint: "ECCA086393C30B17244E9DF53A6B5657"
  paths:
  - pathId: "path1"
    testPathName: "loggerTest"
    constructorSignature: "<init>(ch.qos.logback.classic.LoggerContext) : void"
    modelFingerprint: "D2AAFC5EFD0F8E14CA464E53E80060F3"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "6DB0A67786110746723159E0F46560DE"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "63F0AEB18588FDD50129913BF544F767"
      valueUuid: "name"
    - type: "INPUT"
      name: "level"
      modelFingerprint: "70B4D14DE5C0F2EA85819F1E66D4B1CA"
      valueUuid: "level"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "CF69BE1A6221D30B756D2C248D59A50C"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:context,message:uniqueUuid10):void"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "1B2E7B65C7EABE4C5A70BBB60C595917"
      methodExercised:
        expression: "logger(name:name,level:level,additive:uniqueUuid11):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackConfigurator"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "ch.qos.logback.classic.LoggerContext"
            uuid: "context"
      valueType: "org.springframework.boot.logging.logback.LogbackConfigurator"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Level"
      uuid: "level"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Context must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Level"
      uuid: "level"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "uniqueUuid11"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "logger"
    sourceCodeSignature: "void logger(String name, Level level, boolean additive)"
    returnType: "void"
    parameters:
    - name: "name"
      type: "java.lang.String"
    - name: "level"
      type: "ch.qos.logback.classic.Level"
    - name: "additive"
      type: "boolean"
    instructionFingerprint: "4CB813E181D55A13E4BEAA965ABEED9B"
  paths:
  - pathId: "path1"
    testPathName: "logger1Test"
    constructorSignature: "<init>(ch.qos.logback.classic.LoggerContext) : void"
    modelFingerprint: "6C8B88FF41176E4A744803D387AE057F"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "6DB0A67786110746723159E0F46560DE"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "63F0AEB18588FDD50129913BF544F767"
      valueUuid: "name"
    - type: "INPUT"
      name: "level"
      modelFingerprint: "70B4D14DE5C0F2EA85819F1E66D4B1CA"
      valueUuid: "level"
    - type: "INPUT"
      name: "additive"
      modelFingerprint: "4A6213288A920E14CDAB937CD5D5C64B"
      valueUuid: "additive"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "CF69BE1A6221D30B756D2C248D59A50C"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:context,message:uniqueUuid12):void"
        staticAccess: true
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "FD1269155B7E939F771E5626AD95E101"
      methodExercised:
        expression: "logger(name:name,level:level,additive:additive,appender:uniqueUuid13):void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackConfigurator"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "ch.qos.logback.classic.LoggerContext"
            uuid: "context"
      valueType: "org.springframework.boot.logging.logback.LogbackConfigurator"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Level"
      uuid: "level"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "additive"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Context must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid12"
      fixed: true
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Level"
      uuid: "level"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "additive"
    - sapientType: "NULL"
      valueType: "ch.qos.logback.core.Appender"
      uuid: "uniqueUuid13"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "logger"
    sourceCodeSignature: "void logger(String name, Level level, boolean additive,\
      \ Appender<ILoggingEvent> appender)"
    returnType: "void"
    parameters:
    - name: "name"
      type: "java.lang.String"
    - name: "level"
      type: "ch.qos.logback.classic.Level"
    - name: "additive"
      type: "boolean"
    - name: "appender"
      type: "ch.qos.logback.core.Appender"
    instructionFingerprint: "7CD0D4DC2EAF1FE8C99B99BCC30544D3"
  paths:
  - pathId: "path1"
    testPathName: "logger2WhenAppenderIsNotNull"
    constructorSignature: "<init>(ch.qos.logback.classic.LoggerContext) : void"
    modelFingerprint: "AC428F4E42F629174F7AA9CA55A66499"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "2D0D439B47DD8F2B14C0E4BB5A3115F8"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "63F0AEB18588FDD50129913BF544F767"
      valueUuid: "name"
    - type: "INPUT"
      name: "level"
      modelFingerprint: "70B4D14DE5C0F2EA85819F1E66D4B1CA"
      valueUuid: "level"
    - type: "INPUT"
      name: "additive"
      modelFingerprint: "4A6213288A920E14CDAB937CD5D5C64B"
      valueUuid: "additive"
    - type: "INPUT"
      name: "appender"
      modelFingerprint: "DD8642B526BBE427E68E40360BD3D14B"
      valueUuid: "appender"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "697953E5F16830C570FA1959993E7EAF"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:context,message:uniqueUuid14):void"
        staticAccess: true
    - type: "FIELD"
      name: "context"
      modelFingerprint: "D289C3A49FBA9BAE4B20C7A010466240"
      valueUuid: "context"
      methodExercised:
        expression: "getLogger(name:name):logger"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "109D0BEE70902077318196DA3504BA65"
      valueUuid: "logger"
      methodExercised:
        expression: "setLevel(newLevel:level):void2"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "D2CE6EC6CA4BE2367A1BC76793D951BF"
      valueUuid: "logger"
      methodExercised:
        expression: "setAdditive(additive:additive):void3"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "7D550E13C9704B4A9EB3CEADAAE68261"
      valueUuid: "logger"
      methodExercised:
        expression: "addAppender(newAppender:appender):void4"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackConfigurator"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "ch.qos.logback.classic.LoggerContext"
            uuid: "context"
      valueType: "org.springframework.boot.logging.logback.LogbackConfigurator"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Level"
      uuid: "level"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "additive"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.Appender"
      genericValueType: "ch.qos.logback.classic.spi.ILoggingEvent"
      uuid: "appender"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Context must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid14"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name1"
      valueType: "java.lang.String"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Level"
      uuid: "level"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "additive"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.Appender"
      genericValueType: "ch.qos.logback.classic.spi.ILoggingEvent"
      uuid: "appender"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 84
      expression: "level != null"
      range: "(84,7)-(84,19)"
      evaluatedAs: true
    - lineNumber: 88
      expression: "appender != null"
      range: "(88,7)-(88,22)"
      evaluatedAs: true
- method:
    name: "root"
    sourceCodeSignature: "void root(Level level, Appender<ILoggingEvent>... appenders)"
    returnType: "void"
    parameters:
    - name: "level"
      type: "ch.qos.logback.classic.Level"
    - name: "appenders"
      type: "ch.qos.logback.core.Appender[]"
    instructionFingerprint: "8D3A249D17AC497E9D9CB589A6F99716"
  paths:
  - pathId: "path1"
    testPathName: "rootWhenAppendersIsNotEmpty"
    constructorSignature: "<init>(ch.qos.logback.classic.LoggerContext) : void"
    modelFingerprint: "0A98B1346F7A24302708A5580BE7FA68"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "3A8AB86E50AF699008823C6E930C52A9"
      valueUuid: "target"
    - type: "INPUT"
      name: "level"
      modelFingerprint: "70B4D14DE5C0F2EA85819F1E66D4B1CA"
      valueUuid: "level"
    - type: "INPUT"
      name: "appenders"
      modelFingerprint: "D6AEE9FEC28F3BB876FFFDC0F9B0B432"
      valueUuid: "appenders"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "AEF7BFE500989553484ADF62A9D1FF98"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:context,message:uniqueUuid1):void"
        staticAccess: true
    - type: "FIELD"
      name: "context"
      modelFingerprint: "7D916755A09D98DC29FAB7520F64D5B0"
      valueUuid: "context"
      methodExercised:
        expression: "getLogger(name:uniqueUuid2):logger"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "109D0BEE70902077318196DA3504BA65"
      valueUuid: "logger"
      methodExercised:
        expression: "setLevel(newLevel:level):void2"
    - type: "LOCAL_VARIABLE"
      name: "logger"
      modelFingerprint: "E910F390702A31F6BE732FE134BABC5D"
      valueUuid: "logger"
      methodExercised:
        expression: "addAppender(newAppender:appender):void3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackConfigurator"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "ch.qos.logback.classic.LoggerContext"
            uuid: "context"
      valueType: "org.springframework.boot.logging.logback.LogbackConfigurator"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Level"
      uuid: "level"
    - sapientType: "ARRAY"
      content: !<array>
        values:
          0:
            sapientType: "MOCK"
            valueType: "ch.qos.logback.core.Appender"
            genericValueType: "ch.qos.logback.classic.spi.ILoggingEvent"
            uuid: "appender"
      valueType: "ch.qos.logback.core.Appender[]"
      genericValueType: "ch.qos.logback.classic.spi.ILoggingEvent"
      uuid: "appenders"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Context must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "BASIC"
      content: !<regular>
        value: "ROOT"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Level"
      uuid: "level"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.Logger"
      uuid: "logger"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.Appender"
      genericValueType: "ch.qos.logback.classic.spi.ILoggingEvent"
      uuid: "appender"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 96
      expression: "level != null"
      range: "(96,7)-(96,19)"
      evaluatedAs: true
    - lineNumber: 99
      expression: "for-each(appenders)"
      range: "(99,43)-(99,51)"
      evaluatedAs: true
- method:
    name: "start"
    sourceCodeSignature: "void start(LifeCycle lifeCycle)"
    returnType: "void"
    parameters:
    - name: "lifeCycle"
      type: "ch.qos.logback.core.spi.LifeCycle"
    instructionFingerprint: "796A8954F062FA5D9EF7814D2C6CAD66"
  paths:
  - pathId: "path1"
    testPathName: "startWhenLifeCycleNotInstanceOfContextAware"
    constructorSignature: "<init>(ch.qos.logback.classic.LoggerContext) : void"
    modelFingerprint: "C679F5FC00F9463DE540C96B225C96C0"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "6DB0A67786110746723159E0F46560DE"
      valueUuid: "target"
    - type: "INPUT"
      name: "lifeCycle"
      modelFingerprint: "4E61019B63D9943B738DCC3B8F0BCECB"
      valueUuid: "lifeCycle"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "CF69BE1A6221D30B756D2C248D59A50C"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:context,message:uniqueUuid17):void"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "lifeCycle"
      modelFingerprint: "565D2523B15E2D594CA5E41683AA9AA0"
      valueUuid: "lifeCycle"
      methodExercised:
        expression: "start():void2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.logging.logback.LogbackConfigurator"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "ch.qos.logback.classic.LoggerContext"
            uuid: "context"
      valueType: "org.springframework.boot.logging.logback.LogbackConfigurator"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.spi.LifeCycle"
      uuid: "lifeCycle"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.classic.LoggerContext"
      uuid: "context"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Context must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid17"
      fixed: true
    - sapientType: "MOCK"
      valueType: "ch.qos.logback.core.spi.LifeCycle"
      uuid: "lifeCycle"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
      fixed: true
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 105
      expression: "lifeCycle instanceof ContextAware contextAware"
      range: "(105,7)-(105,52)"
      evaluatedAs: false
