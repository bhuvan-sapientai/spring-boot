---
modelFingerprint: "3E773F1017714BB19F8E43B132C9F113"
targetClass:
  fullClassName: "org.springframework.boot.context.properties.bind.MapBinder"
methods:
- method:
    name: "isAllowRecursiveBinding"
    sourceCodeSignature: "boolean isAllowRecursiveBinding(ConfigurationPropertySource\
      \ source)"
    returnType: "boolean"
    parameters:
    - name: "source"
      type: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
    instructionFingerprint: "8D020875B2CD7DB9778BCC289DA56F5B"
  paths:
  - pathId: "path1"
    testPathName: "isAllowRecursiveBindingTest"
    constructorSignature: "<init>(org.springframework.boot.context.properties.bind.Binder$Context)\
      \ : void"
    modelFingerprint: "D24A6331985257F9EEE5C22832C18317"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "E31B1EB53FE1D3C3DE0C6B8EEC81F1A9"
      valueUuid: "target"
    - type: "INPUT"
      name: "source"
      modelFingerprint: "AAA5FCC6D93084C5F1B83297096123D8"
      valueUuid: "source"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "8383DF6F1D02800B0E90FD4143032B37"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.MapBinder"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
            uuid: "context"
      valueType: "org.springframework.boot.context.properties.bind.MapBinder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "source"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "bindAggregate"
    sourceCodeSignature: "Object bindAggregate(ConfigurationPropertyName name, Bindable<?>\
      \ target, AggregateElementBinder elementBinder)"
    returnType: "java.lang.Object"
    parameters:
    - name: "name"
      type: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
    - name: "target"
      type: "org.springframework.boot.context.properties.bind.Bindable"
    - name: "elementBinder"
      type: "org.springframework.boot.context.properties.bind.AggregateElementBinder"
    instructionFingerprint: "A4215A190967AF8D89A9C13650C96EA6"
  paths:
  - pathId: "path9"
    testPathName: "bindAggregateWhenSourceContainsDescendantOfNameNotEqualsConfigurationPropertyStatePRESENTAndGetContextGetSourcesIsEmpty"
    constructorSignature: "<init>(org.springframework.boot.context.properties.bind.Binder$Context)\
      \ : void"
    modelFingerprint: "50D8782E58990816D47E391A56919E72"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0F1380176C941009C2697280C92113E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "79AA751E8DEF85DAAC2666FA9A7E6307"
      valueUuid: "name"
    - type: "INPUT"
      name: "target"
      modelFingerprint: "F1407DA2B6198C4F666DAC57AA87F49E"
      valueUuid: "target1"
    - type: "INPUT"
      name: "elementBinder"
      modelFingerprint: "852BCFED0C32B41F1D6923BCEA563E6F"
      valueUuid: "elementBinder"
    - type: "LOCAL_VARIABLE"
      name: "target"
      modelFingerprint: "5C1D2E33D8EE42EE11D3247FB6D5AFFB"
      valueUuid: "target1"
      methodExercised:
        expression: "getValue():value"
    - type: "STATIC"
      name: "CollectionFactory.class"
      modelFingerprint: "1C397B99CFE5CE62C3F4F47C16A42EDC"
      valueUuid: "CollectionFactory.class"
      methodExercised:
        expression: "createMap(mapType:uniqueUuid1,capacity:uniqueUuid2):map"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "target"
      modelFingerprint: "07453C9F98211B2646E38B2378F55190"
      valueUuid: "target1"
      methodExercised:
        expression: "getType():type"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "821D9490B64C7D6DD7554F9B0337233E"
      valueUuid: "type"
      methodExercised:
        expression: "resolve(fallback:uniqueUuid4):class"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "A41CF8DFA919DFC4391F50EE3041A36E"
      valueUuid: "context"
      methodExercised:
        expression: "getSources():iterable"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "A4E459E8937248734A3D8EABBA9AEC00"
      valueUuid: "object"
      methodExercised:
        expression: "containsDescendantOf(name:name):configurationPropertyState"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "63EED06B19E293ED432511913ABA89EC"
      valueUuid: "context"
      methodExercised:
        expression: "getSources():iterable2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "F7E249570F6EE7BE11626F34BF440F7F"
      valueUuid: "map"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isAssignableFrom(java.lang.Class<?>)\
        \ : boolean"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.MapBinder"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
            uuid: "context"
      valueType: "org.springframework.boot.context.properties.bind.MapBinder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      genericValueType: "?"
      uuid: "target1"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.AggregateElementBinder"
      uuid: "elementBinder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      genericValueType: "?"
      uuid: "target1"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "value"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.CollectionFactory"
      uuid: "CollectionFactory.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashMap"
        parameters: []
        values:
        - sapientType: "PAIR"
          content: !<pair>
            key:
              sapientType: "OBJECT"
              content: !<new>
                target: "java.lang.Object"
                parameters: []
              valueType: "java.lang.Object"
              uuid: "mapKey0"
            value:
              sapientType: "OBJECT"
              content: !<new>
                target: "java.lang.Object"
                parameters: []
              valueType: "java.lang.Object"
              uuid: "mapValue0"
          uuid: "uniqueUuid5"
      valueType: "java.util.Map"
      genericValueType: "java.lang.Object,java.lang.Object"
      uuid: "map"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.util.Map"
      valueType: "java.lang.Class"
      genericValueType: "java.util.Map"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      genericValueType: "?"
      uuid: "target1"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "type"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "uniqueUuid4"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
      uuid: "context"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
          uuid: "object"
          collectionUuid: "iterable"
      valueType: "java.lang.Iterable"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "iterable"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "object"
      collectionUuid: "iterable"
    - sapientType: "ENUM"
      content: !<regular>
        value: "ABSENT"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "configurationPropertyState"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
      uuid: "context"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "iterable2"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.HashMap"
        parameters: []
        values:
        - sapientType: "PAIR"
          content: !<pair>
            key:
              sapientType: "OBJECT"
              content: !<new>
                target: "java.lang.Object"
                parameters: []
              valueType: "java.lang.Object"
              uuid: "mapKey0"
            value:
              sapientType: "OBJECT"
              content: !<new>
                target: "java.lang.Object"
                parameters: []
              valueType: "java.lang.Object"
              uuid: "mapValue0"
          uuid: "uniqueUuid5"
      valueType: "java.util.Map"
      genericValueType: "java.lang.Object,java.lang.Object"
      uuid: "map"
    branches:
    - lineNumber: 57
      expression: "target.getValue() != null"
      range: "(57,16)-(57,40)"
      evaluatedAs: true
    - lineNumber: 85
      expression: "Properties.class.isAssignableFrom(type)"
      range: "(85,7)-(85,45)"
      evaluatedAs: true
      internalMethodName: "resolveTarget"
    - lineNumber: 75
      expression: "for-each(getContext().getSources())"
      range: "(75,45)-(75,69)"
      evaluatedAs: true
      internalMethodName: "hasDescendants"
    - lineNumber: 76
      expression: "source.containsDescendantOf(name) == ConfigurationPropertyState.PRESENT"
      range: "(76,8)-(76,78)"
      evaluatedAs: false
      internalMethodName: "hasDescendants"
    - lineNumber: 60
      expression: "for-each(getContext().getSources())"
      range: "(60,45)-(60,69)"
      evaluatedAs: false
    - lineNumber: 71
      expression: "map.isEmpty()"
      range: "(71,10)-(71,22)"
      evaluatedAs: false
  - pathId: "path12"
    testPathName: "bindAggregateWhenNotHasDescendants"
    constructorSignature: "<init>(org.springframework.boot.context.properties.bind.Binder$Context)\
      \ : void"
    modelFingerprint: "5D7388741CA964016CCCC446FCEF3A35"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0F1380176C941009C2697280C92113E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "79AA751E8DEF85DAAC2666FA9A7E6307"
      valueUuid: "name"
    - type: "INPUT"
      name: "target"
      modelFingerprint: "F1407DA2B6198C4F666DAC57AA87F49E"
      valueUuid: "target1"
    - type: "INPUT"
      name: "elementBinder"
      modelFingerprint: "852BCFED0C32B41F1D6923BCEA563E6F"
      valueUuid: "elementBinder"
    - type: "LOCAL_VARIABLE"
      name: "target"
      modelFingerprint: "F47E8DA923D7CC4B632C43231BBA8EAF"
      valueUuid: "target1"
      methodExercised:
        expression: "getValue():value"
    - type: "LOCAL_VARIABLE"
      name: "target"
      modelFingerprint: "07453C9F98211B2646E38B2378F55190"
      valueUuid: "target1"
      methodExercised:
        expression: "getType():type"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "821D9490B64C7D6DD7554F9B0337233E"
      valueUuid: "type"
      methodExercised:
        expression: "resolve(fallback:uniqueUuid6):class"
    - type: "STATIC"
      name: "CollectionFactory.class"
      modelFingerprint: "1008105619C553A1C3902C0188344FB9"
      valueUuid: "CollectionFactory.class"
      methodExercised:
        expression: "createMap(mapType:class,capacity:uniqueUuid7):map"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "target"
      modelFingerprint: "07453C9F98211B2646E38B2378F55190"
      valueUuid: "target1"
      methodExercised:
        expression: "getType():type"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "821D9490B64C7D6DD7554F9B0337233E"
      valueUuid: "type"
      methodExercised:
        expression: "resolve(fallback:uniqueUuid8):class2"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "63EED06B19E293ED432511913ABA89EC"
      valueUuid: "context"
      methodExercised:
        expression: "getSources():iterable"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "A41CF8DFA919DFC4391F50EE3041A36E"
      valueUuid: "context"
      methodExercised:
        expression: "getSources():iterable2"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "091CFE4BE388D2EA9EB569A1AC122247"
      valueUuid: "object"
      methodExercised:
        expression: "getConfigurationProperty(name:name):configurationProperty"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "C125B83C9E93064561361EBD0AF89BE5"
      valueUuid: "context"
      methodExercised:
        expression: "setConfigurationProperty(configurationProperty:configurationProperty):void"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "8F8A2FE8C907FEF3ED304C32EAAAD08F"
      valueUuid: "context"
      methodExercised:
        expression: "getConverter():bindConverter"
    - type: "LOCAL_VARIABLE"
      name: "property"
      modelFingerprint: "18E47D2825E09CEDCD872E509293E354"
      valueUuid: "configurationProperty"
      methodExercised:
        expression: "getValue():value2"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "20C2ECF6ADA526FFB218BD2945C066CA"
      valueUuid: "bindConverter"
      methodExercised:
        expression: "convert(source:value2,target:target1):object3"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "A5457F8C44AF90FDF3ACB1B2051E1175"
      valueUuid: "object3"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isAssignableFrom(java.lang.Class<?>)\
        \ : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.MapBinder"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
            uuid: "context"
      valueType: "org.springframework.boot.context.properties.bind.MapBinder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      genericValueType: "?"
      uuid: "target1"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.AggregateElementBinder"
      uuid: "elementBinder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      genericValueType: "?"
      uuid: "target1"
    - sapientType: "NULL"
      valueType: "java.util.function.Supplier"
      uuid: "value"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      genericValueType: "?"
      uuid: "target1"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "type"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "uniqueUuid6"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.core.CollectionFactory"
      uuid: "CollectionFactory.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.Object,java.lang.Object"
      uuid: "map"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "uniqueUuid7"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      genericValueType: "?"
      uuid: "target1"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "type"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class2"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "uniqueUuid8"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
      uuid: "context"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "iterable"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
      uuid: "context"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
          uuid: "object"
          collectionUuid: "iterable2"
      valueType: "java.lang.Iterable"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "iterable2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "object"
      collectionUuid: "iterable2"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value2"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
      uuid: "context"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value2"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
      uuid: "context"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindConverter"
      uuid: "bindConverter"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.source.ConfigurationProperty"
        parameters:
        - name: "name"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
            uuid: "configurationProperty-name"
        - name: "value"
          value:
            sapientType: "OBJECT"
            content: !<new>
              target: "java.lang.Object"
              parameters: []
            valueType: "java.lang.Object"
            uuid: "value2"
        - name: "origin"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.origin.Origin"
            uuid: "configurationProperty-origin"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "value2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindConverter"
      uuid: "bindConverter"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object3"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "value2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      genericValueType: "?"
      uuid: "target1"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.lang.Object"
        parameters: []
      valueType: "java.lang.Object"
      uuid: "object3"
    branches:
    - lineNumber: 57
      expression: "target.getValue() != null"
      range: "(57,16)-(57,40)"
      evaluatedAs: false
    - lineNumber: 85
      expression: "Properties.class.isAssignableFrom(type)"
      range: "(85,7)-(85,45)"
      evaluatedAs: false
      internalMethodName: "resolveTarget"
    - lineNumber: 75
      expression: "for-each(getContext().getSources())"
      range: "(75,45)-(75,69)"
      evaluatedAs: false
      internalMethodName: "hasDescendants"
    - lineNumber: 60
      expression: "for-each(getContext().getSources())"
      range: "(60,45)-(60,69)"
      evaluatedAs: true
    - lineNumber: 61
      expression: "!ConfigurationPropertyName.EMPTY.equals(name)"
      range: "(61,8)-(61,52)"
      evaluatedAs: true
    - lineNumber: 63
      expression: "property != null"
      range: "(63,9)-(63,24)"
      evaluatedAs: true
    - lineNumber: 63
      expression: "!hasDescendants"
      range: "(63,29)-(63,43)"
      evaluatedAs: true
  - pathId: "path1"
    testPathName: "bindAggregateWhenHasDescendantsAndMapIsEmpty"
    constructorSignature: "<init>(org.springframework.boot.context.properties.bind.Binder$Context)\
      \ : void"
    modelFingerprint: "8CE0FCE8AE85E4FC4994EA79885AE761"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "0F1380176C941009C2697280C92113E2"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "74708EC0FE4A843F6A9E0D8C1442E0B2"
      valueUuid: "name"
    - type: "INPUT"
      name: "target"
      modelFingerprint: "F1407DA2B6198C4F666DAC57AA87F49E"
      valueUuid: "target1"
    - type: "INPUT"
      name: "elementBinder"
      modelFingerprint: "852BCFED0C32B41F1D6923BCEA563E6F"
      valueUuid: "elementBinder"
    - type: "LOCAL_VARIABLE"
      name: "target"
      modelFingerprint: "5C1D2E33D8EE42EE11D3247FB6D5AFFB"
      valueUuid: "target1"
      methodExercised:
        expression: "getValue():value"
    - type: "STATIC"
      name: "CollectionFactory.class"
      modelFingerprint: "6F18545F37C290C9EAE3A165BA3F2C2C"
      valueUuid: "CollectionFactory.class"
      methodExercised:
        expression: "createMap(mapType:uniqueUuid9,capacity:uniqueUuid10):map"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "target"
      modelFingerprint: "07453C9F98211B2646E38B2378F55190"
      valueUuid: "target1"
      methodExercised:
        expression: "getType():type"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "821D9490B64C7D6DD7554F9B0337233E"
      valueUuid: "type"
      methodExercised:
        expression: "resolve(fallback:uniqueUuid11):class"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "A41CF8DFA919DFC4391F50EE3041A36E"
      valueUuid: "context"
      methodExercised:
        expression: "getSources():iterable"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "C99F0840CC2BB42B1D9A347B9CDDC4C3"
      valueUuid: "object"
      methodExercised:
        expression: "containsDescendantOf(name:name):configurationPropertyState"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "A41CF8DFA919DFC4391F50EE3041A36E"
      valueUuid: "context"
      methodExercised:
        expression: "getSources():iterable2"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "77F2F65C396634BDCAACDE7F1C525678"
      valueUuid: "object2"
      methodExercised:
        expression: "getConfigurationProperty(name:name):configurationProperty"
    - type: "LOCAL_VARIABLE"
      name: "name"
      modelFingerprint: "2FDB4DE1C2F7F9802C1D4C93320C8593"
      valueUuid: "name"
      methodExercised:
        expression: "isAncestorOf(null:configurationPropertyName3):boolean6"
    - type: "LOCAL_VARIABLE"
      name: "source"
      modelFingerprint: "14E53788B7538677684FF99614F9F148"
      valueUuid: "object2"
      methodExercised:
        expression: "filter(filter:uniqueUuid12):configurationPropertySource"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B5832848421B6892B8D06BE61ADCD847"
      valueUuid: "object3"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Class.isAssignableFrom(java.lang.Class<?>)\
        \ : boolean"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.MapBinder"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
            uuid: "context"
      valueType: "org.springframework.boot.context.properties.bind.MapBinder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      genericValueType: "?"
      uuid: "target1"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.AggregateElementBinder"
      uuid: "elementBinder"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      genericValueType: "?"
      uuid: "target1"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "value"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.CollectionFactory"
      uuid: "CollectionFactory.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.Object,java.lang.Object"
      uuid: "map"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.util.Map"
      valueType: "java.lang.Class"
      genericValueType: "java.util.Map"
      uuid: "uniqueUuid9"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "uniqueUuid10"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      genericValueType: "?"
      uuid: "target1"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "type"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "java.lang.Object"
      uuid: "uniqueUuid11"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
      uuid: "context"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
          uuid: "object"
          collectionUuid: "iterable"
      valueType: "java.lang.Iterable"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "iterable"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "object"
      collectionUuid: "iterable"
    - sapientType: "ENUM"
      content: !<regular>
        value: "PRESENT"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyState"
      uuid: "configurationPropertyState"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
      uuid: "context"
    - sapientType: "COLLECTION"
      content: !<collection>
        collectionClass: "java.util.ArrayList"
        parameters: []
        values:
        - sapientType: "MOCK"
          valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
          uuid: "object2"
          collectionUuid: "iterable2"
      valueType: "java.lang.Iterable"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "iterable2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "object2"
      collectionUuid: "iterable2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationProperty"
      uuid: "configurationProperty"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean6"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "configurationPropertyName3"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "object2"
      collectionUuid: "iterable2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertySource"
      uuid: "configurationPropertySource"
    - sapientType: "ANY"
      valueType: "java.util.function.Predicate"
      genericValueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "uniqueUuid12"
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object3"
      fixed: true
    branches:
    - lineNumber: 57
      expression: "target.getValue() != null"
      range: "(57,16)-(57,40)"
      evaluatedAs: true
    - lineNumber: 85
      expression: "Properties.class.isAssignableFrom(type)"
      range: "(85,7)-(85,45)"
      evaluatedAs: true
      internalMethodName: "resolveTarget"
    - lineNumber: 75
      expression: "for-each(getContext().getSources())"
      range: "(75,45)-(75,69)"
      evaluatedAs: true
      internalMethodName: "hasDescendants"
    - lineNumber: 76
      expression: "source.containsDescendantOf(name) == ConfigurationPropertyState.PRESENT"
      range: "(76,8)-(76,78)"
      evaluatedAs: true
      internalMethodName: "hasDescendants"
    - lineNumber: 60
      expression: "for-each(getContext().getSources())"
      range: "(60,45)-(60,69)"
      evaluatedAs: true
    - lineNumber: 61
      expression: "!ConfigurationPropertyName.EMPTY.equals(name)"
      range: "(61,8)-(61,52)"
      evaluatedAs: true
    - lineNumber: 63
      expression: "property != null"
      range: "(63,9)-(63,24)"
      evaluatedAs: true
    - lineNumber: 63
      expression: "!hasDescendants"
      range: "(63,29)-(63,43)"
      evaluatedAs: false
    - lineNumber: 71
      expression: "map.isEmpty()"
      range: "(71,10)-(71,22)"
      evaluatedAs: true
- method:
    name: "merge"
    sourceCodeSignature: "Map<Object, Object> merge(Supplier<Map<Object, Object>>\
      \ existing, Map<Object, Object> additional)"
    returnType: "java.util.Map"
    genericReturnType: "java.lang.Object,java.lang.Object"
    parameters:
    - name: "existing"
      type: "java.util.function.Supplier"
    - name: "additional"
      type: "java.util.Map"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.UnsupportedOperationException"
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    - idExternalInstruction: 0
      id: 3
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "D0B44F87D29F858C05B3B57BD584DE47"
  paths:
  - pathId: "path1"
    testPathName: "merge1WhenExistingMapIsNull"
    constructorSignature: "<init>(org.springframework.boot.context.properties.bind.Binder$Context)\
      \ : void"
    modelFingerprint: "B46F6BB102DE1FE3BCD367BCECFE0D38"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "E31B1EB53FE1D3C3DE0C6B8EEC81F1A9"
      valueUuid: "target"
    - type: "INPUT"
      name: "existing"
      modelFingerprint: "A4B20F89E1AB74427D8DB7D33DCC37A0"
      valueUuid: "existing"
    - type: "INPUT"
      name: "additional"
      modelFingerprint: "2B3972B70E0A19B5F490766B0C89F9E5"
      valueUuid: "additional"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "958B323A6AAFF1EDA144BABB2E9C7504"
      valueUuid: "additional"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.function.Supplier.get() : java.lang.Object"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.MapBinder"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
            uuid: "context"
      valueType: "org.springframework.boot.context.properties.bind.MapBinder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "existing"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.Object,java.lang.Object"
      uuid: "additional"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.Object,java.lang.Object"
      uuid: "additional"
    branches:
    - lineNumber: 94
      expression: "existingMap == null"
      range: "(94,7)-(94,25)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "merge1WhenExistingMapIsNotNull"
    constructorSignature: "<init>(org.springframework.boot.context.properties.bind.Binder$Context)\
      \ : void"
    modelFingerprint: "05C6F06BF1A0667F13E1DC017BD764BF"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "E31B1EB53FE1D3C3DE0C6B8EEC81F1A9"
      valueUuid: "target"
    - type: "INPUT"
      name: "existing"
      modelFingerprint: "A4B20F89E1AB74427D8DB7D33DCC37A0"
      valueUuid: "existing"
    - type: "INPUT"
      name: "additional"
      modelFingerprint: "B6D3914E88A8EA2FE85E1C4137213467"
      valueUuid: "additional"
    - type: "STATIC"
      name: "CollectionFactory.class"
      modelFingerprint: "DCB13C3D5F39563C1117D05F63459D4D"
      valueUuid: "CollectionFactory.class"
      methodExercised:
        expression: "createMap(mapType:class,capacity:int1):map"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "1BD5CC05D3B6310A1C8065B9359A6196"
      valueUuid: "map"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.function.Supplier.get() : java.lang.Object"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.MapBinder"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
            uuid: "context"
      valueType: "org.springframework.boot.context.properties.bind.MapBinder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "existing"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.Object,java.lang.Object"
      uuid: "additional"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.CollectionFactory"
      uuid: "CollectionFactory.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.Object,java.lang.Object"
      uuid: "map"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.util.HashMap"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
      collectionUuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
      collectionUuid: "object"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.Object,java.lang.Object"
      uuid: "map"
    branches:
    - lineNumber: 94
      expression: "existingMap == null"
      range: "(94,7)-(94,25)"
      evaluatedAs: false
  - pathId: "path3"
    testPathName: "merge1WhenCaughtUnsupportedOperationException"
    constructorSignature: "<init>(org.springframework.boot.context.properties.bind.Binder$Context)\
      \ : void"
    modelFingerprint: "7EDE7EB5BB792DE7AB1CFA708A8FAB18"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "E31B1EB53FE1D3C3DE0C6B8EEC81F1A9"
      valueUuid: "target"
    - type: "INPUT"
      name: "existing"
      modelFingerprint: "A4B20F89E1AB74427D8DB7D33DCC37A0"
      valueUuid: "existing"
    - type: "INPUT"
      name: "additional"
      modelFingerprint: "B6D3914E88A8EA2FE85E1C4137213467"
      valueUuid: "additional"
    - type: "STATIC"
      name: "CollectionFactory.class"
      modelFingerprint: "DCB13C3D5F39563C1117D05F63459D4D"
      valueUuid: "CollectionFactory.class"
      methodExercised:
        expression: "createMap(mapType:class,capacity:int1):map"
        staticAccess: true
    - type: "STATIC"
      name: "CollectionFactory.class"
      modelFingerprint: "DCB13C3D5F39563C1117D05F63459D4D"
      valueUuid: "CollectionFactory.class"
      methodExercised:
        expression: "createMap(mapType:class2,capacity:int2):map2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "1BD5CC05D3B6310A1C8065B9359A6196"
      valueUuid: "map2"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.function.Supplier.get() : java.lang.Object"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.MapBinder"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
            uuid: "context"
      valueType: "org.springframework.boot.context.properties.bind.MapBinder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "existing"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.Object,java.lang.Object"
      uuid: "additional"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.CollectionFactory"
      uuid: "CollectionFactory.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.Object,java.lang.Object"
      uuid: "map"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.util.HashMap"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
      collectionUuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
      collectionUuid: "object"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.CollectionFactory"
      uuid: "CollectionFactory.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.Object,java.lang.Object"
      uuid: "map2"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.util.HashMap"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class2"
      collectionUuid: "additional"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
      collectionUuid: "object"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.Object,java.lang.Object"
      uuid: "map2"
    branches:
    - lineNumber: 94
      expression: "existingMap == null"
      range: "(94,7)-(94,25)"
      evaluatedAs: false
    - lineNumber: 101
      expression: "catch-exception (UnsupportedOperationException)"
      range: "(101,3)-(101,41)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.UnsupportedOperationException"
  - pathId: "path5"
    testPathName: "merge1WhenCaughtException"
    constructorSignature: "<init>(org.springframework.boot.context.properties.bind.Binder$Context)\
      \ : void"
    modelFingerprint: "8518DE62F2DB908F013AB0A7523A0B82"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "E31B1EB53FE1D3C3DE0C6B8EEC81F1A9"
      valueUuid: "target"
    - type: "INPUT"
      name: "existing"
      modelFingerprint: "A4B20F89E1AB74427D8DB7D33DCC37A0"
      valueUuid: "existing"
    - type: "INPUT"
      name: "additional"
      modelFingerprint: "B6D3914E88A8EA2FE85E1C4137213467"
      valueUuid: "additional"
    - type: "STATIC"
      name: "CollectionFactory.class"
      modelFingerprint: "DCB13C3D5F39563C1117D05F63459D4D"
      valueUuid: "CollectionFactory.class"
      methodExercised:
        expression: "createMap(mapType:class,capacity:int1):map"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "1BD5CC05D3B6310A1C8065B9359A6196"
      valueUuid: "map2"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.function.Supplier.get() : java.lang.Object"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.MapBinder"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
            uuid: "context"
      valueType: "org.springframework.boot.context.properties.bind.MapBinder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "existing"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.Object,java.lang.Object"
      uuid: "additional"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.CollectionFactory"
      uuid: "CollectionFactory.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.Object,java.lang.Object"
      uuid: "map"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.util.HashMap"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
      collectionUuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
      collectionUuid: "object"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.Object,java.lang.Object"
      uuid: "map2"
    branches:
    - lineNumber: 94
      expression: "existingMap == null"
      range: "(94,7)-(94,25)"
      evaluatedAs: false
    - lineNumber: 121
      expression: "catch-exception (Exception)"
      range: "(121,3)-(121,21)"
      evaluatedAs: true
      internalMethodName: "copyIfPossible"
    catchBlockExercised:
      idExternalInstruction: 24
      id: 3
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path4"
    testPathName: "merge1WhenCaughtExceptionAndExistingMapIsNull"
    constructorSignature: "<init>(org.springframework.boot.context.properties.bind.Binder$Context)\
      \ : void"
    modelFingerprint: "4318ACC9929594A41482B4671EC27474"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "E31B1EB53FE1D3C3DE0C6B8EEC81F1A9"
      valueUuid: "target"
    - type: "INPUT"
      name: "existing"
      modelFingerprint: "A4B20F89E1AB74427D8DB7D33DCC37A0"
      valueUuid: "existing"
    - type: "INPUT"
      name: "additional"
      modelFingerprint: "2B3972B70E0A19B5F490766B0C89F9E5"
      valueUuid: "additional"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "958B323A6AAFF1EDA144BABB2E9C7504"
      valueUuid: "additional"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.function.Supplier.get() : java.lang.Object"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.MapBinder"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
            uuid: "context"
      valueType: "org.springframework.boot.context.properties.bind.MapBinder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "existing"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.Object,java.lang.Object"
      uuid: "additional"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Map"
      genericValueType: "java.lang.Object,java.lang.Object"
      uuid: "additional"
    branches:
    - lineNumber: 112
      expression: "catch-exception (Exception)"
      range: "(112,3)-(112,21)"
      evaluatedAs: true
      internalMethodName: "getExistingIfPossible"
    - lineNumber: 94
      expression: "existingMap == null"
      range: "(94,7)-(94,25)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 4
      id: 2
      catchExceptions:
      - "java.lang.Exception"
