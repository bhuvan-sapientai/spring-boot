---
modelFingerprint: "3F532D519BB0885AA3526C670F8B125B"
targetClass:
  fullClassName: "org.springframework.boot.context.properties.bind.DefaultBindConstructorProvider"
methods:
- method:
    name: "getBindConstructor"
    sourceCodeSignature: "Constructor<?> getBindConstructor(Bindable<?> bindable,\
      \ boolean isNestedConstructorBinding)"
    returnType: "java.lang.reflect.Constructor"
    genericReturnType: "?"
    parameters:
    - name: "bindable"
      type: "org.springframework.boot.context.properties.bind.Bindable"
    - name: "isNestedConstructorBinding"
      type: "boolean"
    instructionFingerprint: "8CD3FFAC0C29C456B277FEC20E75D6C6"
  paths:
  - pathId: "path1"
    testPathName: "getBindConstructorWhenBindableGetValueGetIsNotNull"
    constructorSignature: "<init>() : void"
    modelFingerprint: "785B673923F08E3BF5BCCD9745C761AB"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "bindable"
      modelFingerprint: "7B9F1B557E0E6F162C4B6CF70E7E1531"
      valueUuid: "bindable"
    - type: "INPUT"
      name: "isNestedConstructorBinding"
      modelFingerprint: "8467DE5E8039FA42E1DA413BC6D3DD25"
      valueUuid: "isNestedConstructorBinding"
    - type: "LOCAL_VARIABLE"
      name: "bindable"
      modelFingerprint: "07453C9F98211B2646E38B2378F55190"
      valueUuid: "bindable"
      methodExercised:
        expression: "getType():type"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "839245556C80DD2528C73D5D2B32BC65"
      valueUuid: "type"
      methodExercised:
        expression: "resolve():class"
    - type: "STATIC"
      name: "DefaultBindConstructorProvider.Constructors.class"
      modelFingerprint: "D7EACCBD73E18AECAA080E57E3E30D9E"
      valueUuid: "DefaultBindConstructorProvider.Constructors.class"
      methodExercised:
        expression: "getConstructors(type:class,isNestedConstructorBinding:isNestedConstructorBinding):defaultBindConstructorProvider.Constructors"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "constructors"
      modelFingerprint: "2670596F0C3CDA65F49646DEE32C63EB"
      valueUuid: "defaultBindConstructorProvider.Constructors"
      methodExercised:
        expression: "getBind():constructor"
    - type: "LOCAL_VARIABLE"
      name: "constructors"
      modelFingerprint: "EBD075A80DED3D2438B1A9F210728ABB"
      valueUuid: "defaultBindConstructorProvider.Constructors"
      methodExercised:
        expression: "isDeducedBindConstructor():boolean1"
    - type: "LOCAL_VARIABLE"
      name: "constructors"
      modelFingerprint: "2EA20CF63A0C2FDA7344A040F23ACC18"
      valueUuid: "defaultBindConstructorProvider.Constructors"
      methodExercised:
        expression: "isImmutableType():boolean2"
    - type: "LOCAL_VARIABLE"
      name: "bindable"
      modelFingerprint: "5C1D2E33D8EE42EE11D3247FB6D5AFFB"
      valueUuid: "bindable"
      methodExercised:
        expression: "getValue():value"
    - type: "LOCAL_VARIABLE"
      name: "bindable"
      modelFingerprint: "5C1D2E33D8EE42EE11D3247FB6D5AFFB"
      valueUuid: "bindable"
      methodExercised:
        expression: "getValue():value"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "01B4C33D652C8D3756F98FF22B20F5A6"
      valueUuid: "constructor2"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.function.Supplier.get() : java.lang.Object"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.DefaultBindConstructorProvider"
        parameters: []
      valueType: "org.springframework.boot.context.properties.bind.DefaultBindConstructorProvider"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      genericValueType: "?"
      uuid: "bindable"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "isNestedConstructorBinding"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      genericValueType: "?"
      uuid: "bindable"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "type"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.DefaultBindConstructorProvider$Constructors"
      uuid: "DefaultBindConstructorProvider.Constructors.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.DefaultBindConstructorProvider$Constructors"
      uuid: "defaultBindConstructorProvider.Constructors"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "isNestedConstructorBinding"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.DefaultBindConstructorProvider$Constructors"
      uuid: "defaultBindConstructorProvider.Constructors"
    - sapientType: "MOCK"
      valueType: "java.lang.reflect.Constructor"
      uuid: "constructor"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.DefaultBindConstructorProvider$Constructors"
      uuid: "defaultBindConstructorProvider.Constructors"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.DefaultBindConstructorProvider$Constructors"
      uuid: "defaultBindConstructorProvider.Constructors"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      genericValueType: "?"
      uuid: "bindable"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "value"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      genericValueType: "?"
      uuid: "bindable"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "value"
    - sapientType: "NULL"
      valueType: "java.lang.reflect.Constructor"
      genericValueType: "?"
      uuid: "constructor2"
      fixed: true
    branches:
    - lineNumber: 44
      expression: "constructors.getBind() != null"
      range: "(44,7)-(44,36)"
      evaluatedAs: true
    - lineNumber: 44
      expression: "constructors.isDeducedBindConstructor()"
      range: "(44,41)-(44,79)"
      evaluatedAs: true
    - lineNumber: 45
      expression: "!constructors.isImmutableType()"
      range: "(45,8)-(45,38)"
      evaluatedAs: true
    - lineNumber: 46
      expression: "bindable.getValue() != null"
      range: "(46,8)-(46,34)"
      evaluatedAs: true
    - lineNumber: 46
      expression: "bindable.getValue().get() != null"
      range: "(46,39)-(46,71)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "getBindConstructorWhenBindableGetValueGetIsNull"
    constructorSignature: "<init>() : void"
    modelFingerprint: "5D386719F5769ED42824662A8FB40EB0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "bindable"
      modelFingerprint: "7B9F1B557E0E6F162C4B6CF70E7E1531"
      valueUuid: "bindable"
    - type: "INPUT"
      name: "isNestedConstructorBinding"
      modelFingerprint: "8467DE5E8039FA42E1DA413BC6D3DD25"
      valueUuid: "isNestedConstructorBinding"
    - type: "LOCAL_VARIABLE"
      name: "bindable"
      modelFingerprint: "07453C9F98211B2646E38B2378F55190"
      valueUuid: "bindable"
      methodExercised:
        expression: "getType():type"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "839245556C80DD2528C73D5D2B32BC65"
      valueUuid: "type"
      methodExercised:
        expression: "resolve():class"
    - type: "STATIC"
      name: "DefaultBindConstructorProvider.Constructors.class"
      modelFingerprint: "D7EACCBD73E18AECAA080E57E3E30D9E"
      valueUuid: "DefaultBindConstructorProvider.Constructors.class"
      methodExercised:
        expression: "getConstructors(type:class,isNestedConstructorBinding:isNestedConstructorBinding):defaultBindConstructorProvider.Constructors"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "constructors"
      modelFingerprint: "2670596F0C3CDA65F49646DEE32C63EB"
      valueUuid: "defaultBindConstructorProvider.Constructors"
      methodExercised:
        expression: "getBind():constructor"
    - type: "LOCAL_VARIABLE"
      name: "constructors"
      modelFingerprint: "EBD075A80DED3D2438B1A9F210728ABB"
      valueUuid: "defaultBindConstructorProvider.Constructors"
      methodExercised:
        expression: "isDeducedBindConstructor():boolean1"
    - type: "LOCAL_VARIABLE"
      name: "constructors"
      modelFingerprint: "2EA20CF63A0C2FDA7344A040F23ACC18"
      valueUuid: "defaultBindConstructorProvider.Constructors"
      methodExercised:
        expression: "isImmutableType():boolean2"
    - type: "LOCAL_VARIABLE"
      name: "bindable"
      modelFingerprint: "5C1D2E33D8EE42EE11D3247FB6D5AFFB"
      valueUuid: "bindable"
      methodExercised:
        expression: "getValue():value"
    - type: "LOCAL_VARIABLE"
      name: "bindable"
      modelFingerprint: "5C1D2E33D8EE42EE11D3247FB6D5AFFB"
      valueUuid: "bindable"
      methodExercised:
        expression: "getValue():value"
    - type: "LOCAL_VARIABLE"
      name: "constructors"
      modelFingerprint: "2670596F0C3CDA65F49646DEE32C63EB"
      valueUuid: "defaultBindConstructorProvider.Constructors"
      methodExercised:
        expression: "getBind():constructor2"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0EB8BF56BE9E22237D9A1928CEEDFDFE"
      valueUuid: "constructor2"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.function.Supplier.get() : java.lang.Object"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.DefaultBindConstructorProvider"
        parameters: []
      valueType: "org.springframework.boot.context.properties.bind.DefaultBindConstructorProvider"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      genericValueType: "?"
      uuid: "bindable"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "isNestedConstructorBinding"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      genericValueType: "?"
      uuid: "bindable"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "type"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.DefaultBindConstructorProvider$Constructors"
      uuid: "DefaultBindConstructorProvider.Constructors.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.DefaultBindConstructorProvider$Constructors"
      uuid: "defaultBindConstructorProvider.Constructors"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "isNestedConstructorBinding"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.DefaultBindConstructorProvider$Constructors"
      uuid: "defaultBindConstructorProvider.Constructors"
    - sapientType: "MOCK"
      valueType: "java.lang.reflect.Constructor"
      uuid: "constructor"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.DefaultBindConstructorProvider$Constructors"
      uuid: "defaultBindConstructorProvider.Constructors"
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.DefaultBindConstructorProvider$Constructors"
      uuid: "defaultBindConstructorProvider.Constructors"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean2"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      genericValueType: "?"
      uuid: "bindable"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "value"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      genericValueType: "?"
      uuid: "bindable"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "value"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.DefaultBindConstructorProvider$Constructors"
      uuid: "defaultBindConstructorProvider.Constructors"
    - sapientType: "MOCK"
      valueType: "java.lang.reflect.Constructor"
      uuid: "constructor2"
    - sapientType: "MOCK"
      valueType: "java.lang.reflect.Constructor"
      uuid: "constructor2"
    branches:
    - lineNumber: 44
      expression: "constructors.getBind() != null"
      range: "(44,7)-(44,36)"
      evaluatedAs: true
    - lineNumber: 44
      expression: "constructors.isDeducedBindConstructor()"
      range: "(44,41)-(44,79)"
      evaluatedAs: true
    - lineNumber: 45
      expression: "!constructors.isImmutableType()"
      range: "(45,8)-(45,38)"
      evaluatedAs: true
    - lineNumber: 46
      expression: "bindable.getValue() != null"
      range: "(46,8)-(46,34)"
      evaluatedAs: true
    - lineNumber: 46
      expression: "bindable.getValue().get() != null"
      range: "(46,39)-(46,71)"
      evaluatedAs: false
- method:
    name: "getBindConstructor"
    sourceCodeSignature: "Constructor<?> getBindConstructor(Class<?> type, boolean\
      \ isNestedConstructorBinding)"
    returnType: "java.lang.reflect.Constructor"
    genericReturnType: "?"
    parameters:
    - name: "type"
      type: "java.lang.Class"
    - name: "isNestedConstructorBinding"
      type: "boolean"
    instructionFingerprint: "2D37D8FC81D85757B9D35627CB3ABECF"
  paths:
  - pathId: "path1"
    testPathName: "getBindConstructor1Test"
    constructorSignature: "<init>() : void"
    modelFingerprint: "A13EE1D4BFC61D890A2C2233481D2B84"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "4DB0F57EEFC6BBF1691C61D6F11B96D4"
      valueUuid: "target"
    - type: "INPUT"
      name: "type"
      modelFingerprint: "917962E93E24910C2D3103EEFA23FB8C"
      valueUuid: "type"
    - type: "INPUT"
      name: "isNestedConstructorBinding"
      modelFingerprint: "8467DE5E8039FA42E1DA413BC6D3DD25"
      valueUuid: "isNestedConstructorBinding"
    - type: "STATIC"
      name: "DefaultBindConstructorProvider.Constructors.class"
      modelFingerprint: "802685BC6F83D608A773D3C783021B56"
      valueUuid: "DefaultBindConstructorProvider.Constructors.class"
      methodExercised:
        expression: "getConstructors(type:type,isNestedConstructorBinding:isNestedConstructorBinding):defaultBindConstructorProvider.Constructors"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "constructors"
      modelFingerprint: "2670596F0C3CDA65F49646DEE32C63EB"
      valueUuid: "defaultBindConstructorProvider.Constructors"
      methodExercised:
        expression: "getBind():constructor"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "0EB8BF56BE9E22237D9A1928CEEDFDFE"
      valueUuid: "constructor"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.DefaultBindConstructorProvider"
        parameters: []
      valueType: "org.springframework.boot.context.properties.bind.DefaultBindConstructorProvider"
      uuid: "target"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "type"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "isNestedConstructorBinding"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.DefaultBindConstructorProvider$Constructors"
      uuid: "DefaultBindConstructorProvider.Constructors.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.DefaultBindConstructorProvider$Constructors"
      uuid: "defaultBindConstructorProvider.Constructors"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.lang.Object"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "type"
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "isNestedConstructorBinding"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.DefaultBindConstructorProvider$Constructors"
      uuid: "defaultBindConstructorProvider.Constructors"
    - sapientType: "MOCK"
      valueType: "java.lang.reflect.Constructor"
      uuid: "constructor"
    - sapientType: "MOCK"
      valueType: "java.lang.reflect.Constructor"
      uuid: "constructor"
