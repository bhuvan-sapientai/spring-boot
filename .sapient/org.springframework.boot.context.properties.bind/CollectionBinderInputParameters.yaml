---
modelFingerprint: "D54891498C26902289A630477EB2BBF2"
targetClass:
  fullClassName: "org.springframework.boot.context.properties.bind.CollectionBinder"
methods:
- method:
    name: "bindAggregate"
    sourceCodeSignature: "Object bindAggregate(ConfigurationPropertyName name, Bindable<?>\
      \ target, AggregateElementBinder elementBinder)"
    returnType: "java.lang.Object"
    parameters:
    - name: "name"
      type: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
    - name: "target"
      type: "org.springframework.boot.context.properties.bind.Bindable"
    - name: "elementBinder"
      type: "org.springframework.boot.context.properties.bind.AggregateElementBinder"
    instructionFingerprint: "89872B9D9DA910A463257F896F0F4091"
  paths:
  - pathId: "path1"
    testPathName: "bindAggregateWhenResultWasSupplied"
    constructorSignature: "<init>(org.springframework.boot.context.properties.bind.Binder$Context)\
      \ : void"
    modelFingerprint: "D914C6A8ED48AD78BA32FCDF6D0CA806"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "E31B1EB53FE1D3C3DE0C6B8EEC81F1A9"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "79AA751E8DEF85DAAC2666FA9A7E6307"
      valueUuid: "name"
    - type: "INPUT"
      name: "target"
      modelFingerprint: "BF25F014EB73A7427A883BFEC99E9E57"
      valueUuid: "target1"
    - type: "INPUT"
      name: "elementBinder"
      modelFingerprint: "852BCFED0C32B41F1D6923BCEA563E6F"
      valueUuid: "elementBinder"
    - type: "LOCAL_VARIABLE"
      name: "target"
      modelFingerprint: "B55A83216BD2168FBBACFEEC8E87C743"
      valueUuid: "target1"
      methodExercised:
        expression: "getType():type"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "D3664A404AC645003A96920B8DDE4755"
      valueUuid: "type"
      methodExercised:
        expression: "asCollection():resolvableType2"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "CFD2218113067C03FACF368AA2585591"
      valueUuid: "resolvableType2"
      methodExercised:
        expression: "getGenerics():generics"
    - type: "STATIC"
      name: "ResolvableType.class"
      modelFingerprint: "4A65F7E4964C8C941F01B1A60B495166"
      valueUuid: "ResolvableType.class"
      methodExercised:
        expression: "forClassWithGenerics(clazz:uniqueUuid1,generics:generics):resolvableType3"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "target"
      modelFingerprint: "B55A83216BD2168FBBACFEEC8E87C743"
      valueUuid: "target1"
      methodExercised:
        expression: "getType():type"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "E9078617A2FA219BEC8EB8662AA46146"
      valueUuid: "type"
      methodExercised:
        expression: "asCollection():resolvableType5"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "6333C6063AE43CE4CE93351E2A28ABFC"
      valueUuid: "resolvableType5"
      methodExercised:
        expression: "getGeneric(indexes:intArray):resolvableType6"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "54236A2CD4787714FA6122C4036C8821"
      methodExercised:
        expression: "bindIndexed(name:name,target:target1,elementBinder:elementBinder,aggregateType:resolvableType3,elementType:resolvableType6,result:indexedElementsBinder.IndexedCollectionSupplier):void"
    - type: "LOCAL_VARIABLE"
      name: "result"
      modelFingerprint: "7F94746236E5AA87C182706714DFE80C"
      valueUuid: "indexedElementsBinder.IndexedCollectionSupplier"
      methodExercised:
        expression: "wasSupplied():boolean1"
    - type: "LOCAL_VARIABLE"
      name: "result"
      modelFingerprint: "CD2B8AA9A105B97CA67B6E17D474B2C6"
      valueUuid: "indexedElementsBinder.IndexedCollectionSupplier"
      methodExercised:
        expression: "get():object"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "5F9338C1973C4BB1EE74900EEE4C8D3A"
      valueUuid: "object"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "if (result.wasSupplied()) {"
      lineNumber: 49
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: result - Method: wasSupplied"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.CollectionBinder"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
            uuid: "context"
      valueType: "org.springframework.boot.context.properties.bind.CollectionBinder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "of"
        methodParameters:
        - name: "type"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.ResolvableType"
            uuid: "type"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "target1"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.AggregateElementBinder"
      uuid: "elementBinder"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "of"
        methodParameters:
        - name: "type"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.ResolvableType"
            uuid: "type"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "target1"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "type"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.ResolvableType"
        method: "forClassWithGenerics"
        methodParameters:
        - name: "clazz"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            uuid: "resolvableType2-clazz"
        - name: "generics"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.core.ResolvableType[]"
            uuid: "generics"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType2"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.ResolvableType"
        method: "forClassWithGenerics"
        methodParameters:
        - name: "clazz"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            uuid: "resolvableType2-clazz"
        - name: "generics"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.core.ResolvableType[]"
            uuid: "generics"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType2"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.core.ResolvableType[]"
      uuid: "generics"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "ResolvableType.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType3"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.util.List"
      valueType: "java.lang.Class"
      genericValueType: "java.util.List"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.core.ResolvableType[]"
      uuid: "generics"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "of"
        methodParameters:
        - name: "type"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.ResolvableType"
            uuid: "type"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "target1"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType5"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType5"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType6"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "int[]"
      uuid: "intArray"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "of"
        methodParameters:
        - name: "type"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.ResolvableType"
            uuid: "type"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "target1"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.AggregateElementBinder"
      uuid: "elementBinder"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType3"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType6"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.IndexedElementsBinder$IndexedCollectionSupplier"
        parameters:
        - name: "supplier"
          value:
            sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
            valueType: "java.util.function.Supplier"
            genericValueType: "java.util.Collection<java.lang.Object>"
            uuid: "uniqueUuid4"
      valueType: "org.springframework.boot.context.properties.bind.IndexedElementsBinder$IndexedCollectionSupplier"
      uuid: "indexedElementsBinder.IndexedCollectionSupplier"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.IndexedElementsBinder$IndexedCollectionSupplier"
        parameters:
        - name: "supplier"
          value:
            sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
            valueType: "java.util.function.Supplier"
            genericValueType: "java.util.Collection<java.lang.Object>"
            uuid: "uniqueUuid4"
      valueType: "org.springframework.boot.context.properties.bind.IndexedElementsBinder$IndexedCollectionSupplier"
      uuid: "indexedElementsBinder.IndexedCollectionSupplier"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: true
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.IndexedElementsBinder$IndexedCollectionSupplier"
        parameters:
        - name: "supplier"
          value:
            sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
            valueType: "java.util.function.Supplier"
            genericValueType: "java.util.Collection<java.lang.Object>"
            uuid: "uniqueUuid4"
      valueType: "org.springframework.boot.context.properties.bind.IndexedElementsBinder$IndexedCollectionSupplier"
      uuid: "indexedElementsBinder.IndexedCollectionSupplier"
      fixed: true
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.Object"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.context.properties.bind.IndexedElementsBinder$IndexedCollectionSupplier"
            parameters:
            - name: "supplier"
              value:
                sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
                valueType: "java.util.function.Supplier"
                genericValueType: "java.util.Collection<java.lang.Object>"
          valueType: "org.springframework.boot.context.properties.bind.IndexedElementsBinder$IndexedCollectionSupplier"
          uuid: "indexedElementsBinder.IndexedCollectionSupplier"
          fixed: true
        methodParameters: []
        methodName: "get"
      valueType: "java.lang.Object"
      uuid: "object"
    - sapientType: "OBJECT"
      content: !<method_return_from_value>
        target: "java.lang.Object"
        localVariableValue:
          sapientType: "OBJECT"
          content: !<new>
            target: "org.springframework.boot.context.properties.bind.IndexedElementsBinder$IndexedCollectionSupplier"
            parameters:
            - name: "supplier"
              value:
                sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
                valueType: "java.util.function.Supplier"
                genericValueType: "java.util.Collection<java.lang.Object>"
          valueType: "org.springframework.boot.context.properties.bind.IndexedElementsBinder$IndexedCollectionSupplier"
          uuid: "indexedElementsBinder.IndexedCollectionSupplier"
          fixed: true
        methodParameters: []
        methodName: "get"
      valueType: "java.lang.Object"
      uuid: "object"
    branches:
    - lineNumber: 49
      expression: "result.wasSupplied()"
      range: "(49,7)-(49,26)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "bindAggregateWhenResultNotWasSupplied"
    constructorSignature: "<init>(org.springframework.boot.context.properties.bind.Binder$Context)\
      \ : void"
    modelFingerprint: "0B2E9A187358172418E1CE62504DC873"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "E31B1EB53FE1D3C3DE0C6B8EEC81F1A9"
      valueUuid: "target"
    - type: "INPUT"
      name: "name"
      modelFingerprint: "79AA751E8DEF85DAAC2666FA9A7E6307"
      valueUuid: "name"
    - type: "INPUT"
      name: "target"
      modelFingerprint: "BF25F014EB73A7427A883BFEC99E9E57"
      valueUuid: "target1"
    - type: "INPUT"
      name: "elementBinder"
      modelFingerprint: "852BCFED0C32B41F1D6923BCEA563E6F"
      valueUuid: "elementBinder"
    - type: "LOCAL_VARIABLE"
      name: "target"
      modelFingerprint: "B55A83216BD2168FBBACFEEC8E87C743"
      valueUuid: "target1"
      methodExercised:
        expression: "getType():type"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "D3664A404AC645003A96920B8DDE4755"
      valueUuid: "type"
      methodExercised:
        expression: "asCollection():resolvableType2"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "CFD2218113067C03FACF368AA2585591"
      valueUuid: "resolvableType2"
      methodExercised:
        expression: "getGenerics():generics"
    - type: "STATIC"
      name: "ResolvableType.class"
      modelFingerprint: "4A65F7E4964C8C941F01B1A60B495166"
      valueUuid: "ResolvableType.class"
      methodExercised:
        expression: "forClassWithGenerics(clazz:uniqueUuid5,generics:generics):resolvableType3"
        staticAccess: true
    - type: "LOCAL_VARIABLE"
      name: "target"
      modelFingerprint: "B55A83216BD2168FBBACFEEC8E87C743"
      valueUuid: "target1"
      methodExercised:
        expression: "getType():type"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "E9078617A2FA219BEC8EB8662AA46146"
      valueUuid: "type"
      methodExercised:
        expression: "asCollection():resolvableType5"
    - type: "LOCAL_VARIABLE"
      modelFingerprint: "6333C6063AE43CE4CE93351E2A28ABFC"
      valueUuid: "resolvableType5"
      methodExercised:
        expression: "getGeneric(indexes:intArray):resolvableType6"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "54236A2CD4787714FA6122C4036C8821"
      methodExercised:
        expression: "bindIndexed(name:name,target:target1,elementBinder:elementBinder,aggregateType:resolvableType3,elementType:resolvableType6,result:indexedElementsBinder.IndexedCollectionSupplier):void"
    - type: "LOCAL_VARIABLE"
      name: "result"
      modelFingerprint: "6C338E3630B4A021CFDDAC2709760782"
      valueUuid: "indexedElementsBinder.IndexedCollectionSupplier"
      methodExercised:
        expression: "wasSupplied():boolean1"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "B5832848421B6892B8D06BE61ADCD847"
      valueUuid: "object"
    disabled: true
    failureReason:
      reason: "VARIABLE_THAT_COULD_NOT_BE_ISOLATED_MOCKED"
      source: "if (result.wasSupplied()) {"
      lineNumber: 49
      details: "A variable could not be isolated/mocked when calling a method - Variable\
        \ name: result - Method: wasSupplied"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.CollectionBinder"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
            uuid: "context"
      valueType: "org.springframework.boot.context.properties.bind.CollectionBinder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "of"
        methodParameters:
        - name: "type"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.ResolvableType"
            uuid: "type"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "target1"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.AggregateElementBinder"
      uuid: "elementBinder"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "of"
        methodParameters:
        - name: "type"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.ResolvableType"
            uuid: "type"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "target1"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "type"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.ResolvableType"
        method: "forClassWithGenerics"
        methodParameters:
        - name: "clazz"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            uuid: "resolvableType2-clazz"
        - name: "generics"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.core.ResolvableType[]"
            uuid: "generics"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType2"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.core.ResolvableType"
        method: "forClassWithGenerics"
        methodParameters:
        - name: "clazz"
          value:
            sapientType: "CLASS"
            content: !<regular>
              value: "java.lang.Object"
            valueType: "java.lang.Class"
            uuid: "resolvableType2-clazz"
        - name: "generics"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.core.ResolvableType[]"
            uuid: "generics"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType2"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.core.ResolvableType[]"
      uuid: "generics"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "ResolvableType.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType3"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.util.List"
      valueType: "java.lang.Class"
      genericValueType: "java.util.List"
      uuid: "uniqueUuid5"
      fixed: true
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.core.ResolvableType[]"
      uuid: "generics"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "of"
        methodParameters:
        - name: "type"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.ResolvableType"
            uuid: "type"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "target1"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "type"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType5"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType5"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType6"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "int[]"
      uuid: "intArray"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.source.ConfigurationPropertyName"
      uuid: "name"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "org.springframework.boot.context.properties.bind.Bindable"
        method: "of"
        methodParameters:
        - name: "type"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.core.ResolvableType"
            uuid: "type"
      valueType: "org.springframework.boot.context.properties.bind.Bindable"
      uuid: "target1"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.AggregateElementBinder"
      uuid: "elementBinder"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType3"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.ResolvableType"
      uuid: "resolvableType6"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.IndexedElementsBinder$IndexedCollectionSupplier"
        parameters:
        - name: "supplier"
          value:
            sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
            valueType: "java.util.function.Supplier"
            genericValueType: "java.util.Collection<java.lang.Object>"
            uuid: "uniqueUuid7"
      valueType: "org.springframework.boot.context.properties.bind.IndexedElementsBinder$IndexedCollectionSupplier"
      uuid: "indexedElementsBinder.IndexedCollectionSupplier"
      fixed: true
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.IndexedElementsBinder$IndexedCollectionSupplier"
        parameters:
        - name: "supplier"
          value:
            sapientType: "PRIVATE_INNER_CLASS_OR_LAMBDA"
            valueType: "java.util.function.Supplier"
            genericValueType: "java.util.Collection<java.lang.Object>"
            uuid: "uniqueUuid7"
      valueType: "org.springframework.boot.context.properties.bind.IndexedElementsBinder$IndexedCollectionSupplier"
      uuid: "indexedElementsBinder.IndexedCollectionSupplier"
      fixed: true
    - sapientType: "BASIC"
      content: !<regular>
        value: false
      valueType: "boolean"
      uuid: "boolean1"
    - sapientType: "NULL"
      valueType: "java.lang.Object"
      uuid: "object"
      fixed: true
    branches:
    - lineNumber: 49
      expression: "result.wasSupplied()"
      range: "(49,7)-(49,26)"
      evaluatedAs: false
- method:
    name: "merge"
    sourceCodeSignature: "Collection<Object> merge(Supplier<Collection<Object>> existing,\
      \ Collection<Object> additional)"
    returnType: "java.util.Collection"
    genericReturnType: "java.lang.Object"
    parameters:
    - name: "existing"
      type: "java.util.function.Supplier"
    - name: "additional"
      type: "java.util.Collection"
    tryCatchBlocks:
    - idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.UnsupportedOperationException"
    - idExternalInstruction: 0
      id: 2
      catchExceptions:
      - "java.lang.Exception"
    - idExternalInstruction: 0
      id: 3
      catchExceptions:
      - "java.lang.Exception"
    instructionFingerprint: "40BF1C19E552EF73A12AD0692E8EF7EF"
  paths:
  - pathId: "path1"
    testPathName: "merge1WhenExistingCollectionIsNull"
    constructorSignature: "<init>(org.springframework.boot.context.properties.bind.Binder$Context)\
      \ : void"
    modelFingerprint: "9D10F154576485CF1A026A7A3D3AF7F0"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "E31B1EB53FE1D3C3DE0C6B8EEC81F1A9"
      valueUuid: "target"
    - type: "INPUT"
      name: "existing"
      modelFingerprint: "6010917358B9FDB9CA84292FA153922B"
      valueUuid: "existing"
    - type: "INPUT"
      name: "additional"
      modelFingerprint: "2B0BECBA374DBAF9384836FDF77C7CA2"
      valueUuid: "additional"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "ABE45229F1BB788280FDA54C3A713212"
      valueUuid: "additional"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.function.Supplier.get() : java.lang.Object"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.CollectionBinder"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
            uuid: "context"
      valueType: "org.springframework.boot.context.properties.bind.CollectionBinder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "existing"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "java.lang.Object"
      uuid: "additional"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "java.lang.Object"
      uuid: "additional"
    branches:
    - lineNumber: 58
      expression: "existingCollection == null"
      range: "(58,7)-(58,32)"
      evaluatedAs: true
  - pathId: "path2"
    testPathName: "merge1WhenExistingCollectionIsNotNull"
    constructorSignature: "<init>(org.springframework.boot.context.properties.bind.Binder$Context)\
      \ : void"
    modelFingerprint: "247FA2E74B2235B80C91B06A04618A71"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "E31B1EB53FE1D3C3DE0C6B8EEC81F1A9"
      valueUuid: "target"
    - type: "INPUT"
      name: "existing"
      modelFingerprint: "6010917358B9FDB9CA84292FA153922B"
      valueUuid: "existing"
    - type: "INPUT"
      name: "additional"
      modelFingerprint: "2382BF2FC3532C62BACE6B76F1827C8E"
      valueUuid: "additional"
    - type: "STATIC"
      name: "CollectionFactory.class"
      modelFingerprint: "673283869AC0A5159A97786A63794363"
      valueUuid: "CollectionFactory.class"
      methodExercised:
        expression: "createCollection(collectionType:class,capacity:int1):collection"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C496F09F2D2AECB0C781C93AE01208F1"
      valueUuid: "collection"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.function.Supplier.get() : java.lang.Object"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.CollectionBinder"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
            uuid: "context"
      valueType: "org.springframework.boot.context.properties.bind.CollectionBinder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "existing"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "java.lang.Object"
      uuid: "additional"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.CollectionFactory"
      uuid: "CollectionFactory.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "java.lang.Object"
      uuid: "collection"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.util.ArrayList"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
      collectionUuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
      collectionUuid: "object"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "java.lang.Object"
      uuid: "collection"
    branches:
    - lineNumber: 58
      expression: "existingCollection == null"
      range: "(58,7)-(58,32)"
      evaluatedAs: false
  - pathId: "path3"
    testPathName: "merge1WhenCaughtUnsupportedOperationException"
    constructorSignature: "<init>(org.springframework.boot.context.properties.bind.Binder$Context)\
      \ : void"
    modelFingerprint: "AECF4CF3D0B435A5157356B16196EA92"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "E31B1EB53FE1D3C3DE0C6B8EEC81F1A9"
      valueUuid: "target"
    - type: "INPUT"
      name: "existing"
      modelFingerprint: "6010917358B9FDB9CA84292FA153922B"
      valueUuid: "existing"
    - type: "INPUT"
      name: "additional"
      modelFingerprint: "2382BF2FC3532C62BACE6B76F1827C8E"
      valueUuid: "additional"
    - type: "STATIC"
      name: "CollectionFactory.class"
      modelFingerprint: "673283869AC0A5159A97786A63794363"
      valueUuid: "CollectionFactory.class"
      methodExercised:
        expression: "createCollection(collectionType:class,capacity:int1):collection"
        staticAccess: true
    - type: "STATIC"
      name: "CollectionFactory.class"
      modelFingerprint: "673283869AC0A5159A97786A63794363"
      valueUuid: "CollectionFactory.class"
      methodExercised:
        expression: "createCollection(collectionType:class2,capacity:int2):collection2"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C496F09F2D2AECB0C781C93AE01208F1"
      valueUuid: "collection2"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.function.Supplier.get() : java.lang.Object"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.CollectionBinder"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
            uuid: "context"
      valueType: "org.springframework.boot.context.properties.bind.CollectionBinder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "existing"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "java.lang.Object"
      uuid: "additional"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.CollectionFactory"
      uuid: "CollectionFactory.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "java.lang.Object"
      uuid: "collection"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.util.ArrayList"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
      collectionUuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
      collectionUuid: "object"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.CollectionFactory"
      uuid: "CollectionFactory.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "java.lang.Object"
      uuid: "collection2"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.util.ArrayList"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class2"
      collectionUuid: "additional"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int2"
      collectionUuid: "additional"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "java.lang.Object"
      uuid: "collection2"
    branches:
    - lineNumber: 58
      expression: "existingCollection == null"
      range: "(58,7)-(58,32)"
      evaluatedAs: false
    - lineNumber: 66
      expression: "catch-exception (UnsupportedOperationException)"
      range: "(66,3)-(66,41)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.UnsupportedOperationException"
  - pathId: "path4"
    testPathName: "merge1WhenCaughtException"
    constructorSignature: "<init>(org.springframework.boot.context.properties.bind.Binder$Context)\
      \ : void"
    modelFingerprint: "C159C8F23D6AC1B7F8136F3D6CCCD85C"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "E31B1EB53FE1D3C3DE0C6B8EEC81F1A9"
      valueUuid: "target"
    - type: "INPUT"
      name: "existing"
      modelFingerprint: "6010917358B9FDB9CA84292FA153922B"
      valueUuid: "existing"
    - type: "INPUT"
      name: "additional"
      modelFingerprint: "2382BF2FC3532C62BACE6B76F1827C8E"
      valueUuid: "additional"
    - type: "STATIC"
      name: "CollectionFactory.class"
      modelFingerprint: "673283869AC0A5159A97786A63794363"
      valueUuid: "CollectionFactory.class"
      methodExercised:
        expression: "createCollection(collectionType:class,capacity:int1):collection"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "C496F09F2D2AECB0C781C93AE01208F1"
      valueUuid: "collection2"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.function.Supplier.get() : java.lang.Object"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.CollectionBinder"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
            uuid: "context"
      valueType: "org.springframework.boot.context.properties.bind.CollectionBinder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "existing"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "java.lang.Object"
      uuid: "additional"
    - sapientType: "MOCK"
      valueType: "org.springframework.core.CollectionFactory"
      uuid: "CollectionFactory.class"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "java.lang.Object"
      uuid: "collection"
    - sapientType: "CLASS"
      content: !<regular>
        value: "java.util.ArrayList"
      valueType: "java.lang.Class"
      genericValueType: "?"
      uuid: "class"
      collectionUuid: "object"
    - sapientType: "BASIC"
      content: !<regular>
        value: 0
      valueType: "int"
      uuid: "int1"
      collectionUuid: "object"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "java.lang.Object"
      uuid: "collection2"
    branches:
    - lineNumber: 58
      expression: "existingCollection == null"
      range: "(58,7)-(58,32)"
      evaluatedAs: false
    - lineNumber: 84
      expression: "catch-exception (Exception)"
      range: "(84,3)-(84,21)"
      evaluatedAs: true
      internalMethodName: "copyIfPossible"
    catchBlockExercised:
      idExternalInstruction: 29
      id: 3
      catchExceptions:
      - "java.lang.Exception"
  - pathId: "path5"
    testPathName: "merge1WhenCaughtExceptionAndExistingCollectionIsNull"
    constructorSignature: "<init>(org.springframework.boot.context.properties.bind.Binder$Context)\
      \ : void"
    modelFingerprint: "5621472D91DA0CFE6592099576D9D49C"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "E31B1EB53FE1D3C3DE0C6B8EEC81F1A9"
      valueUuid: "target"
    - type: "INPUT"
      name: "existing"
      modelFingerprint: "6010917358B9FDB9CA84292FA153922B"
      valueUuid: "existing"
    - type: "INPUT"
      name: "additional"
      modelFingerprint: "2B0BECBA374DBAF9384836FDF77C7CA2"
      valueUuid: "additional"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "ABE45229F1BB788280FDA54C3A713212"
      valueUuid: "additional"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.util.function.Supplier.get() : java.lang.Object"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.CollectionBinder"
        parameters:
        - name: "context"
          value:
            sapientType: "MOCK"
            valueType: "org.springframework.boot.context.properties.bind.Binder$Context"
            uuid: "context"
      valueType: "org.springframework.boot.context.properties.bind.CollectionBinder"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "java.util.function.Supplier"
      uuid: "existing"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "java.lang.Object"
      uuid: "additional"
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.util.Collection"
      genericValueType: "java.lang.Object"
      uuid: "additional"
    branches:
    - lineNumber: 75
      expression: "catch-exception (Exception)"
      range: "(75,3)-(75,21)"
      evaluatedAs: true
      internalMethodName: "getExistingIfPossible"
    - lineNumber: 58
      expression: "existingCollection == null"
      range: "(58,7)-(58,32)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 4
      id: 2
      catchExceptions:
      - "java.lang.Exception"
