---
modelFingerprint: "6B67271613A493CA1B73CFB425D376D7"
targetClass:
  fullClassName: "org.springframework.boot.context.properties.bind.BindableRuntimeHintsRegistrar"
methods:
- method:
    name: "registerHints"
    sourceCodeSignature: "void registerHints(RuntimeHints hints, ClassLoader classLoader)"
    returnType: "void"
    parameters:
    - name: "hints"
      type: "org.springframework.aot.hint.RuntimeHints"
    - name: "classLoader"
      type: "java.lang.ClassLoader"
    instructionFingerprint: "29FACC8498153514F34BE844A173E963"
  paths:
  - pathId: "path1"
    testPathName: "registerHintsTest"
    constructorSignature: "<init>(org.springframework.boot.context.properties.bind.Bindable<?>[])\
      \ : void"
    modelFingerprint: "E5187E970BE766C25CA12A5B8A51794D"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "E516DF3E575ABDEB2DDEE1FEB380D9C2"
      valueUuid: "target"
    - type: "INPUT"
      name: "hints"
      modelFingerprint: "B2F0FCE8A1BECC87B1381E699DFEFCD9"
      valueUuid: "hints"
    - type: "INPUT"
      name: "classLoader"
      modelFingerprint: "C286DE215DE7563ED1CD0033A63BD833"
      valueUuid: "classLoader"
    - type: "INTERNAL"
      name: "internalMethod"
      modelFingerprint: "1CE8CB9A1ABBBC8FA8B634320B4208D8"
      methodExercised:
        expression: "registerHints(hints:hints):void"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.BindableRuntimeHintsRegistrar"
        parameters:
        - name: "bindables"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.context.properties.bind.Bindable[]"
            genericValueType: "?"
            uuid: "bindables"
      valueType: "org.springframework.boot.context.properties.bind.BindableRuntimeHintsRegistrar"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.aot.hint.RuntimeHints"
      uuid: "hints"
    - sapientType: "OBJECT"
      content: !<static_method_return>
        target: "java.lang.ClassLoader"
        method: "getPlatformClassLoader"
        methodParameters: []
      valueType: "java.lang.ClassLoader"
      uuid: "classLoader"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.aot.hint.RuntimeHints"
      uuid: "hints"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
- method:
    name: "registerHints"
    sourceCodeSignature: "void registerHints(RuntimeHints hints)"
    returnType: "void"
    parameters:
    - name: "hints"
      type: "org.springframework.aot.hint.RuntimeHints"
    instructionFingerprint: "0839C591B23385E8E08284BF0AA34658"
  paths:
  - pathId: "path1"
    testPathName: "registerHints1WhenCompiledWithoutParametersIsEmpty"
    constructorSignature: "<init>(org.springframework.boot.context.properties.bind.Bindable<?>[])\
      \ : void"
    modelFingerprint: "FB2DB0E43EF1618A48AFC20514344815"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      modelFingerprint: "B97D1DAAC0C080609494ACB1DDEEE401"
      valueUuid: "target"
    - type: "INPUT"
      name: "hints"
      modelFingerprint: "4ED55336421B23543566FDFA4FA3D8EE"
      valueUuid: "hints"
    - type: "LOCAL_VARIABLE"
      name: "hints"
      modelFingerprint: "D32ECD53B82C2C962C2029BB5130F94E"
      valueUuid: "hints"
      methodExercised:
        expression: "reflection():reflectionHints"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "D3C52B3FA506EC339365BC9568CBF6B9"
      valueUuid: "expectedResult"
    disabled: true
    failureReason:
      reason: "METHOD_CALL_INSTRUCTION_CONSTRUCTION_UNFILLED_PARAMS"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.BindableRuntimeHintsRegistrar"
        parameters:
        - name: "bindables"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values:
                0:
                  sapientType: "MOCK"
                  valueType: "org.springframework.boot.context.properties.bind.Bindable"
                  uuid: "bindable"
            valueType: "org.springframework.boot.context.properties.bind.Bindable[]"
            genericValueType: "?"
            uuid: "bindables"
      valueType: "org.springframework.boot.context.properties.bind.BindableRuntimeHintsRegistrar"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "org.springframework.aot.hint.RuntimeHints"
      uuid: "hints"
    - sapientType: "MOCK"
      valueType: "org.springframework.aot.hint.RuntimeHints"
      uuid: "hints"
    - sapientType: "MOCK"
      valueType: "org.springframework.aot.hint.ReflectionHints"
      uuid: "reflectionHints"
    - sapientType: "VOID"
      uuid: "expectedResult"
      fixed: true
    branches:
    - lineNumber: 96
      expression: "for-each(this.bindables)"
      range: "(96,31)-(96,44)"
      evaluatedAs: true
    - lineNumber: 99
      expression: "!compiledWithoutParameters.isEmpty()"
      range: "(99,7)-(99,42)"
      evaluatedAs: false
- method:
    name: "forTypes"
    sourceCodeSignature: "BindableRuntimeHintsRegistrar forTypes(Iterable<Class<?>>\
      \ types)"
    returnType: "org.springframework.boot.context.properties.bind.BindableRuntimeHintsRegistrar"
    parameters:
    - name: "types"
      type: "java.lang.Iterable"
    instructionFingerprint: "B3A1E8D16B7304CF728B2FC6F70E0559"
  paths:
  - pathId: "path1"
    testPathName: "forTypesTest"
    modelFingerprint: "ACA20A491E2FD3D2E9F5E26EAC102DA2"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "types"
      modelFingerprint: "B4F00CD6B853878B99B3A49F8E94ED9F"
      valueUuid: "types"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "A427AA2FDE724F9D61BD60A7AAA39018"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:types,message:uniqueUuid1):void"
        staticAccess: true
    - type: "STATIC"
      name: "BindableRuntimeHintsRegistrar.class"
      modelFingerprint: "BAF865499434050327FA36CE26930742"
      valueUuid: "BindableRuntimeHintsRegistrar.class"
      methodExercised:
        expression: "forTypes(types:objectArray):bindableRuntimeHintsRegistrar"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "24460BCA4650C8AC5A70AFC68036DEA8"
      valueUuid: "bindableRuntimeHintsRegistrar"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Iterable.spliterator() : java.util.Spliterator"
    allValues:
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      genericValueType: "java.lang.Class<?>"
      uuid: "types"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      genericValueType: "java.lang.Class<?>"
      uuid: "types"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Types must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindableRuntimeHintsRegistrar"
      uuid: "BindableRuntimeHintsRegistrar.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindableRuntimeHintsRegistrar"
      uuid: "bindableRuntimeHintsRegistrar"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Class[]"
      uuid: "objectArray"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindableRuntimeHintsRegistrar"
      uuid: "bindableRuntimeHintsRegistrar"
- method:
    name: "forTypes"
    sourceCodeSignature: "BindableRuntimeHintsRegistrar forTypes(Class<?>... types)"
    returnType: "org.springframework.boot.context.properties.bind.BindableRuntimeHintsRegistrar"
    parameters:
    - name: "types"
      type: "java.lang.Class[]"
    instructionFingerprint: "8676ACEEF896B65CDBDB3C84F75F2633"
  paths:
  - pathId: "path1"
    testPathName: "forTypes1Test"
    modelFingerprint: "9523F53D99D5EE13904C3C340AC06575"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "types"
      modelFingerprint: "D59953E4C1E98C74F4D25219E1201423"
      valueUuid: "types"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "993935F9DF1BB4F4436B17A55460920C"
      valueUuid: "bindableRuntimeHintsRegistrar"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "java.lang.Class[]"
      genericValueType: "?"
      uuid: "types"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.BindableRuntimeHintsRegistrar"
        parameters:
        - name: "types"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "java.lang.Class[]"
            genericValueType: "?"
            uuid: "types"
      valueType: "org.springframework.boot.context.properties.bind.BindableRuntimeHintsRegistrar"
      uuid: "bindableRuntimeHintsRegistrar"
      fixed: true
- method:
    name: "forBindables"
    sourceCodeSignature: "BindableRuntimeHintsRegistrar forBindables(Iterable<Bindable<?>>\
      \ bindables)"
    returnType: "org.springframework.boot.context.properties.bind.BindableRuntimeHintsRegistrar"
    parameters:
    - name: "bindables"
      type: "java.lang.Iterable"
    instructionFingerprint: "FDB43B12CEEA730007DEB2ADD427518E"
  paths:
  - pathId: "path1"
    testPathName: "forBindablesTest"
    modelFingerprint: "11EFD75AB1C5B63556DAC1F4539EFDCA"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "INPUT"
      name: "bindables"
      modelFingerprint: "61F31867410418D336900108F49C586C"
      valueUuid: "bindables"
    - type: "STATIC"
      name: "Assert.class"
      modelFingerprint: "AAC1E7C80878D6D5DBE590DC078BC002"
      valueUuid: "Assert.class"
      methodExercised:
        expression: "notNull(object:bindables,message:uniqueUuid2):void"
        staticAccess: true
    - type: "STATIC"
      name: "BindableRuntimeHintsRegistrar.class"
      modelFingerprint: "7C4DC1417B327578A7AFD68791D9BC70"
      valueUuid: "BindableRuntimeHintsRegistrar.class"
      methodExercised:
        expression: "forBindables(bindables:objectArray):bindableRuntimeHintsRegistrar"
        staticAccess: true
    - type: "RESULT"
      name: "result"
      modelFingerprint: "24460BCA4650C8AC5A70AFC68036DEA8"
      valueUuid: "bindableRuntimeHintsRegistrar"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.lang.Iterable.spliterator() : java.util.Spliterator"
    allValues:
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      genericValueType: "org.springframework.boot.context.properties.bind.Bindable<?>"
      uuid: "bindables"
    - sapientType: "MOCK"
      valueType: "org.springframework.util.Assert"
      uuid: "Assert.class"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
      fixed: true
    - sapientType: "COLLECTION"
      content: !<collection>
        parameters: []
        values: []
      valueType: "java.lang.Iterable"
      genericValueType: "org.springframework.boot.context.properties.bind.Bindable<?>"
      uuid: "bindables"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Bindables must not be null"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
      fixed: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindableRuntimeHintsRegistrar"
      uuid: "BindableRuntimeHintsRegistrar.class"
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindableRuntimeHintsRegistrar"
      uuid: "bindableRuntimeHintsRegistrar"
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.properties.bind.Bindable[]"
      uuid: "objectArray"
      explicitCastNeeded: true
    - sapientType: "MOCK"
      valueType: "org.springframework.boot.context.properties.bind.BindableRuntimeHintsRegistrar"
      uuid: "bindableRuntimeHintsRegistrar"
- method:
    name: "forBindables"
    sourceCodeSignature: "BindableRuntimeHintsRegistrar forBindables(Bindable<?>...\
      \ bindables)"
    returnType: "org.springframework.boot.context.properties.bind.BindableRuntimeHintsRegistrar"
    parameters:
    - name: "bindables"
      type: "org.springframework.boot.context.properties.bind.Bindable[]"
    instructionFingerprint: "24BF199FD279BA5F194F3074E251B3D5"
  paths:
  - pathId: "path1"
    testPathName: "forBindables1Test"
    modelFingerprint: "262E2209DD51C7077916E7386903B482"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "INPUT"
      name: "bindables"
      modelFingerprint: "AA3BDC3FF1A9D50C3657FA21BBC6FB2D"
      valueUuid: "bindables"
    - type: "RESULT"
      name: "result"
      modelFingerprint: "BF0A4F55824C80037B7AE3C3D53A2617"
      valueUuid: "bindableRuntimeHintsRegistrar"
    disabled: false
    allValues:
    - sapientType: "ARRAY"
      content: !<array>
        values: {}
      valueType: "org.springframework.boot.context.properties.bind.Bindable[]"
      genericValueType: "?"
      uuid: "bindables"
    - sapientType: "OBJECT"
      content: !<new>
        target: "org.springframework.boot.context.properties.bind.BindableRuntimeHintsRegistrar"
        parameters:
        - name: "bindables"
          value:
            sapientType: "ARRAY"
            content: !<array>
              values: {}
            valueType: "org.springframework.boot.context.properties.bind.Bindable[]"
            genericValueType: "?"
            uuid: "bindables"
      valueType: "org.springframework.boot.context.properties.bind.BindableRuntimeHintsRegistrar"
      uuid: "bindableRuntimeHintsRegistrar"
      fixed: true
